import{_ as p,o as r,c as n,a as t,m as c,t as d,C as g,M as _,U as y,f as l,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},P={class:"poem-container"},C={class:"review"},S={class:"review-title"},T={class:"review-content"};function E(i,e,u,m,a,o){return r(),n("div",P,[t("div",C,[t("div",S,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(d(u.poem.instruction),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",T,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(d(u.poem.output),1)])])])}const A=p(k,[["render",E],["__scopeId","data-v-65ce87ef"]]),q=JSON.parse(`[{"instruction":"Write SQL code to remove duplicates from a database table. Table name: Items Columns: ID, Name","output":"DELETE FROM Items WHERE ID NOT IN (SELECT MIN(Id) \\t\\t\\t\\t FROM Items \\t\\t\\t\\t GROUP BY Name)"},{"instruction":"Create a Bash script which prints out the environment variable HOME.","output":"#!/bin/bash  echo HOME"},{"instruction":"Add proper type annotations to the following Python function. def get_favorite_number(name):   return name + 10","output":"def get_favorite_number(name: str) -> int:   return name + 10"},{"instruction":"Write a shell script to find the longest string from an array of strings.","output":"#!/bin/bash arr=(\\"Hello\\" \\"This\\" \\"Is\\" \\"A\\" \\"Sample\\" \\"String\\") longest={arr[0]} for element in \\"{arr[@]}\\"; do     if [[ {#longest} -lt {#element} ]]; then         longest=\\"element\\"     fi done echo longest"},{"instruction":"Rewrite the following program using OOP concepts. NUMBER_OF_ELEMENTS = 10 arr = [0] * NUMBER_OF_ELEMENTS def set_element(index, value):     arr[index] = value","output":"class Array():     def __init__(self, num_elements):         self.arr = [0] * num_elements     def set_element(self, index, value):         self.arr[index] = value"},{"instruction":"Edit the program to print \\"Hello world!\\" in the output. def greet():     print(\\"Good morning!\\")","output":"def greet():     print(\\"Hello world!\\")"},{"instruction":"Create a CSS style which will center-align the text.","output":"text-align: center;"},{"instruction":"Write a Java method which will print the Fibonacci sequence based on a given number.","output":"public void fibonacciSeries(int number)      {          int prev = 0;          int current = 1;          System.out.print(\\"Fibonacci Series of \\"+number+\\" numbers:\\");             for (int i = 1; i <= number; i++)          {              System.out.print(prev+\\" \\");              int sum = prev + current;              prev = current;              current = sum;          }      }"},{"instruction":"Modify the program to accept user input of two numbers, and show the result based on the operator provided. def calculate(num1, num2):     result = num1 + num2     return resul","output":"def calculate(num1, num2, operator):     if (operator == '+'):         result = num1 + num2     elif (operator == '-'):         result = num1 - num2     elif (operator == '*'):         result = num1 * num2     elif (operator == '/'):         result = num1 / num2     else:         print(\\"Invalid operator\\")     return result"},{"instruction":"Create an object-oriented program that calculates the cost of a given item including sales tax. Item cost (without tax): 10 Input tax rate: 10%","output":"//class definition  class Item {    constructor(cost, taxRate) {      this.cost = cost;     this.taxRate = taxRate;   }      //calculate the cost including sales tax   getCostWithTax() {     return this.cost * (1 + this.taxRate);   }    }  //instantiate Item and calculate cost let item = new Item(10, 0.1);  let costWithTax = item.getCostWithTax(); console.log(costWithTax); //11"},{"instruction":"Design a class in Java to represent a person's contact information like name, phone number and email address.","output":"//class definition public class Contact {   private String name;   private String phoneNumber;   private String email;   public Contact(String name, String phoneNumber, String email) {     this.name = name;     this.phoneNumber = phoneNumber;     this.email = email;   }      //getters and setters   public String getName(){        return name;   }   public void setName(String name){       this.name = name;   }   public String getPhoneNumber(){        return phoneNumber;   }   public void setPhoneNumber(String phoneNumber){       this.phoneNumber = phoneNumber;   }   public String getEmail(){        return email;   }   public void setEmail(String email){       this.email = email;   } }"},{"instruction":"Write a query in MongoDB to select an item with a price greater than 10.","output":"db.items.find({\\"price\\": {gt: 10}});"},{"instruction":"Create a JavaScript program to find the minimum of two numbers.","output":"function min(num1, num2) {   if (num1 < num2) {     return num1;   }   else {     return num2;   } }"},{"instruction":"Create a HTML page with a form containing two input boxes, one to enter a number and another to enter an operator (+, -, *, /).","output":"<html> <head>  <title>Calculator Form</title> </head> <body>  <form action=\\"/calculate\\" method=\\"post\\">    <input type=\\"number\\" name=\\"num1\\" placeholder=\\"Enter a number\\" required>    <input type=\\"text\\" name=\\"operator\\" placeholder=\\"Enter an operator (+, -, *, /)\\" required>    <input type=\\"number\\" name=\\"num2\\" placeholder=\\"Enter a number\\" required>    <input type=\\"submit\\" value=\\"Calculate\\">  </form> </body> </html>"},{"instruction":"Create an Apache Spark program written in Scala that takes in an RDD and returns the same RDD multiplied by 2.","output":"val rdd = sc.parallelize(List(1,2,3,4,5)) val newRDD = rdd.map(x => x*2) print(newRDD.collect().mkString(\\",\\"))"},{"instruction":"You are given an array of integers and you need to find three numbers such that the sum of the three numbers is 0. nums = [-40, 40, -20, 60, 10, -80]","output":"// Use a brute-force approach to find the three numbers for (let i = 0; i < nums.length; i++) {   for (let j = i+1; j < nums.length; j++) {     for (let k = j+1; k < nums.length; k++) {       if (nums[i] + nums[j] + nums[k] === 0) {         console.log(nums[i], nums[j], nums[k])       }     }   } } // Output -40, 40, -80"},{"instruction":"Write a regular expression to detect any email address.","output":"S+@S+.S+"},{"instruction":"Read the given date string in the specified format and print out the day of the week. Date String: 03/02/2020 Format: mm/dd/yyyy","output":"Thursday"},{"instruction":"Write a for loop to iterate over an array of numbers and calculate their sum. array=[1, 2, 3]","output":"sum=0 for item in array:     sum+=item      print(sum)"},{"instruction":"dentify the HTML tag for the bold text. Text: This text should be bold","output":"<b>This text should be bold</b>"},{"instruction":"Create a Python script to find the greatest common divisor (GCD) of a pair of integers. Number 1: 10 Number 2: 12","output":"def findGCD(x, y):         # This function implements the Euclidian algorithm      # to find GCD of two numbers      while(y):          x, y = y, x % y         return x     # Driver program  gcd = findGCD(10, 12)  print(gcd)"},{"instruction":"Write a Java code snippet to take input from the user and print the result.","output":"Scanner input = new Scanner(System.in); int number = input.nextInt(); System.out.println(number);"},{"instruction":"Write the code to create a class in Python named \\"Person\\".","output":"class Person:     def __init__(self, name, age=None):         self.name = name         self.age = age"},{"instruction":"Describe a complete algorithm for sorting n integers.","output":"The algorithm for sorting n integers is a divide-and-conquer algorithm. The algorithm works as follows: 1. Select a pivot element from the array. 2. Split the array into two sub-arrays based on the pivot element.  3.  For each of the sub-arrays, use the same sorting algorithm to sort their contents.  4. Once both sub-arrays are sorted, merge the two sub-arrays into one sorted array."},{"instruction":"Transform the following C code into Java code. int array[100]; int i, sum = 0; for (i = 0; i < 100; i++)    sum += array[i];","output":"int[] array = new int[100]; int sum = 0; for(int i = 0; i < array.length; i++){     sum += array[i]; }"},{"instruction":"Execute the following SQL query. SELECT count(*) FROM employee WHERE name LIKE '%John%';","output":"SELECT COUNT(*)  FROM employee  WHERE name LIKE '%John%';"},{"instruction":"Python, write a program to remove all duplicates from a given list of integers.","output":"def remove_duplicates(arr):     result = []      seen = set()      for item in arr:         if item not in seen:             result.append(item)             seen.add(item)     return result"},{"instruction":"Edit the following HTML code so the paragraph text's color is red. <p>This is a paragraph</p>","output":"<p style=\\"color:red;\\">This is a paragraph</p>"},{"instruction":"Produce an R command that fits a linear regression model of the following form:  y ~ x1 + x2 + x3.","output":"fit <- lm(y ~ x1 + x2 + x3)"},{"instruction":"Adapt the following Java program to print the smallest number from an array of numbers.","output":"public class Smallest_Number {     public static void main(String[] args) {         int arr[] = {10, 15, 5, 20};         int smallest = arr[0];         for (int i = 0; i < arr.length; i++) {             if (arr[i] < smallest) {                 smallest = arr[i];             }         }         System.out.println(smallest);     } }"},{"instruction":"Update the following code to be Python 3 compatible. print \\"Welcome to the Program.","output":"print(\\"Welcome to the Program.\\")"},{"instruction":"Create a data structure suitable for storing a list of scores for a game.","output":"scores = [] # Function to add a new score to the scores list def add_score(score):     scores.append(score) # Function to display all the scores in the scores list def display_scores():     for score in scores:         print(score)"},{"instruction":"Create an algorithm that takes in an array of integers and returns true if two of the integers add up to a target number. example_array = [10, 7, 8, 3, 5] target_num = 13","output":"def two_sum_algorithm(arr, target):      for i in range(len(arr)):          for j in range(i + 1, len(arr)):              if arr[i] + arr[j] == target:                  return True        return False two_sum_algorithm(example_array, target_num)"},{"instruction":"Append the item \\"Banana\\" to the list below: fruits = [\\"Apple\\", \\"Strawberry\\", \\"Pear\\"]","output":"fruits = [\\"Apple\\", \\"Strawberry\\", \\"Pear\\", \\"Banana\\"]"},{"instruction":"Sort the following list using Python's built-in sorting functions. unsorted_list = [5, 1, 6, 8, 2, 4]","output":"unsorted_list.sort() # unsorted_list is now [1, 2, 4, 5, 6, 8]"},{"instruction":"Make a JavaScript fibonacci sequence generator that takes a given number from the user and prints out the first n elements of the fibonacci sequence.","output":"function fibonacci(n){   let arr = [0, 1];   for (let i = 2; i < n + 1; i++){     arr.push(arr[i - 2] + arr[i -1])   }   return arr.slice(0, n); }"},{"instruction":"mplement a SQL query to count the number of students who are from North America (NA)","output":"SELECT COUNT(*) AS NumberOfStudents FROM Students WHERE Region='NA'"},{"instruction":"Write some HTML+CSS to create a navigation bar for a website. Example website navigation structure: Home, About, Contact, Products, Service","output":"<nav>     <ul>       <li><a href=\\"index.html\\">Home</a></li>       <li><a href=\\"about.html\\">About</a></li>       <li><a href=\\"contact.html\\">Contact</a></li>       <li><a href=\\"products.html\\">Products</a></li>       <li><a href=\\"services.html\\">Services</a></li>     </ul> </nav> <style>    nav ul{       list-style-type: none;       margin: 0;       padding: 0;     }     nav ul li{       float: left;     }     nav ul li a {     display: block;     padding: 8px;     text-decoration: none;     } </style>"},{"instruction":"Create a Python function which takes a given string and replaces all its characters with the next consecutive character.","output":"def shift_string(string):   result = \\"\\"   for ch in string:     result += chr(ord(ch) + 1)   return result"},{"instruction":"Create a function in JavaScript which prints all prime numbers up to a given number.","output":"function isPrime(num) {     for (let i = 2; i < num; i++) {         if (num % i === 0) {             return false;         }     }     return true; } function printPrimes(num) {     console.log(\\"The prime numbers are:\\");     for (let i = 2; i <= num; i++) {         if (isPrime(i)) {             console.log(i);         }     } }"},{"instruction":"mplement an algorithm in Python to find the GCD (Greatest Common Divisor) of two numbers","output":"def gcd(a, b):        if (a == 0):         return b             if (b == 0):         return a             if (a == b):         return a             if (a > b):         return gcd(a-b, b)            return gcd(a, b-a)"},{"instruction":"Write a script in Python to sort a list of words alphabetically.","output":"words = ['Apple','Banana','Cherry','Orange'] words.sort() print(words)"},{"instruction":"Create a JavaScript function that takes a string as an argument and reverses it.","output":"function reverseString(str) {   return str.split('').reverse().join('');  }"},{"instruction":"Write a Java program for removing all white spaces from a given string.","output":"public class RemoveSpace {     public static String removeSpace(String str) {         return str.replaceAll(\\"s\\",\\"\\");     }        public static void main (String[] args) {         String str = \\"Hello World!\\";          str = removeSpace(str);         System.out.println(str);      }  }"},{"instruction":"Create a Python function which takes a dictionary and prints the contents of the dictionary in a human readable format.","output":"def printDictionary(dictionary):     for key in dictionary.keys():         print(key, \\":\\", dictionary[key])"},{"instruction":"Write a function that takes in a string of text and counts the number of times each letter appears in the string text = \\"The quick brown fox jumps over the lazy dog","output":"def count_letters(text):     letter_count = {}     for character in text:         if character not in letter_count:             letter_count[character] = 1         else:             letter_count[character] += 1     return letter_count print(count_letters(text))"},{"instruction":"Write a function in Python that will take two integers as inputs and compute their average. int1 = 10 int2 = 15","output":"def calculate_average(int1, int2):     return (int1 + int2) / 2 print(calculate_average(int1, int2))"},{"instruction":"Create a function in Python that takes a string as an input and returns a new string that is the reverse of the input string. string = \\"Reverse Me","output":"def reverse_string(string):     return string[::-1] print(reverse_string(string))"},{"instruction":"Create a SQL query to add a new column to a table called \\"students\\" which contains student id numbers and names.","output":"ALTER TABLE students  ADD COLUMN student_id INT;"},{"instruction":"Create a function in Python to remove all characters other than letters and numbers from a string. string = \\"This#%&string c&o#th=esa#@ll cha*%racter","output":"import re def remove_characters(string):     return re.sub('[^A-Za-z0-9]+', '', string) print(remove_characters(string))"},{"instruction":"Write a shell command to print out the environment variable PATH.","output":"echo {PATH}"},{"instruction":"Create a function in Python to split a given string into a list of strings using a space as a delimiter. string = \\"This is a string to spl","output":"def split_string(string):     return string.split(\\" \\") print(split_string(string))"},{"instruction":"Write a SQL query to update the \\"job\\" column of the \\"employees\\" table to \\"engineer\\" for all rows with the \\"department\\" column value \\"IT\\".","output":"UPDATE employees SET job = 'engineer' WHERE department = 'IT';"},{"instruction":"Write a function in Python to take a string as input and return a dictionary with the count of each letter in the string. string = \\"This is a string of character","output":"def count_letters(string):     letter_count = {}     for char in string:         if char not in letter_count:             letter_count[char] = 1         else:             letter_count[char] += 1;     return letter_count print(count_letters(string))"},{"instruction":"Create a class for customer data.","output":"class Customer:     def __init__(self, name, age, email):         self.name = name         self.age = age         self.email = email          def get_name(self):         return self.name          def get_age(self):         return self.age          def get_email(self):         return self.email"},{"instruction":"What is the principal difference between a linked list and an array?","output":"The principal difference between a linked list and an array is that a linked list is a collection of points that each point to their respective memory locations, while an array is a contiguous block of memory locations. A linked list has the advantage of being able to insert and delete nodes at any time, while the elements of an array must be shifted to make room for new elements. Similarly, linked lists do not require a pre-allocated block of memory, so it is more memory efficient than an array."},{"instruction":"Add a method to the Customer class to print out customer's name, age and email","output":"class Customer:     def __init__(self, name, age, email):         self.name = name         self.age = age         self.email = email          def get_name(self):         return self.name          def get_age(self):         return self.age          def get_email(self):         return self.email          def print_customer_data(self):         print('Name: ' + self.name + ', Age: ' + str(self.age) + ', Email: ' + self.email)"},{"instruction":"Write a function to calculate the sum of the elements of an array with float values.","output":"def sum_float_array(float_array):     total = 0     for i in float_array:         total += i     return total"},{"instruction":"What is the difference between while and do while loops in programming?","output":"The main difference between while and do while loops is that a while loop will only execute the loop body if the condition evaluates to true, while a do while loop will always execute the loop body at least once, and then continue to execute the loop body until the condition evaluates to false. This means that a do while loop is guaranteed to run at least once, whereas a while loop may not run at all."},{"instruction":"Write a function to identify all palindromes in the given string.","output":"def find_palindromes(string):     result = []     for i in range(len(string)):         for j in range(i+2,len(string)+1):             if string[i:j] == string[j-1:i-1:-1]:                 result.append(string[i:j])     return result"},{"instruction":"Edit this HTML code to create an expandable navigation bar. <ul>   <li><a href=\\"/home\\">Home</a></li>   <li><a href=\\"/about\\">About</a></li>   <li><a href=\\"/contact\\">Contact</a></li> </ul>","output":"<ul>   <li><a href=\\"/home\\">Home</a>  <ul>    <li><a href=\\"/about\\">About</a></li>    <li><a href=\\"/contact\\">Contact</a></li>  </ul>   </li> </ul>"},{"instruction":"Determine the syntax for a function call in Python.","output":"Function calls in Python must include the name of the function followed by parentheses and the arguments inside the parentheses. If you do not include any arguments, the parentheses should still be included. An example would be:   my_function()"},{"instruction":"Provide a solution to print the following string in reverse order. String = \\"Hello, world!","output":"print(\\"!\\".join(reversed(\\"Hello, world!\\"))) # Output: !dlrow ,olleH"},{"instruction":"Create a function in Java to detect if an input string is a palindrome.","output":"public static boolean isPalindrome(String str){     int i=0,j=str.length()-1;       while(i<j){         if(str.charAt(i)!=str.charAt(j))             return false;           i++;         j--;     }     return true; }"},{"instruction":"Build a program in Python to check if a number is Odd or Even.","output":"def odd_even(n): \\tif (n % 2 == 0): \\t\\tprint(\\"Even\\") \\telse: \\t\\tprint(\\"Odd\\")"},{"instruction":"Create a program in Java that finds the maximum element in an array.","output":"public static int getMaxElement(int[] arr) {     int max = Integer.MIN_VALUE;              for (int el : arr) {         if (el > max)             max = el;     }     return max; }"},{"instruction":"Write a JavaScript code snippet to set a value for a cookie.","output":"document.cookie=\\"mycookie=myvalue\\";"},{"instruction":"Suggest a solution to print the third character from a string in Python. String = \\"Hello, world!","output":"print(string[2]) # Output: l"},{"instruction":"Write a function to calculate the string length in a given string. String: \\"Hello, World!","output":"def string_length(string):   return len(string)"},{"instruction":"Use regex to find the number of digits in a given string. String: \\"743ABC123_*","output":"import re  def get_digits_count(string):   return len(re.findall('d', string))"},{"instruction":"Create a class in C++ called Point that represents a point in the two-dimensional space.","output":"class Point {   double x;   double y; public:   Point(): x(0), y(0) { }   Point(double _x, double _y): x(_x), y(_y) { }   double getX() { return x; }    double getY() { return y; }  };"},{"instruction":"Write a Python program to find the closest number in a given array to a given number. Array: [3, 6, 9, 12, 15], Number: 10","output":"def closest_number(nums, number):    min_diff = abs(nums[0] - number)    min_num = nums[0]    for num in nums:     min_diff_temp = abs(num - number)      if min_diff_temp < min_diff:     \\tmin_diff = min_diff_temp     \\tmin_num = num   return min_num"},{"instruction":"Remove all non-alphabetical characters from the given string. String: \\"Hello,123_[World!]%","output":"import re def remove_non_alphabetic(string):   return re.sub(\\"[^a-zA-Z ]\\", \\"\\", string)"},{"instruction":"Create a web page using HTML and CSS that contains a heading and a button.","output":"<!DOCTYPE html> <html> <head>   <title>My Web Page</title> </head> <body>   <h1>My Web Page</h1>   <button type=\\"button\\">Click Me!</button> </body> </html>"},{"instruction":"Create a for loop structure in JavaScript to iterate through the numbers from 0 to 10 and display them on the console.","output":"for (var i=0; i<=10; i++){     console.log(i); }"},{"instruction":"Create an array in Python containing five strings.","output":"my_words = [\\"Hello\\", \\"World\\", \\"Python\\", \\"Programming\\", \\"Code\\"]"},{"instruction":"Create a class in Python called Cat with constructor that takes three arguments i.e. name, color and age. The class should have three methods called meow, purr and display_info.","output":"class Cat:     def __init__(self, name, color, age):         self.name = name         self.color = color         self.age = age          def meow(self):         print('%s the %s cat meows!' % (self.name, self.color))          def purr(self):         print('%s the %s cat purrs contentedly.' % (self.name, self.color))          def display_info(self):         print('%s is a %s cat and is %d years old.' % (self.name, self.color, self.age))"},{"instruction":"Sort the following array of numbers [7,2,4,1,9] in descending order using JavaScript. [7,2,4,1,9]","output":"[9,7,4,2,1].sort(function(a,b){return b-a;});"},{"instruction":"Create an API in Node.js that returns \\"hello world\\" when it is invoked.","output":"const express = require('express'); const app = express();   app.get('/', (req, res) => {   res.status(200).send('Hello world!'); });   module.exports = app;"},{"instruction":"Show an example of a while loop in Python.","output":"i = 0 while i < 10:     print(i)     i += 1"},{"instruction":"Write a code to print \\"hello world\\" on a web page using HTML.","output":"<!DOCTYPE html> <html> <head>   <title>Hello World</title> </head> <body>   <h1>Hello World!</h1> </body> </html>"},{"instruction":"Given an array of integers, write an algorithm to reorder the array so that all the negative integers appear before all the positive integers. arr = [4, -7, -3, 9, 1, -4]","output":"def reorder_arr(arr):    negatives = []    positives = []    for item in arr:      if item < 0:        negatives.append(item)      elif item >= 0:        positives.append(item)         return negatives + positives"},{"instruction":"w to delete a specific item from a Python dictionary?","output":"dictionary_name.pop(\\"item_name\\", None)"},{"instruction":"Write a method to find the maximum number of elements in an array such that all subarrays add up to a specified number. arr = [1, 2, 3, 4, 5, 6, 7]","output":"def find_max(arr, target):    dp = [[False for i in range(target + 1)] for j in range(len(arr))]   for i in range(len(arr)):       dp[i][0] = True   for i in range(1, len(arr)):      for j in range(1, target + 1):        if dp[i - 1][j]:            dp[i][j] = dp[i - 1][j]        elif j >= arr[i]:            dp[i][j] = dp[i - 1][j - arr[i]]    max_val = 0   for i in range(1, target + 1):      if dp[len(arr) - 1][i]:        max_val = max(max_val, i)    return max_val"},{"instruction":"w do you check if a character is a digit in Python?","output":"if c.isdigit():    # character is a digit"},{"instruction":"Write a method to remove the trailing spaces from a string in Python.","output":"def remove_trailing_spaces(s):      return s.rstrip()"},{"instruction":"w to generate a random number between two given numbers in Python?","output":"import random  def random_number(minimum, maximum):      return random.randint(minimum, maximum)"},{"instruction":"w do you format a number to two decimal points in JavaScript?","output":"number.toFixed(2)"},{"instruction":"w do you sort a dictionary by values in Python?","output":"sorted_dict = dict(sorted(mydict.items(), key=lambda x: x[1]))"},{"instruction":"w to calculate the length of a string in JavaScript?","output":"str.length"},{"instruction":"Code a for loop that iterates over a list of numbers and stores the doubled value of each number in another list. num_list = [1, 2, 3, 4]","output":"doubled_list = [] for num in num_list:     doubled_list.append(num * 2)"},{"instruction":"w can you remove all the empty strings from a list?","output":"filtered_list = [x for x in list if x!= '']"},{"instruction":"Code a for loop that iterates over a list of strings and capitalizes the first letter of each string. my_list = ['eggs', 'bacon', 'cheese']","output":"capitalized_list = [] for string in my_list:     capitalized_list.append(string.capitalize())"},{"instruction":"Write a function to join a list of strings using a given character.","output":"def join_list(list, char):     return char.join(list)"},{"instruction":"w can you flatten a list of lists?","output":"from itertools import chain flattened_list = list(chain.from_iterable(list_of_lists))"},{"instruction":"Edit the following function to remove duplicate elements from a list. def remove_duplicates(list):     new_list = []     for element in list:         new_list.append(element)     return new_l","output":"def remove_duplicates(list):     new_list = []     for element in list:         if element not in new_list:             new_list.append(element)     return new_list"},{"instruction":"Find the smallest positive number that is not present in a given list. my_list = [1, 3, 6, 9, 11]","output":"def find_missing_number(my_list):     sorted_list = sorted(my_list)     for i, num in enumerate(sorted_list):         if i != num:             return i     return max(sorted_list) + 1"},{"instruction":"Convert a given string from lowercase to uppercase characters. \\"this is a string","output":"def convert_to_uppercase(string):     return string.upper()      if __name__ == '__main__':     print(convert_to_uppercase(\\"this is a string\\"))"},{"instruction":"Print a random permutation of an array of integers. [1,2,3,4,5]","output":"import random def random_permutation(arr):     new_arr = arr.copy()     random.shuffle(new_arr)     return new_arr if __name__ == '__main__':     print(random_permutation([1,2,3,4,5]))"},{"instruction":"Compose a program to create a dictionary of characteristics from a given list . itemList = [\\"Apple\\", \\"Orange\\", \\"Grapes\\", \\"Bananas\\", \\"Watermelons\\"]","output":"def create_characterstic_dictionary(itemList):     out = {}     for item in itemList:         out[item] = len(item)     return out if __name__ == '__main__':     itemList = [\\"Apple\\", \\"Orange\\", \\"Grapes\\", \\"Bananas\\", \\"Watermelons\\"]     print(create_characterstic_dictionary(itemList))"},{"instruction":"Generate the nth Fibonacci number using a loop.","output":"def fibonacci_loop(n):     prev, curr = 0, 1     for _ in range(1, n):         prev, curr = curr, prev + curr     return curr if __name__ == '__main__':     print(fibonacci_loop(10))"},{"instruction":"Create a function in Java that takes two strings and returns an integer that describes the number of characters they share in common. string1 = \\"Hello\\" string2 = \\"World","output":"public static int countCommonChars(String s1, String s2){     int count = 0;     int maxLen = Math.min(s1.length(), s2.length());     for(int i=0; i<maxLen; i++){         if(s1.charAt(i) == s2.charAt(i)) count++;     }     return count; }"},{"instruction":"Create a program in Java that calculates the average of two test scores. test1 = 85 test2 = 90","output":"public static double average(int test1, int test2){     double avg = (test1+test2)/2;     return avg; }"},{"instruction":"Given a list of strings, create a Python function that sorts them in alphabetical order. example_list = [\\"Apple\\", \\"Banana\\", \\"Cherry\\"]","output":"def sort_list(l):     l.sort()     return l"},{"instruction":"Create a function in Python that takes a sentence as input and returns a dictionary of each word and its frequency in the sentence. example_sentence = \\"The quick brown fox jumps over the lazy dog.","output":"def word_frequency(sentence):     words = sentence.split()     freq_dict = {}     for word in words:         if word in freq_dict:             freq_dict[word] += 1         else:             freq_dict[word] = 1     return freq_dict"},{"instruction":"Given a list of strings, create a Python3 program that counts the number of strings that start with the letter 'a'. example_list = [\\"Apple\\", \\"Cat\\", \\"Ant\\", \\"Table\\"]","output":"def count_str_starts_a(l):     count = 0     for word in l:         if word[0].lower() == 'a':             count += 1     return count"},{"instruction":"Write code in C++ to reverse an array of elements. example_array = [1,2,3,4,5]","output":"void reverse_array(int arr[], int size){      int start = 0, end = size - 1;      while(start < end){          int temp = arr[start];           arr[start] = arr[end];          arr[end] = temp;          start++;          end--;      }   }"},{"instruction":"Write a function to convert an anagram of a string to a dictionary word = \\"geeksforgeek","output":"def convert_anagram(word):     result = {}     for c in word:         result.setdefault(c, 0)         result[c] += 1     return result"},{"instruction":"Calculate the Euclidean distance between two arrays array1 = [1, 2, 3] array2 = [4, 5, 6]","output":"def euclidean_distance(array1, array2):     return np.sqrt(np.sum((array1 - array2)**2))"},{"instruction":"Generate a target field from an input field by adding a new column Input Dataframe: name  age  height John  24   180 Mary  22   160","output":"def generate_column(dataframe):     dataframe['target'] = dataframe.apply(     lambda row: row.age * row.height, axis = 1     )     return dataframe"},{"instruction":"mplement a neural network for regression","output":"import tensorflow as tf # create input layer inputs = tf.keras.Input(shape=(2,)) # create the first layer of the network with 16 neurons fc1 = tf.keras.layers.Dense(16, activation=\\"relu\\")(inputs) # create the second layer of the network with 8 neurons fc2 = tf.keras.layers.Dense(8, activation=\\"relu\\")(fc1) # create the output layer of the network with 1 neuron (for regression) outputs = tf.keras.layers.Dense(1, activation=\\"sigmoid\\")(fc2) # create the model and compile it. model = tf.keras.Model(inputs=inputs, outputs=outputs) model.compile(optimizer='Adam', loss='mse')"},{"instruction":"mplement Naive Bayes for classification.","output":"import numpy as np # Create a data set X = np.array([[0, 0, 0], [0, 1, 0], [1, 0, 0], [1, 1, 0], [0, 0, 1], [0, 1, 1], [1, 0, 1], [1, 1, 1]]) y = np.array([0, 0, 0, 0, 1, 1, 1, 1]) # Build a Naive Bayes classifier naive_bayes = GaussianNB() # Train the classifier using the training data naive_bayes.fit(X, y)"},{"instruction":"Find the frequency of a given phrase in the text text = \\"This is a phrase that I want to find the frequency of\\" phrase = \\"phrase","output":"def find_frequency(text, phrase):     fdist = nltk.FreqDist(text.lower().split())     return fdist[phrase]"},{"instruction":"Find the values of the keys 'category' and 'difficulty' in the given json data. {     \\"status\\": \\"SUCCESS\\",     \\"message\\": \\"\\",     \\"data\\": {         \\"category\\": \\"Mathematics\\",         \\"difficult\\": \\"Easy\\"     } }","output":"category: Mathematics difficult: Easy"},{"instruction":"Extract the value of the given key from the given XML structure. <score>     <name>Alice</name>     <points>15</points> </score> Key: po","output":"15"},{"instruction":"Read the given code and provide an example output. def add_two_numbers(a, b):     return a + b","output":"Example output: add_two_numbers(3, 4) Output: 7"},{"instruction":"Read the following code and identify the type of loop it is. for a in range(0, 10):     print(a)","output":"for loop."},{"instruction":"Write a function that prints the same string three times consecutively. string = \\"Hello World!","output":"def print_three_times(string):     for _ in range(3):         print(string)          print_three_times(\\"Hello World!\\")"},{"instruction":"Output true if a number is odd or false if it is even. number = 8","output":"false"},{"instruction":"Trace the given solution to find the output for the given input. def find_max_number(arr):     max_num = arr[0]     for num in arr:         if num > max_num:             max_num = num     return max_num Input: find_max_number([2, 3, 4, 6, 5])","output":"max_num = 2 Loop 1: num = 3, max_num = 3 Loop 2: num = 4, max_num = 4 Loop 3: num = 6, max_num = 6 Loop 4: num = 5, max_num = 6 Output: 6"},{"instruction":"Get the length of the given string. string = \\"Summer is here!","output":"len(string) Output: 14"},{"instruction":"Write code in Java to calculate the minimum number of coins needed to make change for a given amount. Coin denominations: [1, 5, 10, 25] Amount: 27","output":"public int calculateCoins(int amount, int[] array){      int coinsNeeded = 0;      for (int i = array.length - 1; i >= 0; i--){                     // Find the largest denomination          // which is smaller than amount          while (amount >= array[i]){              amount = amount - array[i];              coinsNeeded++;          }      }      return coinsNeeded;  }"},{"instruction":"Construct a regular expression that extracts substrings that match the pattern \\"AAA_BBB_CCC\\".","output":"Regex: ^([A-Za-z]{3})_([A-Za-z]{3})_([A-Za-z]{3})"},{"instruction":"Create a class in C++ that defines a number as a double value.","output":"// C++ Class class Number { private:     double num; public:     // Constructor     Number(double val) : num(val) { }     // Function to get the double value     double getValue() {         return num;     } };"},{"instruction":"Generate an SQL statement to select the maximum salary of an employee from the given table. Table Name: EMPLOYEE Table Rows: ID (int); NAME (string); SALARY (int)","output":"SELECT MAX(SALARY) FROM EMPLOYEE;"},{"instruction":"Produce a regular expression that checks if a string contains between 5 and 20 characters.","output":"^.{5,20}"},{"instruction":"Construct a function in Python that takes a list and returns the mean of the elements in the list. [30, 10, 40, 20]","output":"def mean(list):      # Finding total of the list elements      total = 0     for num in list:          total += num      # Calculate mean of the list     mean = total / len(list)      # Return the mean      return mean"},{"instruction":"Write a function to delete a node from the given linked list. Linked list: 10 --> 20 --> 30 Node to delete: 10","output":"def deleteNode(head, node):      if head == None:          return  \\t       # If node to be deleted is head node      if head.val == node:          head = None         return head  \\t       # Find prev node      prev = None     curr = head      while curr and curr.val != node:          prev = curr          curr = curr.next     # Unlink node from linked list      prev.next = curr.next     curr = None     return head"},{"instruction":"Create a SQL query to get the count of students with their assigned marks greater than or equal to 80. Table Name: STUDENTS Table Rows: NAME (string); MARKS (int)","output":"SELECT COUNT(*) FROM STUDENTS WHERE MARKS >= 80;"},{"instruction":"Edit the following code to make it an infinite loop. # Python 3 # Print numbers from 0 to 10  i = 0 while i <= 10:      print(i)      i += 1","output":"# Python 3 # Print numbers from 0 to 10  while True:      print(i)      i += 1"},{"instruction":"Write a function in JavaScript to set the background color of a web page to a randomly generated color.","output":"const random_bg_color = () => {     // Generate three random numbers for RGB to create random color     let r = Math.floor(Math.random() * 256);      let g = Math.floor(Math.random() * 256);      let b = Math.floor(Math.random() * 256);         // Set the random color for the page's background     document.body.style.backgroundColor = \\"rgb(\\" + r + \\",\\" + g + \\",\\" + b + \\")\\";  }"},{"instruction":"Create a list of entries that should be included in a \`Person\` class.","output":"A \`Person\` class should include the following entries: - name: string - age: integer - gender: string - address: string - phone_number: string - email: string - occupation: string - school: string - current_city: string - birth_city: string - nationality: string"},{"instruction":"Generate a function in Java to calculate the sum of digits for any given integer.","output":"public static int sumDigits(int number) { \\tint sum = 0; \\twhile (number != 0) { \\t\\tsum += number%10; \\t\\tnumber /= 10; \\t} \\treturn sum; }"},{"instruction":"Compose a piece of HTML code that uses a form to let the user input an email address.","output":"<form>     <label for=\\"email\\">Email:</label>     <input type=\\"text\\" name=\\"email\\" id=\\"email\\" required>     <input type=\\"submit\\" value=\\"Submit\\"> </form>"},{"instruction":"Generate a sorting algorithm written in Java that sorts integers in ascending order.","output":"public static int[] sortIntsAscending(int[] arr) {      int n = arr.length;      for (int i = 0; i < n-1; i++) {          int minIndex = i;          for (int j = i+1; j < n; j++) {              if (arr[j] < arr[minIndex]) {                  minIndex = j;              }          }          int temp = arr[minIndex];          arr[minIndex] = arr[i];          arr[i] = temp;      }      return arr;  }"},{"instruction":"Demonstrate how to use an if-else block to control the execution sequence of a program.","output":"Using an if-else block to control execution sequence involves using if-else statements to check a given condition. If the condition is true, the code inside the if statement is executed, otherwise, the code inside the else statement is executed. For example, if a variable called \\"x\\" is declared with a value of 3, the following if-else block will print \\"X is 3\\":  if(x == 3) {    System.out.println(\\"X is 3\\"); } else {    System.out.println(\\"X is not 3\\"); }"},{"instruction":"Create a JavaScript object for a student and include properties such as first name, last name, and grades for all courses taken.","output":"let student = {     firstName: \\"John\\",     lastName: \\"Doe\\",     grades: {         math: 89,         science: 80,         english: 92,         history: 94     } }"},{"instruction":"w can you use the modulo operator to print even numbers in a loop?","output":"The modulo operator can be used to print even numbers in a loop by using an IF statement to check if the remainder of a number divided by two is zero. If the condition is true, the even number is printed. For example, the following code will print all even numbers from 1 to 10: for (int i = 1; i <= 10; i++){     if (i % 2 == 0)        System.out.println(i); }"},{"instruction":"Generate a random valid email address.","output":"import random def generate_email():  characters = 'abcdefghijklmnopqrstuvwxyz0123456789'  email_address = ''.join(random.choice(characters) for i in range(10))  return email_address + '@example.com'"},{"instruction":"Given an input string and a pattern, find the first index of the pattern in the string. string: “The quick brown fox jumps over the lazy dog” pattern: “dog”","output":"def find_pattern_index(string, pattern):  for i in range(len(string) - len(pattern) + 1):    if string[i:i+len(pattern)] == pattern:     return i   return -1   print(find_pattern_index(\\"The quick brown fox jumps over the lazy dog\\", \\"dog\\")) # Output: 40"},{"instruction":"Given an array of integers, calculate the sum of all even numbers in the array. [ 5, 10, 15, 11, 22, 33, 28, 9]","output":"def sum_even_numbers(arr):  sum = 0  for i in arr:  if i % 2 == 0:  sum += i  return sum   print(sum_even_numbers([5, 10, 15, 11, 22, 33, 28, 9])) # Output: 70"},{"instruction":"Decompose a given number into its prime factors. 25","output":"def prime_factorize(n):  prime_factors = []  i = 2  while i * i <= n:  if n % i:  i += 1  else:  n //= i  prime_factors.append(i)  if n > 1:  prime_factors.append(n)  return prime_factors   print(prime_factorize(25)) # Output: [5, 5]"},{"instruction":"Given an array, separate the odd and even numbers, and return a list of two different arrays, one for even and one for odd numbers. [3, 6, 9, 12, 21]","output":"def separate_even_odd(arr):  even = []  odd = []  for i in arr:  if i % 2 == 0:  even.append(i)  else:  odd.append(i)  return even, odd print(separate_even_odd([3, 6, 9, 12, 21])) # Output: ([6, 12], [3, 9, 21])"},{"instruction":"Write a JavaScript program to find all the words in a string which start with a specific letter. string: “The quick brown fox jumps over the lazy dog” letter: ‘j’","output":"function findWords(string, letter){  let words = string.split(\\" \\");  let result = [];  for(let word of words){  if(word.charAt(0) == letter){  result.push(word);  }  }  return result; }   console.log(findWords(\\"The quick brown fox jumps over the lazy dog\\", \\"j\\")); # Output: [\\"jumps\\"]"},{"instruction":"Write a JavaScript program to make a shallow clone of an object.","output":"function clone(obj) {  let cloneObj = {};  for (let i in obj) {  if (obj.hasOwnProperty(i)) {  cloneObj[i] = obj[i];  }  }  return cloneObj; } let obj = {name: 'John', age: 30}; let cloneObj = clone(obj); console.log(cloneObj); # Output: {name: \\"John\\", age: 30}"},{"instruction":"Create a computer program that takes a string as an input and builds a dictionary of words and their respective frequencies. \\"the quick brown fox jumps over the lazy dog","output":"def get_frequency(input):     # Split the input into words     words = input.split()     # Create a dictionary to store the words and the frequency     frequency = dict()     # Iterate over the words and store the frequency     for word in words:         if word in frequency:             frequency[word] += 1         else:             frequency[word] = 1                  return frequency if __name__ == \\"__main__\\":     # Input string     input = \\"the quick brown fox jumps over the lazy dog\\"     # Get the frequency of words     frequency = get_frequency(input)     # Print the frequency     print(frequency)"},{"instruction":"Design a class that stores and prints a complex number.","output":"class ComplexNumber:     def __init__(self, real, imag):         self.real = real         self.imag = imag     def __str__(self):         return '{} + {}i'.format(self.real, self.imag) if __name__ == '__main__':     c = ComplexNumber(2, 8)     print(c)"},{"instruction":"Output the number of words in a given sentence stored as a string. \\"Welcome to the world of coding!","output":"def count_words(sentence):     return len(sentence.split()) if __name__ == '__main__':     sentence = \\"Welcome to the world of coding!\\"     print(count_words(sentence))"},{"instruction":"Write a function that takes two strings as parameters and return a new string that has the characters of the second string appended to the first string. \\"hello\\",\\"world","output":"def append_string(string1, string2):     return string1 + string2 if __name__ == '__main__':     string1 = \\"hello\\"     string2 = \\"world\\"     result = append_string(string1, string2)     print(result)"},{"instruction":"Create a function which determines if a given number is a palindrome. 7337","output":"def palindrome(num):     # convert the number to a string     num_str = str(num)     # Reverse the string using slicing     rev_str = num_str[::-1]     # check if the given number is equal to the reversed string     if num_str == rev_str:         return True     else:         return False if __name__ == \\"__main__\\":     num = 7337     print(palindrome(num))"},{"instruction":"Reverse the words in a sentence stored as a list in Python. ['word', 'one', 'is', 'this']","output":"def reverse_words(words):     # Get the length of the words     n = len(words)     # Reverse the list words     for i in range(n // 2):         words[i], words[n - 1 - i] = words[n - 1 - i], words[i]     return words if __name__ == \\"__main__\\":     words = ['word', 'one', 'is', 'this']     print(reverse_words(words))"},{"instruction":"Extract the country code from a given phone number of the format +cc xxx-xxx-xxxx +91 983-741-3256","output":"def extract_country_code(number):     # Check if number is valid     if len(number) == 13 and number[0] == '+':         # Extract the country code         cc = number[1:3]         return cc if __name__ == \\"__main__\\":     number = \\"+91 983-741-3256\\"     print(extract_country_code(number))"},{"instruction":"Design an algorithm to compute the number of trailing zeroes in a factorial number.","output":"def count_trailing_zeroes(factorial_number):          # Initialize count      count = 0     # Keep dividing n by powers of 5 and update count     i = 5     while (factorial_number/i>=1):         count += int(factorial_number/i)         i *= 5              return int(count) if __name__ == \\"__main__\\":     factorial_number = 12     print(count_trailing_zeroes(factorial_number))"},{"instruction":"Generate a sequence of prime numbers between a given range using the Sieve of Eratosthenes algorithm.","output":"def sieve_of_eratosthenes(lower, upper):     # Create a list of prime numbers     prime_list = [True] * (upper + 1)     prime_list[0] = False     prime_list[1] = False     # Iterate over the list until the square root of the upper limit     for i in range(2, int(upper ** 0.5) + 1):         # If i is true, then it is prime         if prime_list[i]:             # Set all multiples of i to false             for j in range(i*i, upper + 1, i):                 prime_list[j] = False     # Get the list of prime numbers between lower and upper     prime_nums = []     for i in range(lower, upper + 1):         if prime_list[i]:             prime_nums.append(i)     return prime_nums if __name__ == \\"__main__\\":     lower = 0     upper = 50     print(sieve_of_eratosthenes(lower, upper))"},{"instruction":"Design an algorithm to calculate the intersection of two given lists. List1 = [2, 5, 9, 12, 17] List2 = [3, 5, 9, 10]","output":"def intersection(list1, list2):     # Initialize an empty list      intersection_list = []     # Iterate over elements of the first list     for num in list1:         # Compare each element of first list with elements of second list         if num in list2:             # Add to the intersection list if matches             intersection_list.append(num)     return intersection_list if __name__ == \\"__main__\\":     list1 = [2, 5, 9, 12, 17]     list2 = [3, 5, 9, 10]     print(intersection(list1, list2))"},{"instruction":"Retrieve the elements in an array [1, 2, 3, 4, 5, 6] where the index is greater than or equal to 3 [1, 2, 3, 4, 5, 6]","output":"[4, 5, 6]"},{"instruction":"Convert the following string \\"10 10 20 20 30\\" into a list of integers. \\"10 10 20 20 30","output":"list_of_ints = [10, 10, 20, 20, 30]"},{"instruction":"Sort the following list in ascending order [3, 5, 1, 2, 9]. [3, 5, 1, 2, 9]","output":"sorted_list = [1, 2, 3, 5, 9]"},{"instruction":"Write a SELECT statement that retrieves the first name, last name, and salary of all employees, sorted in descending order of salary.","output":"SELECT first_name, last_name, salary FROM employees ORDER BY salary DESC;"},{"instruction":"Design a Python class that allows a user to set and get the name of an object.","output":"class User:     def __init__(self, name):         self.name = name     def getName(self):         return self.name     def setName(self, name):         self.name = name"},{"instruction":"w many lines would the following algorithm require? # Find all the prime numbers between two given numbers # Input: two numbers, n1 and n2 # Output: list of prime numbers between n1 and n2","output":"It would require approximately 9 lines of code."},{"instruction":"Write a loop in Python to find the summation of the square of the first 10 natural numbers.","output":"sum = 0 for i in range(1, 11):      sum += i**2    print(\\"The sum of the square of the first 10 natural numbers is\\", sum)"},{"instruction":"Make a GUI app in Java to add two numbers together.","output":"import java.awt.*; import javax.swing.*; public class AddTwoNumbersGUI {     public static void main(String[] args) {         JFrame frame = new JFrame(\\"Adding two numbers\\");         frame.setSize(400, 200);         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         frame.setVisible(true);         Container contentPane = frame.getContentPane();         contentPane.setLayout(new FlowLayout());         JLabel num1Label = new JLabel(\\"Enter first number:\\");         JLabel num2Label = new JLabel(\\"Enter second number:\\");         JLabel resultLabel = new JLabel(\\"Result:\\");                  JTextField num1TextField = new JTextField();         JTextField num2TextField = new JTextField();         JTextField resultTextField = new JTextField();         JButton addButton = new JButton(\\"Add\\");         addButton.addActionListener(e -> {             int num1 = Integer.parseInt(num1TextField.getText());             int num2 = Integer.parseInt(num2TextField.getText());             int result = num1 + num2;             resultTextField.setText(Integer.toString(result));         });         contentPane.add(num1Label);         contentPane.add(num1TextField);         contentPane.add(num2Label);         contentPane.add(num2TextField);         contentPane.add(addButton);         contentPane.add(resultLabel);         contentPane.add(resultTextField);     } }"},{"instruction":"Write a search engine using an index in JavaScript.","output":"// create an index let index = {}; // add a document to the index let addDocument = (document, content) => {   let words = content.split(' ');   words.forEach((word) => {     if (index.hasOwnProperty(word)) {       //if the word is already in the index, add the document to its list       index[word].push(document);     } else {       //add the word to the index       index[word] = [document];     }   }); }; // perform a search let search = (query) => {   //array to hold the found documents   let found = [];   query.split(' ').forEach((word) => {     //check if word is in index     if (index.hasOwnProperty(word)) {       index[word].forEach((doc) => {         //make sure document isn't already in the list         if (found.indexOf(doc) == -1) {           found.push(doc);         }       });     }   });   //return the found documents   return found; };"},{"instruction":"Create a method in JavaScript that will return the area of a triangle.","output":"// Calculating area of triangle in JavaScript function areaOfTriangle(a, b, c) {     // Calculate the semi-perimeter of the triangle     var s = (a + b + c) / 2;          // Calculate the area of triangle using Heron's Formula     var area =  Math.sqrt(s * (s - a) * (s - b) * (s - c));          // Return the area of triangle     return area; }"},{"instruction":"Write a shell script to create a directory with a name \\"mydir\\" under the home directory.","output":"#!/bin/sh # Create a directory with name \\"mydir\\" mkdir ~/mydir"},{"instruction":"Create a function in JavaScript to generate an array containing 5 random numbers between 0 and 9 (inclusive).","output":"function generateRandomNumbers() {     // Declaring array to hold 5 random numbers between 0 and 9     let randArray = [];     // Generate 5 random numbers     while(randArray.length < 5) {         // Generate a random number between 0 and 9         let randNum = Math.floor(Math.random() * 10);         // Add to array if not already present in the array         if(randArray.indexOf(randNum) < 0){             randArray.push(randNum);         }     }     // Return array     return randArray; }"},{"instruction":"Create a for loop in Python that will iterate through a given list and add the square of each element to a new list. nums = [2, 3, 4]","output":"# Create an empty list squared_nums = [] # Iterate through the given list  for num in nums:   # Calculate the square of the element   squared_num = num * num   # Append it to the new list   squared_nums.append(squared_num) # Print the new list print(squared_nums)  # Output: [4, 9, 16]"},{"instruction":"Construct a regex to match any 5-digit US zip code.","output":"d{5}"},{"instruction":"Given a list of strings, construct a regex to match any string that starts with \\"ab\\".","output":"^ab.*"},{"instruction":"Given an array of integers, write a program to find the longest consecutive sequence. [1, 9, 3, 10, 4, 20, 2]","output":"def longest_consecutive(numbers):     longest_sequence = 0     numbers_set = set(numbers)       for num in numbers:         if num - 1 not in numbers_set:             current_number = num             current_sequence = 1               while current_number + 1 in numbers_set:                 current_sequence += 1                 current_number += 1               longest_sequence = max(longest_sequence, current_sequence)       return longest_sequence"},{"instruction":"Write a SQL query to find customers who have purchased the most items in the last month.","output":"SELECT customer_name, COUNT(order_id) AS num_items_purchased  FROM orders WHERE date_created > DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH) GROUP BY customer_name ORDER BY num_items_purchased DESC;"},{"instruction":"Create a class in Java to store student grades with functions for adding and calculating average grades.","output":"class StudentGrades {     private float[] grades;     private int size;       public StudentGrades() {         grades = new float[10];         size = 0;     }       public void addGrade(float grade) {         grades[size] = grade;         size++;     }       public float averageGrades() {         float sum = 0;           for (int i=0; i<size; i++) {             sum += grades[i];         }         return sum/size;     } }"},{"instruction":"Create a JavaScript object that contains a student's name, age, and courses.","output":"let student = {      name: \\"John Doe\\",      age: 20,      courses: [\\"Math\\", \\"Physics\\", \\"English\\"]  };"},{"instruction":"Given a string, convert it to upper case. String: this string should be in upper case","output":"THIS STRING SHOULD BE IN UPPER CASE"},{"instruction":"Convert the given HTML code into its equivalent JSON structure. <div> \\t<h2>Hello World!</h2> \\t<p>My name is John.</p> </div>","output":"{ \\t\\"div\\": { \\t\\t\\"h2\\": \\"Hello World!\\", \\t\\t\\"p\\": \\"My name is John.\\" \\t} }"},{"instruction":"Find all character positions in the given string String: abracadabr","output":"Character Positions:  a: 0, 3, 5, 7, 10 b: 1, 8 c: 2 d: 4 r: 6, 9"},{"instruction":"Create a MySQL table with two columns id and name, where id should have primary key.","output":"CREATE TABLE student (     id INT NOT NULL AUTO_INCREMENT,     name VARCHAR(255) NOT NULL,     PRIMARY KEY (id) );"},{"instruction":"Create an array of a length 10 filled with odd numbers starting from 3.","output":"int[] arr = {3, 5, 7, 9, 11, 13, 15, 17, 19, 21};"},{"instruction":"Write a code for finding the maximum value within a range. List: [10, 20, 30, 5, 40]  Range: [20, 40]","output":"max = 0 for num in list:     if num >= 20 and num <= 40:         max = max(max, num) print(max) # 40"},{"instruction":"Compare the given hashes and return true if they have the same set of keys and values. Hash1: {\\"a\\": 1, \\"b\\": 2}  Hash2: {\\"b\\": 2, \\"a\\": 1}","output":"True"},{"instruction":"Execute the given SQL query and return the result. SQL Query: SELECT name, age FROM people WHERE age < 20","output":"Query Result:  Name  | Age John  | 19 Alice | 18"},{"instruction":"Explain the benefits of using the OOP approach in programming.","output":"Using the Object-Oriented Programming (OOP) approach in programming offers a number of advantages such as increased code reusability, easier maintenance, data hiding, and better performance. OOP makes it easier to model real-world objects and their relationships, allowing developers to reduce complexity by breaking programs down into smaller parts. This makes it easier to identify, debug and modify code. Additionally, OOP promotes the development of extensible and reusable code, cutting down on the cost and time of development. Finally, OOP allows for better tracking of data and control over which elements outside the program can modify the data."},{"instruction":"What is the Python function for swapping two variables' values?","output":"The Python function for swapping two variables' values is \\"*a, b = b, a*\\". This is a simple one-line expression that swaps the values of the two variables."},{"instruction":"Write a SQL query to find the employee names who are working in the company since Jan 2019.","output":"SELECT employee_name FROM employees WHERE start_date >= '2019-01-01'"},{"instruction":"Come up with a C++ program that orders the elements of an unordered array from greatest to smallest.","output":"#include <iostream> #include <algorithm> int main() {     int arr[] = {5, 3, 7, 1, 2};     int n = sizeof(arr) / sizeof(arr[0]);     std::sort(arr, arr+n, std::greater<int>());     for (int i = 0; i < n; ++i)         std::cout << arr[i] << \\" \\";     std::cout << std::endl;     return 0; }"},{"instruction":"Write an HTML web page from scratch that displays a list of 10 different CSS colors randomly.","output":"<html> <head>     <title>Random Colors</title>     <style>         .random-color {             background-color: #9b024a;         }     </style> </head> <body>     <h1>Random Colors</h1>     <ul>         <li class=\\"random-color\\">#9b024a</li>         <li class=\\"random-color\\">#f06f56</li>         <li class=\\"random-color\\">#ffb003</li>         <li class=\\"random-color\\">#37478d</li>         <li class=\\"random-color\\">#82e3d3</li>         <li class=\\"random-color\\">#2e2fbb</li>         <li class=\\"random-color\\">#b82da9</li>         <li class=\\"random-color\\">#0093fa</li>         <li class=\\"random-color\\">#4dadf4</li>         <li class=\\"random-color\\">#ee2f88</li>     </ul> </body> </html>"},{"instruction":"Generate a Java program that creates a class Student with attributes name and age, and a constructor to initialize the attributes.","output":"public class Student {     private String name;     private int age;     public Student(String name, int age) {         this.name = name;         this.age = age;     }     public String getName() {         return name;     }     public int getAge() {         return age;     } }"},{"instruction":"Create an algorithm that will return all numbers in the given array that are greater than 10. [5, 8, 10, 12, 15, 17, 20]","output":"def get_over_10(arr):     output = []     for num in arr:         if num > 10:             output.append(num)     return output"},{"instruction":"Create a React component that will render a list of student details for a particular class.","output":"import React from 'react'; const StudentList = ({students}) => {   return (     <div>       {students.map((student, index) => {         return (           <div key={index}>             <p>Name: {student.name}</p>             <p>Age: {student.age}</p>           </div>         );       })}     </div>   ); }; export default StudentList;"},{"instruction":"Write a Python program that takes two lists, adds their items and returns a new list. list_a = [1, 2, 3] list_b = [4, 5, 6]","output":"def add_list_items(list_a, list_b):     output = []     for item_a, item_b in zip(list_a, list_b):         output.append(item_a + item_b)     return output"},{"instruction":"Design an algorithm that can efficiently search for an element in a given sorted array","output":"def binary_search(arr, x):   start = 0   end = len(arr) - 1   while start <= end:     mid = start + (end - start)//2     if arr[mid] == x:       return mid     elif arr[mid] < x:        start = mid + 1     else:        end = mid - 1   return -1"},{"instruction":"Come up with a Java program that checks if one string is a substring of another.","output":"public static boolean isSubstring(String s, String x) {     int i = 0, j = 0;     while (i < s.length() && j < x.length()) {         if (s.charAt(i) == x.charAt(j)) {             i++;             j++;         } else {             i = i - j + 1;             j = 0;         }     }     if (j == x.length()) {         return true;     }     return false; }"},{"instruction":"Write a JavaScript function that generates the Fibonacci sequence up to a given number.","output":"function fibonacci (num) {     let result = [];     let a = 1;     let b = 0;     let temp;     while (num >= 0) {       result.push(b);          temp = a;       a = a + b;       b = temp;          num--;     }        return result;   }"},{"instruction":"Create an SQL query that pulls data from two tables and sorts the results in descending order by date.","output":"SELECT * FROM tableA, tableB  WHERE tableA.id = tableB.id  ORDER BY tableB.date DESC"},{"instruction":"Create an algorithm that performs bubble sort.","output":"def bubble_sort(arr):     n = len(arr)     for i in range(n-1, 0, -1):         for j in range(i):             if arr[j] > arr[j+1]:                 arr[j+1], arr[j] = arr[j], arr[j+1]"},{"instruction":"Which programming language syntax is used in the following code snippet? #define some_function() {     // do something }","output":"The programming language syntax used in the given code snippet is C."},{"instruction":"Write an algorithm to count the number of pairs whose difference is k. nums = [1, 5, 3, 4, 7, 8] k = 3","output":"def count_pairs(nums, k):     count = 0     # Create a set to store all the elements of the array     num_set = set(nums)     for num in nums:         if num + k in num_set:             count += 1     return count num_diff = 3 pair_count = count_pairs(nums, num_diff) print(\\"Number of pairs with difference\\", num_diff, \\" is :\\", pair_count)"},{"instruction":"Using ES6 syntax, insert the following into the code: let arr = [1, 2, 3];","output":"let arr = [1, 2, 3]; const doubled = arr.map(num => num * 2); console.log(doubled); // [2, 4, 6];"},{"instruction":"Use the information provided to create a class in Python which represent a Rectangle. The Rectangle class should have:  - Attributes of length and width - A method to compute the area of the rectangle","output":"class Rectangle:     def __init__(self, length, width):         self.length = length         self.width = width         def get_area(self):         return self.length * self.width"},{"instruction":"Create an object sorting function using bubble sort in JavaScript. const arr = [10, 4, 7, 8, 1, 6]","output":"function bubbleSort(arr) {   for (let i = arr.length-1; i > 0; i--) {     for (let j = 0; j < i; j++) {       if (arr[j] > arr[j + 1]) {         let temp = arr[j];         arr[j] = arr[j + 1];         arr[j + 1] = temp;       }     }   }   return arr; }"},{"instruction":"Create an algorithm to merge two sorted linked lists. Linked List 1: 1 - 4 - 7 Linked List 2: 2 - 5 - 8","output":"def merge_sorted_lists(list1, list2):     if not list1:         return list2     if not list2:         return list1              if list1.val < list2.val:        head = list1        list1 = list1.next    else:        head = list2        list2 = list2.next       cur = head       while list1 and list2:        if list1.val < list2.val:            cur.next = list1            list1 = list1.next        else:            cur.next = list2            list2 = list2.next                   cur = cur.next               cur.next = list1 if list1 else list2       return head"},{"instruction":"Write a TensorFlow program for a linear regression model.","output":"import tensorflow as tf # Create variables a = tf.Variable(0.5) b = tf.Variable(0.5) # > Create the input data, y and x x = tf.placeholder(tf.float32) y = tf.placeholder(tf.float32) # > Model: y = ax + b y_pred = a * x + b # > Loss: Mean Squared Error (MSE) loss = tf.reduce_mean(tf.square(y_pred - y)) # > Optimizer: Gradient Descent train_op = tf.train.GradientDescentOptimizer(0.01).minimize(loss) # > Initialize all variables init = tf.global_variables_initializer() # > Execute the graph with tf.Session() as sess:     sess.run(init)     for step in range(200):         sess.run(train_op, {x: [1, 2, 3, 4], y: [2, 4, 6, 8]})         if (step + 1) % 20 == 0:             loss_val = sess.run(loss, {x: [1, 2, 3, 4], y: [2, 4, 6, 8]})             print(\\"Step:\\", step + 1, \\" Loss:\\", loss_val)"},{"instruction":"Write a jQuery script which animates an element from left to right. <div id=\\"myElement\\">I need to be moved.</div>","output":"(\\"#myElement\\").animate({     left: '+=600px' });"},{"instruction":"Write an SQL query that extracts the first name and last name from the Customers table. SELECT * FROM Customer","output":"SELECT FirstName, LastName FROM Customers;"},{"instruction":"Create a HTML page that shows a profile page for a user.","output":"<!DOCTYPE html> <html> <head> \\t<title>Profile Page</title> </head> <body> \\t<h1>Profile Page</h1> \\t<div> \\t\\t<h2>User Details</h2> \\t\\t<p>Name: John Doe</p> \\t\\t<p>Email: John.Doe@example.com</p> \\t\\t<p>Date of Birth: 01/01/1900</p> \\t</div> </body> </html>"},{"instruction":"Write an HTML code that creates a table with two columns and three rows.","output":"<table>   <tr>     <th>Column 1</th>     <th>Column 2</th>   </tr>   <tr>     <td>Row 1, Cell 1</td>     <td>Row 1, Cell 2</td>   </tr>   <tr>     <td>Row 2, Cell 1</td>     <td>Row 2, Cell 2</td>   </tr>   <tr>     <td>Row 3, Cell 1</td>     <td>Row 3, Cell 2</td>   </tr> </table>"},{"instruction":"Write a JavaScript code to create a function that checks if a given number is divisible by 2.","output":"function isDivisibleBy2(num) {   return num % 2 === 0; }"},{"instruction":"Create an instance of the Date class that represents the current date and time.","output":"DateTime now = DateTime.Now;"},{"instruction":"Write a SQL query to find the average price for all products in the Products table. SELECT * FROM Produc","output":"SELECT AVG(Price) FROM Products;"},{"instruction":"Explain B-Tree data structure.","output":"B-trees are a kind of self-balancing search tree data structure. They are frequently used in databases, file systems, and operating systems. A B-tree consists of a root node, internal nodes, and leaf nodes. The root may or may not have values associated with it. Internal nodes store values and pointers to subtrees to the left and right. Leaf nodes store the actual data. The keys in B-trees are usually sorted. As data is added or deleted, the tree self-balances to maintain order, making searching and inserting items efficient. B-trees are optimal for systems with slow or limited seek times (such as hard drives), while other data structures like binary search trees are better suited for systems with faster seek times."},{"instruction":"Describe the Divide-and-Conquer algorithm.","output":"The Divide-and-Conquer algorithm is a generic algorithmic technique used to solve problems by breaking down the problem into smaller sub-problems, solving each sub-problem, and combining the results. This technique can be applied to a wide variety of problems (such as sorting and matrix multiplication). The basic steps of the Divide-and-Conquer algorithm involves dividing the problem into subproblems, typically in the form of a recursive approach. Then, each subproblem is solved using a similar approach until the subproblems become so small they can be easily solved directly. Then, the solutions to the subproblems are combined to give the solution to the original problem."},{"instruction":"Create a linked list of 5 integers.","output":"class Node {   int data;   Node next;   Node(int data) {      this.data = data;      next = null;   } } class LinkedList {   Node head;   public void insertNode(int data) {      Node new_node = new Node(data);      if (head == null) {          head = new_node;         return;     }     Node last = head;       while (last.next != null) {         last = last.next;     }     last.next = new_node;    }  } LinkedList list = new LinkedList(); list.insertNode(2); list.insertNode(6); list.insertNode(7); list.insertNode(8); list.insertNode(10);"},{"instruction":"Edit the following code to make the function return the value of n mod m. int modulo(int n, int m) {     return n / m; }","output":"int modulo(int n, int m) {     return n % m; }"},{"instruction":"Explain in simple terms what regular expressions are.","output":"Regular expressions are a way of describing patterns of text. They provide a powerful language for matching strings and text within strings. Regular expressions are often used in search engines to find information that matches a certain pattern. They can also be used to validate user input and make sure it meets certain criteria. For example, a regular expression can be used to ensure that a user's password is between 6 and 10 characters long and contains at least one number."},{"instruction":"Write a CSS selector to select all elements of the class \\"title\\".","output":".title { }"},{"instruction":"Describe the sorting algorithm Bubble Sort.","output":"Bubble sort is an algorithm for sorting a collection of items. It iterates over the collection and compares adjacent items, swapping them if they are out of order. This step is repeated until all items are sorted. Bubble sort has a time complexity of O(n^2), making it a slow sorting algorithm. It is still often used as it is simple to implement and requires little memory."},{"instruction":"Explain what an API is.","output":"An API (Application Programming Interface) is a set of functions and protocols that allow different components of a computer system to interact and communicate with each other. An API defines the types of calls or requests that can be made, how to make them, the data formats that should be used, the conventions to follow, etc. An API also defines how two or more systems can interact and exchange data through different programs. APIs are used in many web-based services, such as web-mappings, social networking, and online games."},{"instruction":"mplement a function which adds two numbers in Rust.","output":"fn add(x: i32, y: i32) -> i32 {  return x + y; }"},{"instruction":"Sort the following items in O(n log n) time complexity. [2, 5, 4, 3, 9]","output":"[2, 3, 4, 5, 9]"},{"instruction":"Generate a random sequence of letters containing 5 characters without repeating a character.","output":"XUBHJ"},{"instruction":"dentify all cities in the provided Geojson collection. {   \\"type\\": \\"FeatureCollection\\",   \\"features\\": [{     \\"type\\": \\"Feature\\",     \\"geometry\\": {       \\"type\\": \\"Point\\",       \\"coordinates\\": [-107.3334701, 43.0545076]     },     \\"properties\\": {       \\"name\\": \\"Cheyenne\\"     }   }, {     \\"type\\": \\"Feature\\",     \\"geometry\\": {       \\"type\\": \\"Point\\",       \\"coordinates\\": [-104.9902504, 39.7392357]     },     \\"properties\\": {       \\"name\\": \\"Denver\\"     }   }, {     \\"type\\": \\"Feature\\",     \\"geometry\\": {       \\"type\\": \\"Point\\",       \\"coordinates\\": [-111.831483, 43.0937303]     },     \\"properties\\": {       \\"name\\": \\"Boise\\"     }   }] }","output":"Cheyenne, Denver, Boise."},{"instruction":"Scale up the following backend service using Kubernetes. service.yaml apiVersion: v1 kind: Service metadata:   name: my-service spec:   ports:   - port: 8080","output":"apiVersion: v1 kind: Service metadata:   name: my-service   labels:     app: my-service spec:   replicas: 3   ports:   - port: 8080   selector:     app: my-service   type: NodePort --- apiVersion: apps/v1 kind: Deployment metadata:   name: my-service spec:   selector:     matchLabels:       app: my-service   replicas: 3   template:     metadata:       labels:         app: my-service     spec:       containers:         - name: my-service           image: my-service:v1           resources:             requests:               cpu: 500m               memory: 1Gi           env:             - name: NODE_ENV               value: production           ports:             - containerPort: 8080 --- apiVersion: v1 kind: Service metadata:   name: my-service-lb   labels:     app: my-service spec:   type: NodePort   ports:   - port: 8080     nodePort: 30008   selector:     app: my-service"},{"instruction":"Add a feature to the following code that prints the current date and time. def hello_world():     print(\\"Hello world!\\")","output":"import datetime def hello_world():     print(\\"Hello world!\\")     now = datetime.datetime.now()     print(now.strftime(\\"%Y-%m-%d %H:%M:%S\\"))"},{"instruction":"Create an API endpoint for the following model. class Comment(models.Model):     user = models.ForeignKey(User, on_delete=models.CASCADE)     content = models.TextField()     created_at = models.DateTimeField(auto_now_add=True)     updated_at = models.DateTimeField(auto_now=True)","output":"from django.http import JsonResponse def comments_list(request):     if request.method == 'GET':         comments = Comment.objects.all()         comments_list = [{             'id': comment.id,             'user': comment.user.username,                        'content': comment.content,             'created_at': comment.created_at,             'updated_at': comment.updated_at         } for comment in comments]         return JsonResponse(comments_list, safe=False)"},{"instruction":"Given a list of numbers, write a Python program to find the maximum and minimum number. [4, 7, -2, 11, 9]","output":"Maximum Number = 11 Minimum Number = -2"},{"instruction":"Design a function to filter words based on give characters. characters = \\"aeiou\\" words = ['apple','elephant','mountain','river']","output":"def filter_words(characters, words):     result = []     for word in words:         if set(characters).issubset(word):             result.append(word)     return result print(filter_words(\\"aeiou\\", ['apple','elephant','mountain','river'])) # Output: ['apple', 'elephant', 'river']"},{"instruction":"Create a dictionary containing the count of each word in the sentence. sentence = \\"the quick brown fox jumps over the lazy dog","output":"def count_words(sentence):     words = sentence.split()     word_count = {}     for word in words:         if word in word_count.keys():             word_count[word] += 1         else:             word_count[word] = 1     return word_count print(count_words(\\"the quick brown fox jumps over the lazy dog\\")) # Output: {'the': 2, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 1}"},{"instruction":"Create a list containing the number of characters in each word of the sentence. sentence = \\"the quick brown fox jumps over the lazy dog","output":"def count_characters_per_word(sentence):     words = sentence.split(' ')      char_count_per_word = []      for word in words:         char_count_per_word.append(len(word))      return char_count_per_word print(count_characters_per_word(\\"the quick brown fox jumps over the lazy dog\\")) # Output: [3, 5, 5, 3, 5, 3, 4, 3]"},{"instruction":"Formulate a statement using Python that will return the value 'True' when the user's age is equal to 21. userage = 21","output":"if userage == 21:     print(True)"},{"instruction":"Compute the sum of two numbers, 5 and 7, using Scala","output":"val sum = 5 + 7 println(sum)"},{"instruction":"Explain what Node.js is","output":"Node.js is an open source, cross-platform JavaScript runtime environment used for developing server-side applications. It uses an event-driven, non-blocking I/O model and works on a single-threaded asynchronous model. It is designed to allow developers to build scalable network applications."},{"instruction":"Create a function that takes two strings, s1 and s2, and checks to see if s2 is a substring of s1 s1 = \\"Hello World\\" s2 = \\"Hello","output":"def isSubstring(s1, s2):      if s2 in s1:          return True     else:          return False"},{"instruction":"Create a for loop in Python that traverse a list and prints out every second element lst = [1,2,3,4,5]","output":"for i in range(0, len(lst), 2):     print(lst[i])"},{"instruction":"Write an SQL query for finding all books with the title “The Great Gatsby”.","output":"SELECT *  FROM BOOKS WHERE Title = 'The Great Gatsby'"},{"instruction":"Write a query in MySQL to delete all rows with a given ID.","output":"DELETE FROM table_name  WHERE ID = 'given_id';"},{"instruction":"Write a procedure in PL/SQL to find the sum of numbers from 1 to 10.","output":"create or replace procedure addNums(sum OUT NUMBER) begin   sum := 0;   for i in 1 .. 10 loop     sum := sum + i;   end loop;  end addNums;"},{"instruction":"Create a SQL query to find the customer with the last name \\"Smith\\".","output":"SELECT * FROM customers WHERE last_name = 'Smith';"},{"instruction":"Create an array of 10 numbers in Python with values from 0 to 9.","output":"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"},{"instruction":"Create a class in Python with the attributes name and age.","output":"class Person:     def __init__(self, name, age):         self.name = name         self.age = age"},{"instruction":"Assign the value 2 to the variable x in Java.","output":"int x = 2;"},{"instruction":"Write a CSS selector to select an element with the id \\"example\\".","output":"#example { ... }"},{"instruction":"Create a package in R called \\"myPackage\\" and save it in your current directory.","output":"devtools::create(\\"myPackage\\", path=getwd())"},{"instruction":"Launch an instance of an Amazon EC2 machine.","output":"aws ec2 run-instances --image-id <AMI-id> --instance-type <instance-type>  --key-name <keyname> --security-group-ids <security-group-ids>"},{"instruction":"Find the 2 smallest elements in a Python list of integers. [2, 3, 5, 8, 4, 9, 11]","output":"min1, min2 = list[0], list[1] for num in list:     if num < min1:         min2 = min1         min1 = num     elif num < min2:         min2 = num"},{"instruction":"For a given list of numbers, write a palindrome checker. sample = [1, 2, 3, 4, 5, 4, 3, 2, 1]","output":"def is_palindrome(sample):     res = True     i = 0     j = len(sample) - 1     while i < j:         if sample[i] != sample[j]:             res = False             break         else:             i += 1             j -= 1                  return res"},{"instruction":"Create a matrix of 5 x 4 and set the values to 0.","output":"# create a matrix of 5 x 4 matrix = [[0 for x in range(4)] for y in range(5)]"},{"instruction":"Using a recursive algorithm, reverse the order of elements in a list. arr = [1, 2, 3, 4, 5]","output":"# recursive approach def recursive_reverse(arr, length):     if length == 0:         return     recursive_reverse(arr, length - 1)     arr.append(arr[length - 1])     arr.pop(length - 1)      # call function on the data recursive_reverse(arr, len(arr))"},{"instruction":"Write a for loop to multiply two numbers and print the result. a = 5 b = 6","output":"# multiply two numbers and print the result for i in range(b):     a *= b      print(a)"},{"instruction":"Add an 'except' statement to the following python code to prevent a ValueError. a = 5 b = 0 try:     c = a / b","output":"a = 5 b = 0 try:     c = a / b except ZeroDivisionError:     print(\\"b cannot be zero\\")"},{"instruction":"Construct a for loop to check for prime numbers up to a given number. n = 20","output":"# construct a for loop to check for prime numbers up to 20 for num in range(2, n+1):     isPrime = True          for i in range(2, num):         if (num % i == 0):             isPrime = False             break     if isPrime:         print(num, \\" is a prime number\\")"},{"instruction":"Write a lambda expression that multiplies the argument by two.","output":"# construct a lambda that multiplies the argument by two func = lambda x : x * 2"},{"instruction":"Create a dictionary to store 'name' and 'age' as the keys and print the dictionary.","output":"# create a dictionary dict = {\\"name\\": \\"John\\", \\"age\\": 30} # print the dictionary print(dict)"},{"instruction":"Generate a unique ID for a given string. s = \\"Hello World","output":"# generate a unqiue ID for the given string import uuid     # string  string = \\"Hello World\\"    # printing the original string  print(\\"The original string is : \\" + string)     # generating the unique ID  string_id = uuid.uuid4()     # printing the unique ID  print(\\"The unique id for given string is : \\", string_id)"},{"instruction":"Using a dictionary comprehension, select the keys that start with a specific letter. d = {'cat' : 1, 'dog' : 2, 'mouse' : 3}","output":"# select the keys that start with 'c' dict = {k: v for k, v in d.items() if k.startswith('c')}"},{"instruction":"Print the output of the following loop. for i in range(6):     print(i)","output":"# print the output of the loop for i in range(6):     print(i)      # output of the loop 0 1 2 3 4 5"},{"instruction":"Use a built-in Python method to print the contents of a list in reverse order. arr = [1, 2, 3, 4]","output":"# use a built-in python method to print the list in reverse order arr.reverse() # using the list reverse method print(arr)"},{"instruction":"Create an array using the given comma separated numbers, convert the array into a string, and then print the string. 6,4,8","output":"arr = [6,4,8] str = ', '.join(map(str, arr)) print(str) # Output: 6, 4, 8"},{"instruction":"Create a structure for a student in C.","output":"struct student {     char name[100];     int age;     char address[100]; };"},{"instruction":"Calculate the distance of two points located in the 3-dimensional space. Point 1: (3, 4, 5) Point 2: (2, 6, -1)","output":"The distance between the two points is 6.244997998398398."},{"instruction":"Create a function that takes an array of string elements and sorts them in alphabetical order. [\\"apple\\", \\"banana\\", \\"papaya\\", \\"kiwi\\"]","output":"def sortStringArray(stringArray):      return sorted(stringArray)"},{"instruction":"Create an HTML page with two columns and a tabular structure showing the employee salaries.","output":"<!DOCTYPE html> <html> <head>   <title>Employee Salaries</title> </head> <body>   <table>     <tr>         <th>Employee Name</th>         <th>Salary</th>     </tr>     <tr>         <td>John Smith</td>         <td>22,000</td>     </tr>     <tr>         <td>Jane Doe</td>         <td>21,000</td>     </tr>     <tr>         <td>Joseph Brown</td>         <td>25,000</td>     </tr>   </table> </body> </html>"},{"instruction":"Write a PHP function to print out multiplication table between two numbers. x = 3 y = 5","output":"<?php function print_multiplication_table(x, y)  {      for(i = 1; i <= x; i++)      {          echo \\"<br>\\";          for(j = 1; j <= y; j++)          {              echo i*j.\\" \\";          }      }  }  echo print_multiplication_table(3, 5); ?>"},{"instruction":"Write a Python code to search for a given keyword in a dictionary. dictionary = {     “Car”: “A vehicle with four wheels”,     “Laptop”: “A computer for personal use”,     “Game”: “An activity for entertainment”     }","output":"def search(dic, keyword):     for key, value in dic.items():         if keyword in key:             return value     return \\"No matching keyword found!\\" search(dictionary, 'Laptop')"},{"instruction":"Create an array of 3 strings and print it.","output":"myArray = [\\"Hello\\", \\"World\\", \\"!\\"] print (myArray)"},{"instruction":"Create a C program to check if two string are equal or not. string1 = \\"Hello\\"; string2 = \\"Hello\\";","output":"#include <stdio.h> #include <stdbool.h> bool isEqual(char* str1, char* str2)  {      int i;      for (i = 0; str1[i] != '0' && str2[i] != '0'; i++)          if (str1[i] != str2[i])              return false;         return (str1[i] == '0' && str2[i] == '0');  }  int main()  {     char string1[] = \\"hello\\";     char string2[] = \\"hello\\";       if (isEqual(string1, string2) == true)          printf(\\"Strings are equal\\");      else         printf(\\"Strings are not equal\\");         return 0;  }"},{"instruction":"Write a query to return all the names of the tables in a database.","output":"SELECT table_name  FROM information_schema.tables"},{"instruction":"Generate a query to get the first 10 rows from the given table. Table name: \\"user","output":"SELECT *  FROM users  LIMIT 10;"},{"instruction":"Create an API to return the average age of the users in the given database. Database name: \\"users_database","output":"@app.route('/users/avg_age', methods=['GET']) def get_avg_age():     connection = sqlite3.connect(\\"users_database.db\\")     cursor = connection.cursor()     query = \\"SELECT AVG(age) from users;\\"     cursor.execute(query)     result = cursor.fetchall()     return json.dumps({\\"avg_age\\": result[0][0]})"},{"instruction":"Write Angular code to bind a variable to the HTML view.","output":"<div>    {{my_variable}} </div>"},{"instruction":"Create a React component that renders the current date.","output":"import React from 'react';   class DateComponent extends React.Component {   render() {     const date = new Date();       return (       <div>         {date.toString()}       </div>     );   } }"},{"instruction":"Write a regex pattern to match words that begin with \\"cat\\".","output":"^catw*"},{"instruction":"Write a query to return the total number of records in the given database. Database name: \\"users_database","output":"SELECT COUNT(*)  FROM users_database;"},{"instruction":"Using the given NumPy array, print out all the elements that are greater than 5. import numpy as np arr = np.array([4, 6, 2, 8, 0, 7, 5])","output":"import numpy as np arr = np.array([4, 6, 2, 8, 0, 7, 5]) print(\\"Elements greater than 5:\\") for element in arr:  if element > 5:  print(element)"},{"instruction":"Using the given JSON string, extract the title field, and assign it to a variable. var jsonStr = '{\\"title\\":\\"My book\\",\\"author\\":\\"John Smith\\"}';","output":"var jsonStr = '{\\"title\\":\\"My book\\",\\"author\\":\\"John Smith\\"}'; var title; try {     // parse the JSON string     var jsonObj = JSON.parse(jsonStr);     // get the title and assign to variable     title = jsonObj.title; } catch (error) {     console.log(error); } console.log(title); // Output: My book"},{"instruction":"Create a Java program that asks the user to input a string and prints out its upper-case version.","output":"import java.util.Scanner;   class UpperCaseString {     public static void main(String[] args) {           Scanner scanner = new Scanner(System.in);         System.out.print(\\"Please enter a string: \\");                 String input = scanner.nextLine();                 System.out.println(\\"The upper-case version of this string is: \\" + input.toUpperCase());     } }"},{"instruction":"Create a SQL statement that generates the total profit made by each salesperson over the year. SELECT salesperson_name, SUM(profit) FROM sales GROUP BY salesperson_name","output":"SELECT salesperson_name, SUM(profit) AS total_profit FROM sales GROUP BY salesperson_name;"},{"instruction":"Using the code provided, write a regular expression pieces of code that validates an email address.","output":"let regex = /^(([^<>()[].,;:s@\\"]+(.[^<>()[].,;:s@\\"]+)*)|(\\".+\\"))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))/;"},{"instruction":"Using the code provided, write a JavaScript function to compare two numbers and return the larger one.","output":"const compareNumbers = (num1, num2) => {     if (num1 > num2) {         return num1;     } else {         return num2;     } }"},{"instruction":"Edit the given code to generate an Array of all the numbers between 1 and 15.","output":"let myArray = []; for (let i = 1; i<= 15; i++) {   myArray.push(i); }"},{"instruction":"Rewrite the code such that it uses thread-safe code and prevents race conditions. int x = 0;    //This is the Thread Task void increment(){      x++;  }","output":"#include <atomic> std::atomic_int x = 0; // This is the Thread Task  void increment() {      x.fetch_add(1);  }"},{"instruction":"Modify the code to remove the duplicate elements from the given array. [5, 4, 5, 3, 2, 3, 1]","output":"let myArray = [5, 4, 5, 3, 2, 3, 1]; let uniqueArray = [];     myArray.forEach((item) => {      if (uniqueArray.indexOf(item) === -1) {          uniqueArray.push(item);      }  });"},{"instruction":"Using the code provided, write a JavaScript function that checks if a given number is prime or not.","output":"const isPrime = (number) => {   if (number <= 1) {     return false;   }   for (let i = 2; i <= (number / 2); i++){     if (number % i === 0) {       return false;     }   }   return true; }"},{"instruction":"Write a python to convert an IP address from dot-decimal notation to binary notation. 192.168.1.1","output":"def convert_ip_address(ip_address):     \\"\\"\\"     Convert IP address from dot-decimal notation (e.g. 192.168.1.1) to binary.     \\"\\"\\"     # Split the IP address in octets     octets = ip_address.split('.')          # Convert each octet to binary     binary_octets = [bin(int(numeric_octet))[2:].zfill(8) for numeric_octet in octets]          # Join the binary octets and return the IP address in binary notation     return ''.join(binary_octets) if __name__ == '__main__':     ip_address = '192.168.1.1'     print(convert_ip_address(ip_address))"},{"instruction":"Create an SQL query that sums all the numbers from the 'number' column in the table 'test_data'? Table Name: test_data Columns: number","output":"SELECT SUM(number) FROM test_data;"},{"instruction":"Write a code to output the cosine similarity between two vectors. vector1 = [1, 2, 3] vector2 = [4, 5, 6]","output":"import numpy as np def cosine_similarity(vector1, vector2):          # normalize the vectors     v1 = np.array(vector1)/np.linalg.norm(vector1)     v2 = np.array(vector2)/np.linalg.norm(vector2)          # calculate cosine similarity     return np.dot(v1, v2)       if __name__ == '__main__':     vector1 = [1, 2, 3]     vector2 = [4, 5, 6]     print(cosine_similarity(vector1, vector2))"},{"instruction":"Replace the comment in the code with a line of code that prints the index of the maximum value in the list. list_a = [5, 8, 3, 6, 9]","output":"list_a = [5, 8, 3, 6, 9] # TODO: replace the comment with a line of code that prints the index of the maximum value in the list print(list_a.index(max(list_a)))"},{"instruction":"Write a code to generate a list with the first 20 Fibonacci numbers.","output":"def fibonacci(n):     \\"\\"\\"     Generate a list with the first n Fibonacci numbers.     \\"\\"\\"     fib_list = [0, 1]     # Generate the list and stop when n is reached     while len(fib_list) < n:         fib_list.append(fib_list[-1] + fib_list[-2])          return fib_list if __name__ == '__main__':     print(fibonacci(20))"},{"instruction":"Using numpy, write a code to multiply matrix A and B together matrix A: [[1, 2], [3, 4]] matrix B: [[5, 6], [7, 8]]","output":"import numpy as np def matrix_multiply(A, B):     \\"\\"\\"     Multiply matrix A and B using numpy     \\"\\"\\"     # Convert the matrices to numpy arrays     A = np.array(A)     B = np.array(B)          # Multiply the matrices     C = np.dot(A, B)          return C if __name__ == '__main__':     # example matrices     A = [[1, 2], [3, 4]]     B = [[5, 6], [7, 8]]      print(matrix_multiply(A, B))"},{"instruction":"Using regular expression, write a code to extract words that start with a specific letter from a given string. string = \\"This is a test sentence\\" letter = \\"","output":"import re def extract_words(string, letter):     \\"\\"\\"     Extract words that start with a specific letter from a given string     \\"\\"\\"     # Use a regular expression to match words that start with the letter     pattern = r\\"b\\" + letter + r\\"w*b\\"     words = re.findall(pattern, string)         return words if __name__ == '__main__':     string = \\"This is a test sentence\\"     letter = \\"t\\"     print(extract_words(string, letter))"},{"instruction":"Add an else clause to the following if statement. if cond:     print(\\"true\\")","output":"if cond:     print(\\"true\\") else:     print(\\"false\\")"},{"instruction":"Take in a string and return true if it is a valid IPv4 address. 127.0.0.1","output":"true"},{"instruction":"put a string with parameters and return an updated string that replaces each parameter with its corresponding value. \\"The number is {x}","output":"\\"The number is 4\\""},{"instruction":"Take in an array of integers and return the sum of all odd numbers. [1,2,3,4,5]","output":"9"},{"instruction":"Parse a given input of timestamp and convert it to a datetime object in python. 1552520802","output":"datetime.datetime(2019, 3, 12, 17, 33, 22)"},{"instruction":"Take in a string and return an output where every second character of the input string is capitalized. 'apple'","output":"'ApPlE'"},{"instruction":"Write a set of if-else statements to convert numerical grade 1-100 to their letter grade equivalent.","output":"if grade >= 90:   letter_grade = 'A' elif grade >= 80:   letter_grade = 'B' elif grade >= 70:   letter_grade = 'C' elif grade >= 60:   letter_grade = 'D' else:   letter_grade = 'F'"},{"instruction":"Take in a JSON string and convert it into a valid Python 3 dictionary. '{\\"name\\": \\"john\\", \\"age\\": 32}'","output":"{'name': 'john', 'age': 32}"},{"instruction":"Take in a list of integers and return true if any of the numbers in the list are prime numbers. [2, 3, 5, 7]","output":"true"},{"instruction":"Create a function to return all possible sums of two numbers.","output":"def two_num_sums(nums):     \\"\\"\\"Returns a list of all possible sums of two numbers from nums.\\"\\"\\"     combinations = []     for i in range(len(nums)-1):         for j in range(i+1, len(nums)):             combination = nums[i]+nums[j]             combinations.append(combination)     return combinations"},{"instruction":"Rewrite the code to be efficient and use less lines of code. def count_letters(string_name):     letter_count = 0     for x in string_name:         letter_count = letter_count + 1     return letter_cou","output":"def count_letters(string_name):     return len(string_name)"},{"instruction":"Write a shell script that checks if a directory exists and creates it if it doesn’t.","output":"#!/bin/bash FILE=\\"/my/path/directory\\" if [ ! -d FILE ]; then   mkdir -p FILE fi"},{"instruction":"Design a C# program to print the sum of the series: 1 + 1/2 + 1/3 + ….","output":"using System; public class SumOfSeries {     public static double SumSeries(int terms) {          double total = 0;          for (int i = 1; i <= terms; i++) {              total += ((double)1/i);          }          return total;      }  }"},{"instruction":"mplement quicksort algorithm in Python for a list of integers. [4, 2, 5, 3, 1]","output":"def quicksort(arr): \\tif len(arr) <= 1: \\t\\treturn arr \\tpivot = arr[len(arr) // 2] \\tleft = [x for x in arr if x < pivot] \\tmiddle = [x for x in arr if x == pivot] \\tright = [x for x in arr if x > pivot] \\treturn quicksort(left) + middle + quicksort(right)"},{"instruction":"Create a form element in HTML and also include a submit button.","output":"<form>    <input type=\\"text\\" name=\\"name\\">   <button type=\\"submit\\">Submit</button>  </form>"},{"instruction":"Using a switch-case statement, calculate the grade for the student using the percentage in the input. Student percentage: 80","output":"switch(percentage) {   case (percentage >= 90):     grade = 'A';     break;   case (percentage >= 80):     grade = 'B';     break;   case (percentage >= 70):     grade = 'C';     break;   case (percentage >= 60):     grade = 'D';     break;   case (percentage < 60):     grade = 'F';     break;   default:     grade = 'Invalid';     break; }"},{"instruction":"Write a function in Java which takes integer array and a number as input and prints all the pairs which sum up to given number. Integer Array: [2, 7, 5, 3, 8]   Number: 10","output":"public void findPairs(int[] arr,int num)  {     for (int i = 0; i < arr.length; i++) {          for (int j = i+1; j < arr.length; j++) {              if (arr[i] + arr[j] == num)              System.out.println(arr[i] + \\" + \\" + arr[j] +\\" = \\"+num);         }      }  }"},{"instruction":"Create an array in C++ and initialize it with 5 integer values.","output":"int array[5] = {1, 2, 3, 4, 5};"},{"instruction":"Classify the following string using Regular Expressions. Hello World","output":"w+ w+"},{"instruction":"w can you print “Hello World” to your console using JavaScript?","output":"console.log(\\"Hello World\\");"},{"instruction":"Write a Java program to iterate through a HashMap.","output":"import java.util.HashMap;  import java.util.Map;     public class Main {      public static void main (String[] args)      {          // Creating a HashMap          Map<String, Integer> hash_map = new HashMap<String, Integer>();             // Mapping int values to string keys          hash_map.put(\\"Geeks\\", 10);          hash_map.put(\\"4\\", 15);          hash_map.put(\\"Geeks\\", 20);          hash_map.put(\\"Welcomes\\", 25);          hash_map.put(\\"You\\", 30);             // Displaying the HashMap          for (Map.Entry mapElement : hash_map.entrySet()) {              String key = (String)mapElement.getKey();              int value = (int)mapElement.getValue();              System.out.println(\\"Key: \\" + key + \\"t Value: \\" + value);          }      }  }"},{"instruction":"Edit the following array in JavaScript so that all the strings are in uppercase. let array = ['cat', 'dog', 'fish'];","output":"let array = ['CAT', 'DOG', 'FISH'];"},{"instruction":"Write a SQL query to select an employee with a specific Id.","output":"SELECT *  FROM Employees  WHERE Id = '123456';"},{"instruction":"Write a JavaScript function that takes two parameters and compares them.","output":"function compareValues (parameter1, parameter2) {     if (parameter1 > parameter2) {        return 1;     }     else if (parameter1 < parameter2) {         return -1;     }     else {         return 0;     } }"},{"instruction":"Generate the Fibonacci sequence using a for loop in Python.","output":"def generateFibonacciSequence(n):     fib_sequence = [0,1]     for i in range(2,n):         fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])              return fib_sequence"},{"instruction":"Using PHP, how can you print the JavaScript code that displays an alert message with the text “Hello World”?","output":"echo \\"<script>alert('Hello World');<\/script>\\";"},{"instruction":"Create a JavaScript function to generate a random number between a user-entered minimum and maximum values.","output":"function getRandomNumber(min, max) {     return Math.random() * (max - min) + min; }"},{"instruction":"Reverse a string of characters and words. Hello World","output":"dlroW olleH"},{"instruction":"Construct a SQL query to select all the records from a table where the last_name column begins with 'A'.","output":"SELECT * FROM table_name WHERE last_name LIKE 'A%';"},{"instruction":"Write a python program that takes in two input strings and checks if the second string is an anagram of the first one. silent, liste","output":"def anagram_check (str1, str2):      if(sorted(str1)== sorted(str2)):          print(\\"The strings are anagrams.\\")       else:          print(\\"The strings aren't anagrams.\\")          # Driver code  str1 = \\"silent\\" str2 = \\"listen\\" anagram_check(str1, str2)"},{"instruction":"Write a JavaScript program to simulate a rock, paper, scissors between 2 players.","output":"let player1 = Math.floor(Math.random() * 3) + 1; let player2 = Math.floor(Math.random() * 3) + 1; if (player1 === player2) {   console.log('Draw!'); } else if (player1 === 1 && player2 === 3) {   console.log('Player 1 wins!'); } else if (player1 === 2 && player2 === 1) {   console.log('Player 1 wins!'); } else if (player1 === 3 && player2 === 2) {   console.log('Player 1 wins!'); } else {   console.log('Player 2 wins!'); }"},{"instruction":"Edit the following code to ensure that the conditions in the if-else statement are met. if (x == 2 && y == 2) {    console.log(\\"x equals y\\"); }","output":"if (x == 2 && y == 2) {    console.log(\\"x equals y\\"); } else if (x != 2 && y != 2) {    console.log(\\"x does not equal y\\"); }"},{"instruction":"Write a SQL query to find the average rating of a movie having the title \\"The Godfather\\".","output":"SELECT AVG(rating) FROM movie WHERE title = 'The Godfather';"},{"instruction":"Create a regular expression to match strings containing two consecutive symbols \\"#\\" followed by four alphabetic characters.","output":"/#[a-zA-Z]{4}/"},{"instruction":"Using the comments as a guide, fill in the blanks with code where applicable to make the function jumbledLetters() work. def jumbledLetters(word):     \\"\\"\\"Returns a randomly jumbled version of the given word.\\"\\"\\"     new_word = \\"\\"     for letter in word:         #__TODO__ use the random module to generate a number between 0 and the length of the word         num = ____          #__TODO__ add the letter to the string \`new_word\` using the \`num\` generated in the previous step         ____      return new_word","output":"def jumbledLetters(word):     \\"\\"\\"Returns a randomly jumbled version of the given word.\\"\\"\\"     new_word = \\"\\"     for letter in word:         #__TODO__ use the random module to generate a number between 0 and the length of the word         num = random.randint(0, len(word)-1)         #__TODO__ add the letter to the string \`new_word\` using the \`num\` generated in the previous step         new_word += word[num]     return new_word"},{"instruction":"Suppose you have an array of numbers like [2,5,3,7] and you have to find the sum of the elements of the array. Write a JavaScript program for this.","output":"function sumArray(arr) {   let sum = 0;   arr.forEach(element => {     sum += element;   });   return sum; }"},{"instruction":"Make an executable Bash shell script to print the factorial of a given number.","output":"#!/bin/bash # Print factorial of a given number echo \\"Please enter a number:\\" read num factorial=1 for (( i=1; i<=num; i++ )) do     factorial=[ factorial * i ] done echo \\"num!=factorial\\""},{"instruction":"Write a CSS class to set the background of a div to blue and the font size to 12px.","output":".blueDiv {   background-color: blue;   font-size: 12px; }"},{"instruction":"Write a Ruby script that given two numbers, finds the greatest common factor (GCF) of them.","output":"def gcf(num1, num2)   gcf = 1   x = [num1, num2].min   (1..x).each do |i|     if num1 % i == 0 && num2 % i == 0       gcf = i      end   end   return gcf end"},{"instruction":"Write a Bash script that takes a filename as input and prints its details such as ownership, permissions, group, filesize, etc.","output":"#!/bin/bash # Check a file's details such as ownership, permissions, # group, filesize, etc. echo \\"Enter filename: \\" read filename echo \\"Filename: filename\\" echo \\"Owner: (ls -l filename | awk '{ print 3 }')\\" echo \\"Group: (ls -l filename | awk '{ print 4 }')\\" echo \\"Permissions: (ls -l filename | awk '{ print 1 }')\\" echo \\"Filesize: (ls -l filename | awk '{ print 5 }')\\""},{"instruction":"Create a table with two columns that stores a username and a password.","output":"CREATE TABLE users (     username VARCHAR(50) NOT NULL PRIMARY KEY,     password VARCHAR(50) NOT NULL );"},{"instruction":"Develop a custom API endpoint for an online store using Node.js.","output":"const express = require(\\"express\\"); const router = express.Router(); router.get(\\"/store/:productId\\", (req, res, next) => {     const productId = req.params.productId;     // Fetch product data from the database.     // Return the product data      res.status(200).json(data); }); module.exports = router;"},{"instruction":"Create a visualization in Matplotlib to display sales figures over the last 6 months.","output":"import matplotlib.pyplot as plt import numpy as np   months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'] sales = [40000, 42000, 46000, 50000, 60000, 63000]   fig, ax = plt.subplots() ax.plot(months, sales, marker='o') ax.set_title('Monthly Sales') ax.set_xlabel('Month') ax.set_ylabel('Sales ()') ax.set_ylim(0, max(sales) + 5000)   plt.show()"},{"instruction":"Develop a class in Ruby that calculates the area of a circle.","output":"class Circle   def initialize(r)     @r = r   end     def area     @r*@r*Math::PI   end end"},{"instruction":"Construct a MongoDB query to retrieve all documents where the field 'name' contains the letter 'y'.","output":"db.collection.find({     \\"name\\": {         \\"regex\\": /.*y.*/i     } })"},{"instruction":"Write a SQL query to list the names and ages of all students aged 18 or under.","output":"SELECT name, age FROM students WHERE age <= 18"},{"instruction":"Write a SQL query to get the top 5 employees with the highest salary in the company.","output":"SELECT *  FROM Employees  ORDER BY Salary DESC  LIMIT 5;"},{"instruction":"Generate a unique ID of 8 characters in C#.","output":"public static string GenerateUniqueID()  {      StringBuilder sb = new StringBuilder();         //generate 8 characters       for (int i = 1; i <= 8; i++)       {          // append a character between a and z           sb.Append((char)('a' + (char)(new Random().Next(0, 26))));     }     return sb.ToString(); }"},{"instruction":"Parse the following JSON string in Python. {\\"name\\":\\"John\\",\\"age\\":30,\\"city\\":\\"New York\\"}","output":"import json data = '{\\"name\\":\\"John\\", \\"age\\":30, \\"city\\":\\"New York\\"}' # parse the JSON string parsed_string = json.loads(data)  # print the individual elements name = parsed_string[\\"name\\"] age = parsed_string[\\"age\\"] city = parsed_string[\\"city\\"] print(name) print(age) print(city)"},{"instruction":"Change the HTML structure above to set the title and content language to Italian.","output":"<!DOCTYPE html> <html lang=\\"it\\"> <head>     <meta charset=\\"UTF-8\\">     <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">     <title>La mia prima pagina web</title> </head> <body> </body> </html>"},{"instruction":"ject a variable in a Python script, named \\"greeting_message\\" with the value \\"hello world","output":"greeting_message = \\"hello world\\""},{"instruction":"Create a program in JavaScript that calendarizes the upcoming week based on the current date.","output":"const days = [\\"Sunday\\", \\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\"]; const months = [\\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\", \\"November\\", \\"December\\"]; let currentDate = new Date(); // Get the day of the week and month corresponding to current date let dayOfWeek = days[currentDate.getDay()]; let month = months[currentDate.getMonth()]; let dayOfMonth = currentDate.getDate(); let calendar = [dayOfWeek + \\" - \\" + month + \\" \\" + dayOfMonth] // Generate the dates for the upcoming 6 days for (let dayOffset = 0; dayOffset < 6; dayOffset++) {   let nextDate = new Date(currentDate.getTime() + 86400000 * (dayOffset + 1));   let nextDayOfWeek = days[nextDate.getDay()];   let nextMonth = months[nextDate.getMonth()];   let nextDayOfMonth = nextDate.getDate();   calendar.push(nextDayOfWeek + \\" - \\" + nextMonth + \\" \\" + nextDayOfMonth); } console.log(calendar);"},{"instruction":"Write a regular expression to validate a password  containing at least 8 characters, one uppercase letter, one lowercase letter and a special character.","output":"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#%^&*])[a-zA-Z0-9!@#%^&*]{8,}"},{"instruction":"Construct an array of integers from 1 to 10 in Javascript","output":"let myArray = [1,2,3,4,5,6,7,8,9,10];"},{"instruction":"Create a program in HTML to display a basic table with 3 columns and 2 rows.","output":"<html> <body> <table style=\\"width:100%\\">   <tr>     <th>Firstname</th>     <th>Lastname</th>      <th>Age</th>   </tr>   <tr>     <td>John</td>     <td>Doe</td>      <td>40</td>   </tr>   <tr>     <td>Kathy</td>     <td>Williams</td>      <td>43</td>   </tr> </table> </body> </html>"},{"instruction":"Create a Python script to generate a random password of 8 characters that contains an uppercase letter, a special symbol and a number.","output":"import random import string def generate_random_password():   password = \\"\\"   character_types = string.ascii_letters + string.digits + string.punctuation   length = 8   for _ in range(length):     password += random.choice(character_types)   return password print(generate_random_password())"},{"instruction":"Write recursive function in JavaScript which reverses a given string. My name is Joh","output":"function reverseString(str) {         if (str.length === 0) {             return \\"\\";         }         return reverseString(str.slice(1)) + str[0];     }     console.log(reverseString(\\"My name is John\\"));"},{"instruction":"Construct an SQL query which finds the element in a table. Table name: Users Element: id Value to be found: 3","output":"SELECT * FROM Users WHERE id = 3;"},{"instruction":"Write a HTML fragment that creates a list of hyperlinks of four book titles. The Cat in the Hat, Harry Potter and the Philosopher's Stone, To Kill a Mockingbird, The Great Gatsby","output":"<ul>   <li><a href=\\"#\\">The Cat in the Hat</a></li>   <li><a href=\\"#\\">Harry Potter and the Philosopher's Stone</a></li>   <li><a href=\\"#\\">To Kill a Mockingbird</a></li>   <li><a href=\\"#\\">The Great Gatsby</a></li> </ul>"},{"instruction":"Create a processing sketch that can randomly generate 500 circles.","output":"// Setup a canvas of 500x500 void setup() {   size(500, 500); } // Randomly draw 500 circles in the canvas void draw() {   for (int i=0; i<500; i++) {     float x = random(0, 500);    \\tfloat y = random(0,500);    \\tfloat rand = random(0, 100);    \\tfill(rand, rand, rand); \\tellipse(x, y, 20, 20);   } }"},{"instruction":"Compile and run a C++ program that outputs an integer m multiplied by its square. m = 3","output":"#include <iostream> int main() {    int m = 3;    std::cout << m * m << std::endl;    return 0; } // Compile and run with this command g++ program.cpp -o program ./program"},{"instruction":"Generate a Rust program that prints \\"Hello, World!\\" to the console.","output":"fn main() {     println!(\\"Hello, World!\\"); }"},{"instruction":"mplement a Java program that reads five integers and prints their sum. 5, 8, 12, 1, 4","output":"import java.util.*; public class Main {   public static void main(String[] args) {     Scanner sc = new Scanner(System.in);     int sum = 0;     // Read the integers     for (int i = 0; i < 5; i++) {       int x = sc.nextInt();       sum += x;     }     System.out.println(\\"The sum is \\" + sum);   } }"},{"instruction":"Create an array in C++ with 4 elements.","output":"int arr[4] = {1, 2, 3, 4};"},{"instruction":"mplement a class in C++ that creates a stack.","output":"#include<iostream>  #include<vector>     using namespace std;   // Class to represent a Stack  class Stack  {     // container to store elements      vector<int> v;          public:      void push(int data);      bool empty();      void pop();      int top();  };  void Stack::push(int data)  {      // inserting an element      // on the top of the stack      v.push_back(data);  }  bool Stack::empty()  {      // checking if the stack is empty      return v.size() == 0;  }  void Stack::pop()  {      // removing element      // from the top of the stack      if (!empty())      {          v.pop_back();      }  }  int Stack::top()  {      // returns the top element      // of the stack      return v.back();  }"},{"instruction":"dentify the DOM elements inside an HTML structure given below and log it to the console. <div class=\\"container\\">   <ul>     <li>Item 1</li>     <li>Item 2</li>   </ul> </div>","output":"// Print the elements to the console let domElements = document.querySelectorAll('.container'); domElements.forEach(el => {     console.log(el);     console.log(el.firstChild);     console.log(el.firstChild.firstChild);     console.log(el.firstChild.lastChild); });"},{"instruction":"Write an algorithm to identify below number is prime or not. 7","output":"# Function to check for prime number  def isPrime(n):             # Corner cases      if n <= 1:          return False        # Check from 2 to n-1      for i in range(2, n):          if n % i == 0:              return False        return True # Driver Program  if isPrime(7):     print(\\"YES! It is a prime number\\") else:     print(\\"No! It is not a prime number\\")"},{"instruction":"Write a CSS selector that highlights all the <div> elements with a class name of \\"container\\".","output":"div.container {     background-color: yellow; }"},{"instruction":"Write a regular expression that validates email addresses.","output":"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Za-z]{2,4}"},{"instruction":"Create a MySQL table called \\"orders\\" with the following columns: \\"Order_ID\\", \\"Costumer_Name\\", \\"Product_Name\\", \\"Quantity\\".","output":"CREATE TABLE orders (     Order_ID int PRIMARY KEY,     Costumer_Name varchar(255),     Product_Name varchar(255),     Quantity int );"},{"instruction":"Write a function in Go language that splits a string into three parts based on a specified separator. String to Split: Learn, GPT models Separator: ,","output":"func SplitString(input, separator string) (string, string, string) {     strings := strings.Split(input, separator)     return strings[0], strings[1], strings[2] }"},{"instruction":"Write a SQL query to get the names of all customers who have placed orders from a given store in the last week. Given store name:  \\"ABC Store","output":"SELECT DISTINCT c.name  FROM customer c  INNER JOIN order o  ON c.customer_id = o.customer_id WHERE o.store_name = \\"ABC Store\\" AND o.date_ordered >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"},{"instruction":"Write a function to reverse a given sentence in Python. Given sentence: \\"The quick brown fox jumps over the lazy dog.","output":"def reverse_sentence(sentence):     words = sentence.split()     reversed_words = words[::-1]     reversed_sentence = ' '.join(reversed_words)     return reversed_sentence if __name__ == '__main__':      sentence = \\"The quick brown fox jumps over the lazy dog.\\"     print(reverse_sentence(sentence))"},{"instruction":"w do you connect to a MySQL database in Python?","output":"You can connect to a MySQL database in Python using the mysql.connect() method. The syntax of this method is as follows: mysql.connect(host=\\"localhost\\", user=\\"username\\", password=\\"password\\", database=\\"database_name\\") Once you have successfully connected to the MySQL database, you can run SQL queries or perform other operations."},{"instruction":"Write a SQL query to get the names and salaries of all employees who earn more than 7000.","output":"SELECT e.name, e.salary FROM employee e WHERE e.salary > 7000;"},{"instruction":"w would you access the last element of an array in JavaScript?","output":"You can access the last element of an array in JavaScript by using the array's length property as follows: arr[arr.length - 1]"},{"instruction":"What is the difference between post() and get() in AJAX?","output":"The main difference between post() and get() in AJAX is that post() sends the data in the body of the request and get() sends it in the URL. Post() is generally used to send form data, and can be used for creating or updating data on the server. Get() is usually used for requesting data from the server, and can be used for reading data from the server."},{"instruction":"Create a class in Java that prints \\"Hello World!","output":"class HelloWorld {     public static void main(String[] args) {         System.out.println(\\"Hello World!\\");     } }"},{"instruction":"Given a string, write code to reverse it in JavaScript. String: programming","output":"function reverseString(str) {   let revStr = '';   for (let i = str.length - 1; i >= 0; i--) {     revStr += str[i];   }   return revStr; } console.log(reverseString('programming'));"},{"instruction":"Write a query in SQL to get the top 10 students with the highest scores. Table name: student Columns: name, score","output":"SELECT TOP 10 name, score FROM student ORDER BY score DESC;"},{"instruction":"Given a number as an input, write a code in Java to check if it is an Armstrong number. Number: 153","output":"public class ArmstrongNumber {  \\tpublic static boolean armstrongNumber(int number)  \\t{  \\t\\tint result = 0, originalNumber, remainder;  \\t\\toriginalNumber = number;  \\t\\t// Check if the number is Armstrong number  \\t\\twhile (originalNumber != 0) {  \\t\\t\\tremainder = originalNumber % 10;  \\t\\t\\tresult += Math.pow(remainder, 3);  \\t\\t\\toriginalNumber /= 10;  \\t\\t}  \\t\\tif (result == number)  \\t\\t\\treturn true;  \\t\\telse \\t\\t\\treturn false;  \\t}  \\t\\t \\tpublic static void main(String[] args)  \\t{  \\t\\tint number = 153;  \\t\\tboolean isArmstrong =  \\t\\t\\tarmstrongNumber(number);  \\t\\tif (isArmstrong)  \\t\\t\\tSystem.out.println(number +  \\t\\t\\t\\t\\t\\" is an Armstrong number.\\");  \\t\\telse \\t\\t\\tSystem.out.println(number +  \\t\\t\\t\\t\\t\\" is not an Armstrong number.\\");  \\t}  }"},{"instruction":"Design a class in Python to model a hospital.","output":"class Hospital:     def __init__(self, location, name, rooms, staff):         self.location = location         self.name = name         self.rooms = rooms         self.staff = staff          def get_location(self):         return self.location          def get_name(self):         return self.name          def get_rooms(self):         return self.rooms          def get_staff(self):         return self.staff          def set_location(self, location):         self.location = location          def set_name(self, name):         self.name = name          def set_rooms(self, rooms):         self.rooms = rooms          def set_staff(self, staff):         self.staff = staff"},{"instruction":"Compile this code in C++. #include <iostream>   int main()  {     std::cout << \\"Hello World!\\";     return 0; }","output":"g++ -o hello_world hello_world.cpp"},{"instruction":"Convert this temperature from Kelvin to Celsius in JavaScript. Temperature (K): 298","output":"let tempKelvin = 298; let convertedTemp = tempKelvin - 273.15; console.log(convertedTemp + ' degrees Celsius');"},{"instruction":"Write a query in MySQL that returns all unique values of a given column. Table name: student Column: gender","output":"SELECT DISTINCT gender FROM student;"},{"instruction":"Find the maximum number of left and right parentheses that can be balanced for a given expression. Expression: (()()","output":"The maximum number of left parentheses that can be balanced in the given expression is 3 and the maximum number of right parentheses that can be balanced is 3."},{"instruction":"Write code to iterate through a nested dictionary and return the sum of all values. dictionary = {  'level1': {   'level2a': {    'level3a': 1,    'level3b': 3   },   'level2b': {    'level3a': 4,    'level3b': 5   }  } }","output":"dictionary = {  'level1': {   'level2a': {    'level3a': 1,    'level3b': 3   },   'level2b': {    'level3a': 4,    'level3b': 5   }  } } def iterate_dict(d):     result = 0     for value in d.values():         if type(value) is dict:             result += iterate_dict(value)         else:             result += value     return result print(iterate_dict(dictionary)) # 13"},{"instruction":"Make a single change in the following code to throw an error when the argument to the function is negative. def calculate_square_root(n):     return n**(1/2)","output":"def calculate_square_root(n):     if n < 0:         raise ValueError(\\"n must be a positive number\\")     return n**(1/2)"},{"instruction":"Create a function that takes a list of numbers and identifies the sublists of numbers that add up to a given sum.","output":"def sublist_sum(nums, target):     result = []     current_sum = 0     start = 0     for end in range(len(nums)):         current_sum += nums[end]         while current_sum > target and start < end:             current_sum -= nums[start]             start += 1         if current_sum == target:             result.append(nums[start:end+1])     return result"},{"instruction":"Create a class to represent a calculator with the following methods: add, subtract, multiply, and divide","output":"class Calculator:     def add(self, num1, num2):         return num1 + num2     def subtract(self, num1, num2):         return num1 - num2     def multiply(self, num1, num2):         return num1 * num2     def divide(self, num1, num2):         return num1 / num2"},{"instruction":"Replace the \\"TODO\\" in the following code with the code to print the sum of the first n natural numbers. def print_sum(n):     # TODO print_sum(5)","output":"def print_sum(n):     sum_n = n * (n + 1) // 2     print(sum_n) print_sum(5)"},{"instruction":"Create a function to parse a string that has lines of key/value pairs and return a dictionary of the values paired with the keys.","output":"def parse_key_value_pairs(string):     result = {}     lines = string.split(\\"n\\")     for line in lines:         if line:             key, value = line.split(\\":\\")             result[key] = value     return result"},{"instruction":"Write code to find the maximum sum for a contiguous subarray of a given array.","output":"def max_sum_subarray(nums):     current_sum = 0     max_sum = -float('inf')     for num in nums:         current_sum += num         max_sum = max(max_sum, current_sum)         current_sum = max(current_sum, 0)     return max_sum"},{"instruction":"Create a function to format a given list of numbers with commas as thousands separators.","output":"def format_numbers(nums):     formatted_nums = []     for num in nums:         formatted_nums.append(\\"{:,}\\".format(num))     return formatted_nums"},{"instruction":"Write a SQL query that finds the total number of courses.","output":"SELECT COUNT(*)  FROM courses;"},{"instruction":"Write a JavaScript function that returns the name of the user. let user = {   name: \\"Tom\\",   age: 28  };","output":"function getUserName(user){  return user.name; }"},{"instruction":"Write an algorithm in Java that finds the maximum value in an array. int[] arr = { 4, 9, 3, 6, 1 };","output":"int maxVal(int[] arr) {      int maxVal = arr[0];      for (int i=1; i<arr.length; i++) {          if (arr[i] > maxVal) {              maxVal = arr[i];          }      }      return maxVal;  }"},{"instruction":"Create a program in C that takes in two integers and adds them together. int x = 2;   int y = 3;","output":"#include <stdio.h> int main() {   int x = 2;   int y = 3;   int result = x + y;   printf(\\"The result is %dn\\", result);   return 0; }"},{"instruction":"Create a program in Java that finds the average of a given array. int[] arr = {3, 4, 5, 6};","output":"public static double findAvg(int[] arr) {   int sum = 0;   for (int i = 0; i < arr.length; i++) {     sum += arr[i];   }   double avg = (double)sum / (double)arr.length;   return avg; }"},{"instruction":"Create a Java program to find the sum of the following array [1,2,3,4,5].","output":"public class Sum {   public static void main(String[] args) {     int[] arr = {1, 2, 3, 4, 5};     int sum = 0;     // Compute sum of array elements     for (int i = 0; i < arr.length; i++) {        sum += arr[i];     }     // Print sum     System.out.println(\\"Sum of given array elements is: \\" + sum);   } }"},{"instruction":"Write a regex (in Python) to match the following pattern: \\"an apple a day keeps the doctor away","output":"import re regex = r\\"bansapplesbasdayskeepssthesdoctorsawayb\\""},{"instruction":"Extract the title and description from this XML data. <data> <info>  <title>Page Title</title>  <description>This is a description of a web page.</description> </info> </data>","output":"let title = xml.querySelector('title').innerHTML; let description = xml.querySelector('description').innerHTML;"},{"instruction":"Find the average value of the following array in Python. arr = [1,2,3,4,5]","output":"import numpy as np arr = [1,2,3,4,5] average = np.mean(arr) print(f\\"The average of the array is: {average}\\")"},{"instruction":"Create a MySQL query to group clubs by the number of players.","output":"SELECT COUNT(player_id) AS number_of_players, club FROM club_players  GROUP BY club;"},{"instruction":"Create a SQLite query to find the sum of the column \\"price\\" in a table called \\"orders\\".","output":"SELECT SUM(price) AS total_sum FROM orders;"},{"instruction":"Create an algorithm that returns an array of the unique items in a given list. [1, 2, 4, 2, 5, 6, 7, 1, 4]","output":"def unique(arr):     unique_list = []     for el in arr:         if el not in unique_list:             unique_list.append(el)     return unique_list"},{"instruction":"Create an algorithm to determine if two strings are rotations of each other. \\"abcde\\", \\"eabcd","output":"def is_rotation(str1, str2):     return len(str1) == len(str2) and str2 in str1+str1"},{"instruction":"Generate a code to sort a list of floats. [4.5, 7.5, 1.5, -2.5]","output":"def sort_floats(arr):      arr.sort(key=float)      return arr"},{"instruction":"Create a CSS class called \\"black-background\\" that sets the background color for a div element to black.","output":".black-background {   background-color: #000000; }"},{"instruction":"Given the following text, create a Python function that finds the number of unique words in the text. This is a sample text to find the number of unique words.","output":"def find_unique_words(text):     words = set(text.split(\\" \\"))     return len(words) unique_words = find_unique_words(\\"This is a sample text to find the number of unique words.\\") print(unique_words)"},{"instruction":"Replace the values in the following array with its cumulative sum. arr = [1, 2, 3, 4, 5]","output":"def cumulative_sum(arr):     cum_sum = []     temp_sum = 0     for num in arr:         temp_sum += num         cum_sum.append(temp_sum)     return cum_sum arr = [1, 2, 3, 4, 5]  cum_sum = cumulative_sum(arr) print(cum_sum)  # Output: [1, 3, 6, 10, 15]"},{"instruction":"Create a ReactJS component called \\"MyComponent\\" that renders a simple HTML element.","output":"import React from 'react'; class MyComponent extends React.Component {     render () {         return <div>Hello world!</div>     } } export default MyComponent;"},{"instruction":"Create a C# function called \\"InsertCharacter\\" that takes a string input and inserts a character at a given index. string = \\"Hello World!\\", index = 5","output":"public static string InsertCharacter(string str, int index, char ch) {     return str.Substring(0, index) + ch + str.Substring(index); } string newString = InsertCharacter(\\"Hello World!\\", 5, 'x'); Console.WriteLine(newString);  # Output: Hellxo World!"},{"instruction":"Given the following array and a number k, determine if two elements from the array add up to k. arr = [10, 15, 3, 7], k = 17","output":"def findSum(arr, k):     s = set()     for num in arr:         diff = k - num         if diff in s:             return True         s.add(num)     return False arr = [10, 15, 3, 7]  k = 17  print(findSum(arr, k))  # Output: True"},{"instruction":"Programmatically generate a random password of length 8 that contains at least one lowercase letter, one uppercase letter, one number, and one special character.","output":"import string import random def generate_password():     letters = string.ascii_letters     numbers = string.digits     symbols = string.punctuation     chars = letters + numbers + symbols     length = 8     password = \\"\\".join(random.sample(chars, length))     if any(char.islower() for char in password)          and any(char.isupper() for char in password)              and any(char.isdigit() for char in password)                  and any(char in symbols for char in password):         return password random_password = generate_password() print(random_password)  # Output: eQ@0?St"},{"instruction":"Sort the following list of numbers in increasing order without using any built-in sorting method. arr = [2, 5, 3, 8, 7]","output":"def sort_increasing(arr):     for i in range(len(arr)):         min_index = i         for j in range(i, len(arr)):             if arr[min_index] > arr[j]:                 min_index = j         arr[i], arr[min_index] = arr[min_index], arr[i]     return arr arr = [2, 5, 3, 8, 7]  sorted_arr = sort_increasing(arr) print(*sorted_arr) # Output: 2 3 5 7 8"},{"instruction":"Given an array of integers, replace each element of the array with its square. arr = [1, 2, 3, 4, 5]","output":"def get_squares(arr):     squares = []     for num in arr:         squares.append(num ** 2)     return squares arr = [1, 2, 3, 4, 5] squares = get_squares(arr) print(*squares)  # Output: 1 4 9 16 25"},{"instruction":"Using the array below, count the occurrence of the number 3. arr = [1, 1, 2, 3, 3, 3, 4, 5]","output":"arr = [1, 1, 2, 3, 3, 3, 4, 5] def count_number(arr, num):     count = 0     for val in arr:         if val == num:             count += 1     return count count = count_number(arr, 3) print(count)  # Output: 3"},{"instruction":"Create a program that finds the average of two numbers. 7 and 9","output":"def find_average(num1, num2):     return (num1 + num2) / 2 if __name__ == '__main__':     print(find_average(7, 9))"},{"instruction":"w would you generate a Fibonacci sequence up to n in a list?","output":"def generate_fibonacci_sequence(n):     result = [1]       current_number = 1     next_number = 1     while current_number <= n:         result.append(current_number)         current_number, next_number = next_number, current_number + next_number       return result if __name__ == '__main__':  print(generate_fibonacci_sequence(10))"},{"instruction":"Create a function to get the root of a quadratic equation 1, 4, 4","output":"def get_roots_of_quad_eqn(a, b, c):     # compute discriminant      d = (b**2) - (4 * a * c)          # compute roots     root1 = (-b + math.sqrt(d)) / (2 * a)      root2 = (-b - math.sqrt(d)) / (2 * a)           # return the roots     return root1, root2 if __name__ == '__main__':     a, b, c = 1, 4, 4     print(get_roots_of_quad_eqn(a, b, c))"},{"instruction":"Write a Python program to print the numbers of a specified list after removing even numbers from it.","output":"def print_odd(numbers):     odd_numbers = []     for num in numbers:         if num % 2 != 0:             odd_numbers.append(num)     return odd_numbers if __name__ == '__main__':     numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]     print(print_odd(numbers))"},{"instruction":"Edit the following code to print the position of an element x in a list y. list y = [2, 3, 4, 1, 5] x = 1","output":"list y = [2, 3, 4, 1, 5] x = 1 def find_position(y, x):     for index, value in enumerate(y):         if value == x:             return index     return f\\"{x} is not in the list\\" if __name__ == '__main__':     print(find_position(y, x))"},{"instruction":"w would you calculate the distance between two points in a three-dimensional space?","output":"def distance_3d(x1, y1, z1, x2, y2, z2):     return math.sqrt((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2) if __name__ == '__main__':     x1, y1, z1 = 1, 2, 3     x2, y2, z2 = 5, 6, 7     print(distance_3d(x1, y1, z1, x2, y2, z2))"},{"instruction":"Write a code to get the second smallest number from a list of integers.","output":"def second_smallest(numbers):     sorted_numbers = sorted(numbers)     return sorted_numbers[1] if __name__ == '__main__':     numbers = [1, 5, 2, 9, 3, 6]     print(second_smallest(numbers))"},{"instruction":"w would you form a list from two lists by taking elements at same index from both the lists?","output":"def form_list_from_list(list1, list2):     return [list1[i] + list2[i] for i in range(len(list1))] if __name__ == '__main__':     list1 = [1, 2, 3]      list2 = [4, 5, 6]     print(form_list_from_list(list1, list2))"},{"instruction":"Create a Java programme that accepts two strings and returns the length of the longest string. String string1 = \\"Hello\\"; String string2 = \\"World!\\";","output":"int longest = Math.max(string1.length(), string2.length()); System.out.println(\\"Longest string length is \\"+ longest);"},{"instruction":"vestigate the syntax error in this R script and fix it. x <- c(1, 2, 3","output":"x <- c(1, 2, 3)"},{"instruction":"Translate the following expression into a SQL query.","output":"SELECT * FROM table WHERE conditions LIKE '%expression%';"},{"instruction":"Create a function in Java to find the number of values greater than a given number in a given array. int[] arr = {1, 2, 3, 4}; int threshold = 2;","output":"public static int greaterThan(int[] arr, int threshold) {   int count = 0;   for (int i=0; i < arr.length; i++) {     if (arr[i] > threshold) {       count++;     }   }   return count; }"},{"instruction":"Edit the given code snippet to reverse the elements of a list in Python.","output":"def reverseList(list):      list.reverse()      return list"},{"instruction":"Output the remaining items in the following array after removing duplicates: let arr = [1, 2, 1, 4, 5, 2, 6]","output":"[4, 5, 6]"},{"instruction":"Convert the following JavaScript code to a for loop: let num = 0; while (num < 5) {   console.log(num);   num++; }","output":"for (let num = 0; num < 5; num++) {     console.log(num); }"},{"instruction":"w does the following CSS style the first letter of a paragraph? p::first-letter {     font-weight: bold; }","output":"The first letter of a paragraph will be rendered with a bold font style."},{"instruction":"w does the following HTML code create a clickable link? <a href=\\"www.example.com\\" >Click here</a>","output":"This HTML code will create a clickable link that will lead to the URL \\"www.example.com\\" when clicked."},{"instruction":"Use the given array and print the second element using its index. Array: [2, 3, 4, 5, 6]","output":"console.log(arr[1]); // prints 3"},{"instruction":"Write a Bash script which will print the value of Shell variable 'USER' followed by User's current working directory.","output":"#!/bin/bash echo \\"USER is currently in: \\" pwd"},{"instruction":"Define a Bash function with name 'times2' which takes one parameter and prints the value doubled.","output":"times2 () {   value=1   echo \\"value*2 = ((value*2))\\" }"},{"instruction":"Use dictionaries in Python to merge the data from two given dictionaries. dictA = {   'keyA': 1,   'keyB': 2 } dictB = {   'keyC': 3,   'keyD': 4 }","output":"dictC = {**dictA, **dictB}"},{"instruction":"Develop a regex expression to validate if a given string contains 5 numbers consecutively.","output":"^d{5}"},{"instruction":"Write a query in MongoDB to fetch all documents where the field 'status' is 'active'.","output":"db.collection.find({\\"status\\": \\"active\\"})"},{"instruction":"Use TensorFlow to build a machine learning model for predicting continuous values given a data set of temperature vs electricity consumption.","output":"import tensorflow as tf import matplotlib.pyplot as plt #Import the dataset x = tf.placeholder(tf.float32) y = tf.placeholder(tf.float32)    # Create our model model = tf.keras.Sequential([tf.keras.layers.Dense(1, input_shape=[1])]) # Compile the model model.compile(loss='mean_squared_error', optimizer='sgd') # Fit the model model.fit(x, y, epochs=10) # Plot the result plt.plot(x, y, 'ro', label='original data') plt.plot(x, model.predict(x), label='predicted') plt.xlabel('Temperature') plt.ylabel('Electricity Consumption') plt.legend() plt.show()"},{"instruction":"Design a class in Java called 'Student' which contains student's information such as name, age, etc.","output":"public class Student {   private String name;   private int age;   private boolean status;   public Student(String name, int age, boolean status) {     this.name = name;     this.age = age;     this.status = status;   }      public String getName() {     return name;   }      public void setName(String name) {     this.name = name;   }      public int getAge() {     return age;   }      public void setAge(int age) {     this.age = age;   }      public boolean getStatus() {     return status;   }      public void setStatus(boolean status) {     this.status = status;   }   }"},{"instruction":"Write a method in Java which displays a printing pattern like shown below. x xx xxx xxxx","output":"public static void printPattern(int n) {   for (int i = 1; i <= n; i++) {     for (int j = 1; j <= i; j++) {       System.out.print(\\"x\\");     }     System.out.println();   } }"},{"instruction":"g the given input text, identify the parts of speech for each word. The cat is black and white","output":"The: article  cat: noun  is: verb  black: adjective  and: conjunction  white: adjective"},{"instruction":"mplement quicksort in Python","output":"def quicksort(array):     if len(array) < 2:         return array     else:         pivot = array[0]         less = [i for i in array[1:] if i <= pivot]         greater = [i for i in array[1:] if i > pivot]         return quicksort(less) + [pivot] + quicksort(greater)"},{"instruction":"Generate a valid JSON string as output with given input data. name: 'John Doe', age: 25, address: '123 Main St.'","output":"def generate_json(data):     return json.dumps(data)      # Usage  data = {\\"name\\": \\"John Doe\\", \\"age\\": 25, \\"address\\": \\"123 Main St.\\"} json_str = generate_json(data)  print(json_str)"},{"instruction":"Count the number of vowels present in the input text. Good morning!","output":"def vowel_count(text):     vowels = ['a', 'e', 'i', 'o', 'u']     count = 0     for c in text:         if c.lower() in vowels:             count += 1     return count"},{"instruction":"Create an algorithm to determine whether the given array contains an odd number of elements. [1, 2, 3, 4, 5]","output":"def is_odd(arr):     return len(arr) % 2 != 0"},{"instruction":"Compute the sum of elements in the following input array. [4, 7, 2, 9, 10, 15]","output":"def sum_array(arr):     total = 0     for num in arr:         total += num     return total"},{"instruction":"erchange the values of two given variables. x = 10  y = 5","output":"# Swap x and y def swap_values(x, y):     x, y = y, x      return x, y"},{"instruction":"Describe the timeline of a given project. Create a social media app","output":"# Describe the timeline of a given project def create_timeline(project):     timeline = ['identify goals', 'analyze market', 'develop strategy', 'plan development',                 'design UI', 'write code', 'test and refine', 'launch']     return timeline"},{"instruction":"Calclate the area of a triangle in accordance with the given values. Base = 4  Height = 3","output":"def calculate_area(base, height):     return 0.5 * base * height"},{"instruction":"Generate a list of integers between a given start and end value. Start = 3 End = 10","output":"def generate_list(start, end):     return list(range(start, end+1))"},{"instruction":"Compose an algorithm to determine whether a given string contains all unique characters.","output":"def is_unique(string):    char_set = set()    for char in string:        if char in char_set:            return False        else:            char_set.add(char)    return True"},{"instruction":"Update the following code to loop through the numbers 0 to 5. for i in range():     print(i)","output":"for i in range(6):     print(i)"},{"instruction":"Complete the missing parts of the code to sort an array in ascending order. int[] arr = {3, 5, 2, 7, 1}; int temp; for (int i = 0; i < arr.length; i++){   // TODO: complete the code }","output":"int[] arr = {3, 5, 2, 7, 1}; int temp; for (int i = 0; i < arr.length; i++){   for (int j = i+1; j < arr.length; j++){     if (arr[i] > arr[j]) {       temp = arr[i];       arr[i] = arr[j];       arr[j] = temp;     }   } }"},{"instruction":"Write a SQL query to sort the records in table \\"Employees\\" by employment date in ascending order.","output":"SELECT * FROM Employees ORDER BY Employment_Date ASC;"},{"instruction":"Using Tensorflow, set up a model to predict the classification of a handwritten digit.","output":"import tensorflow as tf #load the MNIST data mnist = tf.keras.datasets.mnist #split the data into train and test (x_train, y_train), (x_test, y_test) = mnist.load_data() #normalize the data between 0 and 1 x_train = tf.keras.utils.normalize(x_train, axis=1) x_test = tf.keras.utils.normalize(x_test, axis=1) #build the model model = tf.keras.models.Sequential() # add the input layer of the model model.add(tf.keras.layers.Flatten()) # add the hidden layers model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu)) model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu)) #add the output layer #NOTE: We are using output dimension as 10 because we are trying to predict 10 classifications (i.e. 0 to 9) model.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax)) #compile the model model.compile(optimizer='adam',               loss='sparse_categorical_crossentropy',               metrics=['accuracy']) #train the model model.fit(x_train, y_train, epochs=3) #evaluate the model val_loss, val_acc = model.evaluate(x_test, y_test)  print(val_loss, val_acc)"},{"instruction":"Create a Go program to convert a given temperature from Kelvin to Celsius.","output":"package main import \\"fmt\\" func KelvinToCelsius(k float64) float64 {     c := k - 273.15     return c } func main() {     k := 300.15     c := KelvinToCelsius(k)     fmt.Printf(\\"%.2f kelvin is equal to %.2f celsius.n\\", k, c) }"},{"instruction":"Debug the following code to print all the elements of an array. int[] arr = {1,2,3,4,5}; for (int i = 0; i < arr.len; i++){   System.out.println(arr[i]); }","output":"int[] arr = {1,2,3,4,5}; for (int i = 0; i < arr.length; i++){   System.out.println(arr[i]); }"},{"instruction":"Create an Angular2 component to display a \\"Hello, world!\\" message.","output":"import { Component } from '@angular/core'; @Component({   selector: 'app-hello-world',   template: \`<div>Hello, World!</div>\`, }) export class HelloWorldComponent { }"},{"instruction":"Use Ruby on Rails to generate a migration to add a column \\"name\\" to the table \\"users\\".","output":"class AddNameToUsers < ActiveRecord::Migration[6.0]   def change     add_column :users, :name, :string   end end"},{"instruction":"Create a React component to render a table with three columns: \\"ID\\", \\"Name\\", and \\"Occupation\\".","output":"import React from 'react'; import { Table } from 'react-bootstrap'; class MyTable extends React.Component {   render() {     return (       <Table striped bordered hover>         <thead>           <tr>             <th>ID</th>             <th>Name</th>             <th>Occupation</th>           </tr>         </thead>         <tbody>         {this.props.data.map( (row, index) => {           return (             <tr key={index}>               <td>{row.id}</td>               <td>{row.name}</td>               <td>{row.occupation}</td>             </tr>           );         })}         </tbody>       </Table>     );   } }"},{"instruction":"Rewrite a PHP program to produce the same result. <?php arr = array(1,2,3,4,5); sum = 0; for (i = 0; i < count(arr); i++){ \\tsum = sum + arr[i]; } echo sum; ?>","output":"<?php arr = array(1,2,3,4,5); sum = 0; foreach (arr as val) { \\tsum += val; } echo sum; ?>"},{"instruction":"Add a feature to the given code to print the name of the largest number in an array. int[] arr = {5,3,7,2,4}; int largest = arr[0]; for (int i = 1; i < arr.length; i++){   if(arr[i] > largest){     largest = arr[i];   } }","output":"int[] arr = {5,3,7,2,4}; int largest = arr[0]; String name; for (int i = 1; i < arr.length; i++){   if(arr[i] > largest){     largest = arr[i];     name = Integer.toString(arr[i]);   } } System.out.println(\\"The largest number is \\" + name);"},{"instruction":"Design a function that will print out the leap years in a given interval From 2015 to 2050","output":"def print_leap_years(start_year, end_year):      for year in range(start_year, end_year + 1):         if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:             print(year) print_leap_years(2015, 2050)"},{"instruction":"Output the square of the following number 5","output":"25"},{"instruction":"Explain why it is important to have exception handling","output":"Exception handling is important for a program as it allows the program to gracefully handle any unexpected or erroneous conditions. This helps keep the program running by providing meaningful feedback and prompts to the user. It also helps reduce the risk of having some part of the program crashing due to an unforeseen and avoidable event. Exception handling also encourages developers to write more robust and structured code as they are aware that their code might be faced with unpredictable conditions, and they will expect their code to be able to handle them gracefully."},{"instruction":"Create a program to identify a given string as a valid ISBN 10 code","output":"def is_valid_isbn_10(code):     # check for the length     if len(code) != 10:         return False     # check for leading \\"X\\" characters     if code.startswith(\\"X\\"):         return False     # check for digits     if not code.isdigit():         return False     # calculate the check digit     sum = 0     for i in range(9):          sum += int(code[i]) * (10 - i)     checksum = sum % 11     # check for valid check digit     if not (checksum==int(code[9]) or (checksum == 10 and code[9] == 'X')):         return False     # No errors found     return True if __name__ == '__main__':     code = input('Enter the ISBN-10 code: ')     print(is_valid_isbn_10(code))"},{"instruction":"Design a function that takes two parameters a and two and returns the result of a multiplied by two","output":"def mul_two(a, b):     return a * b if __name__ == '__main__':     x = int(input('Enter first number: '))     y = int(input('Enter second number: '))     print(mul_two(x, y))"},{"instruction":"Write a C++ method to calculate the Fibonacci series.","output":"// C++ program to calculate Fibonacci series #include <iostream> // Fibonacci function int Fibonacci(int n) {     if (n <= 1)         return n;     return Fibonacci(n-1) + Fibonacci(n-2); } int main() {   int n;   std::cout << \\"Enter the number of terms: \\";   std::cin >> n;   // This loop will print Fibonacci series till n   for (int i = 0; i < n; i++)       std::cout << Fibonacci(i) << \\", \\";   std::cout << \\"...\\" << std::endl;   return 0; }"},{"instruction":"Verify if a given password string matches the regular expression. password = \\"Ab12#","output":"import re # regex pattern to match given password pattern = re.compile(r\\"^[A-Za-z]w{7,15}\\")  # check if the password string matches the pattern  if pattern.match(password):      print(\\"Password is valid\\") else:      print(\\"Password is invalid\\")"},{"instruction":"Create a react component to render the following table.","output":"import React from \\"react\\" // React component to render a table  class Table extends React.Component {     render() {         return (             <table>                 <tr>                     <th>Name</th>                     <th>Age</th>                     <th>Address</th>                  </tr>                 <tr>                     <td>James</td>                     <td>25</td>                     <td>San Francisco</td>                 </tr>                 <tr>                     <td>John</td>                     <td>30</td>                     <td>New York</td>                 </tr>                 <tr>                     <td>Olivia</td>                     <td>20</td>                     <td>London</td>                 </tr>             </table>         )     } } export default Table;"},{"instruction":"Run a sentiment analysis on a given text. Text: \\"The movie was amazing!","output":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer analyzer = SentimentIntensityAnalyzer() # run sentiment analysis sentiment = analyzer.polarity_scores(text) for key in sentiment:     print('{0}: {1}'.format(key, sentiment[key])) # output compound: 0.6249 neg: 0.0 neu: 0.406 pos: 0.594"},{"instruction":"Train a machine learning model for a classification problem. X = [[0, 1], [1, 1], [0, 0], [1, 0]] y = [1, 0, 1, 0]","output":"# importing the necessary libraries import numpy as np  from sklearn.svm import SVC  # creating a svm classifier clf = SVC(kernel = 'linear')  # fitting the model  clf.fit(X, y)"},{"instruction":"Create a web page with styles.","output":"<html>   <head>     <title>Styled Web Page</title>     <style>       body {         background-color: lightblue;       }       h1 {         color: white;         text-align: center;       }       p {         font-family: verdana;         font-size: 15px;       }     </style>   </head>   <body>     <h1>Welcome to My Web Page</h1>     <p>This is my styled web page.</p>   </body> </html>"},{"instruction":"Connect to a MySQL database and display the table data. host = \\"localhost\\" user = \\"root\\" password = \\"password\\" database = \\"mydb","output":"import mysql.connector mydb = mysql.connector.connect(     host=host,     user=user,     passwd=password,     database=database ) cursor = mydb.cursor() # execute SQL query to display all data in table cursor.execute(\\"SELECT * FROM myTable\\") # print all of the table data myresult = cursor.fetchall() for row in myresult:    print(row)"},{"instruction":"Create a JavaScript object for a square with sides 8, 10 and 12.","output":"let objSquare = {   side1: 8,   side2: 10,   side3: 12 }"},{"instruction":"Optimize MySQL query to select the latest record in each group SELECT * FROM myTable GROUP BY type","output":"SELECT *  FROM myTable WHERE id = (SELECT MAX(id) FROM myTable AS T2 WHERE T2.type = MyTable.type) GROUP BY type"},{"instruction":"Generate C code to swap two integers without using a third variable.","output":"void swap_int(int * x, int * y) {     *x = *x ^ *y;     *y = *x ^ *y;     *x = *x ^ *y; }"},{"instruction":"Create a basic query using two variables. sky, blue","output":"SELECT * FROM table WHERE sky = 'blue';"},{"instruction":"w would you form an argument in Java?","output":"A Java argument is specified either at the command line while running a program, or within the code of a method. When running a program, the argument is specified after typing the program name followed by a space. The argument can be of any data type, such as a string, an integer, a double, and so on. Within a method, the argument is being passed in when the method is being called. For example, consider a method called calculateArea that requires one argument—the radius of a circle—in order to calculate the area of a circle. The argument is included within the parentheses when the method is called."},{"instruction":"w to define an array in PHP?","output":"An array in PHP is defined using the array() function. The syntax is as follows: array = array(element1, element2, ...); The elements can be of any type, such as strings, numbers, Booleans, objects, or even other arrays."},{"instruction":"Create a regular expression to identify email addresses in a given string.","output":"The regular expression to identify email addresses in a given string is: b[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,}b"},{"instruction":"Generate SQL code to query a database table containing student names and ages. SELECT all students who are between 18 and 25 years of age.","output":"SELECT * FROM Students WHERE Age BETWEEN 18 and 25;"},{"instruction":"w can we obfuscate a JavaScript code to make it harder for hackers to reverse engineer it?","output":"There are several tools and techniques that can be used to obfuscate JavaScript code. These include minifying the code so that it is difficult for humans to read, encrypting the code, scrambling variables, encrypting strings, and using code evaluation techniques to avoid running malicious code."},{"instruction":"Apply K-means clustering to a 3-dimensional dataset given a certain number of clusters. Number of Clusters = 4","output":"from sklearn.cluster import KMeans # prepare the data X = [... the 3-dimensional dataset ...] # define the clustering model kmeans_model = KMeans(n_clusters=4) # fit the model kmeans_model.fit(X) # get the cluster centers cluster_centers = kmeans_model.cluster_centers_ # get the labels for each point labels = kmeans_model.labels_"},{"instruction":"Write a Micropython program to turn on an LED.","output":"from machine import Pin led = Pin(0, Pin.OUT) led.on()"},{"instruction":"Update the C++ code below to generate a Fibonacci sequence of up to the 6th number. #include <iostream>   int main () { int x = 0, y = 1; std::cout << x << \\" \\" << y; return 0; }","output":"#include <iostream>   int main () {     int x = 0, y = 1, z = 0;     std::cout << x << \\" \\" << y;     for (int i = 0; i < 6; i++) {         z = x + y;         x = y;         y = z;          std::cout << \\" \\" << z;     }     return 0; }"},{"instruction":"Create a HTML web page containing two boxes on a single line.","output":"<!DOCTYPE html> <html>     <head>             </head>     <body>         <div style=\\"display: inline-block; width: 300px; height: 100px; border: 1px solid #000;\\"></div>         <div style=\\"display: inline-block; width: 300px; height: 100px; border: 1px solid #000;\\"></div>            </body> </html>"},{"instruction":"Create a SQL query to insert sample data into an 'employees' table.","output":"INSERT INTO employees (id, first_name, last_name, age, email)  VALUES (1, 'John', 'Doe', 25, 'john.doe@example.com'), (2, 'Jane', 'Doe', 30, 'jane.doe@example.com'), (3, 'Jim', 'Smith', 32, 'jim.smith@example.com');"},{"instruction":"Update the C# code below so that it prints the reversed form of a given string. using System; namespace ReverseString { class Program {    public static void Main()    {       string message = \\"Hello World\\";    }  } }","output":"using System; namespace ReverseString { class Program {    public static void Main()    {       string message = \\"Hello World\\";       Console.WriteLine(string.Join(\\"\\", message.Reverse()));    }  } }"},{"instruction":"Correct the mistake in this code. x = \\"Hello word","output":"x = \\"Hello world\\""},{"instruction":"Write a JavaScript program to find the sum of all numbers the user has entered in to the input box.","output":"function calculateSum() {    let sum = 0;    // Iterate over all the input boxes    document.querySelectorAll(\\"input[type=number]\\").forEach((element) => {      // current value of the element      let elementValue = Number(element.value);           // Sum of all elements      sum = sum + elementValue;    });    console.log(\\"The Sum of All the Numbers is: \\"+ sum);  }"},{"instruction":"Compare two strings and print true if they are equal, otherwise print false. String 1: Hello World String 2: Hello World","output":"true"},{"instruction":"Create a loop through a given list of numbers and check if the number is divisible by 3. nums = [3, 5, 7, 8, 10, 11]","output":"for num in nums:   if num % 3 == 0:     print (f\\"{num} is divisible by 3.\\")"},{"instruction":"Develop a function to fetch the maximum element from a given dictionary. d = {'Name': 'John', 'Age': 28, 'Score': 98}","output":"def getMaxElement(d):    maxElement = max(d.values())    for key, value in d.items():      if (value == maxElement):           return key, value"},{"instruction":"Create a new dictionary in Python with the given keys and values. Keys: A, B Values: 1, 2","output":"d = {'A': 1, 'B': 2}"},{"instruction":"dentify the type of variable (integer, float, string) for the given value. Value: 1968","output":"integer"},{"instruction":"mplement a class in Python which implements the given method. class Test:     def print_name(name):         print(name)","output":"class Test:     def print_name(self, name):         print(name)"},{"instruction":"Write a bash script for displaying \\"Hello World\\"!","output":"#!/bin/bash echo \\"Hello World!\\""},{"instruction":"Create a C++ class Student which contains name, age, and gender as members.","output":"class Student {     private:          string name;         int age;         string gender;     public:          Student(string name, int age, string gender)             : name(name), age(age), gender(gender) { }                       string getName() {             return name;         }                  int getAge() {             return age;         }                  string getGender() {             return gender;         } };"},{"instruction":"Compile \\"Hello world!\\" in C++.","output":"g++ -o hello hello.cpp // hello.cpp #include <iostream> using namespace std; int main() {     cout << \\"Hello world!\\" << endl;     return 0; }"},{"instruction":"Write a JavaScript function to get the current date and time in DD/MM/YYYY hh:mm:ss format.","output":"function getCurrentDateTime() {      var date = new Date();      var dd = date.getDate();      var mm = date.getMonth() + 1;      var yyyy = date.getFullYear();      var hh = date.getHours();      var min = date.getMinutes();      var sec = date.getSeconds();         if (dd < 10) {          dd = '0' + dd;      }         if (mm < 10) {          mm = '0' + mm;      }         if (min < 10) {          min = '0' + min;      }         if (sec < 10) {          sec = '0' + sec;      }         return dd + '/' + mm + '/' + yyyy + ' ' + hh + ':' + min + ':' + sec;  }  document.write(\\"Current Date and Time: \\" + getCurrentDateTime());"},{"instruction":"Explain how you would use the givew array to create a valid JSON output. array = [   \\"firstname\\" => \\"Nikola\\",    \\"lastname\\" => \\"Tesla\\",    \\"birthdate\\" => \\"10-07-1856\\"  ]","output":"We can use the given array to create a valid JSON output by first converting it into an object by wrapping it in curly brackets and then assign keys for each value. For example,  {   \\"firstname\\": \\"Nikola\\",    \\"lastname\\": \\"Tesla\\",    \\"birthdate\\": \\"10-07-1856\\"  } Once the object is created, it need to be converted to a JSON string using a JSON library such as JSON.stringify() method in JavaScript. The resulting string looks like this: \\"{\\"firstname\\":\\"Nikola\\",\\"lastname\\":\\"Tesla\\",\\"birthdate\\":\\"10-07-1856\\"}\\""},{"instruction":"Write an SQL query to find the ten most popular books among the library readers. Table: library Columns: book_name, reader_name Table: readers Columns: reader_name, book_name","output":"SELECT book_name, COUNT(*)  FROM library  INNER JOIN readers  ON library.reader_name = readers.reader_name  GROUP BY book_name  ORDER BY COUNT(*)  DESC LIMIT 10;"},{"instruction":"Design a public Java API to generate a cookie.","output":"public interface CookieGenerator {   public String generateCookie(); }"},{"instruction":"Construct a regular expression to detect a valid IP address in a user input.","output":"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"},{"instruction":"Design a CRUD API using Node.js.","output":"const express = require('express'); const router = express.Router(); // Create router.post('/', (req, res) => { \\t// Code for creating an item }); // Read router.get('/', (req, res) => { \\t// Code for retrieving an item }); // Update router.put('/:id', (req, res) => { \\t// Code for updating an item }); // Delete router.delete('/:id', (req, res) => { \\t// Code for deleting an item }); module.exports = router;"},{"instruction":"mplement a method in C# that reverses the digits of an integer.","output":"public static int ReverseDigits (int num) {    int result = 0;    while (num > 0) {       int temp = num % 10;       result = (result * 10) + temp;       num = num / 10;     }    return result; }"},{"instruction":"Convert the given string \\"I am a programmer\\" into upper case letters.","output":"\\"I AM A PROGRAMMER\\""},{"instruction":"Rewrite the following C++ function to Pascal. Function Definition: int add(int x, int y) {     return x + y; }","output":"function add(x, y: integer): integer; begin    add := x + y; end;"},{"instruction":"Design a method in JavaScript to validate a password according to certain criteria.","output":"function validatePassword(password) {   const regx = /^(?=.*[0-9])(?=.*[!@#%^&*])[a-zA-Z0-9!@#%^&*]{6,20}/;   if (password.match(regx)) {     return true;   } else {     return false;   }; }"},{"instruction":"Suggest a design pattern to solve the following problem A system needs to access different types of data from multiple data sources.","output":"A good design pattern for solving this problem is the Adapter Pattern. This pattern allows the adapter to abstract away the different types of data sources and provide an interface for accessing the data from a single source. With this pattern, the system can easily access different types of data from multiple sources without having to handle the different data sources directly."},{"instruction":"Suggest a data structure to efficiently store a set of phone numbers","output":"A good data structure for efficiently storing a set of phone numbers is a Hash Table. This data structure uses a hash function to map each phone number to the value(s) associated with it and stores the values in a linked list. This data structure provides constant time lookup, insert and delete operations, making it ideal for storing a large set of phone numbers."},{"instruction":"Generate a for loop to iterate over all div elements on a website and print their content.","output":"var divs = document.getElementsByTagName('div'); for (var i = 0; i < divs.length; i++) {     console.log(divs[i].innerHTML); }"},{"instruction":"What is the basic syntax to define a function in Python 3?","output":"def function_name(parameters):     \\"\\"\\" function docstring \\"\\"\\"     statement(s)"},{"instruction":"Given an array of integers, write a function to find the maximum difference between a lower element and an upper element. Array: [3, 10, 2, 6, 4, 8, 1]","output":"def findMaxDifference(arr):     min_element = arr[0]     max_difference = arr[1] - arr[0]     for num in arr:         if num - min_element > max_difference:             max_difference = num - min_element         if num < min_element:             min_element = num     return max_difference"},{"instruction":"Write a JavaScript code snippet to create and display a dynamic table of products and their prices. var products = [     {name: 'Apple', price: 1.50},     {name: 'Orange', price: 2.00},     {name: 'Banana', price: 1.80}, ];","output":"let table = document.createElement(\\"table\\"); document.body.appendChild(table); products.forEach(product => {     let row = table.insertRow();     let nameCell = row.insertCell();     let priceCell = row.insertCell();     nameCell.innerHTML = product.name;     priceCell.innerHTML = product.price; });"},{"instruction":"Write a Java program to find all combinations of two numbers in an array that add up to a given sum. Array: [2, 7, 3, 5] Sum: 10","output":"public static List<List<Integer>> findSumPairs(int arr[], int sum) {     List<List<Integer>> result = new ArrayList<>();     Map<Integer, Integer> map = new HashMap<>();       for (int i = 0; i < arr.length; i++) {         int target = sum - arr[i];         if (map.containsKey(target)) {             result.add(Arrays.asList(map.get(target), i));         }         map.put(arr[i], i);     }     return result; }"},{"instruction":"Create a function in Java that takes a 2D array as input and prints out all diagonals. array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","output":"static void printDiagonals(int arr[][]) {     int n = arr.length;     // Print anti-diagonals     for (int k = 0; k < n; k++) {         for (int i = 0, j = k; j >= 0; j--, i++) {             System.out.print(arr[i][j] + \\" \\");         }         System.out.println();     }     // Print main diagonals     for (int k = 1; k < n; k++) {         for (int i = k, j = n - 1; i < n; i++, j--) {             System.out.print(arr[i][j] + \\" \\");         }         System.out.println();     } }"},{"instruction":"w can you access the fourth element of a linked list in Java?","output":"The fourth element of a linked list in Java can be accessed by traversing the list from the start node three times, where each traverse proceeds one node at a time. The fourth node can be accessed by calling getData() on the traversed node."},{"instruction":"Design an SQL query to get all the employees from a database who are over 40 years old. Table Name: employee Attributes: id, firstname, lastname, age","output":"SELECT * FROM employee  WHERE age > 40;"},{"instruction":"Create a CSS rule to make all the links in a document to be underlined.","output":"a {     text-decoration: underline; }"},{"instruction":"Find the maximum number from an array of numbers using JavaScript. let array = [7, 9, 4, 1, 8]","output":"const getMax = arr => Math.max(...arr); console.log(getMax(array)); // 9"},{"instruction":"Write a C++ method to convert a string into lowercase.","output":"string toLowerCase(string s) {     transform(s.begin(), s.end(), s.begin(), ::tolower);     return s; }"},{"instruction":"Generate a CSS rule to make all headings red.","output":"h1, h2, h3, h4 {     color: red;  }"},{"instruction":"Design a Swift class for a 3-dimensional point.","output":"class Point3D {     var x: Double     var y: Double     var z: Double       init(x: Double, y: Double, z: Double) {         self.x = x         self.y = y         self.z = z     } }"},{"instruction":"Create a HTML form with three input fields for taking a user's name, email, and address.","output":"<form action=\\"\\" method=\\"post\\">     <label for=\\"name\\">Name: </label><br>     <input type=\\"text\\" name=\\"name\\" id=\\"name\\"><br><br>     <label for=\\"email\\">Email: </label><br>     <input type=\\"email\\" name=\\"email\\" id=\\"email\\"><br><br>     <label for=\\"address\\">Address: </label><br>     <input type=\\"text\\" name=\\"address\\" id=\\"address\\"><br><br>     <input type=\\"submit\\" name=\\"submit\\" value=\\"Submit\\"> </form>"},{"instruction":"Using Java, write a program that calculates the average of 5 numbers entered by the user. 2, 4, 6, 8, 10","output":"import java.util.Scanner; public class Main {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);                  int[] numList = new int[5];         int sum = 0;                  for(int i=0;i<numList.length;i++){             System.out.println(\\"Enter number \\"+(i+1));             numList[i] = sc.nextInt();             sum += numList[i];         }                  double avg = (double)sum/numList.length;         System.out.println(\\"Average = \\"+avg);              } }"},{"instruction":"Using JavaScript, print the name of sites visited today on the web console.","output":"var visitedSites = [\\"www.facebook.com\\", \\"www.google.com\\", \\"www.yahoo.com\\"]; console.log(\\"Visited sites today: \\" +visitedSites);"},{"instruction":"Write a shell script that displays the folder structure of the current working directory.","output":"#!/bin/bash echo \`tree -L 1 | awk '{1=1};1'\`"},{"instruction":"Write an SQL query to display the average age of employees in each department.","output":"SELECT department, AVG(age) AS avg_age FROM employees GROUP BY department;"},{"instruction":"Calculate the number of days taken to finish a task given its start and end dates. Start Date: 01 June 2020 End Date: 15 June 2020","output":"14 days."},{"instruction":"Write a Cypher query to select all nodes with the label 'address'.","output":"MATCH (a: Address) RETURN a;"},{"instruction":"Generate a dynamic timestamp for a given date. Date: June 13, 2020, 5:30pm","output":"1592175000"},{"instruction":"Write a style rule to apply a border on the first and last elements of the document.","output":"*:first-child, *:last-child {    border: 1px solid black; }"},{"instruction":"Convert 1024 bytes into kilobytes.","output":"1 kilobyte = 1024 bytes 1024 bytes = 1 kilobyte."},{"instruction":"Develop a regex pattern to match email addresses.","output":"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+"},{"instruction":"Given a value, x, write a line of code that converts it from a float to an integer. x = 25.32","output":"int(x) # result: 25"},{"instruction":"What is the purpose of a Structured Query Language (SQL)?","output":"The purpose of SQL is to manage data stored in relational databases and to manipulate data in the database by performing operations such as creating, updating, and deleting records. It is also used to define and manipulate data in the database. By using SQL, users can combine and analyze data from multiple sources."},{"instruction":"alize a list with 5 items containing numbers from 1 to 5.","output":"my_list = [1, 2, 3, 4, 5]"},{"instruction":"Write a loop that prints the square of each element in a given array. arr = [1, 2, 3, 4]","output":"arr = [1, 2, 3, 4] for i in arr:    print(i*i)"},{"instruction":"Extend the following dictionary with three more key-value pairs. my_dict = {  \\"name\\": \\"John\\",  \\"age\\": 17 }","output":"my_dict = {  \\"name\\": \\"John\\",  \\"age\\": 17,  \\"gender\\": \\"male\\",  \\"height\\": 180,  \\"hobbies\\": [\\"basketball\\", \\"reading\\", \\"traveling\\"] }"},{"instruction":"Create an anonymous function that takes two numbers, x and y and returns their product.","output":"product = lambda x, y: x * y"},{"instruction":"What type of data structure is best suited for a database table?","output":"The best data structure for a database table is a relational database. Relational databases allow for fast retrieval of stored information and utilize Structured Query Language (SQL) to create relationships between database tables."},{"instruction":"Edit the following JavaScript code to make it able to log even numbers. const myArray = [1, 2, 3, 4, 5] for (let i = 0; i < myArray.length; i++) {   console.log(myArray[i]) }","output":"const myArray = [1, 2, 3, 4, 5] for (let i = 0; i < myArray.length; i++) {   if (myArray[i] % 2 == 0) {     console.log(myArray[i])   } }"},{"instruction":"Create an HTML page with a basic structure and text.","output":"<!DOCTYPE html> <html>   <head>     <title>Basic HTML Page Structure</title>   </head>   <body>     <h1>Hello, World!</h1>     <p>This is a basic HTML page structure.</p>   </body> </html>"},{"instruction":"Create a JavaScript class called Point with an X and a Y coordinate.","output":"class Point {   constructor(x, y) {     this.x = x;     this.y = y;   } }"},{"instruction":"Design a CSS class to set the color of text.","output":".text-color {   color: #000000; }"},{"instruction":"Edit the following HTML document and change the font color of the level 2 heading tag to red <html><head><title>My Title</title></head><body><h1>Heading 1</h1><h2>Heading 2</h2></body></html>","output":"<html><head><title>My Title</title></head><body><h1>Heading 1</h1><h2 style=\\"color:red;\\">Heading 2</h2></body></html>"},{"instruction":"Write a JavaScript function to find the maximum value from an array of numbers [10,20,30,40,50]","output":"function maxValue(arr){     let max = arr[0];     for(let i = 0; i < arr.length; i++){         if(arr[i] > max){             max = arr[i];         }     }     return max; }"},{"instruction":"Create a new SQL table using the following schema employees (name VARCHAR(25), age INT, gender VARCHAR(6), salary INT)","output":"CREATE TABLE employees (     name VARCHAR(25) NOT NULL,     age INT NOT NULL,     gender VARCHAR(6) NOT NULL,     salary INT NOT NULL );"},{"instruction":"Write an HTML code to add a padding of 10px to the paragraph tag","output":"<p style=\\"padding: 10px;\\">  </p>"},{"instruction":"Create a class called 'Address' with four string fields: address line 1, address line 2, city, and zipCode.","output":"class Address {   String addressL1;   String addressL2;   String city;   String zipCode;   public Address(String addressL1, String addressL2, String city, String zipCode) {     this.addressL1 = addressL1;     this.addressL2 = addressL2;     this.city = city;     this.zipCode = zipCode;   } }"},{"instruction":"Create a function in Ruby that takes two parameters and prints out the values as well as their sum. num1 = 10 num2 = 20","output":"def add(num1, num2)   puts \\"The sum of #{num1} and #{num2} is #{num1 + num2}.\\" end"},{"instruction":"Build a Python function that normalizes a given array. array = [4, 8, 15, 23, 42]","output":"def normalize(array):     min_val = min(array)     max_val = max(array)     normalized = [ (x-min_val) / (max_val-min_val) for x in array]   return normalized"},{"instruction":"Construct a CSS style sheet to set background color of all <h1> tags as blue.","output":"h1 {     background-color: blue; }"},{"instruction":"Design a one-to-many relationship between two tables in SQL.","output":"CREATE TABLE parent (   id INTEGER PRIMARY KEY,   name TEXT );   CREATE TABLE child (   id INTEGER,   parent_id INTEGER,   name TEXT,   FOREIGN KEY (parent_id) REFERENCES parent (id) );"},{"instruction":"Construct a JavaScript algorithm to determine whether a number is even or odd. noinpu","output":"function isOdd(number) {   let mod = number % 2; // Check modulus (i.e. remainder)   if (mod === 0) {     return false;    }   else {     return true;   } }"},{"instruction":"Write a C# function to replace all occurrences of the letter \\"a\\" with \\"o\\". string input=\\"Timon and Pumb","output":"public static string ReplaceAwithO(string input){   return input.Replace('a', 'o'); }"},{"instruction":"Build a Python dictionary that contains five elements.","output":"myDictionary = {   \\"key1\\": \\"value1\\",   \\"key2\\": \\"value2\\",   \\"key3\\": \\"value3\\",   \\"key4\\": \\"value4\\",   \\"key5\\": \\"value5\\" }"},{"instruction":"Construct a React component that renders \\"Hello World\\" when rendered.","output":"const HelloWorld = () => {   return (     <div>Hello World</div>   ); };"},{"instruction":"Write a Java command line program to input a string and print out the reversed string.","output":"import java.util.Scanner; public class ReverseString {   public static void main(String[] args) {     Scanner scanner = new Scanner(System.in);     System.out.print(\\"Enter a string : \\");     String inputString = scanner.nextLine();     String reversedString = \\"\\";     for(int i=inputString.length()-1; i>=0; i--) {       reversedString = reversedString + inputString.charAt(i);     }     System.out.println(\\"The reversed string is : \\" + reversedString);   } }"},{"instruction":"Design an object-oriented class in Python that stores a book's title, author, and publisher.","output":"class Book:      def __init__(self, title, author, publisher):     self._title = title     self._author = author     self._publisher = publisher   def get_title(self):     return self._title   def set_title(self, title):     self._title = title   def get_author(self):     return self._author      def set_author(self, author):     self._author = author   def get_publisher(self):     return self._publisher      def set_publisher(self, publisher):     self._publisher = publisher"},{"instruction":"Write a C++ class called \\"Point\\" to represent a point in 2-dimensional space.","output":"class Point { public:     Point() : x_(0), y_(0) {}     Point(double x, double y) : x_(x), y_(y) {}     double x() const { return x_; }     double y() const { return y_; }     void setX(double x) { x_ = x; }     void setY(double y) { y_ = y; } private:     double x_;     double y_; };"},{"instruction":"Write an assembly language program to calculate 2 to the power of 8.","output":".data     x:    .word 8 .text     li v0, 2       # load 2 to v0     li t0, 1       # load 1 to t0     lw a0, x       # load 8  to a0     jal pow     j exit pow:     mul t1, v1, v0 # r3 = v0 * r2      mflo v1         # r2 = lo(r3)     addi a0, a0, -1 # r1 = r1-1      bne a0, 0, pow  # if r1 != 0 go to loop start     mfhi v0         # r0 = hi(r3)     jr ra            exit:     nop"},{"instruction":"Create a web page that displays \\"Hello, World!","output":"<html> <head> <title>Hello World</title> </head> <body> <h1>Hello, World!</h1> </body> </html>"},{"instruction":"Write an Arduino program to blink an LED once every two seconds.","output":"void setup() {   pinMode(LED_BUILTIN, OUTPUT); } void loop() {   digitalWrite(LED_BUILTIN, HIGH);   delay(2000);   digitalWrite(LED_BUILTIN, LOW);   delay(2000); }"},{"instruction":"Suppose we have a list of numbers, write a Python code to compute the average of the list. list = [1, 5, 8, 9, 10]","output":"def find_average(list):     sum = 0     for num in list:         sum += num     return sum/len(list)"},{"instruction":"Write a SQL query to select the records from the table which have the maximum value in a given column. Table Name: Student Column: Age","output":"SELECT * FROM Student WHERE Age = (SELECT MAX(Age) FROM Student)"},{"instruction":"Given the following 2D array. Create a function to find the sum of each row. Array = [[2, 5, 6], [4, 1, 3], [5, 9, 0]]","output":"def sum_row(arr):     total = []     for row in arr:         total.append(sum(row))     return total"},{"instruction":"Explain how to measure the complexity of an algorithm.","output":"Algorithm complexity can be measured in two ways: time complexity and space complexity. Time complexity measures the amount of time an algorithm takes to run and solves a problem. Space complexity measures the amount of memory an algorithm requires to run and solves a problem. The most common metrics used to measure the complexity of an algorithm are Big O notation and worst case analysis."},{"instruction":"Explain the concept of merging two sorted lists.","output":"Merging two sorted lists involves examining elements of each list and inserting them in order into a third list. This process continues until all elements from the two lists have been inserted into the third resulting list. The algorithm requires that the two starting lists be in sorted order, although the elements can be in any order (ascending, descending, or random) as long as each list is sorted."},{"instruction":"Explain the concept of Strassen's Matrix multiplicatiom algorithm.","output":"Strassen's Matrix multiplication algorithm is an improvement over the traditional matrix multiplication algorithm. This algorithm divides the two matrices into four sub-matrices of size n/2 × n/2 and then performs 7 multiplications and adds the resulting values to calculate the final result. It reduces the number of multiplications required, resulting in a faster algorithm."},{"instruction":"w would you check an integer is divisible by 7 or not in Python?","output":"We can use the modulo operator (%) to check if an integer is divisible by another number in Python. The modulo operator (%) returns the remainder of the division. If the remainder is zero then the two numbers are divisible. For example, to check if an integer is divisible by 7, we can use: if (x % 7) == 0:     # x is divisible by 7 else:     # x is not divisible by 7"},{"instruction":"Split a sentence into an array of words using C++. Sentence: Today is a sunny day.","output":"#include<string> #include<vector> #include<sstream> std::string sentence = \\"Today is a sunny day.\\"; std::istringstream iss(sentence); std::vector<std::string> words; for(std::string word; iss >> word; )     words.push_back(word); //words[] now contains the sentence split into words"},{"instruction":"Remove the extra spaces from a string so that the output does not contain any extra spaces in C++. String:    Coding     is     Fu","output":"#include<iostream> #include<string> std::string remove_extra_spaces(const std::string& str) {      std::string result;        int n = str.length();      bool isPreviousCharSpace = false;         for (int i = 0; i < n; i++) {          char ch = str[i];             if (ch == ' ' && !isPreviousCharSpace) {              result += ch;              isPreviousCharSpace = true;          }             else if (ch != ' ') {              result += ch;              isPreviousCharSpace = false;          }      }         return result;  }  int main()  {      std::string str = \\"  Coding     is     Fun   \\";      std::cout << remove_extra_spaces(str) << std::endl;      return 0;  }  // Output: Coding is Fun"},{"instruction":"Find the average of all the elements in an array using JavaScript. [1,2, 3, 4]","output":"let average = array.reduce((acc, curr) => acc + curr, 0) / array.length; console.log(average); // Output: 2.5"},{"instruction":"Format a given date as mm/dd/yyyy using C++. Date: April 14, 2021","output":"#include <iostream> #include <ctime> int main()  {   time_t now = time(0);   tm *ltm = localtime(&now);   ltm->tm_mon = 3;  // set month to April   ltm->tm_mday = 14; // set date to 14      std::cout << std::put_time(ltm, \\"%m/%d/%Y\\") << 'n';   return 0; } // Output: 04/14/2021"},{"instruction":"lter this code so that it can run on python3, def say_message(message, times=1):     print message * times say_message(\\"Hello world!\\")","output":"\\"\\"\\" Alter this code so that it can run on Python 3 \\"\\"\\" def say_message(message, times=1):     print(message * times) say_message(\\"Hello world!\\")"},{"instruction":"generate a function minL that takes two lists and returns the smallest element from both lists. list1 = [9, 11, 8, 10, 20]  list2 = [3, 10, 12]","output":"\\"\\"\\" Generate a function minL that takes two lists and returns the smallest element from both lists. \\"\\"\\" def minL(list1, list2):     min_list = sorted(list1 + list2)     print('The minimum of list1 and list2 is: ', min_list[0])  if __name__ == '__main__':      list1 = [9, 11, 8, 10, 20]      list2 = [3, 10, 12]      minL(list1, list2)"},{"instruction":"eate a function that calculates the total cost of a meal including taxes and tips. meal_price = 35 sales_tax = 0.09 tip_percentage = 0.18","output":"\\"\\"\\" Create a function that calculates the total cost of a meal including taxes and tips \\"\\"\\" def calculate_total_meal_cost(meal_price, sales_tax, tip_percentage):      # Calculate subtotal     subtotal = meal_price + meal_price * tip_percentage     # Calculate tax     tax =  subtotal * sales_tax     # Calculate total     total = subtotal + tax     return total if __name__ == '__main__':      meal_price = 35     sales_tax = 0.09     tip_percentage = 0.18     print(\\"Total cost of meal is: \\" + str(calculate_total_meal_cost(meal_price, sales_tax, tip_percentage)))"},{"instruction":"edit the existing function to calculate the compound interest. # Calculate Simple Interest  def calcSimpleInterest(p, r, t):      return (p * r * t) / 100","output":"\\"\\"\\" Edit the existing function to calculate the compound interest \\"\\"\\" # Calculate Compound Interest  def calcCompoundInterest(p, r, t):      # Calculate Simple Interest      interest= p * (pow((1 + r / 100), t))      return interest if __name__ == '__main__':      principal_amount = 1000     rate_of_interest = 5     time_period = 5     print(\\"Compound interest is\\", calcCompoundInterest(principal_amount, rate_of_interest, time_period))"},{"instruction":"Generate a function to calculate the probability of an event. num_outcomes = 36 num_favourable_outcomes = 9","output":"\\"\\"\\" Generate a function to calculate the probability of an event \\"\\"\\" def calculate_probability(num_outcomes, num_favourable_outcomes):     # calculate probability      probability = float(num_favourable_outcomes) / float(num_outcomes)     return probability      if __name__ == '__main__':      num_outcomes = 36     num_favourable_outcomes = 9     print(\\"Probability of an event is: \\" + str(calculate_probability(num_outcomes, num_favourable_outcomes)))"},{"instruction":"determine if two strings are anagrams or not. string1 = 'listen' string2 = 'silent'","output":"\\"\\"\\" Determine if two strings are anagrams or not \\"\\"\\" def is_anagram(string1, string2):        # get lists of characters     list1 = list(string1.lower())     list2 = list(string2.lower())     # sort both lists     list1.sort()     list2.sort()     if list1 == list2:          return True     else:         return False if __name__ == '__main__':      string1 = 'listen'     string2 = 'silent'     print(\\"Result: \\" + str(is_anagram(string1, string2)))"},{"instruction":"Given a binary tree, write a program to calculate the sum of all its nodes.","output":"def calculateSumOfBinaryTree(root):     if root == None:         return 0     else:         return root.data + calculateSumOfBinaryTree(root.left) + calculateSumOfBinaryTree(root.right)"},{"instruction":"Write a function to calculate the number of letter and non-letter characters in a string. Input: 'If These Hills'","output":"def numberOfLettersAndNonLetterCharacters(string):     count_characters = 0     count_non_characters = 0          for char in string:         if char.isalpha():             count_characters += 1         else:             count_non_characters += 1     return (count_characters, count_non_characters) print(numberOfLettersAndNonLetterCharacters('If These Hills'))"},{"instruction":"Write a correct implementation of the following algorithm Binary search for an element x in a sorted array","output":"def binary_search(arr, x):      low = 0     high = len(arr) - 1     while low <= high:          mid = (high+low)//2         if arr[mid] < x:              low = mid + 1         elif arr[mid] > x:              high = mid - 1         else:              return mid         return -1"},{"instruction":"Generate a correct SQL query to obtain all records from the following table Table - PRODUCT","output":"SELECT * FROM PRODUCT;"},{"instruction":"Find the first common ancestor of two nodes in a binary tree Node 1: 15 Node 2: 16","output":"The first common ancestor of node 1 (15) and node 2 (16) is 14."},{"instruction":"Create a HTML program that displays student records <No input>","output":"<!DOCTYPE html> <html> <head>     <title>Student Records</title> </head> <body>     <h1>Student Records</h1>     <table>         <tr>             <th>Name</th>             <th>Age</th>             <th>Gender</th>         </tr>         <tr>             <td>Jerry</td>             <td>21</td>             <td>Male</td>         </tr>         <tr>             <td>Janice</td>             <td>18</td>             <td>Female</td>         </tr>         <tr>             <td>Jack</td>             <td>20</td>             <td>Male</td>         </tr>     </table> </body> </html>"},{"instruction":"Create a graphical user interface using Python to perform the following function Take two inputs from the user: a name and an age","output":"import tkinter     # Create an instance of tkinter  root = tkinter.Tk()      # Create two lables and two input boxes  name_label = tkinter.Label(root, text ='Name: ')    age_label = tkinter.Label(root, text ='Age: ')  name_entry = tkinter.Entry(root)  age_entry = tkinter.Entry(root)     # Place the labels,entry boxes in the desired layout  name_label.grid(row = 0, column = 0)    name_entry.grid(row = 0, column = 1)   age_label.grid(row = 1, column = 0)    age_entry.grid(row = 1, column = 1)     root.mainloop()"},{"instruction":"Find the sum of the following fibonacci sequence 0, 1, 1, 2, 3, 5, 8, 13","output":"The sum of the given sequence is 33."},{"instruction":"Fill in the blanks of the following Python code to implement a Selection Sort algorithm. def selection_sort(arr):     for [i] in [range](len(arr),1,-1):         max_element=arr[0]         for [j] in [range]([i]):             if arr[j] > max_element :                 max_element=arr[j]                    [temp] = arr[i]         arr[i] = max_element         arr[arr.index(max_element)] = [temp]","output":"def selection_sort(arr):     for i in range(len(arr),1,-1):         max_element=arr[0]         for j in range(i):             if arr[j] > max_element :                 max_element=arr[j]                    temp = arr[i-1]         arr[i-1] = max_element         arr[arr.index(max_element)] = temp"},{"instruction":"What is the reuse principle in software engineering?","output":"The reuse principle in software engineering states that software components should be written and designed for reuse in other software components and systems. This can save developers time and money when developing software, since they can use existing components to build new functions and features into their software products. Additionally, it helps promote consistent coding, makes debugging easier, and reduces the risk of introducing bugs and other errors."},{"instruction":"Write a function in C that returns the maximum element in an integer array.","output":"int findMaximum(int arr[], int size) {     int max = arr[0];     for (int i=1; i<size; i++)         if (arr[i] > max)            max = arr[i];       return max; }"},{"instruction":"Read the following command line arguments in Java and print out the values. -v -f -d input.tx","output":"String[] args = {\\"-v\\", \\"-f\\", \\"-d\\", \\"input.txt\\"}; for (String arg : args) {     System.out.println(arg); }"},{"instruction":"Write a function in Python that takes a list and returns the one with all negative numbers sorted in ascending order. [3, -4, 1, -2]","output":"def remove_negative_numbers(lst):   negative = []   for x in lst:     if x < 0:       negative.append(x)   return sorted(negative)"},{"instruction":"What is the difference between compile-time and run-time errors?","output":"Compile-time errors occur when code does not conform to the syntax specified by the programming language, and usually prevent the code from being executed. Run-time errors occur when code is syntactically correct, but there are still problems executing the code. Run-time errors typically occur at the point where code is executed, as opposed to compile-time errors which occur at the point of compilation. The types of errors usually depend on the type of language used for programming. For example, compiling Java code with a C++ compiler would cause a compile-time error since the two languages have different syntaxes."},{"instruction":"w would you insert an element into a pre-existing array using JavaScript?","output":"An element can be inserted into a pre-existing array using the JavaScript Array.prototype.push() method. The push() method takes a single element as an argument and appends it to the end of the array. For example, to insert the value 7 into an array, you could use the following syntax: array.push(7);"},{"instruction":"Write a function in Java to implement a Radix Sort algorithm.","output":"void radixSort(int arr[])  {      int n = arr.length;         // Find the maximum number to know number of digits      int max = getMax(arr, n);         // Do counting sort for every digit. Note that instead      // of passing digit number, exp is passed. exp is 10^i      // where i is current digit number      for (int exp = 1; max/exp > 0; exp *= 10)          countSort(arr, n, exp);  }  int getMax(int arr[], int n)  {      int max = arr[0];      for (int i = 1; i < n; i++)          if (arr[i] > max)              max = arr[i];      return max;  }     void countSort(int arr[], int n, int exp)  {      int output[n]; // output array      int i;      int count[10] = {0};         // Store count of occurrences in count[]      for (i = 0; i < n; i++)          count[ (arr[i]/exp)%10 ]++;         // Change count[i] so that count[i] now contains actual      //  position of this digit in output[]      for (i = 1; i < 10; i++)          count[i] += count[i - 1];         // Build the output array      for (i = n - 1; i >= 0; i--)      {          output[count[ (arr[i]/exp)%10 ] - 1] = arr[i];          count[ (arr[i]/exp)%10 ]--;      }         // Copy the output array to arr[], so that arr[] now      // contains sorted numbers according to curent digit      for (i = 0; i < n; i++)          arr[i] = output[i];  }"},{"instruction":"Classify a set of emails into 'spam' or 'not spam'. Email 1:  Hello there, I noticed that you have not been making use of our sales offers lately, so I thought I'd remind you about our special offers and discounts for the month. Don't miss out!","output":"not spam"},{"instruction":"Convert the following line of HTML code to lowercase. <P>","output":"<p>"},{"instruction":"Given an array of numbers, how would you filter the numbers that are divisible by 3. [1, 6, 7, 8, 10, 15, 18, 18]","output":"[6, 9, 15, 18, 18]"},{"instruction":"Generate the SQL query to select all columns from a table called \\"data_table\\".","output":"SELECT *  FROM data_table;"},{"instruction":"Given a list of strings, code a function to remove all duplicate strings. string_list = ['a', 'b', 'c', 'a', 'b', 'c', 'd']","output":"def remove_duplicates(string_list):     return list(set(string_list)) unique_string_list = remove_duplicates(string_list) print(unique_string_list) # Output: ['d', 'b', 'a', 'c']"},{"instruction":"Code a function to generate a random string of 10 randomly selected characters.","output":"import string import random def generate_random_string():     letters = string.ascii_lowercase     return ''.join(random.choice(letters) for i in range(10)) random_string = generate_random_string()"},{"instruction":"Write a python regex pattern to filter the following list of strings. string_list = ['ABC1', 'DEF2', 'GHI3', 'ABC4', 'JKL5']","output":"import re     string_list = ['ABC1', 'DEF2', 'GHI3', 'ABC4', 'JKL5'] filtered_list = list(filter(lambda x: re.search('^[A-Z]{3}[0-9]',x), string_list))  print(filtered_list)    # Output: ['ABC1', 'DEF2', 'GHI3']"},{"instruction":"Write a function that takes a list of numbers and a target number. Print the numbers in the list that are closest to the target. number_list = [7, 11, 13, 14, 40] target = 16","output":"def closest_numbers(number_list, target):     closest_numbers = min(map(lambda x : (x , abs(x - target)), number_list))     return closest_numbers[0] closest_num = closest_numbers(number_list, target) print(closest_num) # Output: 14"},{"instruction":"Generate code to find the mean of the following list of numbers. number_list = [3, 7, 4, 8, 5, 9]","output":"def mean(number_list):     return sum(number_list) / len(number_list)   average = mean(number_list) print(average) # Output: 6.166666666666667"},{"instruction":"Reorder the following array in decreasing order. [21, 12, 8, 36, 33]","output":"[36, 33, 21, 12, 8]"},{"instruction":"Construct a single list from the following list of lists. [[1, 2], [3, 4]]","output":"final_list = [1, 2, 3, 4]"},{"instruction":"Explain what boolean operators are and what do they do.","output":"Boolean operators are logical operators which allow us to connect two or more conditions in a statement. These operators return a boolean value when evaluates multiple conditions or objects. The three main boolean operators are AND, OR, NOT. The AND operator returns true if both conditions are true, OR operator if any one of the condition is true and NOT operator returns true only if the condition is false."},{"instruction":"Create a class, Car, with the following instance variables that store information about a car Number of doors, colour, model_year, speed","output":"class Car: \\tdef __init__(self, num_doors, color, model_year, speed): \\t\\tself.num_doors = num_doors \\t\\tself.color = color \\t\\tself.model_year = model_year \\t\\tself.speed = speed"},{"instruction":"What is a regular expression?","output":"A regular expression (regex) is a sequence of characters that define a search pattern used to match strings or pieces of text. It can be used for searching, validating and manipulating text."},{"instruction":"Write a code to get the sum of all the unique values in a dictionary. d = {'a': 2, 'b': 3, 'c': 4, 'd': 5}","output":"total_sum  = 0 for key in d:     total_sum += d[key]      print(total_sum)"},{"instruction":"Edit the text below and print a new sentence using the same words. The moon is bright and beautiful.","output":"Beautiful and bright, the moon shines."},{"instruction":"Construct a SELECT SQL query answer the question \\"Which employees have an age of 25?\\".","output":"SELECT * FROM employees WHERE age = 25;"},{"instruction":"Write a Python function that takes two strings and returns the longest common subsequence. str1 = \\"AGGTAB\\" str2 = \\"GXTXAYB","output":"def LongestCommonSubsequence(str1, str2):     n = len(str1)     m = len(str2)     t = [[0 for j in range(m+1)] for i in range(n+1)]          for i in range(1, n+1):          for j in range(1, m+1):               if str1[i-1] == str2[j-1]:                  t[i][j] = 1 + t[i-1][j-1]              else:                  t[i][j] = max(t[i-1][j], t[i][j-1])        return t[n][m]"},{"instruction":"Write a function to replace the Kth smallest number in integer array with 0. nums = [2, 9, 8, 11, 5] K = 3","output":"def replace_kth_smallest(nums, k):     min_num = min(nums)     min_count = nums.count(min_num)     if k > min_count:         k -= min_count         nums.remove(min_num)     nums[k-1] = 0     return nums"},{"instruction":"Write a function that can split an array into two equally-sized subarrays. arr = [1, 2, 3, 4, 5, 6]","output":"def split_array(arr):     if len(arr) % 2 != 0:         return False     mid = len(arr)// 2     left_arr = arr[:mid]     right_arr = arr[mid:]     return [left_arr, right_arr]"},{"instruction":"Write a function that can generate all permutations of a given string. string = \\"ABC","output":"def permute(string):     if len(string) == 1:         return [string]      prevList = permute(string[1:])      nextList = []      for i in range(len(prevList)):          for j in range(len(string)):              newString = prevList[i][:j] + string[0:1] + prevList[i][j:]              if newString not in nextList:                  nextList.append(newString)      return nextList"},{"instruction":"Deconstruct this line of Python code and explain what it does y = [x**2 for x in range(10)]","output":"This line of code is a Python List Comprehension, it will iterate through the range of 0 to 9 and square each of those numbers and add them to a new list 'y'. The list will contain the squares of the numbers 0 to 9, i.e. [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]."},{"instruction":"espective of the value of the input array, always print 1111111. arr = [6,2,3,4]","output":"for x in arr:     print(1111111)"},{"instruction":"Cut all the letters off the end of a given word. word = \\"Hello","output":"new_word = word[:len(word)-1] print(new_word)  # Output: Hell"},{"instruction":"Create a class that represents a circle radius = 5.5","output":"class Circle:     def __init__(self, radius):         self.radius = radius     def area(self):         return self.radius * self.radius * 3.14 c = Circle(radius)  print(c.area())  # Output: 95.033"},{"instruction":"Create a function in Python which takes a list and finds the second highest number in it. arr = [2, 3, 1, 5, 4]","output":"def second_highest_num(arr):   arr.sort()   return arr[-2]"},{"instruction":"Write a function in Python that takes a character (i.e. a string of length 1) and returns True if it is a vowel, False otherwise.","output":"def is_vowel(char):     vowels = 'aeiou'     return char in vowels"},{"instruction":"Create a Python function to print a Fibonacci sequence up to n number of digits.","output":"def fib(n):  a,b = 0,1  while a<n:   print(a, end=' ')   a,b = b,a+b  print()"},{"instruction":"Build a function to detect if a provided number is prime.","output":"def is_prime(num):     if num <= 1:          return False     for i in range(2, num):          if num % i == 0:              return False     return True"},{"instruction":"Write a function in Python that takes a number, x, and returns True if the number is even or False if the number is odd.","output":"def is_even(x):    return x%2 == 0"},{"instruction":"Create a Python program which takes a sentence and prints back the words in reverse order","output":"def reverse_words(sentence):   words = sentence.split()   words.reverse()   return ' '.join(words)"},{"instruction":"Generate a function in Python which takes a list and sorts the list elements in ascending order","output":"def sort_ascending(nums):   return sorted(nums)"},{"instruction":"Write a Python program to print the calendar of a given month and year","output":"import calendar def get_calendar(month, year):   return calendar.month(year, month)"},{"instruction":"Design a JSON schema for an item.","output":"{     \\"type\\": \\"object\\",     \\"properties\\": {         \\"id\\": {             \\"type\\": \\"string\\"         },         \\"name\\": {             \\"type\\": \\"string\\"         },         \\"price\\": {             \\"type\\": \\"number\\"         },         \\"quantity\\": {             \\"type\\": \\"integer\\"         }     },     \\"required\\": [\\"id\\", \\"name\\", \\"price\\", \\"quantity\\"] }"},{"instruction":"Define a class \\"Car\\" with two data attributes \\"top speed\\" and \\"model year\\".","output":"class Car:     def __init__(self, top_speed, model_year):         self.top_speed = top_speed         self.model_year = model_year"},{"instruction":"Write code to search for a number in a sorted array.","output":"def binary_search(list, target):     low = 0     high = len(list)-1     while low <= high:         mid = (low + high) // 2         if list[mid] == target:             return mid         if list[mid] < target:             low = mid + 1         else:             high = mid - 1     return -1"},{"instruction":"Create a BST with two data elements 10 and 15.","output":"class Node:     def __init__(self, data):         self.data = data          self.left = None         self.right = None class BST:     def __init__(self):         self.root = None           def insert(self, value):         if self.root is None:             self.root = Node(value)         else:             self._insert(value, self.root)        def _insert(self, value, cur_node):         if value < cur_node.data:             if cur_node.left is None:                 cur_node.left = Node(value)             else:                 self._insert(value, cur_node.left)         elif value >= cur_node.data:             if cur_node.right is None:                 cur_node.right = Node(value)             else:                 self._insert(value, cur_node.right)         else:             pass  bst = BST() bst.insert(10) bst.insert(15)"},{"instruction":"Write a function to print out all possible permutations of a list of numbers. list = [1, 2, 3]","output":"def permutations(list):      if len(list) == 0:          return []      if len(list) == 1:          return [list]     l = [] #empty list         for i in range(len(list)):          m = list[i]          remList = list[:i] + list[i+1:]          for p in permutations(remList):              l.append([m] + p)      return l"},{"instruction":"Change the CSS style of the paragraph element below so that it has a red border around it. <p>This is my paragraph</p>","output":"<p style=\\"border: 1px solid red;\\">This is my paragraph</p>"},{"instruction":"Calculate the total of the numbers in the array below. [5, 10, 15]","output":"30"},{"instruction":"Write a Python code snippet that checks if all elements in the input list are equal. [10, 10, 10]","output":"all_equal = all(x == 10 for x in [10, 10, 10])"},{"instruction":"Create an API endpoint that takes two inputs (phone number and name) and updates contact details in the database.","output":"@app.route(\\"/api/update_contact_details\\", methods=['PUT']) def update_contact_details():     # Get the inputs from the request body     phone_number = request.json['phone_number']     name = request.json['name']     # Query the database     db.execute(\\"UPDATE contacts SET name = '{name}' WHERE phone = '{phone_number}'\\".format(name=name, phone_number=phone_number))     return jsonify(status=\\"success\\")"},{"instruction":"Generate a hash for the string \\"AutomatedAssistant","output":"d3eb3504653eba66b47a82f3cb5279ae9133f2584e00cbc56434a3d877f7b284"},{"instruction":"Calculate the median of the following numbers: 14, 30, 5, 10.","output":"10"},{"instruction":"Create a table in a MySQL database that contains a list of titles with two columns (\\"title\\" and \\"description\\").","output":"CREATE TABLE titles (    title VARCHAR(255) NOT NULL,    description VARCHAR(255) NOT NULL );"},{"instruction":"Parse the JSON text below and add \\"City\\" to the dictionary. {  \\"Name\\": \\"John\\",  \\"Age\\": 32 }","output":"{  \\"Name\\": \\"John\\",  \\"Age\\": 32,  \\"City\\": \\"\\" }"},{"instruction":"Calculate the cube root of 533.","output":"7.777314028068125"},{"instruction":"Write a SQL query that selects all the records from the table student.","output":"SELECT * FROM student;"},{"instruction":"Modify the following code to add a new item to the list at a specific index. lst = [\\"a\\", \\"b\\", \\"c\\", \\"d\\"]","output":"lst = [\\"a\\", \\"b\\", \\"c\\", \\"d\\"] lst.insert(2, \\"e\\") print(lst) # output ['a', 'b', 'e', 'c', 'd']"},{"instruction":"Write a Python program to calculate the frequency of each element in a given list. mylist = [2, 3, 4, 2, 3, 5, 6, 7]","output":"def frequency_count(mylist):     freq = {}     for element in mylist:         if element in freq:             freq[element] += 1         else:             freq[element] = 1     return freq      print(frequency_count(mylist)) # output {2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1}"},{"instruction":"Create a module in Python to read webpages into the program","output":"import urllib def read_webpage(url):     with urllib.request.urlopen(url) as response:         return response.read()"},{"instruction":"Rewrite the following code in a more efficient way, keeping the same logic: for i in range(len(lst)-1):     for j in range(i+1, len(lst)):         if lst[i]==lst[j]:             return True","output":"def find_duplicate(lst):     seen = set()     for elem in lst:         if elem in seen:             return True         seen.add(elem)     return False"},{"instruction":"Generate a list of prime numbers","output":"def generate_primes(n):     prime_list = []     for num in range(2, n + 1):          if all(num % i != 0 for i in range(2, num)): # check if num is prime             prime_list.append(num)     return prime_list"},{"instruction":"Determine whether a given number is an armstrong number or not 153","output":"def is_armstrong_number(num):   digits = [int(x) for x in str(num)]   sum_ = 0   for digit in digits:     sum_ += pow(digit, len(digits))   return num == sum_ print(is_armstrong_number(153)) # Output: True"},{"instruction":"You need to write a function to find the index of a value in an array [1, 2, 3, 4], 3","output":"def find_index(arr, val):     for index, elem in enumerate(arr):         if val == elem:             return index     return -1 print(find_index([1, 2, 3, 4], 3)) # Output: 2"},{"instruction":"Output the following array in a column [1, 2, 3, 4]","output":"for x in [1,2,3,4]:     print(x)      # Output: 1 2 3 4"},{"instruction":"Sort a given array according to the given criteria [1, 20, 12, 15, 5], 'desc'","output":"def sort_array(arr, order):     if order == 'asc':          arr.sort()      else:          arr.sort(reverse=True)      return arr  arr = [1, 20, 12, 15, 5]  order = 'desc' print(sort_array(arr, order)) # Output: [20, 15, 12, 5, 1]"},{"instruction":"Write a JavaScript statement to delete all cookies","output":"document.cookie = \\"\\";"},{"instruction":"Write a function to parse HTML","output":"import bs4 as bs def parse_html(html):     soup = bs.BeautifulSoup(html, 'html.parser')     return soup"},{"instruction":"Generate a code to extract data from a table 'book_list' that has columns book_id and title. Extract data from book_list table where book_id is greater than 500.","output":"SELECT * FROM book_list WHERE book_id > 500;"},{"instruction":"Write a comment for the following code def convert_to_timestamp(date):      # convert date to timestamp     time_converted = time.strptime(date, \\"%Y-%m-%d %H:%M:%S\\")     timestamp = time.mktime(time_converted)     return timestamp","output":"# This function takes a date in string format \\"%Y-%m-%d %H:%M:%S\\" and returns the corresponding timestamp in seconds."},{"instruction":"Create multiple classes in Java with the provided input. class Player {     String name;     int age;     String club;      String position;","output":"class Player {     String name;      int age;     String club;     String position;     // Constructors     public Player(String name, int age, String club, String position) {         this.name = name;         this.age = age;         this.club = club;         this.position = position;     }          // Getters and Setters     public String getName() {         return this.name;     }     public void setName(String name) {         this.name = name;     }     public int getAge() {         return this.age;     }     public void setAge(int age) {         this.age = age;     }     public String getClub() {         return this.club;     }     public void setClub(String club) {         this.club = club;     }     public String getPosition() {         return this.position;     }     public void setPosition(String position) {         this.position = position;     } }"},{"instruction":"Edit the code to fix the following bug: The code doesn't return the expected output. def sum(numbers):     x = 0     for n in numbers:         x += n     return x","output":"def sum(numbers):     x = 0     for n in numbers:         x += n     return int(x)"},{"instruction":"Create a graphical representation of the input data. Apple : 48  Orange : 32  Banana : 68","output":"<img src=\\"output-graph.png\\" width=\\"400\\" height=\\"200\\" />"},{"instruction":"Combine the input arrays into a single array. Array1 = [3, 4, 9, 6] Array2 = [2, 6, 8, 7]","output":"Array = [3, 4, 9, 6, 2, 6, 8, 7]"},{"instruction":"Write a python code snippet to square the number 12.","output":"x = 12 y = x**2 print(y)"},{"instruction":"Write a SQL query to find the names of all students who are enrolled in the course \\"Intro to Data Science\\".","output":"SELECT name FROM Student   WHERE course_name = 'Intro to Data Science';"},{"instruction":"Write a C# code snippet to add two integers a and b. int a = 3; int b = 4;","output":"int c = a + b;"},{"instruction":"Write a Java code to find the maximum of two numbers a and b. int a = 3; int b = 4;","output":"int max; if (a > b) {  max = a; } else {  max = b; }"},{"instruction":"Write a python code to check for a number being prime or not. num = 11","output":"# Initialize a boolean no_prime no_prime = False # Check all numbers lower than num for i in range(2, num):     if num % i == 0:          no_prime = True         break  # Print the appropriate output if no_prime:     print(num, 'is not prime') else:     print(num, 'is prime')"},{"instruction":"Write an SQL query to find the ID, course name and instructor name for courses taught by instructor \\"John Smith\\".","output":"SELECT id, course_name, instructor_name   FROM Courses   WHERE instructor_name = 'John Smith';"},{"instruction":"Write a Python code to find the number of vowels in a provided string. string = \\"Hello, World!","output":"# Count the number of vowels in the string num_vowels = 0 for char in string:     if char in 'aeiouAEIOU':         num_vowels += 1 print(\\"Number of vowels:\\", num_vowels)"},{"instruction":"Write an SQL query to find the names of all students who have scored more than 80% marks in their exams.","output":"SELECT name FROM Student   WHERE marks > 80;"},{"instruction":"Write a Javascript code to remove all duplicate values from an array, arr. let arr = [1,2,2,3,4,4,5];","output":"let uniqueValues = [...new Set(arr)]; console.log(uniqueValues);"},{"instruction":"Write an SQL query to calculate the average final grade of all students.","output":"SELECT AVG (finalGrade)    FROM Student;"},{"instruction":"Design a tree data structure to store employee records in an organization.","output":"class EmployeeTree:     def __init__(self, name):         self.name = name         self.children = []     # add a sub-employee to the tree     def add_child(self, name):         self.children.append(EmployeeTree(name))     # remove a sub-employee from the tree     def remove_child(self, name):         for child in self.children:             if child.name == name:                 self.children.remove(child)"},{"instruction":"Create a class called \\"IDgenerator\\" that generates a list of unique random numbers between a given range.","output":"import random class IDGenerator:     def __init__(self, min_val, max_val):         self.min_val = min_val         self.max_val = max_val         self.ids = []     def generate(self):         rand_int = random.randint(self.min_val, self.max_val)         while rand_int in self.ids:             rand_int = random.randint(self.min_val, self.max_val)         self.ids.append(rand_int)         return rand_int"},{"instruction":"w do I create a function that sums two integers in Python?","output":"def add_two_ints(a, b):     return a + b"},{"instruction":"Write a code in C++ to print the elements of a given array of strings using a for loop.","output":"#include <iostream> void printArray(std::string arr[], int n)  {      for (int i = 0; i < n; i++)          std::cout << arr[i] << std::endl;  }  int main(){ \\tstd::string arr[] = {\\"one\\", \\"two\\", \\"three\\"};      int n = sizeof(arr) / sizeof(arr[0]);      printArray(arr, n);  \\treturn 0; }"},{"instruction":"Java, how do I create an array of integers from a given array of strings with integer values?","output":"String[] strArray = {\\"1\\", \\"2\\", \\"3\\", \\"4\\"}; int[] intArray = Arrays.stream(strArray)                             .mapToInt(Integer::parseInt)                             .toArray();"},{"instruction":"Edit the following HTML page to add a table to the page. <!DOCTYPE html> <html> <head>  <title>My HTML Page</title> </head> <body>  <h1>My HTML Page</h1> </body> </html>","output":"<!DOCTYPE html> <html> <head>  <title>My HTML Page</title> </head> <body>  <h1>My HTML Page</h1>  <table>   <tr>    <th>Column 1</th>    <th>Column 2</th>    <th>Column 3</th>   </tr>   <tr>    <td>Data 1</td>    <td>Data 2</td>    <td>Data 3</td>   </tr>  </table> </body> </html>"},{"instruction":"Create a function for converting text to an all-uppercase string.","output":"function toUpperCase(str) {   return str.toUpperCase(); }"},{"instruction":"Create a Java program that returns the minimum value in an array of integers.","output":"public static int minValue(int[] arr) {  int minValue = arr[0];  for (int i = 1; i < arr.length; i++) {  if (arr[i] < minValue) {  minValue = arr[i];  }  }  return minValue; }"},{"instruction":"Write an SQL statement to get the top 5 most expensive movies from an inventory table.","output":"SELECT title, price FROM inventory ORDER BY price DESC LIMIT 5;"},{"instruction":"Create an array of strings for the given string and return only the strings with a length equal to or greater than 5. \\"This is a string of words to te","output":"[\\"This\\", \\"string\\", \\"words\\", \\"test\\"]"},{"instruction":"Write a code snippet to find all combinations of 3 numbers in the array that sum to zero. [3, 5, -2, 1, -1, 0, 4]","output":"[[3, -2, 1], [5, -1, -4], [5, 1, -4], [-2, 0, 2]]"},{"instruction":"dentify and delete duplicate elements from an array in JavaScript. [1, 2, 3, 4, 4, 5]","output":"function removeDuplicates(arr) {   let unique = arr.filter((v, i, a) => a.indexOf(v) === i);   return unique; } let arr = [1, 2, 3, 4, 4, 5]; let result = removeDuplicates(arr); console.log(result); // [1, 2, 3, 4, 5]"},{"instruction":"Sort elements of an array in descending order in Java.","output":"public static int[] sortDesc(int[] nums) {  Arrays.sort(nums);  Collections.reverse(Arrays.asList(nums));    return nums; }"},{"instruction":"Write a PHP function for calculating the average of an array of numbers.","output":"function calculateAverage(numbers) {   sum = array_sum(numbers);   n = count(numbers);    average = sum/n;   return average; }"},{"instruction":"w to format a date in PHP?","output":"echo date(\\"Y-m-d\\", time()); // Outputs current date in the format \\"2020-01-30\\""},{"instruction":"w is a While Loop used in C++?","output":"while (expression) {    statement(s); } Typically, while loops are used when we need to continue looping until some condition is met."},{"instruction":"Create a class in Python to represent a rectangle with the attributes width, height, and area.","output":"class Rectangle:   def __init__(self, width, height):     self.width = width     self.height = height     self.area = width * height"},{"instruction":"w to create a new array from an existing array in JavaScript?","output":"const newArray = oldArray.slice(); // creates a shallow copy of the array // OR const newArray = [...oldArray]; // creates a shallow copy of the array"},{"instruction":"Write an SQL query to find all the customers with first names starting with \\"A\\" from the customers table. customers table","output":"SELECT * FROM customers  WHERE first_name LIKE 'A%'"},{"instruction":"Write a Java class that can be used to store and access a large dictionary. Large dictionary with 10000 word","output":"import java.util.HashMap; public class Dictionary {       private HashMap<String, String> dictionary;       public Dictionary() {         this.dictionary = new HashMap<>();     }       public void addWord(String word, String definition) {         dictionary.put(word, definition);     }       public String getDefinition(String word) {         return dictionary.get(word);     } }"},{"instruction":"Create a machine learning classifier that can classify the sentiment of a text. Text: This product is really bad","output":"# import required libraries import pandas as pd import numpy as np from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB # Read the data into a Pandas DataFrame data = pd.read_csv('data.csv') # Convert the Labels (Positive/Negative) to numbers data['Sentiment'] = [1 if sentiment == 'Positive' else 0 for sentiment in data['Sentiment']] # Create the feature matrix count_vectorizer = CountVectorizer() X = count_vectorizer.fit_transform(data['Text']) # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, data['Sentiment'], test_size=0.20, random_state=42) # Train a Multinomial Naive Bayes Classifier clf = MultinomialNB().fit(X_train, y_train) # Use the Classifier to predict the label of the input text prediction = clf.predict(count_vectorizer.transform([\\"This product is really bad\\"]))[0] if prediction == 1:     print(\\"Positive\\") else:     print(\\"Negative\\")"},{"instruction":"Use the NumPy package to multiply two matrices. Matrix1: [[1, 2], [3, 4]] Matrix2: [[2, 3], [4, 5]]","output":"import numpy as np   matrix1 = np.array([[1, 2], [3, 4]]) matrix2 = np.array([[2, 3], [4, 5]])   product = np.matmul(matrix1, matrix2) print(product) # Output # array([[10, 13], #        [22, 29]])"},{"instruction":"Find all substring of a string. String: \\"abcdefg","output":"# function to find all the substrings of a given string   def substr(string):       length = len(string)         # Weighted Index of the string       w_index = 0            list_substr = []         # Run a loop from 0 to n-1      while w_index < length:             # Run inner loop from w_index + 1 to n           s_index = w_index + 1         while s_index < length + 1:              list_substr.append(string[w_index:s_index])             s_index += 1                    w_index += 1                return list_substr # Test program  s = \\"abcdefg\\" print(substr(s))  # Output # ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'b', 'bc', 'bcd', 'bcde', 'bcdef', 'bcdefg', 'c', 'cd', 'cde', 'cdef', 'cdefg', 'd', 'de', 'def', 'defg', 'e', 'ef', 'efg', 'f', 'fg', 'g']"},{"instruction":"Convert a string to its inverse form. String: \\"Hello World!","output":"def string_inverse(string):      inverse_string = \\"\\"     for i in range(len(string)-1, -1, -1):         inverse_string += string[i]     return inverse_string # Test program string = \\"Hello World!\\" inverse_string = string_inverse(string) print(\\"Original String: %s\\" % string) print(\\"Inverse String: %s\\" % inverse_string) # Output # Original String: Hello World! # Inverse String: !dlroW olleH"},{"instruction":"Perform arithmetic operations on two numbers. Num1: 4 Num2: 2","output":"# Add the numbers sum = 4 + 2 # Subtract the numbers difference = 4 - 2 # Multiplication product = 4 * 2 # Exponent power = 4**2 # Division quotient = 4 / 2 # Integer Division div = 4 // 2 # Remainder remainder = 4 % 2 # Print the results print(\\"Sum is %snDifference is %snProduct is %snPower is %snQuotient is %snDivision is %snRemainder is %s\\"       %(str(sum),str(difference),str(product),str(power),str(quotient),str(div),str(remainder))) # Output: # Sum is 6 # Difference is 2 # Product is 8 # Power is 16 # Quotient is 2.0 # Division is 2 # Remainder is 0"},{"instruction":"Convert a string of numbers from one base to another. String: \\"101111\\" From Base: 2 To Base: 10","output":"# Get the numerical value of the string in the from base num = int(str(101111), 2) # Convert the numerical value to the to base converted_num = \\"{0:b}\\".format(num) print(converted_num) # Output # 47"},{"instruction":"Create a print statement that will print out a formatted table containing the elements of a 2D list. 2D List: [[1,2,3], [4,5,6], [7,8,9]]","output":"# Get the list twoD_list = [[1,2,3], [4,5,6], [7,8,9]] # Print it out as a table for row in twoD_list:     for val in row:         print('{:4}'.format(val), end=\\"\\")     print() # Output #   1   2   3 #   4   5   6 #   7   8   9"},{"instruction":"Create a function that can detect if a word is a palindrome. Word: racecar","output":"def isPalindrome(string):      left = 0     right = len(string) - 1        while right >= left:         if not string[left] == string[right]:             return False         left += 1         right -= 1     return True # Test program isPalindrome(\\"racecar\\") # Output # True"},{"instruction":"Write a regular expression that can detect emails.","output":"import re # Regular expression regex = r\\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+)\\" # Search for any emails that match the regular expression matches = re.findall(regex, string) # Print out the emails that were found for match in matches:     print(match)"},{"instruction":"Create a browser application in JavaScript that toggles a dark-mode.","output":"const toggleMode = () => {   let mode = localStorage.getItem(\\"mode\\");    if (mode) {     document.body.className = mode;     mode === \\"dark-mode\\" ? mode = \\"light-mode\\" : mode = \\"dark-mode\\";     localStorage.setItem(\\"mode\\", mode);   } else {     localStorage.setItem(\\"mode\\", \\"dark-mode\\");     document.body.className = \\"dark-mode\\";   } } toggleMode()"},{"instruction":"Print the third element in this array. [1,2,3,4,5]","output":"3"},{"instruction":"Using regular expression, write a pattern to match a string of any length which ends with \\"oo\\".","output":".*oo"},{"instruction":"Write a query to retrieve the distinct job titles from an \\"employees\\" table.","output":"SELECT DISTINCT job_title FROM employees"},{"instruction":"Using CSS, write a class selector to change the color of text to blue.","output":".blue-text {   color: blue; }"},{"instruction":"Write an SQL query to order the employees in an \\"employees\\" table first by age, smallest to largest, and then by name alphabetically.","output":"SELECT * FROM employees ORDER BY age ASC, name ASC"},{"instruction":"Write an if-else statement in Java that prints \\"red\\" if a variable \\"color\\" is set to \\"red\\" and prints \\"blue\\" otherwise.","output":"if (color == \\"red\\") {   System.out.println(\\"red\\"); } else {   System.out.println(\\"blue\\"); }"},{"instruction":"Write a Python function to print a multiplication table of size 10.","output":"def print_multiplication_table(size):     for i in range(1, size+1):         for j in range(1, size+1):             print(i*j, end=\\"t\\")         print(\\"r\\")   print_multiplication_table(10)"},{"instruction":"Create an HTML table with the columns \\"Name\\", \\"Age\\", and \\"Occupation\\".","output":"<table>  <thead>   <tr>    <th>Name</th>    <th>Age</th>    <th>Occupation</th>   </tr>  </thead>  <tbody>   <tr>    <td></td>    <td></td>    <td></td>   </tr>  </tbody> </table>"},{"instruction":"Define four classes in Java that form a hierarchy of fruit.","output":"// Base class public abstract class Fruit {        private String color;        public Fruit(String color) {          this.color = color;      }      public abstract double getWeight();  }  // Inheriting class public class Apple extends Fruit {        private double weight;        public Apple(String color, double weight) {          super(color);          this.weight = weight;      }      @Override     public double getWeight() {          return weight;      }  }  // Inheriting class public class Banana extends Fruit {                private double length;        public Banana(String color, double length) {          super(color);          this.length = length;      }      @Override     public double getWeight() {          return length * 0.5;      }  }  // Inheriting class public class Orange extends Fruit {        private double radius;        public Orange(String color, double radius) {          super(color);          this.radius = radius;      }      @Override     public double getWeight() {          return Math.round(Math.PI * Math.pow(radius, 2));      }  }"},{"instruction":"Generate a random number between 0 and 10 and store it in a variable called \\"randNum\\".","output":"let randNum = Math.floor(Math.random() * 11);"},{"instruction":"Create a function to retrieve the last three elements in an array and store them in a new array. let array = [1, 2, 3, 4, 5, 6, 7]","output":"const lastThreeElements = (arr) => {     const newArray = [];     for (let i = arr.length - 3; i < arr.length; i++) {         newArray.push(arr[i]);     }     return newArray; }; let lastThree = lastThreeElements(array); console.log(lastThree); // Output: [5, 6, 7]"},{"instruction":"Separate odd numbers from an array and store them in a different array. let array = [1,2,3,4,5,6,7,8,9]","output":"const oddNumbers = (arr) => {     const odd = [];     for (let i = 0; i < arr.length; i++) {         if (arr[i] % 2 !== 0) {             odd.push(arr[i]);         }     }     return odd; }; let odds = oddNumbers(array); console.log(odds); // Output: [1, 3, 5, 7, 9]"},{"instruction":"Create an array of the words in a given string and sort them alphabetically. \\"Hello World How Are You","output":"const alphabetize = (str) => {     const words = str.split(' ');     words.sort();     return words; }; let sortedWords = alphabetize('Hello World How Are You'); console.log(sortedWords); // Output: ['Are', 'Hello', 'How', 'You', 'World']"},{"instruction":"Calculate the length of each word in a given string and store them in an array. \\"Hello World How Are You","output":"const wordLength = (str) => {     const words = str.split(' ');     const lengthArray = [];          for (let i = 0; i < words.length; i++) {         lengthArray.push(words[i].length);     }          return lengthArray; }; let wordLengths = wordLength('Hello World How Are You'); console.log(wordLengths); // Output: [5, 5, 3, 3, 3]"},{"instruction":"Create a selector for a page element with the id \\"main-heading\\".","output":"const mainHeading = document.getElementById('main-heading');"},{"instruction":"Compare two strings and returns \\"yes\\" if they are equal, otherwise returns \\"no\\". \\"Apple\\", \\"apple","output":"const stringCompare = (str1, str2) => {     if (str1.toLowerCase() === str2.toLowerCase()) {         return 'yes';     } else {         return 'no';     } }; let compResult = stringCompare('Apple', 'apple'); console.log(compResult); // Output: 'yes'"},{"instruction":"Check whether or not an input is a palindrome using a regular expression. \\"race car","output":"const isPalindromeRegEx = (str) => {     let regEx = /[W_]/g;     let lowStr = str.toLowerCase().replace(regEx, '');     let reverseStr = lowStr.split('').reverse().join('');          if (lowStr === reverseStr) {         return true;     } else {         return false;     } }; let isPalindromeCheckRegEx = isPalindromeRegEx('race car'); console.log(isPalindromeCheckRegEx); // Output: true"},{"instruction":"Create a validation function to check if the inputed string contains any numbers.","output":"import re def validate_string(input_str):     pattern = r\\"d\\"     if re.search(pattern, input_str):         return False     else:         return True"},{"instruction":"Write a SQL query to retrieve the details of all customers who have placed orders with status \\"Delivered","output":"SELECT Customer.*  FROM Customer  INNER JOIN Orders ON Customer.ID = Orders.CustomerID  WHERE Orders.Status = 'Delivered'"},{"instruction":"Rewrite the code below to remove the repetition in the code using a loop. names = [\\"John\\", \\"Sam\\", \\"Paul\\"] print(names[0]) print(names[1]) print(names[2])","output":"names = [\\"John\\", \\"Sam\\", \\"Paul\\"] for name in names:     print(name)"},{"instruction":"Create a python class with a method to generate the following table format","output":"class Table_Generator:     def generate_table(self):         print('+---------+--------+--------+')         print('|   S.No  |  Name  |  Age   |')         print('+---------+--------+--------+')"},{"instruction":"w can the given list be sorted according to the age? data = [('John', 20), ('Vikram', 25), ('Bob', 21), ('David', 23)]","output":"data.sort(key=lambda x: x[1])  # Output [('John', 20), ('Bob', 21), ('David', 23), ('Vikram', 25)]"},{"instruction":"Name one benefit of using a function in Python.","output":"One of the key benefits of using functions in Python is code reusability. Functions help reduce the code duplication and promote code readability by allowing us to store and reuse code in a single place. This makes it easier for us to debug and modify existing code. Furthermore, functions can help reduce the cognitive load and effort required to understand the code. As functions encapsulate related code blocks, we can focus on the logic contained within the function instead of worrying about unrelated code."},{"instruction":"w could you execute a JavaScript code snippet named 'my_script.js' after the page has been loaded?","output":"We can use the 'onload' event to execute our JavaScript code snippet after the page has been loaded. For example, we can use the following code to execute the 'my_script.js' file once the page has been loaded:  window.onload = function() {     let script = document.createElement(\\"script\\");     script.type = \\"text/javascript\\";     script.src = \\"my_script.js\\";     document.getElementsByTagName(\\"head\\")[0].appendChild(script); };"},{"instruction":"What is the purpose of the keyword \`break\` in a JavaScript loop?","output":"The keyword 'break' is used in a loop to stop the execution of the loop and exit the loop. It can be used to terminate an infinite loop and to force an immediate exit from a loop even if the looping condition has not been met."},{"instruction":"What could be a use case of a 'while' loop in Python?","output":"A while loop can be used to iterate over a sequence or perform a computation until a specific condition is met. For example, it can be used to generate a list of prime numbers, where it would check if the current number is a prime number by checking if its divisible by any of the already discovered primes before it."},{"instruction":"Construct an Express route for handling browser requests for a web page named 'Home'.","output":"app.get(\\"/Home\\", (req, res) => {     // Handle Home page request here });"},{"instruction":"Suggest a data structure in Python to store a list of countries and their capitals.","output":"A dictionary can be used to store a list of countries and their respective capitals. The key for each country should be the name of the country and the value should be its capital city. For example:  dict = {     'India': 'New Delhi',     'China': 'Beijing',      'UK': 'London' }"},{"instruction":"Construct a Django model field for storing a user's age.","output":"age = models.IntegerField()"},{"instruction":"What could be a use case of applying an algorithm such as the K-Means Clustering Algorithm?","output":"The K-Means Clustering Algorithm can be used to partition a data set into k distinct clusters of samples such that each sample belongs to the cluster with the nearest mean. It can be used for tasks such as data segmentation, anomaly detection, customer segmentation and image compression."},{"instruction":"Write a Python program to create a nested dictionary from two lists. l1 = ['a', 'b', 'c']  l2 = [1, 2, 3]","output":"{'a': 1, 'b': 2, 'c': 3}"},{"instruction":"Write a CSS style to set the font size of all h1 elements on a webpage to 24px.","output":"h1 {  font-size: 24px; }"},{"instruction":"Write an SQL query to select the top 5 employees who have the highest salary in a given department.","output":"SELECT * FROM Employees WHERE Department_ID = <Department_ID> ORDER BY Salary DESC LIMIT 5;"},{"instruction":"Write a JavaScript function to determine if an array is sorted or not.","output":"function isSorted(arr) {   for (let i=1; i<arr.length; i++) {     if (arr[i] < arr[i-1]) return false;   }   return true; }"},{"instruction":"Write a MySQL query to find the first and last name of all the employees in the ‘sales’ department.","output":"SELECT FirstName, LastName FROM Employees WHERE Department = 'sales';"},{"instruction":"Analyze the given JavaScript code, and identify the logical operator being used. if (age <= 18 || age >= 65)","output":"The logical operator being used is the \\"or\\" operator (||)."},{"instruction":"Create a HTML form to accept a user's name, address, and telephone number.","output":"<form>   <label>Name:</label><br>   <input type=\\"text\\" name=\\"name\\"/><br>   <label>Address:</label><br>   <input type=\\"text\\" name=\\"address\\"/><br>   <label>Telephone:</label><br>   <input type=\\"text\\" name=\\"telephone\\"/><br>   <input type=\\"submit\\" value=\\"Submit\\"/> </form>"},{"instruction":"Create a random sequence of 100 numbers between 1 and 10, both inclusive, and print them on the screen.","output":"2, 6, 7, 1, 5, 4, 4, 7, 1, 6, 8, 9, 4, 1, 3, 4, 5, 10, 3, 7, 1, 8, 10, 8, 8, 2, 10, 7, 5, 10, 8, 7, 5, 6, 1, 7, 8, 2, 8, 7, 5, 1, 3, 7, 10, 2, 10, 7, 5, 6, 9, 2, 4, 2, 1, 2, 5, 2, 4, 7, 6, 2, 4, 7, 1, 2, 7, 10, 4, 6, 7, 4, 1, 5, 7, 3, 8, 4, 7, 10, 6, 8, 2, 9, 2, 5, 2, 3, 6, 4, 9, 4, 2, 6, 7"},{"instruction":"Generate a set of SQL commands to list all the customers and their email addresses in a table named customers.","output":"SELECT * FROM customers ORDER BY email;"},{"instruction":"w would you store the values of this array of dictionaries in a database? [  {'name': 'John', 'age': 28},  {'name': 'Marry', 'age': 27},  {'name': 'David', 'age': 30} ]","output":"The values of the array of dictionaries can be stored in a database using an SQL query. The query would create a table with columns for each key in the dictionaries and then store the values in their respective columns. For each dictionary, an INSERT query would be run to add the values of that dictionary to database."},{"instruction":"mplement a function that prints n asterisk characters in a row.","output":"def print_asterisks(n):   for i in range(n):      print(\\"*\\", end=\\"\\")   print()"},{"instruction":"Create a function that takes a string of brackets and checks if they are correctly matched or not.","output":"def check_brackets(bracket_string):     \\"\\"\\"     Function that checks if bracket string is correctly matched.     \\"\\"\\"     stack = []     open_brackets = {'[', '{', '('}     close_brackets = {']', '}', ')'}          for bracket in bracket_string:         if bracket in open_brackets:             stack.append(bracket)         elif bracket in close_brackets:             if not stack or close_brackets[bracket] != stack.pop():                 return False              return not stack"},{"instruction":"Write a function to delete redundant items from a list. [3, 2, 1, 3, 5, 6, 3, 2]","output":"def delete_redundant_items(list_param):     \\"\\"\\"     Function to delete redundant items from a list     \\"\\"\\"     result_list = []     for item in list_param:         if item not in result_list:             result_list.append(item)     return result_list"},{"instruction":"Select all the records from the Orders table with a status of 'active'.","output":"SELECT * FROM Orders WHERE status = 'active';"},{"instruction":"Explain the concept of Convolutional Neural Networks.","output":"Convolutional Neural Networks (CNNs) are a type of deep learning neural network used primarily in image processing, computer vision, and natural language processing tasks. CNNs utilize a grid of neurons that learn to extract relevant features from an input, such as patterns or shapes, known as filters. This allows CNNs to perform hierarchical feature extraction from input data, which is useful in areas where the data has a nonlinear or highly structured nature. CNNs can be used to classify images, detect objects in images, extract features from audio and video signals, and much more."},{"instruction":"Construct a for loop which adds up numbers.","output":"nums = [3, 4, 5, 6] total = 0 for num in nums:     total += num  print(total) # prints 18"},{"instruction":"Given a string of length N, provide an algorithm to determine if there is a substring in the string that repeats itself.","output":"The algorithm starts by comparing the first N characters to the next N characters in the string. If the characters match, then the algorithm returns true. If the characters do not match, the algorithm moves to the next set of N characters and compares them. If no match is found, the algorithm returns false. The time complexity of this algorithm is O(N^2)."},{"instruction":"Convert the following epoch time to a human-readable format. 1599462722","output":"August 28, 2020, 9:48:42 PM UTC"},{"instruction":"Create a JSON object that stores the following employee information. name: John Smith age: 28 department: Engineering","output":"{\\"name\\": \\"John Smith\\", \\"age\\": 28, \\"department\\": \\"Engineering\\"}"},{"instruction":"Suggest a data structure to store and retrieve a large amount of text data.","output":"A hash table is an ideal data structure for storing and retrieving large amounts of textual data, as it provides an efficient way to map and access data using a key-value pair. Hash tables use a hashing algorithm to efficiently map each key-value pair to a specific location within the table, making it much easier and faster to access any element."},{"instruction":"w would you optimize a loop which runs over an array?","output":"Loop optimization techniques can be applied in order to improve the efficiency of a loop which runs over an array. The most common techniques include avoiding unnecessary computations, using pre-computation, using memoization to store intermediate results, using loop unrolling and different ways of loop indexing. In addition, using the right data structures can greatly improve the performance of a loop, as certain data structures are more efficient when dealing with large arrays."},{"instruction":"Rearrange the items in the array in ascending order. [3, 6, 5, 1, 4, 2]","output":"[1, 2, 3, 4, 5, 6]"},{"instruction":"Write a SQL query to find the average of the age field from the 'employees' table.","output":"SELECT AVG(age) FROM employees;"},{"instruction":"Debug the following code and explain why it gave an error. def sum(a, b):     try:       return a + b     except TypeError:          return \\"inputs should be numbers\\"     finally:         print(\\"This function has successfully executed\\") output = sum(1, '2')","output":"The code gave an error because a TypeError was raised due to trying to add an integer and a string. The error can be resolved by adding type-checking in the code:  def sum(a, b):     try:       if type(a) == int and type(b) == int:         return a + b       else:         return \\"inputs should be numbers\\"     except TypeError:          return \\"inputs should be numbers\\"     finally:         print(\\"This function has successfully executed\\") output = sum(1, '2')"},{"instruction":"Sort the following list by the third element of the sublists in ascending order. [[1,2,3], [0,0,1], [7,8,9], [8,7,2]]","output":"[[0,0,1], [1,2,3], [8,7,2], [7,8,9]]"},{"instruction":"Convert a given time in 24 hour format to 12 hour format. 19:45","output":"7:45 PM"},{"instruction":"Write an HTML page that shows a table with the heading \\"Famous Actors\\" and columns for the actor's name, age, and nationality.","output":"<html>   <head>     <title>Famous Actors</title>   </head>   <body>     <table>       <tr>         <th>Name</th>         <th>Age</th>         <th>Nationality</th>       </tr>       <tr>         <td>Tom Hanks</td>         <td>62</td>         <td>American</td>       </tr>       <tr>         <td>Angelina Jolie</td>         <td>43</td>         <td>American</td>       </tr>       <tr>         <td>Johnny Depp</td>         <td>56</td>         <td>American</td>       </tr>     </table>   </body> </html>"},{"instruction":"Write a CSS code to add a 1px red border to a paragraph element.","output":"p {   border: 1px solid red; }"},{"instruction":"Write an HTML page which contains a form with fields for a user's first name, last name, and email address.","output":"<html>   <head>     <title>User Info Form</title>   </head>   <body>     <form>      <label>First Name:</label>       <input type=\\"text\\" id=\\"firstname\\" name=\\"firstname\\" >       <br><br>      <label>Last Name:</label>       <input type=\\"text\\" id=\\"lastname\\" name=\\"lastname\\">       <br><br>      <label>Email:</label>       <input type=\\"text\\" id=\\"email\\" name=\\"email\\">       <br><br>      <input type=\\"submit\\" value=\\"Submit\\" >     </form>   </body> </html>"},{"instruction":"Compute the big-O time complexity for this algorithm. def factorial(n):     if n == 0:          return 1     else:          return n*factorial(n-1)","output":"The time complexity for this algorithm is O(n)."},{"instruction":"Write a MySQL query to find the student with the highest grade in the class.","output":"SELECT MAX(grade) FROM students;"},{"instruction":"Analyze the runtime complexity of this algorithm. def factorial2(n):     fact = 1     for i in range(1, n + 1):         fact *= i     return fac","output":"The runtime complexity of this algorithm is O(n)."},{"instruction":"Using the class group, create an instance of the StudentClass and print out its name attribute. class StudentClass:     def __init__(self, name):         self.name = name","output":"# create an instance of the StudentClass student_class = StudentClass(\\"Statistics\\") #print out its name attribute print(student_class.name)  # Output: Statistics"},{"instruction":"Sort the data using heap sort. data = [12, 11, 15, 10, 9, 1, 2, 3, 13, 14, 4, 5, 6, 7, 8]","output":"def heap_sort(data):       # Create an empty Max Heap     max_heap = MaxHeap()      # Add elements to the Max Heap     for element in data:         max_heap.insert(element)          sorted_data = []     while max_heap.count > 0:         # Pop the Maximum element from the Max Heap         maximum = max_heap.extract_max()         sorted_data.append(maximum)       return sorted_data sorted_data = heap_sort(data) print(sorted_data) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"},{"instruction":"Play a C-major chord using the scikit-learn MIDI library.","output":"# play a C-major chord using the scikit-learn MIDI library from sklearn.datasets import load_sample_file from sklearn.feature_extraction.io import MidiDispatcher # use MidiDispatcher to create a new sequence dispatcher = MidiDispatcher() notes = [60, 64, 67]  # C-major notes velocities = [127, 127, 127]  # maximum amplitude dispatcher.add_chords([(0, notes, velocities)]) # play the sequence player = MidiPlayer(dispatcher.io) player.play()"},{"instruction":"Sum the numbers in the given array using reduce. numbers = [1, 2, 3, 4, 5]","output":"# Sum the numbers in the given array using reduce from functools import reduce sum = reduce(lambda x, y: x + y, numbers) print(sum) # Output: 15"},{"instruction":"Find the probability of a random variable following a normal distribution with a mean of 10 and a standard deviation of 2. x = 12","output":"# Find the probability of a random variable following a normal distribution with a mean of 10 and a standard deviation of 2. from scipy.stats import norm prob = norm.pdf(x, 10, 2) print(prob) # Output: 0.17603266338214976"},{"instruction":"Group the given list of names into 3 different categories based on the first letter of the name. names = [\\"Adam\\", \\"Bill\\", \\"Brian\\", \\"Clarence\\", \\"Doug\\", \\"Emily\\", \\"Fred\\", \\"George\\", \\"Henry\\"]","output":"# Group the given list of names into 3 different categories based on the first letter of the name group1 = [name for name in names if name[0] in ['A', 'B', 'C']] group2 = [name for name in names if name[0] in ['D', 'E', 'F']] group3 = [name for name in names if name[0] in ['G', 'H']] print(group1) # Output: ['Adam', 'Bill', 'Brian', 'Clarence'] print(group2) # Output: ['Doug', 'Emily', 'Fred']  print(group3) # Output: ['George', 'Henry']"},{"instruction":"Evaluate the expression 200 + 400 / 2.","output":"# Evaluate the expression 200 + 400 / 2 result = 200 + 400 / 2 print(result) # Output: 300.0"},{"instruction":"Change the code using decorator to log how long the function runs. def sum_function(a, b):     return a + b","output":"import time def log_time(func):     def inner(*args, **kwargs):         start = time.time()         result = func(*args, **kwargs)         end = time.time()         print(f'Function {func.__name__} took {end-start} sec to run')         return result     return inner @log_time def sum_function(a, b):     return a + b"},{"instruction":"Remove all the elements in an array using filter function. items = [1, 2, 3, 4, 5]","output":"# Remove all the elements in an array using filter function items = [1, 2, 3, 4, 5] filterend_items = list(filter(lambda x: False, items)) print(filterend_items) # Output: []"},{"instruction":"Using a for loop, calculate the distance between one point to every other point in the given list. points = [     (10, 20),     (12, 22),     (14, 24) ]","output":"# Using a for loop, calculate the distance between one point to every other point in the given list from math import sqrt distances = [] for i in range(len(points)):     for j in range(len(points)):         if i != j:             x1, y1 = points[i]             x2, y2 = points[j]             distance = sqrt((x2 - x1)**2 + (y2 - y1)**2)             distances.append(distance) print(distances)  # Output: [2.8284271247461903, 4.242640687119285, 2.8284271247461903]"},{"instruction":"Find all the even numbers in the given range. min_num = 4 max_num = 17","output":"# Find all the even numbers in the given range even_nums = [num for num in range(min_num, max_num + 1) if num % 2 == 0] print(even_nums) # Output: [4, 6, 8, 10, 12, 14, 16]"},{"instruction":"Create a function to select the kth smallest item from a list. lst = [3, 6, 8, 2, 10, 11]","output":"# Create a function to select the kth smallest item from a list def kth_smallest(lst, k):     sorted_lst = sorted(lst)     return sorted_lst[k - 1] # test the function item = kth_smallest(lst, 4) print(item) # Output: 8"},{"instruction":"Write pseudocode for the merge sort algorithm.","output":"Mergesort(A):   if A has 1 item :        return A   else       divide A into two parts (left and right) of roughly equal size       B = Mergesort(left)       C = Mergesort(right)       D = Merge(B,C)       return D Merge(B,C):   create an empty list D   while B and C are not empty:       if B[0] ≤ C[0]:           add the first item of B to the end of D           remove the first item of B       else:           add the first item of C to the end of D           remove the first item of C   while B is not empty:       add the first item of B to the end of D       remove the first item of B   while C is not empty:       add the first item of C to the end of D       remove the first item of C   return D"},{"instruction":"dentify the output of the following code snippet written in Scala. var number = 42  val message = if (number > 10) \\"This number is greater than 10\\" else \\"This number is not greater than 10","output":"This number is greater than 10"},{"instruction":"Create a function in Python that takes two parameters, x and y, and prints out all numbers between x and y.","output":"def display_numbers(x, y):   for i in range(x,y+1):     print(i)"},{"instruction":"Given an array of integers and an integer target, find all unique combinations of elements from the array that sum up to the target. arr = [1,2,3,4], target = 7","output":"List<List<Integer>> result = new ArrayList<>(); combinations(arr, target, 0, new ArrayList<Integer>(), result); private static void combinations(int[] arr, int target, int start_index, ArrayList<Integer> curr, List<List<Integer>> result) {     if (target < 0 || start_index >= arr.length)         return;     if (target == 0) {         result.add(new ArrayList<>(curr));         return;     }     for (int i = start_index; i < arr.length; i++) {         curr.add(arr[i]);         combinations(arr, target - arr[i], i+1, curr, result);         curr.remove(curr.size() - 1);     } }"},{"instruction":"Create a Python module for extracting the sum of all digits of an integer.","output":"def digit_sum(number):     if number == 0:         return 0     return (number % 10) + digit_sum(number // 10)"},{"instruction":"Construct an XPath expression to select the third element of an HTML list.","output":"//li[3]"},{"instruction":"Construct a MongoDB query to sort all documents based on the price in the collection.","output":"db.collection.find().sort({\\"price\\":1})"},{"instruction":"Create an input validation function in Java that checks for valid numerical input from the user.","output":"public static void validateNumericInput() {     Scanner input = new Scanner(System.in);      while (!input.hasNextDouble()) {          input.next();          System.out.println(\\"Error: Invalid input. Please try again.\\");      }  }"},{"instruction":"Create a function in R that returns the common elements in two given vectors.","output":"CommonElements <- function(x, y) {   intersection(x, y) }"},{"instruction":"What is a multithreaded application and how does it work?","output":"A multithreaded application is an application that creates multiple concurrent threads to execute tasks in parallel. These threads can communicate with each other and work together to accomplish a task faster than if they were executed sequentially. A multithreaded application makes use of modern computer hardware which has multiple core processors, each with its own thread. The threads then share access to a pool of memory and hardware resources which can be accessed and manipulated simultaneously. By working together, the threads can work faster and complete the task before any single thread working alone."},{"instruction":"Write a Python program to get the volume of a sphere with a given radius.","output":"import math def sphere_volume(radius):     return (4*math.pi*radius*radius*radius)/3"},{"instruction":"Design an algorithm to retrieve the longest word from an array of strings. [‘Hello’, ‘World’, ‘This’, ‘is’, ‘a’, ‘code’]","output":"def get_longest_word(strings):     longest_word = ''     for s in strings:         if len(s) > len(longest_word):             longest_word = s     return longest_word"},{"instruction":"Construct a code to print elements of a given list in reverse order. [1, 2, 3, 4, 5]","output":"def reverse_list(numbers):     return numbers[::-1]"},{"instruction":"Create an HTML page that displays a table with all the prime numbers up to 100.","output":"<html>    <head>       <title>Prime Numbers</title>    </head>    <body>       <h1>Prime Numbers</h1>       <table>          <tr>             <th>Number</th>             <th>Prime</th>          </tr>          <?php          for (i = 2; i <= 100; i++) {             if (isPrime(i)) {                echo \\"<tr><td>i</td><td>Yes</td></tr>\\";             } else {                echo \\"<tr><td>i</td><td>No</td></tr>\\";             };          };          ?>        </table>    </body> </html>"},{"instruction":"Write an SQL query to retrieve all records with a salary higher than average salary from a table named “employees”.","output":"SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);"},{"instruction":"Write a statement that adds an element to a linked list.","output":"newNode = Node(data) newNode.next = head head = newNode"},{"instruction":"Reverse an input string.","output":"def reverse_string(s):     return s[::-1]"},{"instruction":"Edit the following code for optimal performance. def sum_nums():     result = 0      for i in range(10):         result += i     return resul","output":"def sum_nums():     result = 0     n = 10     while n > 0:         result += (n - 1)         n -= 1     return result"},{"instruction":"Generate an HTML form element with the text content \\"Create account\\".","output":"<form>     <input type=\\"submit\\" value=\\"Create account\\" /> </form>"},{"instruction":"Compute the sum of two give two-dimensional arrays. array1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] array2 = [[1, 3, 5], [2, 4, 6], [7, 8, 9]]","output":"def matrix_sum(a, b):     result = [[0 for d in range(len(a))] for d in range(len(a[0]))]     for i in range(len(a)):         for j in range(len(a[0])):             result[i][j] = a[i][j] + b[i][j]     return result"},{"instruction":"Write a MySQL query to find the names of all customers who have placed an order for more than 100.","output":"SELECT customers.name FROM orders JOIN customers ON customers.id = orders.customer_id  WHERE orders.amount > 100;"},{"instruction":"What is dependency injection and how can it be implemented with JavaScript?","output":"Dependency injection is a technique for separating the creation of an object’s dependencies from its own behavior. With JavaScript, it can be implemented with the use of ES2015 modules, which allow functions and objects from other modules to be imported. Then, instead of directly creating an object’s dependencies, they can be passed in upon creation. This makes the code more modular and easily testable."},{"instruction":"Are ternary operators fast in Python?","output":"Ternary operators are often faster than if/else statements in Python, as they can reduce the amount of code and conditionals needed. However, there are some cases where an if/else statement may be faster, such as when there are multiple conditions that need to be checked."},{"instruction":"w do you retrieve data from a database using PHP?","output":"Retrieving data from a database using PHP is relatively simple. You can use the PDO (PHP Data Objects) or MySQLi (MySQL Improved) extensions to connect to a database. You can then use an SQL query, such as SELECT, to retrieve data from the database."},{"instruction":"Write a C program to print out the Fibonacci series upto the nth number.","output":"#include <stdio.h>   int fibonacci(int n) {   if (n == 0)     return 0;   else if (n == 1)     return 1;   else     return (fibonacci(n-1) + fibonacci(n-2)); }   int main() {   int i, n;     printf(\\"Enter the number of terms: \\");   scanf(\\"%d\\", &n);     printf(\\"Fibonacci Series: \\");     for (i = 0; i < n; i++)   {     printf(\\"%d \\", fibonacci(i));   }     return 0; }"},{"instruction":"Format a string by adding the required punctuations in order to make it a valid sentence this is the string","output":"This is the string."},{"instruction":"From a given string, count the number of unique characters","output":"def count_unique_chars(s):     chars = set()     for char in s:         chars.add(char)     return len(chars)"},{"instruction":"Create a function that identifies the type of a value","output":"def identify_value_type(val):     if type(val) is int:         return 'int'     elif type(val) is float:         return 'float'     elif type(val) is str:         return 'str'     elif type(val) is list:         return 'list'     elif type(val) is dict:         return 'dict'"},{"instruction":"Create an array of objects with the following properties: firstname, lastname, age, gender. [   { firstname: 'John', lastname: 'Doe', age: 25, gender: 'Male' },   { firstname: 'Jane', lastname: 'Doe', age: 28, gender: 'Female' } ]","output":"[   { firstname: 'John', lastname: 'Doe', age: 25, gender: 'Male' },   { firstname: 'Jane', lastname: 'Doe', age: 28, gender: 'Female' } ]"},{"instruction":"Create a class in Java called 'Student' which has the following attributes: firstname, lastname, age, gender.","output":"public class Student {        private String firstname;    private String lastname;    private int age;    private String gender;        public Student(String firstname, String lastname, int age, String gender) {      this.firstname = firstname;      this.lastname = lastname;      this.age = age;      this.gender = gender;    }        // getters and setters  }"},{"instruction":"Write a SQL query to select records from the 'books' table whose author's name contains the string \\"John\\".","output":"SELECT * FROM books WHERE author LIKE '%John%';"},{"instruction":"Create a new method in a given Java class named 'Person' which prints a greeting based on the firstname and lastname given. John Doe","output":"public void printGreeting(String firstname, String lastname) {   System.out.println(\\"Hello, \\" + firstname + \\" \\" + lastname + \\"!\\"); }"},{"instruction":"Create a class in Python named 'Car' and implement a method that shows the current speed of the car.","output":"class Car():     def __init__(self, speed):         self.speed = speed     def show_speed(self):         print(\\"The current speed is:\\", self.speed)"},{"instruction":"Modify a given JavaScript code snippet to add a random background color to all elements with the class name 'box'. document.querySelectorAll('.box').forEach(function(el) {   el.style.backgroundColor = \\"red\\"; });","output":"document.querySelectorAll('.box').forEach(function(el) {   const randomHex = Math.floor(Math.random()*16777215).toString(16);   el.style.backgroundColor = \`#{randomHex}\`; });"},{"instruction":"Create an Angular component that displays a posts feed with the given input data. [   {     user: 'John',     message: 'Hello world!'   },   {     user: 'Jane',     message: 'Hi everyone!'   } ]","output":"<div *ngFor=\\"let post of posts\\">   <h1>{{ post.user }}</h1>   <p>{{ post.message }}</p> </div>"},{"instruction":"Design a React component that builds a navigation menu from the given input. {   \\"Home\\": \\"/\\",   \\"About\\": \\"/about\\",   \\"Product\\": \\"/product\\" }","output":"class Nav extends React.Component {   render() {     const navLinks = Object.keys(this.props.nav).map(key => (       <li>         <Link to={this.props.nav[key]}>{key}</Link>       </li>     ));     return (       <nav>         <ul>{navLinks}</ul>       </nav>     );   } }"},{"instruction":"Write an HTML page with a form to input the following information: name, age, gender.","output":"<html>    <head>      <title>Form Example</title>   </head>   <body>     <form>       <label for=\\"name\\">Name:</label>       <input type=\\"text\\" id=\\"name\\" name=\\"name\\">       <label for=\\"age\\">Age:</label>       <input type=\\"number\\" id=\\"age\\" name=\\"age\\">       <label for=\\"gender\\">Gender:</label>       <select id=\\"gender\\" name=\\"gender\\">         <option value=\\"Male\\">Male</option>         <option value=\\"Female\\">Female</option>       </select>       <input type=\\"submit\\">     </form>   </body> </html>"},{"instruction":"Create a UUID in Python.","output":"import uuid print(uuid.uuid4())"},{"instruction":"Design a python class for a dog to print its name and age when given. Ginger, 3","output":"class Dog:     def __init__(self, name, age):         self.name = name         self.age = age     def get_name(self):         return self.name     def get_age(self):         return self.age dog = Dog('Ginger', 3) print(dog.get_name()) print(dog.get_age())"},{"instruction":"Suggest an alternate solution to the following JavaScript code. var names = [\\"Jon\\", \\"Bob\\", \\"Mike\\"]; for (var i=0; i<names.length; i++) {     console.log(names[i]); }","output":"var names = [\\"Jon\\", \\"Bob\\", \\"Mike\\"]; names.forEach(name => console.log(name));"},{"instruction":"Write a PHP code for creating a database table with 4 columns to store user information.","output":"sql = \\"CREATE TABLE users (     id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,     firstName VARCHAR(30) NOT NULL,     lastName VARCHAR(30) NOT NULL,     email VARCHAR(50) )\\";"},{"instruction":"dentify the most efficient way to render a list of 10 divs using React.","output":"render() {      return (          <div>              {[...Array(10)].map((_, i) => <div key={i}>Div #{i+1}</div> )}         </div>      ); };"},{"instruction":"Transform an input string to its uppercase equivalent with JavaScript. inputString=\\"This sentence should be in uppercase","output":"let inputString = \\"This sentence should be in uppercase\\"; let outputString = inputString.toUpperCase(); console.log(outputString);"},{"instruction":"Edit the following function to allow editing of existing key-value pairs in the object. let myObj = {     name: 'Gabe',      age: 33 } function addPair(obj, key, value) {     obj[key] = value; }","output":"let myObj = {     name: 'Gabe',      age: 33 } function addPair(obj, key, value) {     if(obj.hasOwnProperty(key)){         obj[key] = value;     } else {         obj[key] = value;     } }"},{"instruction":"Write an HTML & CSS code to create a login form with two fields - email and password.","output":"<form>   <div>     <label for=\\"email\\">Email:</label>     <input type=\\"email\\" id=\\"email\\" />   </div>   <div>     <label for=\\"password\\">Password:</label>     <input type=\\"password\\" id=\\"password\\" />   </div>   <input type=\\"submit\\" value=\\"Login\\" /> </form> <style>   form {     display: flex;     flex-direction: column;     align-items: center;   }   div {     display: flex;     margin: 5px 0;     width: 200px;   }   label {     width: 100px;   }   input[type=\\"submit\\"] {     margin-top: 15px;     padding: 5px 10px;     font-weight: bold;   } </style>"},{"instruction":"Convert the following JavaScript switch statement into an if/else statement. let letterGrade; switch (percentage) {   case 97:   case 96:     letterGrade = \\"A+\\";     break;   case 95:     letterGrade = \\"A\\";     break;   default:     letterGrade = \\"Unknown Grade\\";     break; }","output":"let letterGrade;  if (percentage === 97 || percentage === 96) {   letterGrade = \\"A+\\"; } else if (percentage === 95) {   letterGrade = \\"A\\";   } else {   letterGrade= \\"Unknown Grade\\"; }"},{"instruction":"Design an algorithm to generate N random numbers from 1 to 1000. N=5","output":"Let N be the number of random numbers to create. Initialize an array randomNumbers to empty For i from 1 to N:   Generate a random number from 1 to 1000   Add this random number to randomNumbers    Print randomNumbers"},{"instruction":"Create a JavaScript object to store three birds names and their corresponding scientific names. Owl - Strigidae Dove - Columbidae Eagle - Accipitridae","output":"let birds = {     \\"Owl\\": \\"Strigidae\\",     \\"Dove\\": \\"Columbidae\\",     \\"Eagle\\": \\"Accipitridae\\" };"},{"instruction":"Complete the following code to print a 2D array passed as parameter. def print2Dlist (list)","output":"def print2Dlist (list) : \\tfor row in list: \\t\\tfor element in row: \\t\\t\\tprint (element, end=\\" \\")  \\t\\tprint ()"},{"instruction":"Complete the following code to find the longest word in the given string. def longest_word(sentence)","output":"def longest_word(sentence):     words = sentence.split()     longest_word = ''     max_length = 0     for word in words:         if len(word) > max_length:             max_length = len(word)             longest_word = word     return longest_word"},{"instruction":"Create a function to remove all the characters in a string except a-z, A-Z and 0-9.","output":"def remove_non_alphanumeric(string):     filtered_string = \\"\\"     for char in string:         if char.isalnum():             filtered_string += char     return filtered_string"},{"instruction":"Create a function to filter out any strings containing the word \\"the\\" from a list of strings.","output":"def filter_the(string_list):     filtered_list = []     for string in string_list:         if \\"the\\" not in string:             filtered_list.append(string)     return filtered_list"},{"instruction":"Compute the total number of words in the given sentence. This is a test sentence","output":"def count_words(sentence):     words = sentence.split()     return len(words)"},{"instruction":"Write a function to reverse the elements of a list without creating a new list.","output":"def reverse_inplace(numbers):     start = 0     end = len(numbers) - 1     while start < end:         numbers[start], numbers[end] = numbers[end], numbers[start]         start += 1         end -= 1"},{"instruction":"Write an SQL query to find all customers in the table 'customers' who have bought more than 3 items from the store.","output":"SELECT customer_name FROM customers WHERE order_count > 3;"},{"instruction":"Create a HTML page that has a table displaying the names, phone numbers and email addresses of 5 employees.","output":"<html>  <head>   <title>Employees</title>  </head>  <body>   <h1>Employees</h1>   <table>    <tr>     <th>Name</th>     <th>Phone</th>     <th>Email</th>    </tr>    <tr>     <td>John Doe</td>     <td>123-456-7890</td>     <td>john.doe@example.com</td>    </tr>    <tr>     <td>Jane Doe</td>     <td>123-456-0987</td>     <td>jane.doe@example.com</td>    </tr>    <tr>     <td>Jeff Smith</td>     <td>123-456-7654</td>     <td>jeff.smith@example.com</td>    </tr>    <tr>     <td>Lauren Anderson</td>     <td>123-456-8201</td>     <td>lauren.anderson@example.com</td>    </tr>    <tr>     <td>David Johnson</td>     <td>123-456-8321</td>     <td>david.johnson@example.com</td>    </tr>   </table>  </body> </html>"},{"instruction":"Write a Java program that takes an array of integers and returns the number of zeros in the array. [4, 0, 2, 4, 0, 0]","output":"public static int countZeroes(int[] data) {   int count = 0;   for (int i : data) {     if (i == 0) {       count += 1;     }   }   return count; }"},{"instruction":"Write an SQL query to sort the customers in the table 'customers' alphabetically by their last name.","output":"SELECT * FROM customers ORDER BY last_name;"},{"instruction":"Create a web page that uses CSS to style a given piece of text.","output":"<html>   <head>     <style>       p {         font-size: 16px;         font-family: Arial, sans-serif;         color: #333;       }       .bold {         font-weight: bold;       }     </style>   </head>   <body>     <p class=\\"bold\\">Hello World!</p>   </body> </html>"},{"instruction":"Create a program that takes in a list of numbers and returns the product of all the elements in the list. [2, 4, 10, 5]","output":"def product(nums):   total = 1   for num in nums:     total *= num   return total"},{"instruction":"Give a few examples of when to use a Stack data structure.","output":"A stack data structure can be used for a variety of tasks, such as for traversal of a recursive object, storing and retrieving data from a history buffer, expression evaluation, and undo and redo operations. Another common use case is storage of a continuous stream of data, such as a rolling list of recent purchases."},{"instruction":"Write a SQL query that finds all the albums released before 1990. Table name: Album","output":"SELECT * FROM Albums WHERE date_released < 1990;"},{"instruction":"w can you implement a Bubble Sort algorithm in Java?","output":"public class BubbleSort {    public static void sort(int[] arr) {   int n = arr.length;   int temp;     for(int i = 0; i < n - 1; i++) {    for (int j = 0; j < n - i - 1; j++) {     if (arr[j] > arr[j+1]) {      // Swap the elements      temp = arr[j];      arr[j] = arr[j+1];      arr[j+1] = temp;     }    }   }  } }"},{"instruction":"Write a test case for a function that adds two numbers. Function: addTwoNumbers (a, b)","output":"@Test public void testAddTwoNumbers(){     int a = 1;     int b = 2;     assertEquals(3, addTwoNumbers(a, b)); }"},{"instruction":"Create an Angular Directive for a text box that alerts when its contents change.","output":"import { Directive, ElementRef, HostListener } from '@angular/core'; @Directive({  selector: '[appNotifyOnChange]' }) export class NotifyOnChangeDirective {  constructor(private el: ElementRef) { } @HostListener('input', ['event']) onChange(event) {  alert('Value changed to: ' + event.target.value); } }"},{"instruction":"Name a few use cases of Convolutional Neural Networks.","output":"Convolutional Neural Networks are widely used in domains such as computer vision, natural language processing, pattern recognition, time series analysis, audio processing, object recognition and classification, and for other tasks such as image segmentation, automated image captioning, image deblurring, object detection and tracking."},{"instruction":"What is the role of the React Life Cycle Method componentDidMount?","output":"The componentDidMount() method is a life cycle method in React which is called after the component is mounted and the component is loaded into the DOM. This method can be used to start timers, initialize the state, fetch data, and other components. It is invoked once all the DOM elements of the component are rendered, and the component is loaded into the browser DOM."},{"instruction":"w can you create a function in MATLAB that adds two vectors? Vectors: A=[1,2,3] and B=[4,5,6]","output":"function [C]=addVectors(A,B)     C=A+B; end"},{"instruction":"w can you access elements in a multi-dimensional array in JavaScript?","output":"Accesing elements of the array can be done by using the index of the array. For example, for a two-dimensional array, the elements can be accessed using the following syntax: array[i][j], where i is the index of the outer array, and j is the index of the inner array. For a three-dimensional array, the syntax would be array[i][j][k]."},{"instruction":"Describe the Heap Sort algorithm.","output":"Heap Sort is a comparison-based sorting algorithm in which the data is organized into a heap data structure. The heap is then sorted increasingly by repeatedly removing the root element, swapping it with the last element in the heap, and heapifying the remaining elements. It has an average complexity of O(n log n)."},{"instruction":"Write an SQL query that finds the total revenue for each month. Table name: order","output":"SELECT MONTH(order_date) AS month, SUM(total_price) total_revenue FROM orders GROUP BY MONTH(order_date)"},{"instruction":"Create a class structure in Java for an Employee object.","output":"public class Employee {     private int id;     private String name;     private double salary;     // default constructor     public Employee() {     }     // parameterized constructor     public Employee(int id, String name, double salary) {         super();         this.id = id;         this.name = name;         this.salary = salary;     }     // getters and setters     public int getId() {         return id;     }     public void setId(int id) {         this.id = id;     }     public String getName() {         return name;     }     public void setName(String name) {         this.name = name;     }     public double getSalary() {         return salary;     }     public void setSalary(double salary) {         this.salary = salary;     } }"},{"instruction":"Write a React.js component to render a simple button.","output":"const SimpleButton = () => {   return (    <button>Click Me!</button>   )  }  ReactDOM.render(<SimpleButton />, document.getElementById(\\"root\\"));"},{"instruction":"Write SQL query to find all employee names who work in the IT department.","output":"SELECT name FROM employees WHERE department = 'IT';"},{"instruction":"Create an Angular component to display an \\"about us\\" page.","output":"@Component({  selector: \\"app-about-us\\",  templateUrl: \\"./about-us.component.html\\" }) export class AboutUsComponent{ }"},{"instruction":"Write a CSS code for setting the font of all h1 elements to 'sans-serif'.","output":"h1 {  font-family: 'sans-serif'; }"},{"instruction":"Create a Node.js server that responds with \\"Hello World!\\" when the URL \\"/\\" is accessed.","output":"const http = require('http'); const server = http.createServer(function (req, res) {   if(req.url == '/'){     res.writeHead(200);     res.end('Hello World!');   } }); server.listen(3000);"},{"instruction":"Write an algorithm to check whether a given word is palindrome or not.","output":"def is_palindrome(str):     # reverse the string      rev_str = str[::-1]         # if string is equal then return true      if rev_str == str:          return True     return False"},{"instruction":"Calculate the number of anagrams present in a given string. string = \\"liste","output":"def calculateAnagrams(string):          # Create a list of all permutations      all_permutations = [''.join(i) for i in permutations(string)]          # Return the count of all permutations      return len(all_permutations)     # Driver code  print(calculateAnagrams('listen'))"},{"instruction":"For a given array of integers, write a function to find the mean. arr = [1, 2, 3, 4, 5]","output":"def calculate_mean(arr):     return sum(arr) / len(arr)      # Driver Code  if __name__ == '__main__':      arr = [1, 2, 3, 4, 5]     mean = calculate_mean(arr)     print(\\"Mean for given array is:\\", mean)"},{"instruction":"Write a SQL query to find the countries which have population more than 10 million.","output":"SELECT Country, Population  FROM world WHERE Population > 10000000  ORDER BY Country;"},{"instruction":"Create a function which takes a string and invokes all the print statements within the string. string = \\"Hello, World! Hello, Python!","output":"def invoke_print_statements(string):     exec(string)       # Driver Code  if __name__ == '__main__':      string = \\"print('Hello, World!')nprint('Hello, Python!')\\"     invoke_print_statements(string)"},{"instruction":"Write a SQL query to find the first ten customers by their joining date.","output":"SELECT *  FROM customers ORDER BY joining_date ASC LIMIT 10;"},{"instruction":"Write code to return a list of prime numbers in the given range. Start: 10. End: 15","output":"def get_prime_numbers(start, end):     prime_numbers = []     for num in range(start, end + 1):         if num > 1:             for i in range(2, num):                 if (num % i) == 0:                     break             else:                 prime_numbers.append(num)     return prime_numbers      # print list of prime numbers print(get_prime_numbers(10, 15))   # Output: [11, 13, 15]"},{"instruction":"Write code to convert a given hexadecimal string to a binary string. Hexadecimal string: 7468","output":"def hex_to_bin(hexadecimal_str):     return bin(int(hexadecimal_str, 16))[2:] # [2:] removes 0b from the start"},{"instruction":"Create a function to print out a FizzBuzz pattern for a given number range. Number range: 5-20","output":"def fizzbuzz_pattern(n):     for num in range(n, n+16):         if num % 3 == 0 and num % 5 == 0:             print(\\"FizzBuzz\\")         elif num % 3 == 0:             print(\\"Fizz\\")         elif num % 5 == 0:             print(\\"Buzz\\")         else:             print(num)"},{"instruction":"Write a function to generate the next line of Pascal's Triangle given the parent line. Parent line: [1, 2, 1]","output":"def next_pascals_triangle(parent):     next_line = [1]     for i in range(len(parent)-1):         next_line.append(parent[i] + parent[i+1])     next_line.append(1)     return next_line"},{"instruction":"Write code to parse a given IP address into its octets. IP address: 10.23.6.17","output":"def parse_ip_address(ip):     octets = ip.split(\\".\\")     return octets"},{"instruction":"Write a function to encode a given string using ROT13 cipher. String: Hello world","output":"def rot13(string):     encoded = \\"\\"     for char in string:         if char.isalpha():             ascii_val = ord(char)             ascii_val += 13             if ascii_val > ord('z'):                 ascii_val -= 26             encoded += chr(ascii_val)         else:             encoded += char     return encoded"},{"instruction":"Code a program to display the prime factors of a number. 30","output":"def find_prime_factors(n):  prime_factors = []  for i in range(2, n + 1):  if n % i == 0:  if is_prime(i):  prime_factors.append(i)  return prime_factors def is_prime(n):  if n <= 1:  return False  for i in range(2, int(n**0.5) + 1):  if n % i == 0:  return False  return True"},{"instruction":"Develop a code to check if a given array is sorted or not. [1, 2, 4, 3]","output":"def is_sorted(array):  for i in range(len(array)-1):  if array[i] > array[i+1]:  return False  return True"},{"instruction":"Design a program to find the fibonacci number at the given position in the sequence.","output":"def fibonacci(n):  if n == 0 or n == 1:  return n  else:  return fibonacci(n-1) + fibonacci(n-2)"},{"instruction":"Code a program to delete a given element from an array. [1, 3, 5, 7], {element: 3}","output":"def delete_element(array, element):  element_index = array.index(element)  del array[element_index]  return array"},{"instruction":"Create a Java function that converts a string to a decimal. String numString = \\"123.45\\";","output":"public static double stringToDecimal(String numString) {    double result = 0;    String[] tokens = numString.split(\\".\\");    result += Integer.parseInt(tokens[0]);        int power = 1;    for (int i = tokens[1].length(); i > 0; i--) {         power *= 10;         result += Integer.parseInt(tokens[1].charAt(i - 1) +\\"\\") * 1.0 / power;    }    return result; }"},{"instruction":"Create a class in Java that stores name, age, and height as input fields.","output":"public class Person {    private String name;    private int age;    private double height;    public Person(String name, int age, double height) {       this.name = name;       this.age = age;       this.height = height;    }    public String getName() {       return name;    }    public void setName(String name) {       this.name = name;    }    public int getAge() {       return age;    }    public void setAge(int age) {       this.age = age;    }    public double getHeight() {       return height;    }    public void setHeight(double height) {       this.height = height;    } }"},{"instruction":"Use SQL to extract the customer name, order date, and price from the following table. Table: orders  | order_id | customer_id | product_name | price | order_date |  | -------- | ----------- | ------------ | ----- | ---------- |  | 1        | 123         | TV           | 500   | 2019-01-01 |  | 2        | 123         | Keyboard     | 80    | 2019-01-05 |  | 3        | 124         | Mouse        | 50    | 2019-02-01 |","output":"SELECT      c.name as customer_name,      o.price,      o.order_date  FROM orders o  INNER JOIN customers c      on o.customer_id = c.customer_id;"},{"instruction":"Find the most frequent word in the following paragraph. The quick brown fox jumps over the lazy dog.","output":"the"},{"instruction":"Write a SQL query to produce a list of customer names from the following table. Table: customers  | customer_id | name | |  --------- | ----- |  | 1          | Bill | | 2          | Jane | | 3          | John |","output":"SELECT name FROM customers;"},{"instruction":"Create a function in Ruby that calculates the sum of all numbers in an array. arr = [1, 2, 3]","output":"def sum_arr(arr)    return arr.inject(0, :+)  end"},{"instruction":"Use SQL to count the number of orders for each product listed in the following table. Table: orders  | order_id | customer_id | product_name | price | | -------- | ----------- | ------------ | ----- |  | 1        | 123         | TV           | 500   |  | 2        | 123         | Keyboard     | 80    | | 3        | 124         | Mouse        | 50    |","output":"SELECT product_name, COUNT(*) as num_orders  FROM orders  GROUP BY product_name;"},{"instruction":"Edit the HTML structure shown below to include a form tag with an input for a user's name. <!DOCTYPE html> <html> <head>  <title>My Webside</title> </head> <body> </body> </html>","output":"<!DOCTYPE html> <html> <head>  <title>My Webside</title> </head> <body>  <form>   <input type=\\"text\\" name=\\"name\\" placeholder=\\"Enter your name here\\">  </form> </body> </html>"},{"instruction":"Write a CSS style sheet to change the background color of the webpage to blue.","output":"body {     background-color: blue; }"},{"instruction":"Split the sentence into individual words using Python. sentence = \\"This sentence needs to be split.","output":"words = sentence.split(' ') print(words) # Output: ['This', 'sentence', 'needs', 'to', 'be', 'split.']"},{"instruction":"Based on the following list, create a dictionary of each name and their corresponding birth date. names = [\\"John\\", \\"Mary\\", \\"James\\", \\"Susan\\"] birth_dates = [\\"1992-12-24\\", \\"1979-05-17\\", \\"1995-08-15\\", \\"1985-04-10\\"]","output":"name_birthdate_dict = dict(zip(names, birth_dates)) print(name_birthdate_dict) # Output: {'John': '1992-12-24', 'Mary': '1979-05-17', 'James': '1995-08-15', 'Susan': '1985-04-10'}"},{"instruction":"Using the given list of numbers, find the sum of the numbers. numbers = [1, 2, 3, 4, 5]","output":"total = 0 for num in numbers:     total += num print('The sum of the numbers is:', total) # Output: The sum of the numbers is: 15"},{"instruction":"Create a while loop that prints each element in the list from the end. numbers = [1, 2, 3, 4, 5]","output":"i = len(numbers)  while i > 0:      print(numbers[i-1])      i -= 1"},{"instruction":"Suggest a way to identify and remove duplicate elements from the list. numbers = [2, 3, 2, 5, 8, 3, 10]","output":"# Method 1 - Using Set numbers_set = set(numbers) numbers_set = list(numbers_set) print(numbers_set) # Output: [2, 3, 5, 8, 10] # Method 2 - Using Loop no_duplicate = []  for num in numbers:      if num not in no_duplicate:          no_duplicate.append(num)  print(no_duplicate) # Output: [2, 3, 5, 8, 10]"},{"instruction":"Suggest a way to count the number of occurrences of each element in the list. numbers = [2, 3, 2, 5, 8, 3, 10]","output":"# Method 1 - Using Dictionary number_dict = dict() for num in numbers:     if num in number_dict:         number_dict[num] += 1     else:         number_dict[num] = 1 print(number_dict) # Output: {2: 2, 3: 2, 5: 1, 8: 1, 10: 1} # Method 2 - Using Counter from collections import Counter number_count = Counter(numbers) print(number_count) # Output: Counter({2: 2, 3: 2, 5: 1, 8: 1, 10: 1})"},{"instruction":"Create a function that sorts a list of dictionaries using the values. animals = [{\\"name\\": \\"Dog\\", \\"age\\": 5}, {\\"name\\": \\"Cat\\", \\"age\\": 3},             {\\"name\\": \\"Fish\\", \\"age\\": 1}, {\\"name\\": \\"Deer\\", \\"age\\": 8}]","output":"def sort_dict_list(animals):     sorted_animals = sorted(animals, key=lambda k: k['age'])       return sorted_animals result = sort_dict_list(animals) print(result) # Output: [{'name': 'Fish', 'age': 1}, {'name': 'Cat', 'age': 3}, {'name': 'Dog', 'age': 5}, {'name': 'Deer', 'age': 8}]"},{"instruction":"Return how many characters are in the following string. word = \\"Hello","output":"length = len(word) print(length) # Output: 5"},{"instruction":"Convert this expression in to postfix notation. A + B * C","output":"ABC*+"},{"instruction":"Generate a class for a Student object in Java.","output":"public class Student { \\tprivate String name; \\tprivate String id; \\tprivate String email; \\tprivate String major; \\t \\tpublic Student(String name, String id, String email, String major) { \\t\\tthis.name = name; \\t\\tthis.id = id; \\t\\tthis.email = email; \\t\\tthis.major = major; \\t} \\tpublic String getName() { \\t\\treturn name; \\t} \\tpublic void setName(String name) { \\t\\tthis.name = name; \\t} \\tpublic String getId() { \\t\\treturn id; \\t} \\tpublic void setId(String id) { \\t\\tthis.id = id; \\t} \\tpublic String getEmail() { \\t\\treturn email; \\t} \\tpublic void setEmail(String email) { \\t\\tthis.email = email; \\t} \\tpublic String getMajor() { \\t\\treturn major; \\t} \\tpublic void setMajor(String major) { \\t\\tthis.major = major; \\t} }"},{"instruction":"Calculate the sum of these two numbers in assembly language. x = 27, y = 11","output":"mov ax, 27    ; put x = 27 in ax mov bx, 11    ; put y = 11 in bx add ax, bx    ; add ax and bx, sum is stored in ax ; ax = 38"},{"instruction":"Edit this method to return an array of palindromes. public static String[] findPalindromes(String[] words) {     ArrayList<String> result = new ArrayList<>();     for (String word : words) {         if (word.length() >= 2) {             result.add(word);         }     }     return result.toArray(new String[result.size()]); }","output":"public static String[] findPalindromes(String[] words) {     ArrayList<String> result = new ArrayList<>();     for (String word : words) {         if (word.length() >= 2 && isPalindrome(word)) {             result.add(word);         }     }     return result.toArray(new String[result.size()]); }   public static boolean isPalindrome(String str) {     int left = 0;     int right = str.length()-1;           while (left < right) {          if (str.charAt(left) != str.charAt(right))              return false;             left++;          right--;      }         return true;  }"},{"instruction":"Generate a new class from the given prototype. class Prototype { \\tpublic String name; \\tpublic int age; \\tpublic String gender; \\t \\tpublic Prototype(String name, int age, String gender) { \\t\\tthis.name = name; \\t\\tthis.age = age; \\t\\tthis.gender = gender; \\t} }","output":"class Person extends Prototype { \\tpublic String address; \\tpublic String phone; \\t \\tpublic Person(String name, int age, String gender, String address, String phone) { \\t\\tsuper(name, age, gender); \\t\\tthis.address = address; \\t\\tthis.phone = phone; \\t} }"},{"instruction":"Write a SQL query to output the IDs of all employees working in the same department as employee with ID 10.","output":"SELECT id FROM Employees WHERE department= (SELECT department FROM Employees WHERE id=10);"},{"instruction":"Use the function \\"randint()\\" to generate a random number between 1 and 10 in Python.","output":"from random import randint random_num = randint(1,10) print(random_num)"},{"instruction":"Create a class in Java called 'Circle' that stores information about a circle's radius and calculate the area.","output":"public class Circle {         public double radius;       public Circle(double radius) {       this.radius = radius;   }   public double getArea() {       return Math.PI * Math.pow(radius, 2);   } }"},{"instruction":"dentify the output of this snippet of C code. int x = 10, y = 5; int z = (x * y) - 15;","output":"The output of this snippet of C code is z = 25."},{"instruction":"Debug this JavaScript code. function mysteryFunction(x) {     let result = 0;     for (let i = 1; i <= x; i++) {         result = result * i;     }     return result; }","output":"function mysteryFunction(x) {     let result = 1;     for (let i = 1; i <= x; i++) {         result = result * i;     }     return result; }"},{"instruction":"Develop a program to encode and decode a given string. Input a string s to be encoded.","output":"def encode(s):      encoded_str = \\"\\"      for i in s:          encoded_str += str(ord(i))         return encoded_str     def decode(s):      decoded_str = \\"\\"      for i in range(0, len(s), 2):          decoded_str += chr(int(s[i:i+2]))         return decoded_str"},{"instruction":"Translate this piece of C++ code into Java. int num = 10; for (int i = 0; i < num; i++) {     num++; }","output":"int num = 10; for (int i = 0; i < num; i++) {     num++; } // translated to Java: int num = 10; for (int i = 0; i < num; i++) {     num++; }"},{"instruction":"Create a neural network in Python using the given input and output. Input a set of 3 input values (x1, x2, x3) and two output values (y1, y2).","output":"import numpy as np  import tensorflow as tf # Create the model  model = tf.keras.models.Sequential([   tf.keras.layers.Dense(2, activation='sigmoid', input_shape=(3,)) ])  # Compile the model  model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])  # Create the input and output data  input_data = np.array([[x1, x2, x3]]) output_data = np.array([[y1, y2]]) # Train the model  model.fit(input_data, output_data, epochs=100)"},{"instruction":"Design an algorithm in Python to detect anomalies in the given data. Input a dataset containing two columns, temperature and pressure.","output":"def detect_anomaly(data):      # Step 1: Calculate mean      mean_1 = np.mean(data['temperature'])      mean_2 = np.mean(data['pressure'])         # Step 2: Calculate the standard deviation      sd_1 = np.std(data['temperature'])      sd_2 = np.std(data['pressure'])         # Step 3: Calculate the threshold     cutoff = sd_1 * 3        # Step 4: Apply threshold and mark anomalies      lower_limit_temperature = mean_1 - cutoff      upper_limit_temperature = mean_1 + cutoff         lower_limit_pressure = mean_2 - cutoff      upper_limit_pressure = mean_2 + cutoff         # Mark the anomalies by setting the value as 1      data['anomaly'] = 0      data.loc[data['temperature'] < lower_limit_temperature, 'anomaly'] = 1       data.loc[data['temperature'] > upper_limit_temperature, 'anomaly'] = 1       data.loc[data['pressure'] < lower_limit_pressure, 'anomaly'] = 1       data.loc[data['pressure'] > upper_limit_pressure, 'anomaly'] = 1          # Return the dataframe      return data"},{"instruction":"Tell us the outputs of the following code block. a = 5 b = 10 if a > b:     print(\\"a is greater than b\\") elif a == b:     print(\\"a is equal to b\\") else:     print('a is lesser than b')","output":"a is lesser than b"},{"instruction":"Determine whether the following statement returns true or false. [1, 2, 3] > [4, 5, 6]","output":"False"},{"instruction":"Write a regular expression pattern to match a string starting with 'hello' and with two numbers after it.","output":"^hello[0-9]{2}"},{"instruction":"Rewrite the following function to optimize its performance. def indexString(listStr, s):     output = []     for i in listStr:         if s in i:             output.append(i)     return outpu","output":"def indexString(listStr, s):     output = []     for i in listStr:         if i.find(s) != -1 :             output.append(i)     return output"},{"instruction":"Generate a string array of length 10, containing only alphabets in lower case containing 10 random characters.","output":"import random def gen_string_arr(n):     output = []     for i in range(n):         output.append(''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=10)))     return output"},{"instruction":"Write a factorial program without using the inbuilt factorial function in Python.","output":"def factorial(n):     if n == 0:         return 1     else:         return n * factorial(n-1)"},{"instruction":"Create a software program that encrypts a text message.","output":"def encrypt(msg):     change = {'a': '@', 'e': '3', 'i': '1', 'o': '0', 's': '5'}     encrypted = \\"\\"     for c in msg:         if c in change:             encrypted += change[c]         else:             encrypted += c     return encrypted"},{"instruction":"Generate an array of length n with random numbers in the range 0 - 100","output":"import random def gen_num_arr(n):     output = []     for i in range(n):         output.append(random.randint(0, 101))     return output"},{"instruction":"Given a list of numbers and a target sum, write a Python program to determine whether there is a set of three numbers in the list that add up to the target sum. [2, 7, 5, 1, 8]","output":"def find_target_sum(nums, target_sum):     for i in range(0, len(nums) - 2):         for j in range(i+1, len(nums) - 1):             for k in range(j+1, len(nums)):                 if nums[i] + nums[j] + nums[k] == target_sum:                     return True     return False"},{"instruction":"Write a function to start a timer with the specified duration.","output":"def start_timer(duration):     start_time = time.time()     end_time = start_time + duration     while time.time() < end_time:         time.sleep(1)     print(\\"Timer finished!\\")"},{"instruction":"w would you write a program to determine the greatest common divisor (GCD) of two non-negative integers?","output":"def gcd(a, b):     # Base case     if a == 0:         return b     if b == 0:         return a     # Calculate the greatest common divisor using Euclid's algorithm     while b != 0:         a %= b         a, b = b, a              return a"},{"instruction":"w would you sort an array of integers using Merge Sort algorithm?","output":"def merge_sort(arr):      # Base case: if the list has 0 or 1 elements it is already sorted      if len(arr) > 1:          mid = len(arr)//2          # Split the array          left = arr[:mid]           right = arr[mid:]              # Recursively call merge_sort on left and right half         merge_sort(left)          merge_sort(right)             # Set up variables to help track merges         i = 0 # left array index          j = 0 # right array index          k = 0 # result array index             # Merge the two halves          while i < len(left) and j < len(right):              if left[i] < right[j]:                  arr[k] = left[i]                  i+=1              else:                  arr[k] = right[j]                  j+=1              k+=1                    # Copy the rest of the left half and right half          while i < len(left):              arr[k] = left[i]              i+=1             k+=1                    while j < len(right):              arr[k] = right[j]              j+=1             k+=1"},{"instruction":"Using Java, write a program to determine if a given word is a palindrome. word = \\"racecar","output":"boolean isPalindrome = true; for (int i = 0; i < word.length()/2; i++ ){     if (word.charAt(i) != word.charAt(word.length()-i-1)){         isPalindrome = false;         break;     } }"},{"instruction":"Create an HTML/CSS webpage which displays the given text: \\"Hello, Welcome to my website!","output":"<!DOCTYPE html> <html> <head>  <title>Welcome to My Website!</title> </head> <body> <div>  <h1>Hello, Welcome to my website!</h1> </div> </body> </html>"},{"instruction":"Generate a list of 10 random numbers between 0 and 500 in Python.","output":"import random numbers = [random.randint(0,500) for i in range(10)] print(numbers)"},{"instruction":"Create a Swift class named \\"MyClass\\" that contains two int properties and one function. The function should return the sum of the two properties.","output":"class MyClass {   var num1: Int   var num2: Int      func sum() -> Int {     return num1 + num2   } }"},{"instruction":"Write an SQL query to select all rows from the table \\"customers\\" that have the same age as the given customer. customer = (\\"John Smith\\", 32)","output":"SELECT * FROM customers WHERE age = 32"},{"instruction":"Generate a hash value for the given string using an MD5 algorithm. string = \\"Hello, World!","output":"using System; using System.Security.Cryptography; MD5 md5 = MD5.Create(); byte[] hashValue = md5.ComputeHash(Encoding.UTF8.GetBytes(string)); string hashString = BitConverter.ToString(hashValue).Replace(\\"-\\", \\"\\"); Console.WriteLine(hashString); // Output: 65a8e27d8879283831b664bd8b7f0ad4"},{"instruction":"Write an SQL query to retrieve all customers whose age is between 18 and 35.","output":"SELECT * FROM customers  WHERE age >= 18 AND age <= 35;"},{"instruction":"Create an HTML/CSS webpage which contains two identical paragraphs with red font.","output":"<!DOCTYPE html> <html> <head>  <title>My Webpage</title> </head> <body> <div>  <p style=\\"color:red;\\">This is paragraph one.</p>    <p style=\\"color:red;\\">This is paragraph two.</p> </div> </body> </html>"},{"instruction":"Create a Python function to remove duplicates in a given list. list_of_numbers = [2, 3, 3, 5, 5]","output":"def remove_duplicates(list_of_numbers):   result = []   for number in list_of_numbers:     if number not in result:       result.append(number)   return result"},{"instruction":"What is the value of the expression '2 ** 4' ?","output":"16"},{"instruction":"Print the results of the following arithmetic expression using python. 6/3+3*2","output":"15.0"},{"instruction":"Write a SQL query to retrieve the id, name and salary column from the Employee table.","output":"SELECT id, name, salary  FROM Employee;"},{"instruction":"Suggest an algorithm to find the number of nodes in a binary tree.","output":"Here is a possible algorithm to count the number of nodes in a binary tree: 1. Initialize count as 0 2. If the tree is empty, return 0. 3. Else    a. Recursively call the procedure on left subtree.    b. Add 1 to the \`count\` variable.    c. Recursively call the procedure on right subtree. 4. Return count."},{"instruction":"Write a lambda expression to select all records from a list of dictionaries with the name \\"John\\".","output":"selected_records = list(filter(lambda x:x['name']=='John', records))"},{"instruction":"Ensure that the following HTML element displays properly on all browsers. <p>Hello World!</p>","output":"<p style=\\"display: block; font-family: sans-serif; line-height: 1.3; font-size: 14px; color: #222;\\">Hello World!</p>"},{"instruction":"Remove duplicates from the list. list = [1,2,3,2,5,6,5]","output":"new_list = list(set(list))"},{"instruction":"Write a predicate to check for valid email syntax.","output":"def is_valid_email(string):     return re.match(\\"[^@]+@[^@]+.[^@]+\\", string) != None"},{"instruction":"Edit the code to extract the data from the given dictionary. data = { 'name': 'John', 'age': 23, 'address': {   'street': '123 Main Street',   'city': 'Los Angeles'   } }","output":"name = data['name'] age = data['age'] street = data['address']['street'] city = data['address']['city']"},{"instruction":"Modify the code to create an AI model to classify the given dataset. dataset = {     'x1': ['apple', 'banana'],     'x2': ['red', 'yellow'],     'label': ['fruit', 'fruit'] }","output":"class Model(nn.Module):     def __init__(self):         super(Model, self).__init__()         self.fc1 = nn.Linear(2, 32)         self.fc2 = nn.Linear(32, 32)         self.fc3 = nn.Linear(32, 2)     def forward(self, x):         x = x.view(-1, 2)         x = F.relu(self.fc1(x))         x = F.relu(self.fc2(x))         x = self.fc3(x)         x = F.softmax(x, dim=-1)         return x model = Model() criterion = nn.CrossEntropyLoss() optimizer = torch.optim.Adam(model.parameters(), lr=0.005)"},{"instruction":"Generate Python code to retrieve a list of tuples in the given string. String: \\"[('test1',1), ('test2',2)]","output":"list_items = [item.replace(\\"'\\", \\"\\").replace(\\"(\\", \\"\\").replace(\\")\\", \\"\\").split(\\",\\") for item in s[1:-1].split(\\"), (\\")] list_of_tuples = [(item[0], int(item[1])) for item in list_items]"},{"instruction":"w can we optimize the performance of the given code? myList = [1, 2, 3] for item in myList:     print(item)","output":"Use list comprehension to reduce the amount of code used, such as: print([item for item in myList])"},{"instruction":"Find the total cost of the given items. items: [('apple', 2.5), ('mango', 3.5)}","output":"total_cost = 0 for item in items:     price = item[1]     total_cost += price      print(total_cost)"},{"instruction":"Fetch the item from the given JSON response. JSON Response: { \\"results\\": [   {     \\"id\\": 1,     \\"name\\": \\"John\\"   },   {     \\"id\\": 2,     \\"name\\": \\"Dave\\"   } ] }","output":"item = json_response['results'][1] id = item['id'] name = item['name']"},{"instruction":"Create a class to represent the given data structure. Data Structure: Student:    Id: Integer   Name: String   Age: Integer","output":"class Student:     def __init__(self, id, name, age):         self.id = id         self.name = name         self.age = age"},{"instruction":"Generate Python code to extract only the keys from the given dictionary. d = {'name': 'John', 'age': 24, 'city': 'New York'}","output":"keys = list(d.keys())"},{"instruction":"Trace the given code and explain the operations. a = [1, 2, 3] b = [4, 5, 6] c = a + b","output":"The code creates two lists, a and b, each containing three elements. Then, it creates a third list c by concatenating the two lists, resulting in a list containing six elements."},{"instruction":"Using the below HTML code, replace the \\"TODO\\" comment with the appropriate code to add a hover effect on the div element. <div>hello</div> <style>   div {     padding: 10px;     //TODO   } </style>","output":"<div>hello</div> <style>   div {     padding: 10px;     transition: all 0.5s ease-in;   }   div:hover {     box-shadow: 2px 2px 2px #000;   } </style>"},{"instruction":"Using the below Python code, Write a code snippet to index all the values of an array. arr = [3, 8, 2, 5, 1]","output":"for i, val in enumerate(arr):     print(f\\"arr[{i}] = {val}\\")"},{"instruction":"Given two strings, write a function to check if one string is a rotation of the other. str1 = \\"beans\\" str2 = \\"esb","output":"def is_rotation(str1, str2):     if len(str1) != len(str2):         return False              temp = str1 + str1     return str2 in temp"},{"instruction":"Write a code snippet to sum up the length of each individual element in an array. arr = ['apple', 'banana', 'cherry']","output":"const sum = arr.reduce((acc, curr) => acc + curr.length, 0)"},{"instruction":"Given the following code, write a function to find the sum of all the numbers between 0 and n. n = 5","output":"function findSum(n){     let sum = 0;     for(let i = 0; i <= n; i++){         sum += i;     }     return sum; }"},{"instruction":"Given the below array, find all the elements that are greater than 6. arr = [3, 5, 8, 1, 9, 6]","output":"let result = arr.filter(el => el > 6);  // result is [8, 9]"},{"instruction":"Convert the following HTML into XML. <hello>     <world>         <foo>bar</foo>     </world> </hello>","output":"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?> <hello>     <world>         <foo>bar</foo>     </world> </hello>"},{"instruction":"Write a code snippet to check if the following text contains the word 'hello'. text = \\"This is a test message","output":"if (text.includes(\\"hello\\")) {   console.log(\\"The text contains the word 'hello'\\"); } else {   console.log(\\"The text does not contain the word 'hello'\\"); }"},{"instruction":"Answer the following true/false question \\"Every program executes instructions sequentially","output":"true"},{"instruction":"Write a Python program to create a numerical addition table","output":"def addition_table(n):     for i in range(1, n+1):         for j in range(1, n+1):             print(i + j, end= \\" \\")         print() addition_table(10)"},{"instruction":"Edit the following code to sort the list of numbers in ascending order let numbers = [3, 1, 2, 5, 4]","output":"let numbers = [3, 1, 2, 5, 4] numbers.sort(by: {0 < 1})"},{"instruction":"Compose an HTML webpage with a title and two paragraphs","output":"<html>     <head>         <title>Webpage Title</title>     </head>     <body>         <h1>Webpage Title</h1>         <p>Paragraph 1</p>         <p>Paragraph 2</p>     </body> </html>"},{"instruction":"Write a sql query to find the number of entries that have a null value in the 'age' column","output":"SELECT COUNT(*) FROM tableName     WHERE age IS NULL;"},{"instruction":"mplement a function in JavaScript which checks whether a number is prime or not.","output":"function isPrime(num) {     if (num <= 1) {          return false;      }          for (let i = 2; i < num; i++) {         if (num % i === 0) {             return false;         }     }     return true; }"},{"instruction":"Create an API using Python which returns the number of words in a given string.","output":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route(\\"/get_words_count\\", methods=[\\"GET\\"]) def get_words_count():     sentence = request.args.get(\\"sentence\\")     words = sentence.split(\\" \\")     return jsonify({\\"words_count\\": len(words)}) if __name__ == \\"__main__\\":     app.run()"},{"instruction":"Write an SQL query to find the student's average marks in a particular course.","output":"SELECT student_name, AVG(student_marks) FROM student_table GROUP BY student_name"},{"instruction":"Create a program in C++ that converts Celsius temperature to Fahrenheit.","output":"#include<iostream>   using namespace std;   int main() {     float celsius, fahrenheit;        cout << \\"Enter the temperature in Celsius: \\";     cin >> celsius;       fahrenheit = (celsius * 9 / 5) + 32;       cout << \\"The temperature in Fahrenheit is: \\" << fahrenheit;       return 0; }"},{"instruction":"Create a Ruby program to display elements of an array in the reverse order.","output":"def reverse_array(arr)   arr.reverse_each { |num| puts num } end"},{"instruction":"Construct an R script that sorts given numbers in ascending order.","output":"nums <- c(3, 8, 5, 7, 2, 6) sorted_nums <- sort(nums) print(sorted_nums)"},{"instruction":"Describe a procedure to multiply two numbers using Bash scripting.","output":"#!/bin/bash # store the input into variables num1=1 num2=2 # calculate the product product=((num1*num2)) # print the result echo \\"num1 x num2 = product\\""},{"instruction":"Utilize Python to implement an algorithm which finds the largest number in an array.","output":"def largestNumber(arr):      max = arr[0]      for i in range(1, len(arr)):          if arr[i] > max:              max = arr[i]      return max"},{"instruction":"Create a Java program which calculates the area of a circle.","output":"public class AreaCalculator {     public static final double PI = 3.14159;      \\tpublic static double calculateArea(double radius) { \\t\\treturn PI * radius * radius; \\t}      \\tpublic static void main(String[] args) { \\t\\tSystem.out.println(calculateArea(10)); \\t} }"},{"instruction":"mplement a function in C# to generate Fibonacci numbers.","output":"public static IEnumerable<int> GenerateFibonacciSequence() {     int prev = 0;     int current = 1;     yield return prev;     yield return current;     while (true) {         int temp = prev + current;         prev = current;         current = temp;         yield return current;     } }"},{"instruction":"Construct a SQL query to find all customers with a first name of \\"John\\" and a city of \\"New York\\".","output":"SELECT * from customers  WHERE first_name = 'John'  AND city = 'New York';"},{"instruction":"Specify the platform and the environment variables needed to run a Java program.","output":"The platform dependent environment variables needed to run a Java program on any platform are: 1. JAVA_HOME: This variable stores the location of JDK. 2. PATH: This variable stores the path to the executables. 3. CLASSPATH: This variable contains the path to the Java classes. 4. JRE_HOME: This variable stores the location of the JRE."},{"instruction":"Name two differences between Strings and StringBuffer in Java.","output":"The two major differences between String and StringBuffer in Java are:  1. String objects are immutable in nature whereas StringBuffer objects are mutable.  2. String objects are created using \\"String Literal\\" whereas StringBuffer objects are created using the \\"new\\" keyword."},{"instruction":"Create a new array called 'arr2' by combining the elements of two existing arrays 'arr1' and 'arr2'. Both arrays should be of the same size. arr1 = [1, 2, 3] arr2 = [4, 5, 6]","output":"arr2 = [] for i in range(len(arr1)):     arr2.append(arr1[i] + arr2[i]) print(arr2)"},{"instruction":"Why should you use functions in programming?","output":"Using functions in programming helps to break down complex tasks into more manageable pieces, which makes code easier to read and maintain. Functions also allow for the reuse of code, which can help to reduce overall development time and resources. Additionally, functions improve code organization and enable functions to be tested independently, making debugging easier."},{"instruction":"Write a JavaScript code snippet to create an object with two properties, 'name' and 'age'.","output":"let person = {     name: 'John',     age: 25 }"},{"instruction":"Describe the differences between List, ArrayList, and Vector in Java.","output":"The main differences between List, ArrayList, and Vector are their memory utilization, synchronization, and thread safety . List is an interface that is the parent class of ArrayList and Vector. ArrayList is an unsynchronized collection, making it faster but not thread safe and Vector is a synchronized collection, making it slower but thread safe. Additionally, Vector has a capacity variable which is not available in an ArrayList, making it more memory efficient."},{"instruction":"What are the advantages of using MapReduce over Hadoop?","output":"The advantages of using MapReduce over Hadoop include:  1. Charges less money due to its parallel processing capabilities.  2. Can handle much larger data sets than Hadoop since it uses distributed computing paradigm.  3. Increases in scalability and performance due to its ability to horizontally scale computing nodes.  4. MapReduce jobs are easy to use and can handle various types of data.  5. Allows for faster development of data processing applications."},{"instruction":"What is the difference between an interface and an abstract class?","output":"The main difference between an interface and an abstract class is that an interface can only contain abstract methods while an abstract class can include both abstract and non-abstract methods. Additionally, an interface can be implemented by multiple classes while a class can only extend a single abstract class. Interfaces are also limited to public methods while an abstract class can contain any type of access modifiers."},{"instruction":"Given a stream of blog posts from a certain website, how would you filter out posts with more than 50 comments in Python? stream_of_blog_posts = [{'title': 'post1', 'comments': 35}, {'title': 'post2', 'comments': 52}, {'title': 'post3', 'comments': 19}]","output":"posts_with_more_than_50_comments = [post for post in stream_of_blog_posts if post['comments'] > 50]"},{"instruction":"Python, how can we calculate the mean of a numerical data set?","output":"def mean(data):     return sum(data) / len(data)"},{"instruction":"w can we use the reduce() function in JavaScript to find the sum of an array of numbers?","output":"const numbers = [10, 20, 30] const sum = numbers.reduce((acc, val) => acc + val, 0) console.log(sum)"},{"instruction":"Write a query to find users with a given age in MongoDB. given_age = 20","output":"db.users.find({age: given_age})"},{"instruction":"Write a for loop in C to subtract 100 from an array of numbers. array = [150, 200, 250]","output":"for(int i = 0; i < array.length; i++){     array[i] = array[i] - 100; }"},{"instruction":"w can we generate a new HTML page with a given title tag in JavaScript? title = \\"My Page","output":"const title = \\"My Page\\" const newPage = \`<html><head><title>{title}</title><head></html>\`;"},{"instruction":"w can we use the list comprehension method in Python to reverse a given list of string? list_of_strings = [\\"cat\\", \\"dog\\", \\"rabbit\\"]","output":"reversed_list_of_strings = [string[::-1] for string in list_of_strings]"},{"instruction":"w to create an empty data frame in Pandas?","output":"import pandas as pd df = pd.DataFrame()"},{"instruction":"w can we replace a substring in a given string with another substring in JavaScript? string = \\"Hello World\\" substr1 = \\"Hello\\" substr2 = \\"H","output":"finalString = string.replace(substr1, substr2)"},{"instruction":"w can we use the set() method to find the unique elements in a given list of integers in C#?","output":"var listOfIntegers = [1,2,3,3,2,2,3]; var uniqueElements = new HashSet<int>(listOfIntegers); foreach (var element in uniqueElements) {     Console.WriteLine(element); }"},{"instruction":"Modify the following JavaScript for loop so it will loop through the array in reverse order. for (let i = 0; i < array.length; i++) {      console.log(array[i]);  }","output":"for (let i = array.length - 1; i >= 0; i--) {      console.log(array[i]);  }"},{"instruction":"Given a list of integers, find the numbers which are greatest than the given number X. List: [-3, 0, 3, 5, 9], X = 4","output":"function greaterThan(list, x)  {      let result = [];             for (let i=0; i<list.length; i++)          if (list[i] > x)              result.push(list[i]);                     return result;  }"},{"instruction":"Write a SQL query to find the names of all employees whose salary is above 10000.","output":"SELECT name FROM Employees WHERE salary > 10000;"},{"instruction":"Create a CSS class which defines a black border with a red background color.","output":".blackBorder {     border: 1px solid black;     background-color: red; }"},{"instruction":"mplement a function in Python to find the maximum number from a list of integers. [3, 5, 1, 6, 10]","output":"def findMax(list):      max = list[0]         for i in list:          if i > max:              max = i         return max"},{"instruction":"Modify the following CSS Code so that it will target mobile devices only. .text-center {     text-align: center; }","output":"@media only screen and (max-width: 767px) {      .text-center {         text-align: center;     } }"},{"instruction":"Create a JavaScript function which takes two arguments and returns the larger number.","output":"function findMax(num1, num2) {         if (num1 > num2) {             return num1;         } else {             return num2;         }     }"},{"instruction":"Edit the following C program to print the right-most digit of the given number. #include<stdio.h>    int main()  {      int num;      scanf(\\"%d\\", &num);          // Compute the rightmost digit              printf(\\"%d\\", num);          return 0;  }","output":"#include<stdio.h>    int main()  {      int num;      scanf(\\"%d\\", &num);          // Compute the rightmost digit      int right_most_digit = num % 10;               printf(\\"%d\\", right_most_digit);          return 0;  }"},{"instruction":"Rewrite the following Python program to sort the numbers in an array in ascending order. list = [5, 1, 0, 4, 7]","output":"def sort(list):      for i in range(len(list)-1):          for j in range(0, len(list)-i-1):              if list[j] > list[j+1] :                  list[j], list[j+1] = list[j+1], list[j]                   list = [5, 1, 0, 4, 7] sort(list)  print (\\"Sorted list is:\\")  print(list)"},{"instruction":"Create a JavaScript class to find the difference of two given dates.","output":"class DateCalculator {     static daysDifference(date1,date2) {         let diffTime = Math.abs(date2.getTime() - date1.getTime());         let diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));         return diffDays;     } }"},{"instruction":"Write a script to launch a web server listening on port 8080.","output":"import http.server import socketserver # define the port PORT = 8080 # define the handler Handler = http.server.SimpleHTTPRequestHandler # initiate the server try:     webserver = socketserver.TCPServer((\\"\\",PORT),Handler)     print(\\"Server Initialized on port 8080.\\")     webserver.serve_forever() except KeyboardInterrupt:          webserver.socket.close()"},{"instruction":"Develop a logic to generate Fibonacci Series till n terms. n = 6","output":"def fibonacci(n):     a = 0     b = 1     print(a)     print(b)     for i in range (2,n):         c = a+b         a = b         b = c         print(c) fibonacci(6)"},{"instruction":"Create a function that, given a number, reverses the digits and returns them in an array. 12345","output":"def reverse(num):     arr = []     while num > 0:         digit = num % 10         arr.append(digit)         num //= 10     return arr print(reverse(12345)) # prints [5, 4, 3, 2, 1]"},{"instruction":"Create a command to delete a folder with all its contents. /root/folder","output":"import os  def remove_folder(folder):      for filename in os.listdir(folder):          file_path = os.path.join(folder, filename)          try:              if os.path.isfile(file_path) or os.path.islink(file_path):                  os.unlink(file_path)              elif os.path.isdir(file_path):                  shutil.rmtree(file_path)          except Exception as e:              print('Failed to delete %s. Reason: %s' % (file_path, e))    remove_folder('/root/folder')"},{"instruction":"Create a React component to render a list of items with its title and description. title: 'My List', items: [{title: 'Item 1', description: 'this is the description'}, {title: 'Item 2', description: 'this is the description'}]","output":"import React, { Component } from 'react'; class MyList extends Component {     render() {         const { title, items } = this.props;         const listItems = items.map((item, index) =>             <div key={index} style={{ marginBottom: '1em' }}>                 <h4>{item.title}</h4>                 <p>{item.description}</p>             </div>         );         return (             <div>                 <h3>{title}</h3>                 {listItems}             </div>         )     } } export default MyList;"},{"instruction":"Create a program to tokenize a given string into a list of strings. 'Hello! My name is Bob.'","output":"import nltk def tokenize(string):     tokens = nltk.word_tokenize(string)     return tokens print(tokenize('Hello! My name is Bob.')) # prints [\\"Hello\\", \\"!\\", \\"My\\", \\"name\\", \\"is\\", \\"Bob\\", \\".\\"]"},{"instruction":"Develop a program to apply a given operation (addition or subtraction) on two numbers. operation: 'addition', a: 4, b:20","output":"def operate(operation, a, b):     if operation == 'addition':         return a + b     elif operation == 'subtraction':         return a - b     else:         return 'Invalid operation.' print(operate('addition', 4, 20)) # prints 24"},{"instruction":"Write a Python program to fill a dictionary with key as a number and value as a string for square with {1: \\"1\\", 2: \\"4\\", 3: \\"9\\", ...}.","output":"dic = {} for i in range (1,11):     dic[i] = str(i ** 2) print(dic)"},{"instruction":"ert the following line in the provided C source code \`int new_variable = 1;\` #include <stdio.h>  int main()  {      int a = 10;      int b = 15;          printf(\\"Sum = %d\\", a + b);         return 0;   }","output":"#include <stdio.h>  int main()  {      int a = 10;      int b = 15;      int new_variable = 1;          printf(\\"Sum = %d\\", a + b);         return 0;   }"},{"instruction":"Write a SQL query to join two tables (Users and Orders) on User_ID.","output":"SELECT *  FROM Users LEFT JOIN Orders  ON Users.User_ID = Orders.User_ID;"},{"instruction":"Write a JavaScript program to filter out even numbers from an array [1,2,3,4,5,6]. [1,2,3,4,5,6]","output":"const array = [1,2,3,4,5,6];   const evenNumbers = array.filter(num => num % 2 !== 0);   console.log(evenNumbers); // output: [1,3,5]"},{"instruction":"w do you print the first parameter passed to a bash script?","output":"echo 1"},{"instruction":"Read the following XML structure and print the value of the \\"name\\" attribute. <root>   <item name=\\"Apple\\">     <price>2.50</price>   </item> </root>","output":"root = ET.fromstring(inputString)  print(root.find('item').attrib['name']) #output: Apple"},{"instruction":"EDIT this JavaScript function to return a list of the square roots of all numbers in a given input array. function squareRoots(arr) {   // EDIT THIS }","output":"function squareRoots(arr) {   const result = [];   for (let ele of arr) {     result.push(Math.sqrt(ele));   }   return result; }"},{"instruction":"Using the given three arrays, classify each array element as either prime numbers or not prime numbers. arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]; arr2 = [4, 6, 9, 10, 12, 15, 18, 20]; arr3 = [11, 13, 17, 19, 23, 27, 37, 41];","output":"function classifyPrime(arr1,arr2,arr3) {     let result = {         arr1: [],         arr2: [],         arr3: []     };     for(let i = 0; i < arr1.length; i++){         if (isPrime(arr1[i])){             result.arr1.push(\\"prime\\");         } else {             result.arr1.push(\\"not prime\\");         }     }     for(let i = 0; i < arr2.length; i++){         if (isPrime(arr2[i])){             result.arr2.push(\\"prime\\");         } else {             result.arr2.push(\\"not prime\\");         }     }     for(let i = 0; i < arr3.length; i++){         if (isPrime(arr3[i])){             result.arr3.push(\\"prime\\");         } else {             result.arr3.push(\\"not prime\\");         }     }     return result; } function isPrime(num){     let prime = true;     for(let i = 2; i <= Math.sqrt(num); i++){         if ( num % i === 0 ){             prime = false;         }     }     return prime; } arr1Result = classifyPrime(arr1,arr2,arr3);"},{"instruction":"Sort this array of integers in ascending order using JavaScript. const array = [26, 4, 11, 56, 23, 39]","output":"const array = [26, 4, 11, 56, 23, 39]; let sortedArray = array.sort(function(a,b){  return a-b; }); console.log(sortedArray);"},{"instruction":"Create a Python program to find all the perfect squares between 1 and n.","output":"def perfect_squares(n):     result = []     for i in range(1, n+1):         if is_perfect_square(i):             result.append(i)     return result def is_perfect_square(n):     sqrt = int(n**.5)     return sqrt**2 == n if __name__ == '__main__':     n = 25     result = perfect_squares(n)     print(result)"},{"instruction":"Create a Bash script for finding the most frequent word in a given sentence. This is a test sentence to test the most frequent word","output":"#!/bin/bash sentence=\\"This is a test sentence to test the most frequent word\\" words=((echo sentence | tr ' ' 'n')) mostFrequentWord='' mostFrequentWordCount=0 for ((i=0; i<{#words[@]}; i++)) do   word={words[i]}   count=0   for ((j=0; j<{#words[@]}; j++))   do     if [[ \\"word\\" == \\"{words[j]}\\" ]]     then       count=((count+1))     fi   done   if [[ count -gt mostFrequentWordCount ]]   then     mostFrequentWordCount=count     mostFrequentWord=word   fi done echo \\"The most frequent word is: \\"mostFrequentWord"},{"instruction":"Write a Java program to find the index of the first occurrence of the given element in an array. int[] array = {1, 7, 3, 6, 4, 7}; int num = 7;","output":"public class FindFirstIndex {     public static void main(String[] args) {         int[] array = {1, 7, 3, 6, 4, 7};         int num = 7;         int idx = -1;         for(int i = 0; i < array.length; i++) {             if(array[i] == num) {                 idx = i;                 break;             }         }         System.out.println(\\"Index of the first occurrence of the given element: \\" + idx);     } }"},{"instruction":"Change the syntax of the code so that it prints the smallest and largest numbers from a given array. list1 = [2, 5, 3, 1]   print(list1)","output":"list1 = [2, 5, 3, 1]   print(min(list1), max(list1))"},{"instruction":"Rearrange the code so that the output is \\"Hi, world!\\". world = \\"Hi\\" print(world)","output":"world = \\"Hi\\" print(world + \\", world!\\")"},{"instruction":"Replace the \\"TODO\\" comment in the code with the proper code to print the length of a given List. list1 = [1, 2, 3, 4, 5] # TODO","output":"list1 = [1, 2, 3, 4, 5] print(len(list1))"},{"instruction":"Using a list comprehension, create a filtered list which contains numbers that are divisible by 2. nums = [1, 2, 3, 4, 5, 6]","output":"filtered_list = [num for num in nums if num % 2 == 0]"},{"instruction":"Create a function to determine if a given string is an anagram of another. An anagram is a word or phrase formed by rearranging the letters of another word or phrase.","output":"def is_anagram(str1, str2):    sorted_str1 = \\"\\".join(sorted(str1))    sorted_str2 = \\"\\".join(sorted(str2))        if sorted_str1 == sorted_str2:         return True     return False"},{"instruction":"Compare two strings and return the longest one. string1 = \\"Hello\\" string2 = \\"World","output":"def compare_strings(string1, string2):      if len(string1) > len(string2):          return string1      return string2"},{"instruction":"mplement a logic to separate even and odd numbers from an array in JavaScript. const numbers = [1,2,3,4,5,6,7];","output":"const evenNumbers = numbers.filter(number => number % 2 == 0); const oddNumbers = numbers.filter(number => number % 2 != 0);"},{"instruction":"Suggest a SQL query to return all users with an age between 18 and 25.","output":"SELECT * FROM users WHERE age BETWEEN 18 AND 25;"},{"instruction":"Suggest a JavaScript statement to log “Hello World” in the console.","output":"console.log('Hello World');"},{"instruction":"Construct a SQL query that returns all users who did not login in the last 24 hours.","output":"SELECT * FROM users WHERE last_login < NOW() - INTERVAL 24 HOUR;"},{"instruction":"Execute the following bash shell script. clear echo \\"Hello World","output":"bash program.sh Hello World"},{"instruction":"Suggest a SQL query to get the average order total from last year's orders.","output":"SELECT AVG(total) FROM orders WHERE YEAR(order_date) = YEAR(CURDATE()) - 1"},{"instruction":"Write a python script to print 'Hello World' in HTML format","output":"print(\\"<p>Hello World</p>\\")"},{"instruction":"Write a code snippet to append a new element 'Giraffe' to list x x = [\\"Elephant\\", \\"Tiger\\", \\"Lion\\"]","output":"x.append(\\"Giraffe\\")"},{"instruction":"Create a css class 'heading' with font size 16px","output":".heading {     font-size: 16px; }"},{"instruction":"Write a SQL query to retrieve the data from the table 'user_data'.","output":"SELECT * FROM user_data;"},{"instruction":"Write a python program to convert a number from base 10 to base 8.","output":"def convert_base_10_to_base_8(number):    binary_number = bin(number)[2:]    octal_number = oct(int(binary_number, 2))[2:]    return octal_number"},{"instruction":"Create an array in Java containing two objects.","output":"Object[] myArray =  {object1, object2 };"},{"instruction":"Ruby, how would you write a program that prints out all the prime numbers between 0 and 50?","output":"# print out all the prime numbers between 0 and 50   def prime_numbers_between(start, finish)   for i in (start..finish)     count = 0     for j in (2..i-1)        if i % j == 0          count += 1         break       end     end     puts i if count == 0   end end prime_numbers_between(0, 50)"},{"instruction":"Write a CSS code to add a white background and blue font to the body element.","output":"body {   background-color: white;   color: blue; }"},{"instruction":"Reformat the following function from JavaScript to Java. function subtract(x, y) {   return x - y; }","output":"public int subtract(int x, int y) {   return x - y; }"},{"instruction":"Create a class named 'Animal' with one private data member 'numberOfLegs'.","output":"public class Animal {   private int numberOfLegs; }"},{"instruction":"Create a new branch in Git to fix a bug in the application.","output":"git branch bug-fix"},{"instruction":"Rewrite the following JavaScript code to jQuery. document.querySelector('#main').addEventListener('click', event => {     console.log('The element was clicked!') })","output":"('#main').click(function(event) {     console.log('The element was clicked!'); });"},{"instruction":"Summarize the following passage in five sentences. Machine learning is the scientific study of algorithms and statistical models that computer systems use in order to perform a specific task without using explicit instructions, relying on patterns and inference instead. It is seen as a subset of artificial intelligence. Machine learning algorithms build a mathematical model of sample data, known as “training data”, in order to make predictions or decisions without being explicitly programmed to do so.","output":"Machine learning is a scientific field of study which uses algorithms and statistical models to allow computers to complete tasks without direct instructions or programming. It is a subset of artificial intelligence, using training data to form a mathematical model and make predictions. Machine learning algorithms can make decisions without explicit programming and rely on patterns and inference. It is an invaluable tool for data analysis and can be used for a wide variety of tasks such as image recognition and natural language processing."},{"instruction":"Write a function in C++ that takes a character array as an argument and it returns the number of vowels in the array. \\"Hello World!","output":"int countVowels(char text[]) {     int count = 0;     for (int i = 0; text[i] != '0'; i++)      {         if (text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' || text[i] == 'A'|| text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i] == 'U')             count++;     }     return count; }"},{"instruction":"Write a regular expression to search for a string in a text. The given text is: \\"Yahoo! is a popular search engine.\\" To search for \\"Yahoo\\"","output":"/Yahoo/"},{"instruction":"Create an HTML table with 3 rows and 4 columns.","output":"<table>    <tr>      <td></td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <td></td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <td></td>      <td></td>      <td></td>      <td></td>    </tr>  </table>"},{"instruction":"Write a JavaScript program to replace a specific word in a string. The given string is: \\"Welcome to my website!\\" To replace the word “website” with “blog”","output":"var str = \\"Welcome to my website!\\";  var newStr = str.replace(\\"website\\", \\"blog\\");  console.log(newStr);"},{"instruction":"Create a Python class for circles with radius and color as its properties.","output":"class Circle:       # Constructor     def __init__(self, radius, color):         self.radius = radius         self.color = color       # To get radius     def getRadius(self):         return self.radius       # To get color     def getColor(self):         return self.color"},{"instruction":"Create a JavaScript program to check if a string has at least one alphabet.","output":"function hasAlphabet(str) {   let hasAlphabet = false;   for (let char of str) {     if (char >= 'A' && char <= 'Z' || char >= 'a' && char <= 'z') {       hasAlphabet = true;       break;     }   }   return hasAlphabet; }"},{"instruction":"Write a shell script to calculate the sum of two numbers given as command line argument.","output":"sum=(echo \\"1 + 2\\" | bc -l) echo sum"},{"instruction":"Edit the following CSS code to update the color to green. p{   color: red; }","output":"p{   color: green; }"},{"instruction":"Develop a C program to count and print the number of characters in a sentence. The quick brown fox","output":"#include<stdio.h> int main(){   char sentence[100];   int count = 0;   scanf(\\"%[^n]s\\", sentence);   for (int i=0; sentence[i]!='0'; i++){     count++;   }   printf(\\"Number of characters: %dn\\", count);   return 0; }"},{"instruction":"Create a SQL query to get the list of employees working in the IT department.","output":"SELECT e.name FROM employees e   JOIN departments d on e.department_id = d.id   WHERE d.name = 'IT'"},{"instruction":"Generate a JavaScript function to perform binary search for a given array.","output":"function binarySearch(array, target) {   // Initialize variables   let left = 0;   let right = array.length - 1;   // Iterate while left <= right    while (left <= right) {     // Get middle index     let mid = left + Math.floor((right - left) / 2);     // Match found     if (array[mid] === target) {       return mid;     }     // If target is smaller than the array element at mid     if (target < array[mid]) {       right = mid - 1;     }     // Target is greater than the element at mid     else {       left = mid + 1;      }   }   // We reach here when target is not found   return -1; }"},{"instruction":"Compose a SQL query to count the number of users who logged in yesterday.","output":"SELECT COUNT(*) FROM users   WHERE login_date = CURRENT_DATE - INTERVAL 1 DAY"},{"instruction":"Write HTML code to create a webpage that has two paragraphs and a header.","output":"<!DOCTYPE html> <html> <head>     <title>Two Paragraphs & a Header</title> </head> <body>   <h1>Header</h1>   <p>Paragraph 1</p>   <p>Paragraph 2</p> </body> </html>"},{"instruction":"Create a php script to authenticate a user against a certain database given the user's username and password. Username: John Password: 1234 Database: user","output":"<?php username = _POST['username']; password = _POST['password']; db_server = 'localhost'; db_username = 'root'; db_password = 'root'; db_name = 'users'; conn = mysqli_connect(db_server, db_username, db_password, db_name); // check connection if(!conn) { \\tdie('Connection failed: ' .mysqli_connect_error()); } sql = \\"SELECT * FROM users WHERE username='username' AND password='password'\\"; result = mysqli_query(conn, sql); if (mysqli_num_rows(result) == 1) { \\techo \\"User authenticated\\"; } else { \\techo \\"Authentication failed\\"; } mysqli_close(conn); ?>"},{"instruction":"Create a SQL query to select the name, address and email of customers who placed an order in the last 30 days.","output":"SELECT name, address, email FROM customers WHERE last_order_date > CURRENT_DATE - INTERVAL 30 DAY"},{"instruction":"Create an HTML form with a 'submit' button and an input field labeled 'Name'.","output":"<form action=\\"index.php\\" method=\\"POST\\">   <label for=\\"name\\">Name:</label>   <input type=\\"text\\" name=\\"name\\" id=\\"name\\" />   <input type=\\"submit\\" value=\\"Submit\\" /> </form>"},{"instruction":"Write a Python script to print the current day, month and year.","output":"from datetime import datetime now = datetime.now() print(\\"Today is\\", now.day, now.month, now.year)"},{"instruction":"Write C++ code to convert a given Fahrenheit temperature degree to Celsius. Fahrenheit = 100","output":"#include <iostream> using namespace std; float FahrenheitToCelsius(float faherenheit) { \\tfloat celsius = (faherenheit - 32) * 5/9; \\treturn celsius; } int main() { \\tfloat fahrenheit = 100; \\tfloat Celsius = FahrenheitToCelsius(fahrenheit); \\tcout << Celsius << endl; \\treturn 0; }"},{"instruction":"Write a Java program to append two given lists. list1 = [10, 20, 30] list2 = [5, 15, 25]","output":"import java.util.ArrayList; public class AppendLists { \\tpublic static ArrayList<Integer> appendLists(ArrayList<Integer> list1,  \\t\\t\\tArrayList<Integer> list2) { \\t\\tArrayList<Integer> appendedList = new ArrayList<>(list1); \\t\\tappendedList.addAll(list2); \\t\\t \\t\\treturn appendedList; \\t} \\t \\tpublic static void main(String[] args) { \\t\\tArrayList<Integer> list1 = new ArrayList<>(); \\t\\tlist1.add(10); \\t\\tlist1.add(20); \\t\\tlist1.add(30); \\t\\t \\t\\tArrayList<Integer> list2 = new ArrayList<>(); \\t\\tlist2.add(5); \\t\\tlist2.add(15); \\t\\tlist2.add(25); \\t \\t\\tSystem.out.println(appendLists(list1, list2)); \\t} \\t }"},{"instruction":"Create an Android function to get the current battery level.","output":"public float GetBatteryLevel(Context context){     Intent batteryIntent = context.registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));     int level = batteryIntent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);     int scale = batteryIntent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);     if(level == -1 || scale == -1){         return 50.0f;     }     return ((float)level / (float)scale) * 100.0f; }"},{"instruction":"Create a React component with a name of your choice to display the current date and time.","output":"import React from 'react'; class CurrentTime extends React.Component {   render() {     const date = new Date();     return (       <div>         {date.toLocaleString()}       </div>     );   } } export default CurrentTime;"},{"instruction":"Calculate the surface area of a sphere with radius 6m.","output":"The surface area of a sphere with radius 6m is 113.1 m2."},{"instruction":"Create a JavaScript function to return the sum of the digits in a given number.","output":"function sumDigits(num) {   return [...String(num)].reduce((acc, cur) => acc + Number(cur), 0); }"},{"instruction":"Create a MongoDB database named \\"university_db\\".","output":"> use university_db switched to db university_db"},{"instruction":"Create a Redux reducer to handle a state named \\"counter\\" with an initial value of 0.","output":"const initialState = {   counter: 0 }; const reducer = (state = initialState, action) => {   switch (action.type) {     case \\"INCREMENT\\":       return {         ...state,         counter: state.counter + 1       };     case \\"DECREMENT\\":       return {         ...state,         counter: state.counter - 1       };     default:       return state;   } }; export default reducer;"},{"instruction":"Write an Angular component to update the value of a variable every second.","output":"import { Component } from '@angular/core'; @Component({   selector: 'app-timer',   template: \`   {{ counter }}   \` }) export class TimerComponent {   counter = 0;   constructor() {     setInterval(() => {       this.counter++;     }, 1000);   } }"},{"instruction":"Using PHP, write a program to check if a string contains only alphabets.","output":"<?php function checkAlphabetical(str) {   len = strlen(str);        // Traverse the given string, check     // for every character      for (i = 0; i < len; i++) {          // If the string contains any           // non-alphabetical character          if((ord(str[i]) > 64 &&           ord(str[i]) < 91)          ||          (ord(str[i]) > 96 &&           ord(str[i]) < 123)) {             return true;          } else {             return false;          }     }  }  // Driver code  str = \\"Hello World\\";  str2 = \\"HELLO123\\"; if (checkAlphabetical(str))  echo \\"The string contains only alphabets\\";     if (checkAlphabetical(str2))  echo \\"The string contains only alphabets\\";  else echo \\"The string does not contain only alphabets\\";  ?>"},{"instruction":"Create a JavaScript class to initialize the canvas width and height.","output":"class Canvas {   constructor(width, height) {     this.width = width;     this.height = height;   }     init() {     const canvas = document.createElement('canvas');     canvas.width = this.width;     canvas.height = this.height;     return canvas;   } }"},{"instruction":"Create an Objective-C function to print out an array of numbers.","output":"void printArray(int arr[], int size) {   for (int i=0; i < size; i++)     printf(\\"%d \\", arr[i]);   printf(\\"n\\"); }"},{"instruction":"Using HTML, write a page structure for a basic web page.","output":"<!DOCTYPE html> <html lang=\\"en\\"> <head>  <meta charset=\\"utf-8\\">  <title>Web Page</title> </head> <body>   </body> </html>"},{"instruction":"Create a Python program to return the longest word in a sentence \\"The dog likes to run around the yard","output":"def longest_word(sentence):     words = sentence.split()     longest = 0     for word in words:         if len(word) > longest:             longest = len(word)             longest_word = word     return longest_word print(longest_word(\\"The dog likes to run around the yard\\"))"},{"instruction":"Write a JavaScript code snippet to declare a variable and assign it the value 12.","output":"let myVar = 12;"},{"instruction":"Create a Python function to print out a string in reverse order. \\"This is a string","output":"def reverse_string(input_str):     return input_str[::-1]   print(reverse_string(\\"This is a string\\"))"},{"instruction":"Write a Java code snippet to declare a two dimensional array of size 2×3.","output":"int[][] arr = new int[2][3];"},{"instruction":"Write a JavaScript code snippet to print out the value of a variable named \\"myVar\\". let myVar = 10;","output":"console.log(myVar);"},{"instruction":"w can you call a function named \\"myFunction\\" in both JavaScript and Python?","output":"In JavaScript: myFunction(); In Python: myFunction()"},{"instruction":"What is the most efficient way to find the maximum value in a Python list?","output":"The most efficient way to find the maximum value in a Python list is to use the built-in max() function. For example: max(list)."},{"instruction":"What is the HTML code to input a textbox with an ID of \\"name\\"?","output":"<input type=\\"text\\" id=\\"name\\" />"},{"instruction":"Write an SQL query to select the name and salary of employees in a table named 'employees' who have a salary between 2000 and 3000.","output":"SELECT name, salary FROM employees WHERE salary BETWEEN 2000 AND 3000;"},{"instruction":"Read the following code snippet in Java and find which data types will be returned by each function. public class MyClass {   public int Function1() {     int x = 5;     return x;   }   public double Function2() {     double y = 8.4;     return y;   }","output":"Function1() will return an int type, and Function2() will return a double type."},{"instruction":"JavaScript, develop a function to be able to determine if an object has a specific property or not. obj = {     name: 'Bob',     age: 25  }","output":"function hasProperty(obj, key) {   return obj.hasOwnProperty(key); }"},{"instruction":"Java, write a method which takes a two-dimensional array as input and prints it in spiral order. [   [1, 2, 3],   [4, 5, 6],   [7, 8, 9] ]","output":"public void printSpiral(int[][] matrix)  {      int top = 0, bottom = matrix.length - 1;      int left = 0, right = matrix[0].length - 1;      int dir = 0;      while (top <= bottom && left <= right)      {          // Move left to right          if (dir == 0)          {              for (int i = left; i <= right; i++)              {                  System.out.print(matrix[top][i] + \\" \\");              }              top++;          }             // Move top to bottom          else if (dir == 1)          {              for (int i = top; i <= bottom; i++)              {                  System.out.print(matrix[i][right ] + \\" \\");              }              right --;          }             // Move right to left          else if (dir == 2)          {              for (int i = right ; i >= left; i--)              {                  System.out.print(matrix[bottom ][i] + \\" \\");              }              bottom --;          }             // Move bottom to top          else if (dir == 3)          {              for (int i = bottom ; i >= top; i--)              {                  System.out.print(matrix[i][left ] + \\" \\");              }              left ++;          }             dir = (dir + 1) % 4;      }  }"},{"instruction":"Using PHP, develop a function that returns the sum of the elements in an array. [6, -3, 8, -7, 9]","output":"<?php   function array_sum(array) {    sum = 0;      for (i = 0; i < count(array); i++) {      sum += array[i];    }      return sum;  }    // testing the function  array = array(6, -3, 8, -7, 9);  echo \\"Sum of the given array is: \\" . array_sum(array);  ?>"},{"instruction":"mplement a Swift code to find a number if it is prime or not.","output":"func isPrime(_ num: Int) -> Bool {     if num <= 1 {         return false     }     if num <= 3 {         return true     }     var i = 2     while i*i <= num {         if num % i == 0 {             return false         }         i = i + 1     }     return true }"},{"instruction":"Using CSS, develop a style in which text appears bright when hovered over.","output":"a:hover {     color: #FFFF00;     text-shadow: 0 0 10px #FFFF00; }"},{"instruction":"Write a SQL query that returns the name of the author who has more than two books published in current year.","output":"SELECT author FROM books WHERE YEAR(date_published) = YEAR(CURDATE()) GROUP BY author HAVING COUNT(*) > 2;"},{"instruction":"Create an HTML page with a text box that stores entered data in the local storage.","output":"<html> <head>   <title>Text Box</title> </head> <body>   <input type=\\"text\\" id=\\"text_box\\" /> </body> <script>   // Store data in localStorage   function storeData() {     let inputValue = document.getElementById(\\"text_box\\").value;     localStorage.setItem(\\"inputValue\\", inputValue);   }   // Set the text box value from localStorage   window.onload = () => {     if(localStorage.getItem(\\"inputValue\\"))       document.getElementById(\\"text_box\\").value = localStorage.getItem(\\"inputValue\\");   }   // Set up the event listener   document.getElementById('text_box').addEventListener('input', storeData); <\/script> </html>"},{"instruction":"Complete a code to detect the type of triangle from its three side lengths. // Given triangle side lengths float side1 = 4; float side2 = 4; float side3 = 4;","output":"// Given triangle side lengths float side1 = 4; float side2 = 4; float side3 = 4; if (side1 == side2 && side2 == side3) {   // Equilateral Triangle   print(\\"This triangle is an equilateral triangle.\\"); }  else if (side1 == side2 || side2 == side3 || side1 == side3) {   // Isosceles Triangle   print(\\"This triangle is an isosceles triangle.\\"); }  else {   // Scalene Triangle   print(\\"This triangle is a scalene triangle.\\"); }"},{"instruction":"mplement a JavaScript for creating alert message when a page loads.","output":"window.onload = function(){     alert(\\"Welcome to this page!\\"); }"},{"instruction":"Write a SQL query to list customers who have placed orders in the past month. SELECT * FROM customer_table WHERE order_date > (current_date - 30 days)","output":"SELECT * FROM customer_table  WHERE order_date > (CURRENT_DATE - INTERVAL '30' DAY);"},{"instruction":"Write an HTML code snippet to render an h2 heading.","output":"<h2>Heading</h2>"},{"instruction":"Write a JavaScript program to log the numbers from 1 to 100 in the console.","output":"for (let i = 1; i <= 100; i++) {  console.log(i); }"},{"instruction":"Write a JavaScript code snippet to validate a string for a US phone number.","output":"function validatePhoneNumber(phoneNumber) {     const regExNumeric = /^[0-9]{10}/;     const regExFormatted = /^d{3}-d{3}-d{4}/;          return (regExNumeric.test(phoneNumber) || regExFormatted.test(phoneNumber)); }"},{"instruction":"Write an SQL query to retrieve a student's grade from a student table. SELECT grade FROM student_table","output":"SELECT grade  FROM student_table;"},{"instruction":"Create a script in PowerShell to list the computers in a local network.","output":"Get-ADComputer -Filter * | Select-Object Name | Sort-Object Name"},{"instruction":"Create a C++ program to calculate the median of three integers given as input.","output":"#include <iostream> #include <algorithm> using namespace std; // Function to calculate median of three integers double median(double num1, double num2, double num3)  {      double max = std::max(std::max(num1, num2), num3);     double min = std::min(std::min(num1, num2), num3);     return num1 + num2 + num3 - max - min; } int main() {      double num1, num2, num3;     cout << \\"Enter three numbers: \\";      cin >> num1 >> num2 >> num3;     double medianValue = median(num1, num2, num3);     cout << \\"Median of the three numbers is: \\" << medianValue;     return 0; }"},{"instruction":"Write a MySQL query to get the latest 5 employee numbers whose records are stored in the table 'EMPLOYEES'.","output":"SELECT EmployeeNumber FROM Employees ORDER BY EmployeeNumber DESC LIMIT 5;"},{"instruction":"Using React, write a function to render a text area element with the text provided as the input for the function. text = \\"Hello World!","output":"const renderTextArea = text => {   return (     <textarea value={text} />   ); };"},{"instruction":"Create a SQL query to find the average salary of all the employees who were hired between 2019 and 2021.","output":"SELECT AVG(salary)  FROM Employees  WHERE HireDate BETWEEN '2019-01-01' AND '2021-12-31';"},{"instruction":"Using HTML, write a code to display a table with two columns and three rows.","output":"<table>   <tr>     <th>Column 1</th>     <th>Column 2</th>   </tr>   <tr>     <td>Row 1</td>     <td>Row 1</td>   </tr>   <tr>     <td>Row 2</td>     <td>Row 2</td>   </tr>   <tr>     <td>Row 3</td>     <td>Row 3</td>   </tr> </table>"},{"instruction":"Create a function in Python to delete an element from a given list at a specified index. list = [1, 2, 3, 4, 5] index = 2","output":"def deleteElement(list, index):     del list[index]     return list    list = [1, 2, 3, 4, 5]  index = 2    print(deleteElement(list, index))"},{"instruction":"Produce a function which can take two strings as input and check if they are anagrams. 'silent', 'listen'","output":"def is_anagram(str1, str2):      # convert strings to lowercase     str1_lower = str1.lower()     str2_lower = str2.lower()     # sort the strings      str1_sorted = ''.join(sorted(str1_lower))       str2_sorted = ''.join(sorted(str2_lower))      # compare the sorted strings      if(str1_sorted == str2_sorted):           return True     else:          return False"},{"instruction":"Create a program which can take a sentence as an input and split it into a list of words. 'The quick brown fox'","output":"def split_sentence(sentence):      lst = sentence.split(\\" \\")     return lst"},{"instruction":"Generate a correct program to sum the even numbers from 0 to n.","output":"def sum_even(n):     sum = 0     for i in range(0,n+1):         if i % 2 == 0:             sum += i     return sum"},{"instruction":"Code a program to delete a specified item from a list. Delete item \\"Apple\\" from the list [\\"Banana\\", \\"Apple\\", \\"Orange\\"]","output":"def delete_item(lst, item):      if item in lst:          lst.remove(item)     return lst"},{"instruction":"Design a program to convert an integer to a binary string. 42","output":"def int_to_bin(num):      return bin(num).replace(\\"0b\\",\\"\\")"},{"instruction":"Create a program to create a new string where the first and last occurrence of each character is removed. 'Hello World'","output":"def strip_string(s):      new_str = \\"\\"     counts = {}          # Create a dictionary to record the number of occurrences of each character     for letter in s:          if letter not in counts:             counts[letter] = 1         else:              counts[letter] += 1          for char in s:          if counts[char] > 1:              new_str += char         counts[char] -= 1     return new_str"},{"instruction":"Design a program which can take an array of integers and output the index of the maximum element. [10, 4, 15, 6, 20]","output":"def max_index(lst):      max = 0     max_index = 0     for i in range(len(lst)):          if lst[i] > max:              max = lst[i]             max_index = i     return max_index"},{"instruction":"a given array of integers, find the number of even elements that appear before any odd elements. [3,5,2,5,1]","output":"1"},{"instruction":"Create a function that takes a string of characters and returns the minimal number of division/multiplication operations needed to make all characters within the string the same. acdc","output":"def operations(string):     char_set = set(string)     while len(char_set) > 1:         char_arr = list(char_set)         x = char_arr[0]         y = char_arr[1]         if x == y:             break         elif x > y:             new_val = x/y             for i in range(len(string)):                 if string[i] == x:                     string[i] = new_val         else:             new_val = y/x             for i in range(len(string)):                 if string[i] == x:                     string[i] = new_val         char_set = set(string)     return len(char_set)-1"},{"instruction":"Write a Python code that detects if a given character is uppercase, lowercase, or something else.","output":"def is_type(character):   if ord(character) >= 65 and ord(character) <= 90:     return \\"uppercase\\"   elif ord(character) >= 97 and ord(character) <= 122:     return \\"lowercase\\"   else:     return \\"something else\\""},{"instruction":"Create a new function that takes two lists as input and returns a new list consisting of elements which are not in the other list. list1 = [1, 2, 3, 4]  list2 = [3, 4, 5, 6]","output":"def non_shared(list1, list2):     non_shared_elements = [element for element in list1 if element not in list2]     return non_shared_elements"},{"instruction":"Create a function to invert the keys and values of a given dictionary. my_dict = { \\"name\\": \\"John\\", \\"age\\": 22 }","output":"def invert_dict(dictionary):     inv_dict = {v: k for k, v in dictionary.items()}     return inv_dict"},{"instruction":"Find a code that returns the union set of two given sets. s1 = {1,2,3,4}  s2 = {3,4,5,6}","output":"def union_sets(s1, s2):     return s1 | s2"},{"instruction":"Create a function to convert a given decimal number to its corresponding hexadecimal value.","output":"def dec2hex(n):     return hex(n)[2:]"},{"instruction":"You need to check if a variable is an integer or not.","output":"def is_integer(variable):     return isinstance(variable, int)"},{"instruction":"Create a function that takes a dictionary, a key and a value as parameters and adds the key and value to the given dictionary. my_dict = { 'fruit': 'apple' }","output":"def add_dict_entry(d, key, value):     d[key] = value     return d"},{"instruction":"w would you implement a webhook using Flask?","output":"import flask @app.route('/webhook', methods=['POST']) def webhook():     # retrieve the data from the request     data = request.get_json()      # do something with the given data     # ...     # return the response     return { 'message': 'OK' }"},{"instruction":"w could you loop through the elements of a list in Python?","output":"for element in my_list:     # do something with the element"},{"instruction":"ease a string by one character string = \\"hello","output":"string += '_' # to add a space string += 'a' # to increment the last character by one"},{"instruction":"Write a C# code to print the first n terms of the Series 0, 1, 2, 6, 42, 1806.","output":"static void printSeries(int n)  {         int a = 0, b = 1, c = 2;         Console.Write(a + \\" \\" + b + \\" \\" + c + \\" \\");         for (int i = 3; i < n; i++)      {          int d = 2 * c + (a + b);          Console.Write(d + \\" \\");          a = b;          b = c;          c = d;      }  }"},{"instruction":"Write a code to generate a random string of length n with lowercase alphabets and numbers.","output":"function randomString(n) {   const possibleCharacters = \\"abcdefghijklmnopqrstuvwxyz0123456789\\";   const possibleLength = possibleCharacters.length;   let generatedString = '';      for (let i = 0; i < n; i++) {     let randomIndex = Math.floor(Math.random() * possibleLength);     let randomCharacter = possibleCharacters.charAt(randomIndex);     generatedString += randomCharacter;   }      return generatedString; } console.log(randomString(8));"},{"instruction":"Write a JavaScript code to print all substrings of a given string.","output":"function getSubstrings(str) {  const substrings = [];  let i, j, substring;  for (i = 0; i < str.length; i++) {    for (j = i + 1; j < str.length + 1; j++) {      substring = str.slice(i, j);      substrings.push(substring);    }  }  return substrings; } console.log(getSubstrings(\\"abc\\"));"},{"instruction":"mplement a vector class in Python that allows for basic vector operations such as vector addition, subtraction and scalar multiplication.","output":"class Vector(object):     def __init__(self, components):     self.components = components     def add(self, vector):     if len(self.components) != len(vector.components):       return None     components = [x + y for x, y in zip(self.components, vector.components)]     return Vector(components)     def sub(self, vector):     if len(self.components) != len(vector.components):       return None     components = [x - y for x, y in zip(self.components, vector.components)]     return Vector(components)     def scalar_mul(self, scalar):     components = [x * scalar for x in self.components]     return Vector(components)"},{"instruction":"Write a code to generate a random pin which has 6 digits and should contain at least one lowercase, one uppercase and one numeric character.","output":"import string import random def generate_pin():  pin = '';  chars = string.ascii_lowercase + string.ascii_uppercase + string.digits  for i in range(6):   pin += random.choice(chars)  return pin print(generate_pin())"},{"instruction":"Derive the Hamming distance between two strings using the edit distance algorithm. s1 = 'saturday', s2 = 'sunday'","output":"The Hamming distance between the two strings 'saturday' and 'sunday' is 3. The edit distance algorithm is used to calculate the minimum number of substitution, deletion, and insertion operations required to make two strings identical. In this example, 3 substitution operations are required, making the Hamming distance 3."},{"instruction":"Suggest a way to identify similar strings in JavaScript.","output":"One way to identify similar strings in JavaScript is to use the Levenshtein distance. The Levenshtein distance measures the minimum number of single-character edits (i.e. insertions, deletions, or substitutions) required to change one word into the other. The distance is the number of changes needed to transform one string into another. This technique can be used to compare strings and identify similar strings."},{"instruction":"Create two classes, Dog and Cat, that extend the Animal class. class Animal:     def __init__(self, name):         self.name = name         self.health = 100","output":"class Animal:     def __init__(self, name):         self.name = name         self.health = 100 class Dog(Animal):     def bark(self):         print(\\"Woof!\\") class Cat(Animal):     def meow(self):         print(\\"Meow!\\")"},{"instruction":"Write a SQL query to list the top 3 customers with highest total purchases in the last 6 months.","output":"SELECT customer_name, SUM(order_total) AS Total FROM orders WHERE order_time > DATEADD(MONTH, -6, GETDATE()) GROUP BY customer_name ORDER BY Total DESC LIMIT 3"},{"instruction":"w would you perform a two-way pivot table in Python using Pandas?","output":"Pandas can be used to perform a two-way pivot table in Python using the pivot_table() method. The pivot_table() method takes a data frame as an argument and can be used to reshape the data frame into a two-way pivot table. It takes several parameters, including values, index, columns, aggfunc, and fill_value. For example, if we want to calculate the total sales for each customer for each product, we can use the following statement:  pd.pivot_table(data, values=\\"sales\\", columns=\\"product\\", index=\\"customer\\", aggfunc=\\"sum\\", fill_value=0)"},{"instruction":"Suggest a way to sort a list of strings alphabetically in JavaScript.","output":"A way to sort a list of strings alphabetically in JavaScript is to use the \`\`Array.sort()\`\` method. The \`\`Array.sort()\`\` method takes a comparison function as an optional argument. The comparison function takes two arguments (\`\`a\`\` and \`\`b\`\`) and must return a value less than or equal to 0 if \`\`a\`\` should come before \`\`b\`\` and a value greater than 0 if \`\`a\`\` should come after \`\`b\`\`. In this case, we can use a comparison function that compares the Unicode codes of each character, returning the difference between the codes of the characters at the first position at which they differ: function alphabeticalSort(a, b) {     return a.charCodeAt(0) - b.charCodeAt(0); } listOfStrings.sort(alphabeticalSort);"},{"instruction":"Write a SQL query to fetch the records whose average values of a specific column is less than 10","output":"SELECT *  FROM (SELECT table, AVG(column)        FROM table        GROUP BY table)  WHERE AVG(column) < 10"},{"instruction":"Suggest a way to check if a given number is a palindrome number in JavaScript.","output":"A way to check if a given number is a palindrome number in JavaScript is to convert the number to a string and check if the reversed string is the same as the original one. We can use the \`\`String.prototype.split()\`\` and \`\`Array.prototype.reverse()\`\` methods to reverse the string and compare it with the original string. If the two strings are the same, the number is a palindrome. For example, the following code snippet checks if the number 121 is a palindrome: var num = 121; var reversedNumStr = num.toString().split('').reverse().join(''); var isPalindrome = reversedNumStr == num.toString(); // Output: true"},{"instruction":"Modify the given code to debug 'NameError: name 'x' is not defined'. nums = range(20) for x in nums:     if x % 2 == 0:         print(square(x))","output":"nums = range(20) for x in nums:     if x % 2 == 0:         print(x**2)"},{"instruction":"Fill in the blank with appropriate generic function to complete the code. def foo():     value = ____","output":"def foo():     value = input()"},{"instruction":"Create a new array containing the result of applying a given function to each element of an original array. Array: [1, 2, 3, 4] Function: x * 2","output":"new_arr = [i*2 for i in [1, 2, 3, 4]]"},{"instruction":"Create a function that takes three parameters and adds them together. No input.","output":"def my_func(a, b, c):     return a + b + c"},{"instruction":"Write a Python class that implements a sorted list. No input.","output":"class SortedList:     def __init__(self):         self.items = []     def add(self, item):         i = 0         while i < len(self.items) and self.items[i] < item:             i += 1         self.items.insert(i, item)     def remove(self, item):         i = 0         while i < len(self.items) and self.items[i] != item:             i += 1         if i < len(self.items):             del self.items[i]     def remove_at(self, index):         del self.items[index]"},{"instruction":"Extract a portion of a string. String: Python is a great programming language Substring: 'programming'","output":"programming_str = 'Python is a great programming language'[17:]"},{"instruction":"Reorder the items in an array according to their length. Array: ['this', 'is', 'a', 'test']","output":"sorted_array = sorted(['this', 'is', 'a', 'test'], key=len)"},{"instruction":"Create a new array by combining the elements of 2 given arrays. Array 1: [1, 2, 3] Array 2: [4, 5, 6]","output":"merged_array = [1, 2, 3] + [4, 5, 6]"},{"instruction":"Create classes to represent a credit card and account holder. No input.","output":"class CreditCard:     def __init__(self, card_number):         self.card_number = card_number class AccountHolder:     def __init__(self):         self.cards = []     def add_card(self, card):         self.cards.append(card)"},{"instruction":"Complete the missing line of code to iterate through a list of dictionaries. items = [{'name': 'John', 'age': 20}, {'name': 'Eric', 'age': 25}] for ____","output":"for item in items:"},{"instruction":"Convert a given array of strings to an array of numbers. Array: ['1', '2', '3']","output":"nums = list(map(int, ['1', '2', '3']))"},{"instruction":"Suggest a variable name for the following equation: 1 + 2 - 3 x 4","output":"result = 1 + 2 - 3 * 4"},{"instruction":"Using the following data, convert the X and Y coordinates into longitude and latitude. X: 83.206226 Y: 42.821810","output":"longitude: 42.821810 latitude: 83.206226"},{"instruction":"Print all the odd numbers from 1 to 10 (inclusive)","output":"for num in range(1, 11):     if num % 2 == 1:         print(num)"},{"instruction":"Create a boolean function called \\"is_num_even\\" which takes in a number and returns true if the number is even.","output":"def is_num_even(number):     if number % 2 == 0:         return True     else:         return False"},{"instruction":"Create a function to process the following data and return the average temperature for the last five days. days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'] temps = [27, 28, 29, 20, 21]","output":"def get_avg_temp(days, temps):     total = 0     for i in range(len(days)):         total += temps[i]              avg = total / len(days)          return avg"},{"instruction":"Create a JavaScript function to return the greatest value from the following array of numbers. [2, 4, 8, 10, 15]","output":"function getGreatestValue(arr) {   let greatest = arr[0];   for(let i = 0; i < arr.length; i++) {     if(arr[i] > greatest) {       greatest = arr[i];     }   }   return greatest; }"},{"instruction":"Compute the Fibonacci series up to the following number n.","output":"def fibonacci(n):   a = 0    b = 1   arr = []   arr.append(a)   arr.append(b)   for i in range(2,n):       c = a + b       a = b       b = c       arr.append(c)   return arr"},{"instruction":"Create an array of all the prime numbers up to 50.","output":"def is_prime(n):     for i in range(2, int(n ** 0.5) + 1):         if n % i == 0:             return False     return True      prime_array = [] for i in range(2, 51):     if is_prime(i):         prime_array.append(i)"},{"instruction":"Edit the code to make sure the output error messages are informative. def myfunc(param):  if type(param) != str:      print(f\\"{param} is not valid input type\\")","output":"def myfunc(param):  if not isinstance(param, str):      print(f\\"Expected a string for parameter 'param' but received type '{type(param).__name__}'\\")"},{"instruction":"Using the variable names, create a dictionary with the provided entries. key1 = \\"item1\\" val1 = \\"00001\\" key2 = \\"item2\\" val2 = \\"00002","output":"dict = {key1:val1, key2:val2}"},{"instruction":"Using the given list and dictionary, write the Python code to remove duplicate objects from the list. list_one = [{\\"Name\\": \\"John\\", \\"Lastname\\": \\"Smith\\"}, {\\"Name\\": \\"John\\", \\"Lastname\\": \\"Smith\\"}, {\\"Name\\": \\"Janet\\", \\"Lastname\\": \\"Wise\\"}] dict_one = {\\"John\\": \\"Smith\\", \\"Janet\\": \\"Wise\\"}","output":"new_list = [] for item in list_one:      if item['Name'] + item['Lastname'] not in new_list:          new_list.append(item['Name'] + item['Lastname'])      if item['Name'] + dict_one[item['Name']] not in new_list:          new_list.append(item['Name'] + dict_one[item['Name']]) final_list = [item for item in list_one if item['Name'] + item['Lastname'] in new_list]"},{"instruction":"Write code to organize the provided list in ascending order. list_two = [7, 4, 2, 3, 1, 8, 5]","output":"list_two.sort()"},{"instruction":"Write a code to convert the provided string into an array of numbers. string_two = \\"01,2,3,4,5,6","output":"arr = list(map(int, string_two.split(\\",\\")))"},{"instruction":"Write a code that finds all the prime numbers in a given range of numbers. start_num = 1 end_num = 100","output":"primes = [] for num in range(start_num, end_num + 1):   if num > 1:     for i in range(2, num):       if num % i == 0:         break     else:       primes.append(num) print(primes)"},{"instruction":"Classify each of the provided words as either a noun, verb, or adjective. words = [\\"run\\", \\"sleep\\", \\"grass\\", \\"study\\", \\"loud\\"]","output":"Noun: sleep, grass, study Verb: run, loud Adjective: None"},{"instruction":"Compare the two values, output the greater one. val1 = \\"dog\\" val2 = \\"c","output":"if val1 > val2:   print(val1) else:   print(val2)"},{"instruction":"Write a code that iterates over the provided list of dictionaries and prints the value of \\"name\\" in each dictionary. list_three = [{\\"Name\\": \\"John\\", \\"Lastname\\": \\"Smith\\"}, {\\"Name\\": \\"Janet\\", \\"Lastname\\": \\"Wise\\"}]","output":"for item in list_three:   print(item[\\"Name\\"])"},{"instruction":"Determine the best data structure to store the following information. The information is a list of people and their corresponding email addresses.","output":"The best data structure for storing this information is a dictionary, where the keys are the names of the people and the values are their email addresses."},{"instruction":"Write a code to find the maximum length of the longest consecutive increasing subsequence in the given array. arr = [2, 3, 1, 10, 5, 6, 8, 7]","output":"def max_length(arr):      ans = 1     j = 0     for i in range(len(arr)):          if (arr[i+1] - arr[i] > 0):              j += 1             ans = max(ans, j+1)         else:               j = 0     return ans print(max_length(arr))"},{"instruction":"Generate a JSON structure that contains a specific set of data. User \\"Alex\\" should contain full name, age (21) and address (123 Main Street).","output":"{     \\"user\\": {         \\"name\\": \\"Alex\\",         \\"age\\": 21,         \\"address\\": \\"123 Main Street\\"     } }"},{"instruction":"Write a function in C which will take two integer arguments and swap their values. int x = 1; int y = 2;","output":"#include <stdio.h> void swap(int *x, int *y) {     int temp = *x;     *x = *y;     *y = temp; } int main() {     int x = 1;     int y = 2;     swap(&x, &y);     printf(\\"x = %d, y = %dn\\", x, y);     return 0; } // Output: x = 2, y = 1"},{"instruction":"Write a Python script to check if an email address is valid depending on the given conditions. Email address: johnsmith@example.com Check the following conditions: 1. Must contain an \\"@\\" symbol 2. Must contain a \\".\\" 3. Must have at least 6 character","output":"import re def is_valid_email(email):     regex = r\\"^[a-zA-Z0-9]+@[a-zA-Z0-9]+.[a-zA-Z]{2,6}\\"     if re.search(regex, email) is not None:         return True     else:         return False email = 'johnsmith@example.com' if is_valid_email(email):     print(\\"Valid email\\") else:     print(\\"Invalid email\\")"},{"instruction":"At which index should the following element be inserted so that the array is sorted in ascending order? Array: [2, 3, 4, 5, 7] Element to be inserted: 6","output":"4"},{"instruction":"Create a function which checks if a certain element is present in a given array. arr = [2, 8, 3, 5] element = 8","output":"const arr = [2, 8, 3, 5]; const element = 8; const checkElementInArray = (arr, element) => {     return arr.includes(element); } console.log(checkElementInArray(arr, element)); // true"},{"instruction":"Make the following code thread-safe by implementing mutex locks. #include <pthread.h> int global_int = 0; void* inc_func(void* arg) {    global_int++;    return NULL; } int main() {    pthread thread_a, thread_b;     ...    return 0; }","output":"#include <pthread.h> #include <mutex> int global_int = 0; std::mutex mtx; void* inc_func(void* arg) {    mtx.lock();    global_int++;    mtx.unlock();    return NULL; } int main() {    pthread thread_a, thread_b;     std::unique_lock<std::mutex> lock(mtx);    ...    lock.unlock();    return 0; }"},{"instruction":"Edit the following C++ code so that it prints 10, 11 and 12 in order. #include <iostream> int main()  {   int i = 10;   int j = 12;   while (i < j)   {     std::cout << i << \\" \\";     i++;   }   return 0; }","output":"#include <iostream> int main()  {   int i = 10;   int j = 12;   while (i <= j)   {     std::cout << i << \\" \\";     i++;   }   return 0; }"},{"instruction":"mplement a reverse for loop in Python.","output":"for i in reversed(range(0, 10)):    print(i)"},{"instruction":"Create a function to evaluate a mathematical expression like \\"3 + 5 * 4\\".","output":"def evaluate(expression):     result = None     try:         result = eval(expression)     except:         pass     return result"},{"instruction":"Compose a Unix command to list all the directories in a given path?","output":"ls -l | grep \\"^d\\""},{"instruction":"Develop a code to identify the most commonly used words in a given text. The quick brown fox jumps over the lazy dog","output":"from collections import Counter     def most_common_words(text):      words = text.split()      counter = Counter(words)      high_occur = counter.most_common(3)      return high_occur if __name__ == \\"__main__\\":     text = \\"The quick brown fox jumps over the lazy dog\\"     most_common_words(text)"},{"instruction":"Create an efficient matrix multiplication of two given matrices. matrix1 = [[1, 2], [3, 4]] matrix2 = [[5, 6], [7, 8]]","output":"def matrix_multiply(matrix1, matrix2):     if len(matrix1[0]) != len(matrix2):         return \\"Matrices should have the same size for multiplication\\"     result = [[0 for x in range(len(matrix1))] for j in range(len(matrix2[0]))]     for i in range(len(matrix1)):         for j in range(len(matrix2[0])):             for k in range(len(matrix2)):                 result[i][j] += matrix1[i][k] * matrix2[k][j]     return result if __name__ == \\"__main__\\":     matrix1 = [[1, 2], [3, 4]]     matrix2 = [[5, 6], [7, 8]]     print(matrix_multiply(matrix1, matrix2))"},{"instruction":"Become an algorithm to check if a linked list is empty.","output":"def is_list_empty(head):     if head == None:         return True     else:         return False"},{"instruction":"Compose a function to generate a palette of random colors.","output":"import random def generate_palette(n):      palette = []      for i in range(n):          rgb = []          for j in range(3):              rgb.append(random.randint(1, 255))          palette.append(rgb)                 return palette if __name__ == \\"__main__\\":      n = 10     palette = generate_palette(n)      print(palette)"},{"instruction":"Design an algorithm to produce a binary tree from given inorder and preorder traversals. inorder: [4,2,5,1,3,6] preorder: [1,2,4,5,3,6]","output":"class Node:      # A constructor to create a       # new linked node       def __init__(self, data):           self.data = data           self.left = None         self.right = None def binary_tree_from_inorder_preorder(inorder, preorder):      if len(inorder) in [0, 1]:          return Node(inorder[0]) if inorder else None                    root_val = preorder[0]     root = Node(root_val)         i_index = inorder.index(root_val)         root.left = binary_tree_from_inorder_preorder(inorder[:i_index],                                       preorder[1:i_index + 1])         root.right = binary_tree_from_inorder_preorder(inorder[i_index + 1:],                                          preorder[i_index + 1:])         return root if __name__ == \\"__main__\\":     inorder=[4,2,5,1,3,6]     preorder=[1,2,4,5,3,6]     root = binary_tree_from_inorder_preorder(inorder, preorder)"},{"instruction":"Create a code to generate a Mulberry Tree of height n levels.","output":"def get_mulberry_tree(n):     spaces = n - 1     for i in range(1, n+1):         for j in range(spaces):             print(end = \\" \\")          spaces = spaces - 1         for j in range(i):             print(\\"* \\", end = \\"\\")         print()  if __name__ == \\"__main__\\":      n = 5     get_mulberry_tree(n)"},{"instruction":"Generate a program to remove duplicates from an unsorted linked list.","output":"class Node:         def __init__(self, data):          self.data = data           self.next = None    def remove_duplicates(head):      h = {}         temp = head      prev = None     while(temp):          if temp.data in h:              prev.next = temp.next             temp = None         else:              h[temp.data] = True             prev = temp          temp = prev.next if __name__ == \\"__main__\\":     pass"},{"instruction":"Design a Java method to retrieve the maximum value from an array. [2, 3, 5, 9, 6, 11]","output":"public static int getMax(int[] arr) {          int max = Integer.MIN_VALUE;          for (int i = 0; i < arr.length; i++) {              if (arr[i] > max)                  max = arr[i];          }          return max;      }"},{"instruction":"Create a HTML page to display a navigation bar with a dropdown list that includes a list of the months of the year.","output":"<nav>   <div class=\\"dropdown\\">     <button class=\\"dropbtn\\">Months</button>     <div class=\\"dropdown-content\\">       <a href=\\"\\">January</a>       <a href=\\"\\">February</a>       <a href=\\"\\">March</a>       <a href=\\"\\">April</a>       <a href=\\"\\">May</a>       <a href=\\"\\">June</a>       <a href=\\"\\">July</a>       <a href=\\"\\">August</a>       <a href=\\"\\">September</a>       <a href=\\"\\">October</a>       <a href=\\"\\">November</a>       <a href=\\"\\">December</a>     </div>   </div> </nav>"},{"instruction":"Create a Python program to take a float input and output its binary equivalent. 25.68","output":"def floatToBin(num):     whole, decimal = str(num).split(\\".\\")        whole = int(whole)     decimal = int (decimal)      res = bin(whole).lstrip(\\"0b\\")+\\".\\"     for x in range(10):         decimal *= 2         res += str(decimal//1)         decimal %= 1     return res    # Driver code   number = 25.68 print(floatToBin(number)) # returns '11001.1011'"},{"instruction":"Develop an algorithm in Java that removes duplicate elements from an array. [1, 3, 5, 3, 4, 5]","output":"public static int[] removeDuplicates(int[] arr) {      int n = arr.length;         // To store index of next unique element      int j = 0;         // Doing same as done in Method 1      // Just maintaining another updated index i.e. j      for (int i = 0; i < n-1; i++)          if (arr[i] != arr[i+1] )              arr[j++] = arr[i];         arr[j++] = arr[n-1];         return Arrays.copyOf(arr, j);  }"},{"instruction":"Create a C# program to check if any element in an array is equal to a given number. arr = {1, 4, 7, 9} and given number = 7","output":"public static bool IsEqualToGivenNumber(int[] arr, int number) {     for(int i = 0; i < arr.Length; i++)     {         if(arr[i] == number)         {             return true;         }     }     return false; }"},{"instruction":"Develop a shell script to display the information of the current logged in user.","output":"#!/bin/bash echo \\"The username is: (whoami)\\" echo \\"The home directory is: HOME\\" echo \\"The current shell is: SHELL\\""},{"instruction":"Describe what a condition in a while loop does in Python.","output":"A condition in a while loop in Python allows code to be executed repeatedly until a certain condition is met. While the condition is true, the code inside the loop is executed and if the condition is false, the loop is exited. This allows for a loop to continue running until a certain condition is met."},{"instruction":"Write a method to constitute a Hashmap with the following parameters: key (String) and value (Integer).","output":"public static HashMap<String, Integer> constructMap(String key, Integer value)  {      // Create an empty HashMap      HashMap<String, Integer> myMap = new HashMap<>();         // Add key-value pairs to the HashMap      myMap.put(key, value);         // Return the HashMap      return myMap;  }"},{"instruction":"Generate random numbers in range [0,10] in C++.","output":"#include <iostream>  #include <cstdlib>  #include <ctime>     // Main function  int main()  {      srand((unsigned)time(0));      for (int i = 0; i < 100; i++)      {          int random_number = rand() % 11;          std::cout << random_number << ' ';      }         return 0;  }"},{"instruction":"Construct a simple Java program that calculates the sum of two integers.","output":"public class Sum {  public static void main(String[] args) {    int a = 5;    int b = 10;    int sum = a + b;    System.out.println(\\"The sum of the two integers is: \\" + sum);  } }"},{"instruction":"Name three software design principles.","output":"The three software design principles are:  1. Separation of Concerns  2. DRY Principle  3. KISS Principle."},{"instruction":"Write a Java program to remove the duplicates in an array.","output":"import java.util.HashSet; public class RemoveDuplicates {  public static int[] removeDuplicates(int[] nums) {   HashSet<Integer> set = new HashSet<>();   for (int num : nums) set.add(num);   int[] result = new int[set.size()];   int i = 0;   for (int num : set) result[i++] = num;   return result;  } }"},{"instruction":"Explain the purpose of the \\"+\\" character in a regular expression.","output":"In a regular expression, the \\"+\\" character is a quantifier that matches 1 or more of the preceding character or expression. For example, \\"ab+c\\" would match strings such as 'abc', 'abbc', and 'abbbc', but not the string 'ac'."},{"instruction":"Create an object that uses constructor overloading in Python.","output":"class Person:     def __init__(self, name, age):         self.name = name         self.age = age     def __init__(self, name, age, job):         self.name = name         self.age = age         self.job = job p1 = Person('John Doe', 25) p2 = Person('Jane Doe', 30, 'Software Engineer')"},{"instruction":"Write a function in JavaScript that will find the index of an element in an array.","output":"function findIndex(arr, el) {   for (var i=0; i < arr.length; i++) {     if (arr[i] === el) return i;    }   return -1;  }"},{"instruction":"Create a SQL query that joins the Customers and Orders tables on customer_id","output":"SELECT *  FROM Customers  INNER JOIN Orders  ON Customers.customer_id = Orders.customer_id;"},{"instruction":"Angular 5 is a popular JavaScript framework used for front-end web development. What is the command to create a new project in Angular 5?","output":"ng new <project-name>"},{"instruction":"Create an if statement that prints \\"Number is negative\\" if the value of x is below zero. x = -2","output":"if x<0:     print(\\"Number is negative\\")"},{"instruction":"Create a for loop that prints all even numbers from 0 to 10 (inclusive).","output":"for i in range(0, 11):     if (i % 2 == 0):         print(i)"},{"instruction":"Write a function called \\"power\\" that takes two numbers a and b as arguments, and returns a to the power of b.","output":"def power(a, b):     return a**b"},{"instruction":"What is the SQL query to select all the values that are greater than 10 in the \\"Age\\" column in the table \\"Students\\"?","output":"SELECT * FROM Students WHERE Age > 10"},{"instruction":"Create a Javascript class called \\"Car\\" that takes an argument called \\"year\\" and prints the value of \\"year\\".","output":"class Car{     constructor(year){         this.year = year;     }     printYear(){         console.log(this.year);     } }"},{"instruction":"Create a function to round a number to the nearest integer.","output":"def round_number(x):     return round(x)"},{"instruction":"Create a variable called \\"counter\\" and increment it by one in a loop that runs 10 times.","output":"counter = 0 for i in range(10):     counter += 1"},{"instruction":"Write a regular expression to match any word that starts with \\"cat\\" and contains only lowercase letters.","output":"^cat[a-z]*"},{"instruction":"Design a class for representing a person in Python.","output":"class Person:     \\"\\"\\"     Class to represent a person     \\"\\"\\"     def __init__(self, name, age, address):         self.name = name         self.age = age         self.address = address          def birthday(self):         \\"\\"\\"         Increments the age of the person         \\"\\"\\"         self.age += 1"},{"instruction":"Create a list comprehension to generate the multiples of a number up to a limit. multiples of 7 until 50","output":"multiples_list = [n * 7 for n in range(0, 51) if n * 7 <= 50]"},{"instruction":"Using regex, find all the words that have a specific character at the start. the words that start with 'a'","output":"import re words = [\\"amazing\\", \\"apple\\", \\"banana\\", \\"cherry\\", \\"desert\\", \\"encounter\\"] result = [word for word in words if re.search(\\"^a\\", word)] print(result)"},{"instruction":"Define a constructor in Java to create an instance of a class.","output":"public class MyClass {     // Constructors     public MyClass() {         // Default constructor     }          // Constructor with parameters     public MyClass(int a, int b) {         // Do something with the parameters     }  }"},{"instruction":"Using the input set the value of the variable. value = \\"hello world","output":"value = \\"hello world\\""},{"instruction":"Use conditionals to decide what to print using the input array. arr = [\\"hamburger\\", \\"hot dog\\", \\"cheese\\"]","output":"if len(arr) == 0:    print(\\"No food available\\") elif len(arr) == 1:    print(arr[0] + \\" is available\\") elif len(arr) == 2:    print(arr[0] + \\" and \\"+ arr[1] + \\" are available\\") else:    print(\\"Multiple items are avaiable: \\" + ', '.join(arr))"},{"instruction":"Merge two arrays using the given lists. arr1 = [1, 2, 3] arr2 = [\\"a\\", \\"b\\", \\"c\\"]","output":"arr = arr1 + arr2 #Merge two arrays arr = arr1 + arr2"},{"instruction":"Create a function that takes a given string and encodes it with a specified cipher. encoding_cipher = {\\"a\\" : \\"x\\", \\"b\\" : \\"y\\", \\"c\\": \\"z\\"} string = \\"abc","output":"def encode_string(encoding_cipher, string):     result = \\"\\"     for char in string:         result += encoding_cipher[char]     return result"},{"instruction":"Create a function to decode a given string using the provided cipher. decoding_cipher = { \\"x\\" : \\"a\\", \\"y\\": \\"b\\", \\"z\\" : \\"c\\" } string = \\"xyz","output":"def decode_string(decoding_cipher, string):     result = \\"\\"     for char in string:         result += decoding_cipher[char]     return result"},{"instruction":"Using a while loop, write a program to delete all duplicate elements from an array. arr = [1, 2, 3, 2, 3, 4, 3]","output":"def remove_duplicates(arr):     i = 0     while i < len(arr):         if arr.count(arr[i]) > 1:             arr.remove(arr[i])         else:             i += 1     return arr"},{"instruction":"Find the Fibonacci number for a given number using a for loop.","output":"def fibonacci(n):     fibonacci_numbers = [0,1]     for i in range(2, n+1):         fibonacci_numbers.append(fibonacci_numbers[i-1] + fibonacci_numbers[i-2])     return fibonacci_numbers[n]"},{"instruction":"Using a list comprehension, create a function to give only the even numbers in a given list. arr = [1, 2, 3, 4, 5, 6, 7, 8]","output":"def only_even(arr):     return [ num for num in arr if num % 2 == 0 ]"},{"instruction":"Using a dictionary, store the given student's name and marks as key value pairs. name = \\"John Doe\\" marks = { \\"maths\\" : 90, \\"physics\\" : 80, \\"chemistry\\" : 85 }","output":"student_data = {} student_data[name] = marks"},{"instruction":"Write the C++ code to print the smallest prime factor of a given number number = 54","output":"int main() {     int factor = 2;     int number = 54;     while (number > 1)     {         if (number % factor == 0)         {             cout << factor << endl;             number /= factor;         }         else             factor++;     }     return 0; }"},{"instruction":"Compute the largest common denominator of 4 and 12","output":"The LCM of 4 and 12 is 12."},{"instruction":"Edit the following HTML to change the font of the page <html>     <head>         <title>My Page</title>     </head>     <body>         <h2>Hello World!</h2>     </body> </html>","output":"<html>     <head>         <title>My Page</title>         <style>             body {                 font-family: Arial, sans-serif;             }         </style>     </head>     <body>         <h2>Hello World!</h2>     </body> </html>"},{"instruction":"Name the Java keyword used to define a class","output":"The Java keyword used to define a class is \\"class\\"."},{"instruction":"Create a function in JavaScript which takes two parameters x and y and returns the multiplication of the two","output":"function multiply(x, y) {     return x * y; }"},{"instruction":"Design a program to convert an array of characters to its equivalent string. array = [ 'A', 'B', 'C', 'D' ]","output":"public class ArrayToString {      public static String convert(char[] arr)      {          StringBuilder sb = new StringBuilder();          for (char c : arr)              sb.append(c);          return sb.toString();      }         public static void main(String[] args)      {          char[] arr = { 'A', 'B', 'C', 'D' };          System.out.println(convert(arr));      }  }"},{"instruction":"Create a program that determines whether a given numbers is a prime.","output":"public class PrimeNumber { \\tpublic static boolean isPrime(int n) { \\t\\tif (n < 2) \\t\\t\\treturn false; \\t\\tfor (int i = 2; i <= Math.sqrt(n); i++) { \\t\\t\\tif (n % i == 0) { \\t\\t\\t\\treturn false; \\t\\t\\t} \\t\\t} \\t\\treturn true; \\t} \\tpublic static void main(String[] args) { \\t\\tfor (int i = 0; i < 20; i++) { \\t\\t\\tif (isPrime(i)) { \\t\\t\\t\\tSystem.out.println(i + \\" is a Prime Number\\"); \\t\\t\\t} \\t\\t} \\t} }"},{"instruction":"Create a program in python that sorts a given list.","output":"def bubbleSort(arr):     n = len(arr)         # Traverse through all array elements      for i in range(n):             # Last i elements are already in place          for j in range(0, n-i-1):                 # traverse the array from 0 to n-i-1              # Swap if the element found is greater              # than the next element              if arr[j] > arr[j+1] :                  arr[j], arr[j+1] = arr[j+1], arr[j]     # Driver code to test above  arr = [64, 34, 25, 12, 22, 11, 90]     bubbleSort(arr)     print (\\"Sorted array is:\\")  for i in range(len(arr)):      print (\\"%d\\" %arr[i]),"},{"instruction":"Develop a program that performs basic arithmetic operations (+, -, /, *)","output":"def add(x, y):    return x + y def subtract(x, y):    return x - y def multiply(x, y):    return x * y def divide(x, y):    return x / y"},{"instruction":"Create a program to evaluate a postfix expression.","output":"# Python program to evaluate value of a postfix expression     # Class to convert the expression  class Conversion:              # Constructor to initialize the class variables      def __init__(self, capacity):          self.top = -1         self.capacity = capacity          # This array is used a stack          self.array = []          # Precedence setting          self.output = []          self.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3}             # check if the stack is empty      def isEmpty(self):          return True if self.top == -1 else False             # Return the value of the top of the stack      def peek(self):          return self.array[-1]              # Pop the element from the stack      def pop(self):          if not self.isEmpty():              self.top -= 1             return self.array.pop()          else:              return \\"\\"             # Push the element to the stack      def push(self, op):          self.top += 1         self.array.append(op)           # A utility function to check is the given character      # is operand       def isOperand(self, ch):          return ch.isalpha()          # Check if the precedence of operator is strictly      # less than top of stack or not      def notGreater(self, i):          try:              a = self.precedence[i]              b = self.precedence[self.peek()]              return True if a  <= b else False         except KeyError:               return False                    # The main function that converts given infix expression      # to postfix expression       def infixToPostfix(self, exp):                      # Iterate over the expression for conversion          for i in exp:              # If the character is an operand,               # add it to output              if self.isOperand(i):                  self.output.append(i)                             # If the character is an '(', push it to stack              elif i  == '(':                  self.push(i)                  # If the scanned character is an ')', pop and               # output from the stack until and '(' is found              elif i == ')':                  while( (not self.isEmpty()) and self.peek() != '('):                      a = self.pop()                      self.output.append(a)                  if (not self.isEmpty() and self.peek() != '('):                      return -1                 else:                      self.pop()                  # An operator is encountered              else:                  while(not self.isEmpty() and self.notGreater(i)):                      self.output.append(self.pop())                  self.push(i)              # pop all the operator from the stack          while not self.isEmpty():              self.output.append(self.pop())              return \\"\\".join(self.output)      count = 0 # Driver program to test above function  exp = \\"a+b*(c^d-e)^(f+g*h)-i\\" obj = Conversion(len(exp))  ans = obj.infixToPostfix(exp)  print(ans) # This function evaluates value of a postfix expression  def evaluatePostfix(exp):  \\t \\t# Create a stack  \\tstack = []  \\t \\t# Scan all characters one by one  \\tfor i in exp:  \\t\\t \\t\\t# If the character is a number, push it to the stack  \\t\\tif i.isdigit():  \\t\\t\\tstack.append(int(i))  \\t\\t# If the character is an operator, pop two  \\t\\t# elements from stack apply the operator  \\t\\telse:  \\t\\t\\tval1 = stack.pop()  \\t\\t\\tval2 = stack.pop()  \\t\\t\\tif i == '+':  \\t\\t\\t\\tstack.append(val2 + val1)  \\t\\t\\telif i == '-':  \\t\\t\\t\\tstack.append(val2 - val1)  \\t\\t\\telif i == '*':  \\t\\t\\t\\tstack.append(val2 * val1)  \\t\\t\\telse:  \\t\\t\\t\\tstack.append(val2 / val1)  \\treturn stack.pop()  # Driver Program to test above function  #exp = \\"231*+9-\\" #exp = ans #print(exp) #print('postfix evaluation: %d' %(evaluatePostfix(exp) ))"},{"instruction":"Create a JSON object from a dictionary in Python. {     \\"name\\": \\"John Doe\\",     \\"age\\": 30,     \\"address\\": {         \\"street\\": \\"Main Street\\",         \\"city\\": \\"New York City\\"     } }","output":"import json data = {     \\"name\\": \\"John Doe\\",     \\"age\\": 30,     \\"address\\": {         \\"street\\": \\"Main Street\\",         \\"city\\": \\"New York City\\"     } } json_data = json.dumps(data) print(json_data) # Output: {\\"name\\": \\"John Doe\\", \\"age\\": 30, \\"address\\": {\\"street\\": \\"Main Street\\", \\"city\\": \\"New York City\\"}}"},{"instruction":"Use the split method to split a string based on the given delimiter. str = \\"apple,banana,orange","output":"str = \\"apple,banana,orange\\" list = str.split(\\",\\") print(list)  # Output: ['apple', 'banana', 'orange']"},{"instruction":"Use a loop to find the average of all given numbers. [1, 2, 3, 4, 5]","output":"def find_avg(nums):  total = 0  for num in nums:   total += num return total / len(nums) list = [1, 2, 3, 4, 5] print(find_avg(list)) # Output: 3.0"},{"instruction":"Compare two given strings and return true if they are the same. str1 = \\"Hello world\\" str2 = \\"Hello world","output":"def compare_str(str1, str2):   return str1 == str2 str1 = \\"Hello world\\" str2 = \\"Hello world\\" print(compare_str(str1, str2)) # Output: True"},{"instruction":"Create a Java method that takes in an integer array and returns it sorted. [7, -2, 4, 21, 0]","output":"public static int[] sortInteger(int[] arr) {     int[] sortedArr = Arrays.copyOf(arr, arr.length);     Arrays.sort(sortedArr);     return sortedArr; }"},{"instruction":"Parse the following JSON using JavaScript. {\\"courseName\\":\\"Python\\"}","output":"const jsonData = JSON.parse('{\\"courseName\\":\\"Python\\"}'); const courseName = jsonData.courseName;"},{"instruction":"alize a new enum type in Java that stores the information of colors.","output":"public enum Color {     RED,     GREEN,     BLUE }"},{"instruction":"Create a SQL statement to select all carts with more than 10 items in them.","output":"SELECT * FROM carts WHERE items > 10;"},{"instruction":"Given an array of integers, write a JavaScript function to remove all duplicate elements.","output":"function removeDuplicates(arr) {     const uniqueElements = [...new Set(arr)];     return uniqueElements; }"},{"instruction":"Parse the following XML data using Python. <students>     <student>         <name>John</name>         <age>24</age>     </student>     <student>         <name>Jack</name>         <age>22</age>     </student>     <student>         <name>Sam</name>         <age>25</age>     </student> </students>","output":"import xml.etree.ElementTree as ET root = ET.fromstring('<students>  <student>    <name>John</name>    <age>24</age>  </student>  <student>    <name>Jack</name>    <age>22</age>  </student>  <student>    <name>Sam</name>    <age>25</age>  </student></students>') students = root.findall('student') for student in students:     name = student.find('name').text     age = student.find('age').text     print(name, age)"},{"instruction":"Create a HTML page with a table showing the contact information of all members in a information. [      { \\"name\\": \\"John\\", \\"phone\\": \\"123-456-7890\\", \\"address\\": \\"123 Main Street\\" },      { \\"name\\": \\"Sarah\\", \\"phone\\": \\"098-765-4321\\", \\"address\\": \\"456 Ocean Drive\\" }  ]","output":"<!DOCTYPE html> <html>     <head>         <title>Member Contact Information</title>     </head>     <body>         <h1>Member Contact Information</h1>         <table>             <thead>                 <tr><th>Name</th></tr>                 <tr><th>Phone</th></tr>                 <tr><th>Address</th></tr>             </thead>             <tbody>                 <tr><td>John</td><td>123-456-7890</td><td>123 Main Street</td></tr>                 <tr><td>Sarah</td><td>098-765-4321</td><td>456 Ocean Drive</td></tr>             </tbody>         </table>     </body> </html>"},{"instruction":"Write a function to create a list with all the prime numbers in the range of 0 to 100.","output":"def create_prime_list(upper_limit):     prime_list = []     for num in range(2,upper_limit+1):         flag=0         for i in range(2,num):             if num % i == 0:                 flag=1         if flag==0:             prime_list.append(num)     return prime_list"},{"instruction":"Create a program to find out the most frequent letter in a sentence. The quick brown fox jumps over the lazy dog.","output":"def most_frequent_letter(sentence):     freq_dict = {}     for letter in sentence:         if letter in freq_dict:             freq_dict[letter] += 1         else:             freq_dict[letter] = 1          most_freq_letter = max(freq_dict, key = freq_dict.get)     return most_freq_letter"},{"instruction":"Create a program to output 'Hello World' in the console.","output":"print('Hello World')"},{"instruction":"You will be given a list of numbers as input. Write a program to remove the duplicates and return only the distinct values. [1, 1, 2, 3, 4, 4, 5]","output":"def remove_duplicates(arr):     no_duplicates = []     for i in arr:         if i not in no_duplicates:             no_duplicates.append(i)     return no_duplicates"},{"instruction":"You will be given a list of strings as input. Write a program to print out the longest string in the list. ['Hello', 'World', 'I', 'Am', 'Here']","output":"def get_longest_str(str_list):     longest_str = str_list[0]     for str in str_list:         if len(str) > len(longest_str):             longest_str = str          return longest_str"},{"instruction":"mplement a function that takes two numbers as parameters and returns their difference. 17, 10","output":"int difference(int a, int b) {  return a - b; }"},{"instruction":"Use CSS to enlarge the font size of a paragraph of text to 16px. <p>This is a paragraph of text.</p>","output":"<p style=\\"font-size:16px;\\">This is a paragraph of text.</p>"},{"instruction":"Allocate an array of size 10 and store the numbers from 1 to 10 in it.","output":"int[] arr = new int[10]; for (int i = 0; i < 10; i++) {  arr[i] = i + 1; }"},{"instruction":"Create a function that adds two matrices of the same size. [[1, 2], [3, 4]], [[5, 6], [7, 8]]","output":"int[][] addMatrix(int[][] a, int[][] b) {  int[][] c = new int[a.length][a[0].length];     for (int i = 0; i < a.length; i++) {   for (int j = 0; j < a[i].length; j++) {    c[i][j] = a[i][j] + b[i][j];   }  }    return c; }"},{"instruction":"Create a JavaScript timer that runs every two seconds and displays a countdown in the console.","output":"let count = 10; let timerId = setInterval(function() {  console.log(count);    if (count === 0) {   clearInterval(timerId);  }    count--; }, 2000);"},{"instruction":"Create a SQL query that returns the first five rows from the \\"Customers\\" table.","output":"SELECT TOP 5 * FROM Customers;"},{"instruction":"Create a code snippet that parses a sentence into individual words and returns the words sorted alphabetically. sentence = \\"This is a sample sentence","output":"def parse_sentence(sentence):     words = sentence.split()     words.sort()     return words"},{"instruction":"Using the provided data, train a decision tree to predict whether a given house should be classified as a \\"small\\" or \\"large\\" house. house_size = [1000, 1100, 1250, 1300, 1400, 1500]  house_label = [\\"small\\", \\"small\\", \\"small\\", \\"large\\", \\"large\\", \\"large\\"]","output":"from sklearn import tree # Our features are house_size X = [[1000], [1100], [1250], [1300], [1400], [1500]] # Labels are house_label y = [\\"small\\", \\"small\\", \\"small\\", \\"large\\", \\"large\\", \\"large\\"] # Create and train the decision tree clf = tree.DecisionTreeClassifier() clf = clf.fit(X, y)"},{"instruction":"Given a matrix of X, Y coordinates, write a Python function that returns the angle between the two points. X1 = 2 Y1 = 3 X2 = 7 Y2 = 10","output":"import math def calculate_angle(X1, Y1, X2, Y2):     deltaY = Y2 - Y1     deltaX = X2 - X1     angleInDegrees = (math.atan2(deltaY, deltaX)) * 180 / math.pi     return angleInDegrees"},{"instruction":"Create a Python function that takes an array of numbers and returns a string that represent the mean and median of the numbers. [1, 2, 3, 4, 5]","output":"def get_mean_and_median(numbers):     mean = sum(numbers)/len(numbers)     sorted_numbers = sorted(numbers)     index = int(len(sorted_numbers) / 2)     median = sorted_numbers[index]     return \\"Mean: {}, Median: {}\\".format(mean, median)"},{"instruction":"Create an SQL query that finds the total number of customers in the \\"Customers\\" table.","output":"SELECT COUNT(*) FROM Customers;"},{"instruction":"Generate a HTML page with 3 columns using Bootstrap.","output":"<!DOCTYPE html> <html>   <head>     <meta charset=\\"utf-8\\">      <title>Bootstrap Example</title>     <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">     <!-- Bootstrap -->     <link href=\\"css/bootstrap.min.css\\" rel=\\"stylesheet\\">   </head>   <body>     <div class=\\"row\\">       <div class=\\"col-md-4\\">         <!-- Your content goes here -->       </div>       <div class=\\"col-md-4\\">         <!-- Your content goes here -->       </div>       <div class=\\"col-md-4\\">         <!-- Your content goes here -->       </div>       </div>   </body> </html>"},{"instruction":"Create a program in Java that outputs a Fibonacci series of length n.","output":"public class Fibonacci {         // Function to print the nth      // fibonacci number      static void printFibonacciSeries(int n)      {          int a = 0, b = 1, c;          if (n == 0) {             System.out.print(a);              return;          }         for (int i = 2; i <= n; i++) {              c = a + b;              System.out.print(c + \\" \\");              a = b;              b = c;          }      }         // Driver Code      public static void main(String[] args)      {          int n = 10;          printFibonacciSeries(n);      }  }"},{"instruction":"Write a function in Java that takes an array as input and returns an array of the same size with the elements in reverse order. [1, 2, 3, 4, 5]","output":"public static int[] reverseArray(int[] array) {  int[] reversedArray = new int[array.length];  int j = array.length - 1;  for(int i = 0; i < array.length; i++) {  reversedArray[i] = array[j];  j--;  }  return reversedArray; }"},{"instruction":"Create a SQL query that returns all elements in a table with a given column value. Table: Customer column: name  value: Joh","output":"SELECT * FROM Customer WHERE name = 'John';"},{"instruction":"Write a function in Java that takes a String as argument and converts it to Title Case. this is a test.","output":"public static String toTitleCase(String str) {   String words[] = str.split(\\"s\\");    StringBuilder ret = new StringBuilder();    for(int i = 0; i < words.length; i++) {     ret.append(Character.toUpperCase(words[i].charAt(0)));     ret.append(words[i].substring(1));     if(i < words.length - 1) {       ret.append(' ');      }   }   return ret.toString(); }"},{"instruction":"Create a stored procedure in SQL that calculates the average of a column in a table. Table: Student Column: Score","output":"CREATE PROCEDURE avg_score  AS BEGIN   SELECT AVG(Score) FROM Student; END;"},{"instruction":"Create a HTML form with 4 fields, a Name field, an Email field, a Phone number field and an Address field.","output":"<form>   <label>Name</label>   <input type=\\"text\\" name=\\"name\\"><br>   <label>Email</label>   <input type=\\"text\\" name=\\"email\\"><br>   <label>Phone Number</label>   <input type=\\"text\\" name=\\"phone_number\\"><br>   <label>Address</label>   <input type=\\"text\\" name=\\"address\\"><br>      <input type=\\"submit\\" value=\\"Submit\\"> </form>"},{"instruction":"Create a CSS style that makes a given text slightly bigger and bold on hover.","output":"p:hover {   font-size: 1.2em;   font-weight: bold; }"},{"instruction":"Write a Java method that accepts two integers and returns their least common multiple.","output":"public static int lcm(int a, int b) {     int gcd = 1;     for(int i = 1; i <= a && i <= b; ++i)     {         // Checks if i is factor of both integers         if(a % i == 0 && b % i == 0)             gcd = i;     }     int lcm = (a*b) / gcd;     return lcm; }"},{"instruction":"mplement a PHP function to retrieve all words that start with a given letter from a given array. array = [\\"apple\\", \\"ball\\", \\"cat\\", \\"dart\\", \\"elephant\\"] letter = \\"e","output":"<?php function getWordsStartingWith(array, letter) {     matches = array_filter(array, function(word) use(letter) {         return strtolower(word[0]) == strtolower(letter);     });     return array_values(matches); } array = [\\"apple\\", \\"ball\\", \\"cat\\", \\"dart\\", \\"elephant\\"]; letter = \\"e\\"; result = getWordsStartingWith(array, letter); print_r(result);"},{"instruction":"Design an algorithm to reverse a singly linked list in O(n) time.","output":"// Algorithm to reverse a singly linked list in O(n) time // // // INPUT:  A singly Linked List // // OUTPUT: A reversed singly Linked List // Initialize three pointers Node* prev = NULL;  Node* curr = head; Node* next = NULL; // Iterate through the linked list, reversing the links as we go while (curr != NULL) {     // Store the next node     next = curr->next;     // Reverse the current node's pointer     curr->next = prev;     // Advance the pointers one position     prev = curr;     curr = next; } // Return the reversed linked list return prev;"},{"instruction":"Design a Ruby program to search through an array and find the first element that satisfies a given condition.","output":"def search_array(arr, condition)     arr.find { |item| condition.call(item) } end"},{"instruction":"Write a code to find the Kth smallest element from a given array of N elements.","output":"// A function to find kth smallest element int kthSmallest(int arr[], int n, int k) {     //Sort the given array     sort(arr, arr+n);       // Return k'th element     return arr[k-1]; }"},{"instruction":"Design a Python program to find the longest increasing subsequence in a given array.","output":"def long_increasing_subsequence(arr):     # Number of items in given array     n = len(arr)       # Initialize 'lengths' values for all indices     lengths = [1]*n       # Find the longest increasing subsequence     for i in range(1, n):         for j in range(i):             if arr[j] < arr[i] and lengths[j] + 1 > lengths[i]:                 lengths[i] = lengths[j] + 1       return lengths"},{"instruction":"Suppose you are designing a simple text editor. Write a C++ code to automatically detect and remove comments from a given input string.","output":"// Function to remove comments from a given input string string removeComments(string input_string) {     string output_string = \\"\\";     int flag = 0;     for (int i = 0; i<input_string.length(); i++)     {         // Check for single line comments         if (input_string[i] == '/' && input_string[i+1] == '/')             flag = 1;         // Check for multi-line comments         if (input_string[i] == '/' && input_string[i+1] == '*')             flag = 2;         // If single line or multi-line comment section,         // ignore the part of the string         if (flag == 1 || flag == 2)         {             if (input_string[i] == 'n')                 flag = 0;             continue;         }         output_string += input_string[i];     }     return output_string; }"},{"instruction":"Write a quick SQL query to find the oldest employee in a given department.","output":"SELECT * FROM employees WHERE department_id = :department_id ORDER BY dob DESC LIMIT 1;"},{"instruction":"Write a SQL query to select the employee who has the lowest salary from the employee table. Employee Table EmployeeName | Department  | Salary ------------------------------- John         | IT          | 25000 Mary         | Finance     | 28000 Sam          | Marketing   | 23000 Randy        | HR          | 32000","output":"SELECT EmployeeName, MIN(Salary) FROM Employee TABLE;"},{"instruction":"Write a code snippet in C which calculates the mean of a list of numbers. int nums[] = {2, 3, 4, 5, 6};","output":"#include <stdio.h> int calcMean(int nums[], int size) {     int sum = 0;     for (int i=0; i<size; i++) {         sum += nums[i];     }     return sum/size; } int main() {     int nums[] = {2, 3, 4, 5, 6};     int size = sizeof(nums)/sizeof(nums[0]);     int mean = calcMean(nums, size);     printf(\\"The mean of the numbers is %d.\\", mean);     return 0; }"},{"instruction":"Rewrite the following code so that it is easier to read and understand. def is_string_palindrome(str):     revstr=str[::-1]      if revstr==str:              return true      else:              return false","output":"def is_string_palindrome(str):     reverse_str = str[::-1]      if reverse_str == str:         return True     else:         return False"},{"instruction":"Write a JavaScript code snippet to find the sum of the even numbers in a given range using the reduce() method. let arr = [1,2,3,4,5,6,7,8,9,10];","output":"const sumOfEvenNumbers = arr.reduce((acc, curr) => {     if (curr % 2 === 0) {         return acc + curr;     }      return acc; }, 0); console.log(sumOfEvenNumbers);"},{"instruction":"Generate a string representation of a binary tree.","output":"def tree_str(root):     if root is None:         return ''     left_str = tree_str(root.left)     right_str = tree_str(root.right)     if left_str != '' and right_str != '':         return '(' + left_str + ')' + str(root.val) + '(' + right_str + ')'     if left_str != '' and right_str == '':         return '(' + left_str + ')' + str(root.val)     if left_str == '' and right_str != '':         return  str(root.val) + '(' + right_str + ')'     else:         return str(root.val)"},{"instruction":"Write a TensorFlow code snippet to build a convolutional neural network and display the results of the training process.","output":"import tensorflow as tf # define a convolutional neural network model = tf.keras.models.Sequential([     tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),     tf.keras.layers.MaxPooling2D(2,2),     tf.keras.layers.Flatten(),     tf.keras.layers.Dense(128, activation='relu'),     tf.keras.layers.Dense(10, activation='softmax') ]) # compile and fit model model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) model.fit(x_train, y_train, epochs=5) # display results model.evaluate(x_test, y_test) ['loss', 'accuracy'] [0.32971992206192017, 0.8856600217819214]"},{"instruction":"Create a Python code snippet to identify the root cause of a Software Bug.","output":"def find_causes(data):     # identify the root cause of the bug     causes = set()     for line in data:         for cause in line.get('causes', []):             causes.add(cause)     # filter insignificant causes     causes = [cause for cause in causes if cause not in insignificant_causes]     return causes"},{"instruction":"Rewrite the following code in a more descriptive style and make it easier to read. for i in range(1, n):     for j in range(1, n):         if i + j == n:             print(i, j)","output":"for i in range(1, n):     for j in range(1, n):         # check if the sum of i and j is equal to n         if (i + j) == n:             print(i, j)"},{"instruction":"Write a code snippet to find all the elements in a list that are greater than a specified number. lst = [1, 5, 10, 15, 27] k = 10","output":"# Initializing an empty list new_lst = [] # Iterating over the given list for elem in lst:   # Appending elements that are greater than 10   if elem > k:     new_lst.append(elem) # Printing corresponding result  print(new_lst) # Output: [15, 27]"},{"instruction":"Determine if the word \\"hello\\" is present in the provided list. words = [\\"hi\\", \\"goodbye\\", \\"apple\\", \\"orange\\"]","output":"if \\"hello\\" in words:   print(\\"Yes, the word hello is present in the provided list.\\") else:   print(\\"No, the word hello is not present in the provided list.\\")"},{"instruction":"Generate a random letter from the string provided. string = \\"Hello World","output":"import random random_letter = random.choice(string) # Output: a randomly generated letter from the string"},{"instruction":"Print the total number of keys present in a given dictionary. phone_numbers = {     \\"John\\" : \\"123-456-7890\\",     \\"Jane\\" : \\"890-567-1234\\",     \\"Jack\\" : \\"345-678-9012\\" }","output":"print(len(phone_numbers)) # Output: 3"},{"instruction":"Write a Python program to insert a given string into another string at a certain index. Variable String = \\"The quick brown fox\\"  String To Insert = \\"jumps over\\" Index = 16","output":"The quick brown jumps over fox"},{"instruction":"Find a way to insert the given data into a MongoDB database using Mongoose. data = [     {name: \\"John Doe\\", age: 34},      {name: \\"Jane Smith\\", age: 25} ]","output":"const mongoose = require('mongoose'); const Schema = mongoose.Schema; const userSchema = new Schema({   name: {     type: String   },   age: {     type: Number   } }); const User = mongoose.model('User', userSchema); data.forEach( (user) => {   const newUser = new User(user);   newUser.save()     .then( () => console.log('User saved') )     .catch( err => console.log(err)) });"},{"instruction":"Create a script that filters the list of strings and returns only the strings that contain the specific, user-specified character. User Character: 'a' List: ['apple','peach','pear','tangerine','plum','grape','banana']","output":"def filter_string(strings, char):   result = []   for string in strings:     if char in string:       result.append(string)   return result print(filter_string(['apple','peach','pear','tangerine','plum','grape','banana'], 'a'))"},{"instruction":"Generate a random 2D array with the given dimensions. Rows: 5  Columns: 3","output":"import numpy as np rows = 5 columns = 3 arr = np.random.randint(0, 11, size=(rows, columns))  print(arr)"},{"instruction":"Change the color of the text to blue. Text: The quick brown fox","output":"<span style=\\"color:blue;\\">The quick brown fox</span>"},{"instruction":"Find the length of a Python list. List = [1,2,3]","output":"List = [1,2,3] length = len(List) print(length) # Output 3"},{"instruction":"And the list of product details as a JSON format. products = [   { \\"name\\": \\"iPhone XS\\", \\"price\\": 1000 },   { \\"name\\": \\"iPhone XR\\", \\"price\\": 800 },   { \\"name\\": \\"iPad Air\\", \\"price\\": 600 } ]","output":"[   { \\"name\\": \\"iPhone XS\\", \\"price\\": 1000 },   { \\"name\\": \\"iPhone XR\\", \\"price\\": 800 },   { \\"name\\": \\"iPad Air\\", \\"price\\": 600 } ]"},{"instruction":"Use the input to write a loop in Python to print each product details. products = [   { \\"name\\": \\"iPhone XS\\", \\"price\\": 1000 },   { \\"name\\": \\"iPhone XR\\", \\"price\\": 800 },   { \\"name\\": \\"iPad Air\\", \\"price\\": 600 } ]","output":"for product in products:     print(\\"Product name: \\" + product['name'] + \\", Price: \\" + str(product['price'])) # Output # Product name: iPhone XS, Price: 1000 # Product name: iPhone XR, Price: 800 # Product name: iPad Air, Price: 600"},{"instruction":"Write a function in Python to remove the element with the value of ‘apple’ from the list. fruits =[\\"banana\\", \\"apple\\", \\"mango\\", \\"orange\\"]","output":"def removeValue(fruits, elem):     for e in fruits:         if e == elem:             fruits.remove(e)             break removeValue(fruits, \\"apple\\") print(fruits) # ['banana', 'mango', 'orange']"},{"instruction":"Edit the following CSS code to make the text red. .message {   font-size: 14px; }","output":".message {   font-size: 14px;    color: red; }"},{"instruction":"Create a HTML page that shows the data provided in an interactive table. data = [   { \\"id\\": 1, \\"first_name\\": \\"John\\", \\"last_name\\": \\"Doe\\" },   { \\"id\\": 2, \\"first_name\\": \\"Amy\\", \\"last_name\\": \\"Smith\\" },   { \\"id\\": 3, \\"first_name\\": \\"Brian\\", \\"last_name\\": \\"Green\\" } ]","output":"<html>   <head>     <title>Interactive Table</title>   </head>   <body>     <table>       <thead>         <tr>           <th>ID</th>           <th>First Name</th>           <th>Last Name</th>         </tr>       </thead>       <tbody>         {% for item in data %}           <tr>             <td>{{ item.id }}</td>             <td>{{ item.first_name }}</td>             <td>{{ item.last_name }}</td>           </tr>         {% endfor %}       </tbody>     </table>   </body> </html>"},{"instruction":"Return the names of the customers that contain the string “ali”.","output":"SELECT name  FROM customers  WHERE name LIKE '%ali%';"},{"instruction":"Write a function in Python to generate a list with the numbers from 0 to the provided number. num = 10","output":"def generateList(n):     list = []     for i in range(n+1):         list.append(i)     return list print(generateList(num)) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"},{"instruction":"Write a SQL query to sort all the customers by their first name in ascending order.","output":"SELECT * FROM customers ORDER BY first_name ASC;"},{"instruction":"Use the input to generate a loop in JavaScript to print an increasing count starting from the given number. num = 5","output":"for (let i = num; i < num + 10; i++) {     console.log(i); } # Output # 5 # 6 # 7 # 8 # 9 # 10 # 11 # 12 # 13 # 14"},{"instruction":"Rewrite the following linear equation into the standard form y = mx + c: x + 2y = 5","output":"y = - x/2 + 5/2  This equation can be written in standard form as y = -0.5x + 2.5"},{"instruction":"Design a SQL query to count the number of records in the first 5 rows of the table named \\"users\\".","output":"SELECT COUNT(*) FROM users LIMIT 5;"},{"instruction":"Write a JavaScript code that creates an array of objects having keys \\"name\\", \\"age\\" and \\"city\\".","output":"const users = [  {name: 'John', age: 30, city: 'New York'},   {name: 'Lisa', age: 25, city: 'Sydney'},  {name: 'Alex', age: 27, city: 'London'},  {name: 'Cathy', age: 28, city: 'Tokyo'},  {name: 'David', age: 32, city: 'Berlin'}  ];"},{"instruction":"w many bytes does a char data type take in C/C++?","output":"A char data type takes one byte of memory in C/C++."},{"instruction":"Write a Java program to find the area of a triangle where the three sides are given as x, y, and z. x = 6, y = 7, z = 8","output":"public class AreaOfTriangle {   public static void main(String[] args) {   int x = 6, y = 7, z = 8;   double s = (x + y + z) / 2;   double area = Math.sqrt(s * (s - x) * (s - y) * (s - z));   System.out.println(\\"Area of triangle: \\" + area);  } }"},{"instruction":"mplement a function in JavaScript that takes an array and returns an object with the count of each element value. array = [true, false, false, true, false, true]","output":"function countElements(arr) {  const obj = {};    arr.forEach(element => {   if (obj.hasOwnProperty(element)) {    obj[element] += 1;   } else {    obj[element] = 1;   }  });    return obj; } const array = [true, false, false, true, false, true]; const countedElements = countElements(array); console.log(countedElements); // { true: 3, false: 3 }"},{"instruction":"Given an array of objects, sort them in descending order according to their age. array = [ {name: 'John', age: 25}, {name: 'Peter', age: 32}, {name: 'Alex', age: 21} ]","output":"import java.util.Arrays;  import java.util.Comparator;  public class SortByAge {      public static void main(String[] args)      {         // Array of objects          object[] array = { {name: 'John', age: 25},          {name: 'Peter', age: 32}, {name: 'Alex', age: 21} };          // Sorting array of objects by age in descending order          Arrays.sort(array, Comparator.comparing(o -> o.age, Comparator.reverseOrder()));          // Printing the sorted array of objects          System.out.println(\\"Sorted objects array in descending order of age:\\");          Arrays.stream(array)             .forEach(e -> System.out.println(e.name + \\" \\" + e.age));      }  }"},{"instruction":"Write a Java program to clone an array of objects.","output":"public class CloneObjectArray {      public static void main(String[] args)      {          // Creating an array of objects          Employee[] employees = {new Employee(\\"John\\", 25),              new Employee(\\"Tim\\", 30),              new Employee(\\"Tom\\", 35)};  \\t\\t// Cloning the array          Employee[] clone = employees.clone();          // Printing the current array          System.out.println(\\"Employees array:\\");          for (Employee emp : employees) {              System.out.println(emp);          }          // Printing the cloned array          System.out.println(\\"Cloned Employees array:\\");          for (Employee emp : clone) {              System.out.println(emp);          }      }  }  class Employee implements Cloneable {      String name;      int age;     Employee(String name, int age)      {          this.name = name;          this.age = age;      }      // Override clone method      @Override     protected Object clone() throws CloneNotSupportedException      {          return super.clone();      }      @Override     public String toString()      {          return this.name + \\" \\" + this.age;      }  }"},{"instruction":"Design a JSON object containing Book information such as title, author and publication year.","output":"{  \\"title\\": \\"The Catcher in the Rye\\",  \\"author\\": \\"J.D. Salinger\\",   \\"publication_year\\": 1951 }"},{"instruction":"Explain what a while loop is.","output":"A while loop is a control flow statement that repeats a set of instructions while a certain condition is true. It consists of a loop condition and a set of instructions that are to be executed as long as the condition remains true. The loop condition is evaluated first, and if it returns true then the instruction set is executed, after which the condition is evaluated again. This process is repeated until the condition returns false, at which point the loop terminates and execution continues at the statement after the loop."},{"instruction":"Create an algorithm to find the median of a given list of numbers. [2, 5, 7, 4, 3]","output":"def find_median(list_of_numbers):     sorted_list = sorted(list_of_numbers)     length = len(sorted_list)     if length % 2 == 0:         median1 = sorted_list[length // 2]         median2 = sorted_list[(length // 2) - 1]         median = (median1 + median2) / 2     else:         median = sorted_list[length // 2]     return median"},{"instruction":"What language do we use to write HTML?","output":"HTML is written in a markup language known as HyperText Markup Language (HTML). HTML is a language for describing web pages. It is used for structuring and presenting content for the web. It is written in the form of HTML elements consisting of tags enclosed in angle brackets."},{"instruction":"Write a method that produces a random password with the specified number of characters.","output":"import string import random def generate_password(characters):   password = ''   for _ in range(characters):     password += random.choice(string.ascii_letters + string.digits)   return password"},{"instruction":"Generate a list of all pairwise combinations of the numbers in the given list. [1,2,3,4]","output":"def combinations(list_of_numbers):   result = []   for i in range(len(list_of_numbers)):     for j in range(len(list_of_numbers)):       if i != j:         result.append([list_of_numbers[i], list_of_numbers[j]])      return result"},{"instruction":"Why is JavaScript called a multi-paradigm language?","output":"JavaScript is called a multi-paradigm language because it allows developers to use multiple different programming paradimms such as object-oriented programming, functional programming, event-driven programming, and procedural programming. This flexibility allows developers to have more control over the structure of their code and enables them to write programs in whatever style they desire. It also makes JavaScript more versatile, allowing developers to find the best approach for any given problem."},{"instruction":"mplement a function to calculate the sum of digits of a given positive integer.","output":"def sum_digits(n):   total = 0   while n:     total += n % 10     n //= 10   return total"},{"instruction":"Design a Python program to read string inputs and print out the reverse of the same","output":"def reverse_string(string):   string = string[::-1]   return string"},{"instruction":"Generate a valid python loop to print out the elements of a list. List = [1,2,3,4,5]","output":"for element in List:     print(element)"},{"instruction":"Find the most suitable 10-lines python code to generate all permutations of a 3 letters word","output":"from itertools import permutations  def all_permutations(str):      permList = permutations(str)         for perm in list(permList):          print(''.join(perm))     if __name__ == \\"__main__\\":      string = \\"ABC\\"     all_permutations(string)"},{"instruction":"Using this list, write a Python program to print out all the duplicate elements my_list = [1, 2, 3, 2, 4, 3]","output":"duplicate = [] for value in my_list:     if my_list.count(value) > 1:         if value not in duplicate:             duplicate.append(value) print(duplicate)"},{"instruction":"Create a program in Python which takes any string as an input and prints the number of each of its characters hello","output":"character_count = {'h':1, 'e':1, 'l':2, 'o':1}"},{"instruction":"Write a snippet of code to swap two variables without using the third variable a = 5 b = 10","output":"a, b = b, a"},{"instruction":"Generate a valid syntax to remove the last element of a list","output":"my_list.pop()"},{"instruction":"Construct a program to find the result of the following equation (x-1)^2","output":"def equation(x):     return (x-1)**2"},{"instruction":"Design a Python program which prints the elements in reverse order my_list = [1,2,3,4,5]","output":"def print_reverse(my_list):     for i in range(len(my_list)-1, -1, -1):         print(my_list[i]) print_reverse(my_list)"},{"instruction":"put an array and remove all duplicates from the given array. arr = [1, 2, 3, 1, 2]","output":"def remove_duplicates(arr):      result = []      for item in arr:          if item not in result:              result.append(item)      return result print(remove_duplicates(arr))  # Output: [1, 2, 3]"},{"instruction":"put a sentence with repeated words and write a Python code to remove all the repeated words. sentence = 'The the cat cat sat sat on on the the mat'","output":"def remove_repeated_words(sentence):     words = sentence.split(\\" \\")     result = []     for word in words:         if word not in result:             result.append(word)     return \\" \\".join(result) print(remove_repeated_words(sentence)) # Output: The cat sat on the mat"},{"instruction":"Write a Ruby method that takes two integers, n and m, as arguments and return an array containing the even numbers from n to m. m = 10 n = 1","output":"def even_numbers_array(n, m)   evens = []   (n..m).each do |i|     evens << i if i.even?   end   evens end p even_numbers_array(n, m)  # Output: [2, 4, 6, 8, 10]"},{"instruction":"Create a function in C# that takes a string and returns true if all the characters are unique in the string.","output":"public static bool IsUnique(string str) {     char[] charArray = str.ToCharArray();     HashSet<char> charSet = new HashSet<char>(charArray);     return str.Length == charSet.Count; }"},{"instruction":"put two arrays and write a program to merge the two given sorted arrays into one sorted array. arr1 = [3, 5, 7] arr2 = [2, 4]","output":"def merge_arrays(arr1, arr2):     # creating a new list to store the result     merged_arr = []     # looping over the two arrays     for i in range(len(arr1)):         merged_arr.append(arr1[i])     for i in range(len(arr2)):         merged_arr.append(arr2[i])     # sorting function to sort the merged array     merged_arr.sort()     return merged_arr # Driver code new_arr = merge_arrays(arr1, arr2) # to print the sorted merged array print(new_arr) # Output: [2, 3, 4, 5, 7]"},{"instruction":"Create an HTML page that displays one web page with two vertical panenls.","output":"<html>   <head>     <style>       #left, #right{         height: 300px;         width: 200px;         float: left;         padding: 10px;         background-color: #ddd;       }     </style>   </head>   <body>     <div contenteditable=\\"true\\" id=\\"left\\"></div>     <div contenteditable=\\"true\\" id=\\"right\\"></div>   </body> </html>"},{"instruction":"Create a TensorFlow 2.0 program that takes a 3D array and normalizes the values by dividing each element by the sum of all elements in the array.","output":"import numpy as np  import tensorflow as tf # Function to normalize a 3D array   # by dividing each element by the sum of all elements  def normalize3d(arr):          # Shape of the array      m, n, o = arr.shape         # Calculating sum      sum_ = np.sum(arr)             # Initializing the output array      output = np.empty_like(arr)             # calculating the normalized value      # and storing in output array      for i in range(m):          for j in range(n):              for k in range(o):                      output[i][j][k] = arr[i][j][k]/sum_                             # returning the normalized array      return output  # Initializing the array arr = np.random.randint(1, 10, (2, 2, 4)) # Using tensorflow method output = tf.expand_dims(tf.constant(arr, dtype=tf.float32), axis=-1) / tf.math.reduce_sum(tf.constant(arr)) # Printing the normalized array using both methods print(normalize3d(arr)) print(output)"},{"instruction":"Generate a PHP program to accept a string as an input and convert it to uppercase.","output":"<?php str = 'Hello World!'; echo strtoupper(str); // Output: HELLO WORLD! ?>"},{"instruction":"Write a function to check if the given string \`str1\` is a permutation of the string \`str2\` str1 = 'program' str2 = 'gramopr'","output":"def is_permutation(str1, str2):      \\"\\"\\"     Function to check if the given string str1 is a permutation of the string str2           Parameters:      str1 (str): first string      str2 (str): second string           Returns:      bool: True if str1 is a permutation of str2, False otherwise     \\"\\"\\"     if (len(str1) != len(str2)):          return False     else:          count = [0] * 128         for i in range(len(str1)):             count[ord(str1[i])] +=1             count[ord(str2[i])] -=1         for i in range(128):             if count[i] != 0:                  return False         return True"},{"instruction":"What is the most efficient way to insert a new element into an existing unsorted array?","output":"The most efficient way to insert a new element into an existing unsorted array is to append it to the end of the array. This is the fastest way since no shifting of elements is required. This is O(1) time complexity."},{"instruction":"Format the following array of numbers using Python. arr = [3, 1, 4, 5, 9, 8]","output":"arr = [3, 1, 4, 5, 9, 8] # sorting the array arr.sort() # print the array print(arr) # Output: [1, 3, 4, 5, 8, 9]"},{"instruction":"Construct a basic data structure to store a dictionary of words and their definitions.","output":"class WordDictionary(object):      def __init__(self):          self.words = {}      def add_definition(self, word, definition):          self.words[word] = definition     def lookup_definition(self, word):          if word in self.words:              return self.words[word]         else:              return None     def delete_word(self, word):          del self.words[word]"},{"instruction":"Reverse an array of integers using Python. arr = [1, 2, 3, 4, 5]","output":"arr = [1, 2, 3, 4, 5]   # reversing the array arr.reverse()   # print the reversed array print(arr)   # Output: [5, 4, 3, 2, 1]"},{"instruction":"What is a common use case for a ternary operator?","output":"A common use case for a ternary operator is to use it as a shortcut for an if/else statement. A ternary operator can be used to quickly assign the result of a boolean expression to a variable. For example, the following code is similar to an if/else statement: a = 5 b = 10 result = a if a > b else b In this example, if a is greater than b, then result will be assigned the value of a. Otherwise, it will be assigned the value of b."},{"instruction":"ert a comment that explains what the following C++ code does. sum = 0 for (i = 0; i < 10; i++):   sum += arr[i]","output":"// Set \\"sum\\" to 0  // Iterate over the array \\"arr\\", from its 0th element to 9th element  // and add each element of the array to the \\"sum\\" at each iteration"},{"instruction":"Rewrite the following Python function so it returns the opposite of the original output. def returnsThree() :  return 3","output":"def returnsThree():     return -3"},{"instruction":"Generate a SQL query to find the names of all users whose credit scores are lower than 50.","output":"SELECT name FROM users WHERE credit_score < 50"},{"instruction":"Write a SQL query to find the average credit score of users who are 18 years or younger.","output":"SELECT AVG(credit_score) FROM users WHERE age <= 18"},{"instruction":"Given a SQL table of user accounts, write a SQL query to find the account with the lowest number of login attempts.","output":"SELECT *  FROM users ORDER BY login_attempts ASC  LIMIT 1"},{"instruction":"Generate a theta join query to find companies located in a given zip code. Zip Code: 45112","output":"SELECT *  FROM companies c INNER JOIN locations l ON c.company_id = l.company_id  WHERE l.zip_code = '45112'"},{"instruction":"Rewrite the following Ruby method using an empty line between each statement. def doubles(array)   array.map { |e| e * 2 } end","output":"def doubles(array)   array.map { |e|      e * 2    } end"},{"instruction":"Describe the basics of programming for a beginner.","output":"Programming is the process of writing computer code to create programs that can perform specific tasks or operations. It involves using a programming language to give instructions to a computer to carry out a specific task. A program can involve calculations, data processing, and more complex tasks such as simulation, game-playing, and artificial intelligence. A programmer typically communicates their code in a language that can be understood by the computer, such as HTML, Python, or Java. Programming can be a rewarding and challenging experience, as programmers are often creating something that did not previously exist."},{"instruction":"Write a code for a Javascript program to return the nth Fibonacci number. 8","output":"// returns the nth Fibonacci number function nthFibonacciNumber(n) {     let fib = [0, 1];     for (i=2; i<=n; i++)     {       fib[i] = fib[i-2] + fib[i-1];     }     return fib[n]; } console.log(nthFibonacciNumber(8));"},{"instruction":"Write a code in C to get the greatest common divisor between two numbers. 25, 10","output":"#include <stdio.h>   int gcd(int a, int b) {     if (a == 0)         return b;     return gcd(b % a, a); }   // Driver program to test above function int main() {     int a = 25, b = 10;     printf(\\"GCD of %d and %d is %d \\", a, b, gcd(a, b));     return 0; }"},{"instruction":"w can you create a for loop in Python to loop through a list?","output":"# loop through a list list = [1, 2, 3, 4, 5] for item in list:     print(item)"},{"instruction":"Write a code to reverse a stack and return the new stack. Stack: [1, 2, 3, 4, 5]","output":"#include<stack> #include<iostream> using namespace std; stack<int> reverseStack(stack<int> s) {     stack<int> tempStack;     while (!s.empty()) {         int temp = s.top();         tempStack.push(temp);         s.pop();     }     return tempStack; } int main() {     stack<int> s;     s.push(1); s.push(2);     s.push(3); s.push(4);     s.push(5);     stack<int> revStack = reverseStack(s);     while (!revStack.empty()) {         cout << revStack.top() << \\" \\";         revStack.pop();     }     return 0; }"},{"instruction":"w can you represent an integer in binary?","output":"Integers can be represented in binary using a series of ones and zeroes. In a binary system, the position of a bit (binary digit) indicates its place value in the number. For example, the rightmost bit has the value of 1, the second-rightmost bit has the value of 2, the third-rightmost bit has the value of 4, and so on."},{"instruction":"Write a code in C# to convert a decimal number to binary format with or without bitwise operators. 15","output":"public static class Program {   public static string DecimalToBinary(int n)   {     string binary = \\"\\";     int remainder;     //without using bitwise operators     while (n != 0)     {       remainder = n % 2;       n /= 2;       binary = remainder + binary;      }     return binary;   }     public static void Main()    {     string binary = DecimalToBinary(15);     Console.WriteLine(binary);   } }"},{"instruction":"Create an array of 10 numbers in Java and assign random values from 1 to 10 to each item of the array.","output":"int[] nums = new int[10]; Random rand = new Random(); for(int i=0; i<nums.length; i++) {     nums[i] = rand.nextInt(10) + 1; }"},{"instruction":"What is the maximum limit of frames which a HTML page can hold?","output":"A HTML page can contain up to 16,000 frames."},{"instruction":"Find the 5th element of the list in Python. list = [12, 34, 87, 90, 80, 21]","output":"element = list[4] print(element) # 80"},{"instruction":"Write a function in C++ that takes an integer array as a parameter and returns the average value in the array.","output":"float getAverage(int arr[], int n){      int sum=0;     for (int i=0; i<n; i++)          sum += arr[i];        return (sum/n);  }"},{"instruction":"Extract a numeric value from the following string in Python. myString = \\"The length of the tree is 25 meter","output":"import re newString = re.findall(r\\"[d.]+\\", myString) print(newString[0]) # 25"},{"instruction":"Write a SQL query to find all the students with a last name beginning with 'D'.","output":"SELECT *  FROM students  WHERE last_name LIKE 'D%';"},{"instruction":"Write a CSS property to display an element as a flex item.","output":"display: flex;"},{"instruction":"Create a tuple containing user data about a person.","output":"user_data = (\\"John Doe\\", 29, \\"Male\\", \\"New York\\")"},{"instruction":"Find the middle element of a given linked list. 1 -> 2 -> 3 -> 4 -> 5","output":"The middle element of the linked list is 3."},{"instruction":"Write a regex pattern to find all words that start with 'a' in a sentence. Sentence: \\"All animals are amazing","output":"\\"\\"\\" Find all words that start with 'a' in a sentence \\"\\"\\" import re def find_words_with_a(sentence):     pattern = r\\"b[aA]w+b\\"     matches = re.findall(pattern, sentence)     return matches if __name__ == '__main__':     sentence = \\"All animals are amazing\\"     print(find_words_with_a(sentence))"},{"instruction":"Write a function to convert a 3 letter acronym to its full form. Acronym: \\"GDP","output":"\\"\\"\\" Convert a 3 letter acronym to its full form \\"\\"\\" def acronym_to_full_form(acronym):     acronyms = {         'GDP': 'Gross Domestic Product',         'CIA': 'Central Intelligence Agency',         'NASA': 'National Aeronautics and Space Administration'     }     return acronyms[acronym] if __name__ == '__main__':     acronym = \\"GDP\\"     print(acronym_to_full_form(acronym))"},{"instruction":"Generate a random password using a given string of characters. String: \\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#%^&*()","output":"\\"\\"\\" Generate a random password using a given string of characters \\"\\"\\" import random  def generate_password(string):     password = ''     for _ in range(16):         password += random.choice(string)     return password if __name__ == '__main__':     string = \\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#%^&*()\\"     print(generate_password(string))"},{"instruction":"Given a list of student's grades, write a program to calculate their average. Grades = [90, 95, 80, 75]","output":"\\"\\"\\" Calculate the average of a given list of grades \\"\\"\\" def average(grades):     sum = 0     for grade in grades:         sum += grade          return sum / len(grades) if __name__ == '__main__':     grades = [90, 95, 80, 75]     print(average(grades))"},{"instruction":"Assign a numerical value to a given string. \\"Apple","output":"\\"Apple\\" = 1"},{"instruction":"Create a web form in HTML with two fields - first name and last name","output":"<form>   <label for=\\"firstName\\">First Name</label><br>   <input type=\\"text\\" id=\\"firstName\\" name=\\"firstName\\"><br><br>     <label for=\\"lastName\\">Last Name</label><br>   <input type=\\"text\\" id=\\"lastName\\" name=\\"lastName\\"><br><br> </form>"},{"instruction":"Compose a style sheet in CSS that will make all text with the class \\"blue\\" have a blue color.","output":".blue {      color: blue;  }"},{"instruction":"Create a query in SQL to find the product IDs of all items having a given color. color = \\"red","output":"SELECT product_id  FROM products  WHERE color = 'red';"},{"instruction":"Design a method in Ruby that can be used to determine if a given number is a prime number or not. number = 7","output":"def prime?(number)      (2..number/2).each do |i|         if number % i == 0             return false         end     end     return true end"},{"instruction":"Construct a query in Java to find the last day of the month.","output":"Calendar now = Calendar.getInstance(); int lastDayOfMonth = now.getActualMaximum(Calendar.DAY_OF_MONTH);"},{"instruction":"Develop a machine learning model in Python to predict the credit risk of a customer based on their bank transaction data. <100 rows of bank transaction data>","output":"#import necessary models from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression #split data into train and test sets x_train, x_test, y_train, y_test = train_test_split(bank_data, credit_risk, test_size = 0.3) #create the machine learning model lr_model = LogisticRegression() #train the model lr_model.fit(x_train, y_train)"},{"instruction":"Generate a method in C++ to sort a given array in descending order. arr = [3,5,1]","output":"void sort_descending(int arr[], int n)  {      int temp;      for (int i=0; i<n; i++)      {          for (int j=i+1; j<n; j++)          {              if (arr[i] < arr[j])              {                  temp = arr[i];                  arr[i] = arr[j];                  arr[j] = temp;              }          }      }  }"},{"instruction":"Write a class in Scala to define dog characteristics such as color, breed, and size.","output":"class Dog(color:String, breed:String, size:String){   def description = s\\"This dog is a color breed, and is size.\\"  }"},{"instruction":"Use HTML and CSS to create a navigation bar on the top of the page.","output":"<header>     <nav>         <ul>             <li><a href=\\"#\\">Home</a></li>             <li><a href=\\"#\\">About</a></li>             <li><a href=\\"#\\">Blog</a></li>             <li><a href=\\"#\\">Contact</a></li>         </ul>     </nav> </header> <style> header {     background-color: #222; } nav {     float: right;     margin-right:50px; } ul {     list-style-type: none;     margin: 0;     padding: 0;     overflow: hidden; }  li {     float: left; } li a {     display: block;     color: white;     text-align: center;     padding: 14px 25px;     text-decoration: none; } li a:hover {     background-color: #111; } </style>"},{"instruction":"Write a method that takes a parameter, text, and returns the words in the text in reverse order. text = \\"Hello world!","output":"def reverse_words(text):   words = text.split(\\" \\");   reversedWords = words[::-1];   return \\" \\".join(reversedWords);"},{"instruction":"Analyze the following code and answer the following question: Is there a bug in this code? def foo(num):   if num == 0:     return 1   else:     return foo(num - 1)","output":"Yes, there is a bug in this code. The function \`foo\` does not have a base case and will cause an infinite recursion if it is called with a non-zero argument. The base case should be if \`num == 0\` then \`return 1\` else \`return foo(num - 1)\`."},{"instruction":"Generate HTML code for a table that displays the result of multiplication for the numbers from 1 to 10.","output":"<table>   <thead>     <tr>       <th>x</th>       <th>1</th>       <th>2</th>       <th>3</th>       <th>4</th>       <th>5</th>       <th>6</th>       <th>7</th>       <th>8</th>       <th>9</th>       <th>10</th>     </tr>   </thead>   <tbody>     <tr>       <td>1</td>       <td>1</td>       <td>2</td>       <td>3</td>       <td>4</td>       <td>5</td>       <td>6</td>       <td>7</td>       <td>8</td>       <td>9</td>       <td>10</td>     </tr>     <tr>       <td>2</td>       <td>2</td>       <td>4</td>       <td>6</td>       <td>8</td>       <td>10</td>       <td>12</td>       <td>14</td>       <td>16</td>       <td>18</td>       <td>20</td>     </tr>     <tr>       <td>3</td>       <td>3</td>       <td>6</td>       <td>9</td>       <td>12</td>       <td>15</td>       <td>18</td>       <td>21</td>       <td>24</td>       <td>27</td>       <td>30</td>     </tr>     <tr>       <td>4</td>       <td>4</td>       <td>8</td>       <td>12</td>       <td>16</td>       <td>20</td>       <td>24</td>       <td>28</td>       <td>32</td>       <td>36</td>       <td>40</td>     </tr>     <tr>       <td>5</td>       <td>5</td>       <td>10</td>       <td>15</td>       <td>20</td>       <td>25</td>       <td>30</td>       <td>35</td>       <td>40</td>       <td>45</td>       <td>50</td>     </tr>     <tr>       <td>6</td>       <td>6</td>       <td>12</td>       <td>18</td>       <td>24</td>       <td>30</td>       <td>36</td>       <td>42</td>       <td>48</td>       <td>54</td>       <td>60</td>     </tr>     <tr>       <td>7</td>       <td>7</td>       <td>14</td>       <td>21</td>       <td>28</td>       <td>35</td>       <td>42</td>       <td>49</td>       <td>56</td>       <td>63</td>       <td>70</td>     </tr>     <tr>       <td>8</td>       <td>8</td>       <td>16</td>       <td>24</td>       <td>32</td>       <td>40</td>       <td>48</td>       <td>56</td>       <td>64</td>       <td>72</td>       <td>80</td>     </tr>     <tr>       <td>9</td>       <td>9</td>       <td>18</td>       <td>27</td>       <td>36</td>       <td>45</td>       <td>54</td>       <td>63</td>       <td>72</td>       <td>81</td>       <td>90</td>     </tr>     <tr>       <td>10</td>       <td>10</td>       <td>20</td>       <td>30</td>       <td>40</td>       <td>50</td>       <td>60</td>       <td>70</td>       <td>80</td>       <td>90</td>       <td>100</td>     </tr>   </tbody> </table>"},{"instruction":"Create a method to convert a given number to Roman numeral format. num = 2020","output":"def int_to_roman(num):   roman_numerals = {     1: 'I',     4: 'IV',     5: 'V',     9: 'IX',     10: 'X',     40: 'XL',     50: 'L',     90: 'XC',     100: 'C',     400: 'CD',     500: 'D',     900: 'CM',     1000: 'M'   }   result = ''   for n in sorted(roman_numerals.keys(), reverse=True):     count = num // n     result += roman_numerals[n] * count     num %= n   return result if __name__ == '__main__':   num = 2020   print(int_to_roman(num))"},{"instruction":"Create an algorithm that takes two integers and returns the smallest common multiple of the two numbers. x = 12 y = 24","output":"def smallest_common_multiple(x, y):   for i in range(1, y+1):     if (i % x == 0) and (i % y == 0):       return i if __name__ == '__main__':   x = 12   y = 24   print(smallest_common_multiple(x, y))"},{"instruction":"Create a Python program to calculate the square root of a number provided by the user.","output":"def square_root(number):     \\"\\"\\"This program takes a number and calculates its square root.\\"\\"\\"     return number**0.5 num = int(input(\\"Enter a number: \\")) print(\\"The square root of \\", num, \\" is \\", square_root(num))"},{"instruction":"Create a function that takes an array and prints out the biggest number in it. [1, 7, 2, 11, 4]","output":"def find_max_num(nums_list):     \\"\\"\\"This function takes an array and prints out the biggest number in it.\\"\\"\\"     max_num = nums_list[0]     for num in nums_list:         if num > max_num:             max_num = num     return max_num nums_list = [1, 7, 2, 11, 4] print(find_max_num(nums_list))"},{"instruction":"Given the following array, delete all occurrences of the number 4. list1 = [4, 3, 4, 2, 3, 4, 4]","output":"list1 = [4, 3, 4, 2, 3, 4, 4] def delete_four(arr):     \\"\\"\\"This function deletes all occurrences of the number 4 in the given array\\"\\"\\"     for i in range(len(arr)):         if arr[i] == 4:             arr.pop(i)             i -= 1     return arr print(delete_four(list1))"},{"instruction":"Create a database query that shows the average price of all items.","output":"SELECT AVG(price) FROM items;"},{"instruction":"Create a SQL query that selects the top three most recently purchased products. Table Name: Purchases Columns: Product Name, Date","output":"SELECT * FROM Purchases ORDER BY Date DESC LIMIT 3;"},{"instruction":"Develop a for loop in Javascript to output integers from 0 to 10","output":"for (let i = 0; i < 11; i++) {     console.log(i); }"},{"instruction":"Write a Java program to replace all non-alphanumeric characters with underscores. Hello, World!","output":"public class ReplaceNonAlpha {     public static void main(String[] args) {       String string = \\"Hello, World!\\";       string = string.replaceAll(\\"[^A-Za-z0-9]\\", \\"_\\");     System.out.println(string);   } }"},{"instruction":"Construct a C++ code snippet to output a Fibonacci sequence with a given number of elements 7","output":"#include <iostream>  using namespace std;     int Fibonacci(int n)  {      if (n <= 1)          return n;      return Fibonacci(n - 1) + Fibonacci(n - 2);  }  int main ()  {      int n;     cout<<\\"Enter the number of elements: \\";     cin>>n;      cout << \\"Fibonacci sequence: \\";      for (int i = 0; i < n; i++)          cout << Fibonacci(i) <<\\" \\";         return 0;  } ;"},{"instruction":"Modify the following python program to include a comment explaining the purpose of the code numbers = [1, 2, 3, 4, 5] sum = 0 for num in numbers:     sum += num","output":"# This program is used to calculate the sum of a given list of numbers numbers = [1, 2, 3, 4, 5] sum = 0 for num in numbers:     sum += num"},{"instruction":"Analyze the following code and suggest a modification def hello():     print('Hello!')","output":"# This code prints out \\"Hello!\\" when called. # A modification to include a parameter for a name would be as follows: def hello(name):     print('Hello, ' + name + '!')"},{"instruction":"Design a CSS style to make an element a circle and have a red border","output":"#circle {     width: 50px;     height: 50px;     border-radius: 50%;     border: 1px solid red; }"},{"instruction":"Write an SQL query to get the number of customers per country Table Name: Customers Columns: Name, Country","output":"SELECT Country, COUNT(*) AS NumberOfCustomers  FROM Customers GROUP BY Country;"},{"instruction":"Use Swift to print a welcome message in the console","output":"print(\\"Welcome to Swift!\\")"},{"instruction":"Modify the following JavaScript code to find all of the prime numbers from 1 to 100 for (let i = 1; i <= 10; i++) {     console.log(i); }","output":"for (let i = 1; i <= 100; i++) {     let isPrime = true;     for (let j = 2; j < i; j++) {         if (i % j == 0) {             isPrime = false;             break;         }     }     if (isPrime) {         console.log(i);     } }"},{"instruction":"Provide a regular expression to find all the strings that starts with an alphabetical character followed by a sequence of letters, digits, and underscores.","output":"^[A-Za-z]+w*"},{"instruction":"Write a function to take a list of strings and return true if any element in the list starts with the letter \\"t ['dog', 'turtle', 'car', 'cat']","output":"true"},{"instruction":"Create a function that processes an array to remove all the duplicated elements [1, 1, 2, 5, 6, 6, 10]","output":"def remove_duplicates(arr):   new_arr = []      for i in arr:     if i not in new_arr:       new_arr.append(i)      return new_arr    remove_duplicates([1, 1, 2, 5, 6, 6, 10]) # returns [1, 2, 5, 6, 10]"},{"instruction":"Create a pandas dataframe to display the given data as a table. Name     Age     City Alice    25      London Bob      32      Tokyo","output":"import pandas as pd data = [  {'Name': 'Alice', 'Age': 25, 'City': 'London' },  {'Name': 'Bob', 'Age': 32, 'City': 'Tokyo' }  ] data_frame = pd.DataFrame(data) print(data_frame) Output: Name  Age     City 0  Alice    25    London 1    Bob    32     Tokyo"},{"instruction":"Write a SQL query to select customers who have an email address ending with \\".com\\".","output":"SELECT * FROM customers WHERE email LIKE '%.com'"},{"instruction":"Create a SQL table called \\"products\\" to store information about products.","output":"CREATE TABLE products (     id INTEGER PRIMARY KEY,     name TEXT,      description TEXT,     price DECIMAL(10,2) );"},{"instruction":"Generate a Python code snippet to print the list of numbers from 0 to 9.","output":"for i in range(0,10):     print(i)"},{"instruction":"Construct an SQL query to list the names of people who live in the \\"Sacramento\\" city.","output":"SELECT name FROM people WHERE city=\\"Sacramento\\";"},{"instruction":"Modify the given JavaScript code to display \\"Hello World\\" using alert. let message = 'Hi'; alert(message);","output":"let message = 'Hello World'; alert(message);"},{"instruction":"Devise a Python code snippet to return the last character of a given string. string = \\"stackoverflow","output":"last_char = string[-1] print(last_char)"},{"instruction":"Construct an HTML form to collect the name, address and phone number of a user.","output":"<form>     <label>Name:</label><br>     <input type=\\"text\\" name=\\"name\\"><br>     <label>Address:</label><br>     <input type=\\"text\\" name=\\"address\\"><br>     <label>Phone number:</label><br>     <input type=\\"text\\" name=\\"phone\\"><br>     <input type=\\"submit\\" value=\\"Submit\\"> </form>"},{"instruction":"Develop a SQL query to delete all entries with discount greater than 10 in the \\"products\\" table.","output":"DELETE FROM products WHERE discount > 10;"},{"instruction":"Design a C++ program to convert a given number from binary to decimal. <<noinput>>","output":"#include<iostream> #include<math.h> int BinToDec(long long n)  {      int decimalNumber = 0, i = 0, remainder;      while (n!=0)      {          remainder = n % 10;          n /= 10;          decimalNumber += remainder*pow(2,i);          ++i;      }      return decimalNumber;  } int main() {     long long bNum;     std::cout << \\"Enter a binary number: \\";     std::cin >> bNum;     int dec = BinToDec(bNum);     std::cout << \\"Decimal Representation of \\" << bNum << \\" is \\" << dec << std::endl;     return 0; }"},{"instruction":"Construct a HTML form to collect the name , age and gender of the user.","output":"<form>     <label>Name:</label><br>     <input type=\\"text\\" name=\\"name\\"><br>     <label>Age:</label><br>     <input type=\\"text\\" name=\\"age\\"><br>     <label>Gender:</label><br>     <select name=\\"gender\\">         <option value=\\"male\\">Male</option>         <option value=\\"female\\">Female</option>         <option value=\\"other\\">Other</option>     </select><br>     <input type=\\"submit\\" value=\\"Submit\\"> </form>"},{"instruction":"Generate an HTML page which contains the following elements: a heading, a paragraph, and a button.","output":"<html>     <head>         <title>My HTML Page</title>     </head>     <body>         <h1>Hello World!</h1>         <p>This is a simple HTML page created using code.</p>         <button>Click Me!</button>     </body> </html>"},{"instruction":"Create a SQL query that returns a list of cities in a given state. state='New York'","output":"SELECT City FROM List_of_Cities  WHERE State='New York'"},{"instruction":"Construct a class to represent a basic calculator with functions for addition, subtraction, multiplication and division.","output":"class Calculator:     def __init__(self):         pass     def add(self, a, b):         return a + b          def subtract(self, a, b):         return a - b     def multiply(self, a, b):         return a * b     def divide(self, a, b):         return a / b"},{"instruction":"Write a function to create a matrix NxN with values of 0 filled in.","output":"def generate_matrix(n):     matrix = []     for _ in range(n):         matrix.append([0 for _ in range(n)])     return matrix"},{"instruction":"Design a function to input an array and sort it using QuickSort algorithm.","output":"def quicksort(arr):      if len(arr) <= 1:         return arr        pivot = arr[len(arr) // 2]     left = [x for x in arr if x < pivot]     middle = [x for x in arr if x == pivot]     right = [x for x in arr if x > pivot]     return quicksort(left) + middle + quicksort(right)"},{"instruction":"Create a program for calculating the surface area of a cube.","output":"def cube_area(length):     # Surface area of a cube = 6* (length)^2      return 6* (length**2)"},{"instruction":"Write a function for finding the minimum value in a given array.","output":"def find_min(arr):     min_value = arr[0]     for element in arr:         if (element < min_value):             min_value = element     return min_value"},{"instruction":"Write a REGEX pattern to match strings consisting of three numbers separated by a dash.","output":"^d{1,3}-d{1,3}-d{1,3}"},{"instruction":"Design a function to calculate the GCD (greatest common divisor) of two given integers.","output":"def gcd(a, b):     while b != 0:         a, b = b, a % b     return a"},{"instruction":"Construct a script that takes inputs from the user and prints out the Fibonacci sequence up to a given number.","output":"def fibonacci_seq(n):     # Start and endpoints for the Fibonacci sequence     num1 = 0      num2 = 1        # List to store the sequence      Fibonacci_seq = [num1, num2]        while num2 < n:         num3 = num1 + num2          num1 = num2          num2 = num3         Fibonacci_seq.append(num2)        print(Fibonacci_seq)"},{"instruction":"Generate a function in Python to compute the area of a rectangle.","output":"def area_rectangle(length, breadth):      return length * breadth"},{"instruction":"Modify the given line of code to print the message \\"Hello World! print(\\"Good Luck!\\")","output":"print(\\"Hello World!\\")"},{"instruction":"Create a method to filter out odd numbers from an array. array = [6, 5, 9, 10, 11, 8]","output":"def filter_odd_numbers(array):      result = []      for i in array:          if i % 2 == 0:              result.append(i)      return result # Driver code array = [6, 5, 9, 10, 11, 8]  print(filter_odd_numbers(array))"},{"instruction":"Write a Python program to calculate the number of bits needed to represent an integer in binary form.","output":"def num_of_bits(num):     return len(bin(num)[2:]) if __name__ == '__main__':     print(num_of_bits(50))"},{"instruction":"Take the following list of temperatures in Celsius and convert them to Fahrenheit. [10, 15, 20, 25, 30]","output":"def celsius_to_fahrenheit(celsius):     return (celsius * (9/5)) + 32 if __name__ == '__main__':     temperatures = [10, 15, 20, 25, 30]     fahrenheit_temperatures = []     for temp in temperatures:         fahrenheit_temperatures.append(celsius_to_fahrenheit(temp))          print(fahrenheit_temperatures)"},{"instruction":"Write a Python code to generate random numbers from the given list. [10, 20, 30, 40]","output":"import random numbers = [10, 20, 30, 40] random_number = random.choice(numbers) print(random_number)"},{"instruction":"Find the number of occurrences of ‘Python’ in the given string. Python is a great language. Python is easy to learn.","output":"def count_occurences(str, word):     return str.count(word) if __name__ == '__main__':     str = 'Python is a great language. Python is easy to learn.'     print(count_occurences(str, 'Python'))"},{"instruction":"Generate a SQL query to return a list of customers who ordered more than one item","output":"SELECT c.id, c.name  FROM customers c  INNER JOIN orders o  ON c.id = o.customer_id  GROUP BY c.id, c.name  HAVING COUNT(o.order_id) > 1"},{"instruction":"Remove any element from an array that is greater than 10 [3, 5, 10, 20, 7]","output":"def removeGreaterThanTen(arr):  \\t# Create a new_arr array     new_arr = []      # Iterate each element in array     for i in range(len(arr)):         # Check if the element is greater than 10         if arr[i] <= 10:              # Add the element to the new_arr             new_arr.append(arr[i])      return new_arr"},{"instruction":"Find the largest key in a dictionary {'a':1, 'b':5, 'c':6, 'd':9}","output":"def findLargestKey(d):  \\t# Initialize largest_key and largest_val     largest_key = None     largest_val = -1 \\t     # Iterate each key-value in dictionary     for key, value in d.items(): \\t\\t# Initialize largest_key and largest_val         if value > largest_val:              largest_val = value             largest_key = key        return largest_key"},{"instruction":"Create a function to get the intersection of two sorted arrays arr1 = [1, 3, 4, 5, 6]  arr2 = [3, 5, 7, 8]","output":"def intersection(arr1, arr2):     # Initialize a result array     res = []      # Iterate each element of the first array and find in second array     for i in range(len(arr1)):          for j in range(len(arr2)):             # If element is present then append it to result array             if arr1[i] == arr2[j]:                  res.append(arr1[i])        return res"},{"instruction":"Create a function that takes a list and returns a tuple containing the maximum and minimum values of the list. [1, 4, 7, 3, 8]","output":"def maxMin(arr):     # Initialize the maximum and the minimum value     maxi = arr[0]      mini = arr[0]         # Iterate each element in arr to find the maximum and minimum     for i in range(1, len(arr)):          if arr[i] > maxi:              maxi = arr[i]          elif arr[i] < mini:              mini = arr[i]        return (maxi, mini)"},{"instruction":"Write a multi-line comment in Python describing what the following program does. def hello():     print(\\"Hello World\\")","output":"\\"\\"\\" This program prints \\"Hello World\\" when executed.  It defines a function called \\"hello\\" that does not take any parameters  and simply prints out \\"Hello World\\" when it is called. \\"\\"\\""},{"instruction":"Write a SQL query to find the average score of students who are aged between 20 and 23.","output":"SELECT AVG(score)  FROM students  WHERE age BETWEEN 20 AND 23;"},{"instruction":"Create a Python Exception to handle Nonetype Error.","output":"try:     my_list = [1, 2, 3]     my_list[3] except TypeError:     print(\\"Error: Nonetype Found\\")"},{"instruction":"Create a variable in Python to store 10 multidimensional arrays.","output":"arrays = [[[1,2], [3,4]],           [[5,6], [7,8]],           [[9,10], [11,12]],           [[13,14], [15,16]],           [[17,18], [19,20]],           [[21,22], [23,24]],           [[25,26], [27,28]],           [[29,30], [31,32]],           [[33,34], [35,36]],           [[37,38], [39,40]]]"},{"instruction":"Create a function in Java to remove values from an array that are greater than a given number. int[] array = {5, 8, 2, 9, 10, 6};","output":"public static int[] removeGreater(int [] array, int limit){   return Arrays.stream(array)         .filter(x -> x < limit)         .toArray(); }"},{"instruction":"Write an HTML program to create a simple page layout.","output":"<!DOCTYPE html> <html> <head>   <title>Simple Page Layout</title> </head> <body>   <div>Header Content</div>   <div>Body Content</div>   <div>Footer Content</div> </body> </html>"},{"instruction":"Create a MongoDB query to get the average salary for all employees.","output":"db.Employees.aggregate([     {      group: {              _id: null,              average_salary: {                  avg: \\"salary\\"              }          }      } ])"},{"instruction":"Convert the Python code using the range function in the for loop to a list comprehension statement. my_list = [] for i in range(10):     my_list.append(i)","output":"my_list = [i for i in range(10)]"},{"instruction":"Write a Python code to generate Fibonacci sequence up to 'n' numbers, where 'n' is a given integer.","output":"def generateFib(n):      fib = [0, 1]      while len(fib) < n :          fib.append(fib[-1] + fib[-2])                 return fib[:n]"},{"instruction":"Write a JavaScript code to count the number of occurrences of an input string in a text string. str1 = \\"My name is Mary and my friend's name is Sarah\\" str2 = \\"name","output":"const countOccurences = (text, str) => {     let count = 0;     for (let i = 0; i < text.length; i++) {         if (text.slice(i, i + str.length) === str) {             count++;         }     }     return count; }; countOccurences(str1, str2);"},{"instruction":"Write an SQL command to create a new table called 'users' with three columns: 'user_id', 'fname' and 'lname'.","output":"CREATE TABLE users (    user_id INT PRIMARY KEY,   fname VARCHAR(50),    lname VARCHAR(50) );"},{"instruction":"Write a JavaScript code snippet to sort an array of objects by a given property name. var animals = [   {name: \\"cat\\", age: 3},   {name: \\"dog\\", age: 5},   {name: \\"bird\\", age: 1} ];","output":"animals.sort((a, b) => (a.age > b.age) ? 1 : -1);"},{"instruction":"Write a JavaScript code to print the characters of a string one by one in an alert message. str = \\"Hello World!","output":"for (let i = 0; i < str.length; i++) {   alert(str.charAt(i)); }"},{"instruction":"Replace the \\"TODO\\" comment in the following Python statement with an appropriate value. count = 0 # TODO: add 1 to cou","output":"count = 0 count += 1"},{"instruction":"Write an SQL query to find the oldest user in the users table.","output":"SELECT *  FROM users ORDER BY age DESC LIMIT 1;"},{"instruction":"the following JavaScript function, edit the function body so that it returns the number stored in the variable 'currentNum' minus 5. function subtractFive(currentNum) {   // TODO }","output":"function subtractFive(currentNum) {   return currentNum - 5; }"},{"instruction":"Create a Java program for finding the first non-repeated character in a string. String: hello","output":"public class NonRepeatedCharacters  {      static final int NO_OF_CHARS = 256;             /* Returns an array of size 256 conaining count      of characters in the passed char array */     static int[] getCharCountArray(String str)      {          int count[] = new int[NO_OF_CHARS];          int len = str.length();                     /* Increment count of characters in count[] */         for (int i = 0; i < len; i++)              count[str.charAt(i)]++;                     return count;      }             /* The function returns index of first non-repeating      character in a string. If all characters are repeating      then returns -1 */     static int firstNonRepeating(String str)      {          int count[] = getCharCountArray(str);          int index = -1, i;                     for (i = 0; i < str.length(); i++)          {              if (count[str.charAt(i)] == 1)              {                  index = i;                  break;              }             }                       return index;      }  }"},{"instruction":"dentify the class of the given IP address. IP Address: 192.168.1.1","output":"Class C."},{"instruction":"Create a C++ program for computing the sum of the digits in a number. Number: 1234","output":"#include <iostream> using namespace std; int getSumOfDigits(int n)  {      // Base case      if (n == 0)          return 0;                 return (n % 10 + getSumOfDigits(n / 10));  }     // Driver code  int main()  {      int n = 1234;      cout << getSumOfDigits(n) << endl;      return 0;  }"},{"instruction":"Parse this HTML code and extract the text. <p>This is a pararaph of text<p>","output":"String text = doc.select(\\"p\\").text(); // text = \\"This is a pararaph of text\\""},{"instruction":"Are these two strings equal? String 1: Hi String 2: H","output":"Yes, the two strings are equal."},{"instruction":"What is the http status code for \\"Not Found\\"?","output":"404."},{"instruction":"Create a JSON object for this data. Name: John Age: 25 Gender: Male","output":"{\\"name\\": \\"John\\", \\"age\\": 25, \\"gender\\": \\"Male\\"}"},{"instruction":"Find the slope of this line. Point 1 (3, 2) Point 2 (6, 4)","output":"The slope of the line is 0.5."},{"instruction":"Write an angular directive to highlight the selected word in a text.","output":"myApp.directive('highlight', function() {   return {     restrict: 'A',     link: function(scope, element, attrs) {       attrs.observe('highlight', function(word) {         var text = element[0].innerHTML;         if (word) {           var regex = new RegExp('('+ word +'b)', 'gi');           var replacedText = text.replace(regex, '<span class=\\"highlighted\\">1</span>');           element[0].innerHTML = replacedText;         } else {           element[0].innerHTML = text;         }       });     }   }; });"},{"instruction":"dentify the wrong statement about the recursive function in the given code. def recursive(lr):     # base case     if lr is None:         return          for i in lr:         recursive(i)     # recursive call     recursive(lr)","output":"The function makes a recurrent call at the end of the function, which is redundant."},{"instruction":"Trace the output of the given program. def foo(x, y):     if y > 0:         return x + y     else:         return x * y a = foo(2, 3) b = foo(2, -2) print(a, b)","output":"5 -4"},{"instruction":"Translate the given pseudocode to C programming language. BEGIN   int sum, i   for i ← 1 to 20     sum ← sum + i   end for   Print sum END","output":"#include <stdio.h>   int main() {     int sum = 0, i;     for (i = 1; i <= 20; i++)         sum = sum + i;       printf(\\"Sum = %dn\\",sum);       return 0; }"},{"instruction":"Rewrite the following if-elif-else statement using the ternary operator. if x > y:     result = \\"x is greater than y\\" elif x < y:     result = \\"x is less than y\\" else:     result = \\"x is equal to y","output":"result =  x > y ? \\"x is greater than y\\" : ( x < y ? \\"x is less than y\\" : \\"x is equal to y\\" )"},{"instruction":"Generate a regular expression that matches strings containing any number of digits, but does not contain any non-digit character.","output":"^[0-9]+"},{"instruction":"Write an AppleScript program to open Calculator app.","output":"tell application \\"Calculator\\"     launch end tell"},{"instruction":"Find the number of prime numbers between 1 and 100.","output":"25"},{"instruction":"Edit the provided code so that it prints 10 rows and 10 columns of stars. for row in range(5):     for col in range(5):         print(\\"*\\")","output":"for row in range(10):     for col in range(10):         print(\\"*\\", end=\\"\\")     print()"},{"instruction":"Edit the given HTML code so that the paragraphs are numbered. <p>These are some sample paragraphs.</p> <p>This is another one.</p>","output":"<ol>  <li><p>These are some sample paragraphs.</p></li>  <li><p>This is another one.</p></li> </ol>"},{"instruction":"Generate a unique ID string in Java.","output":"import java.util.UUID; public class App {    public static void main(String[] args) {       // generate a unique ID string       String uniqueID = UUID.randomUUID().toString();       System.out.println(\\"Unique ID String: \\" + uniqueID);    } }"},{"instruction":"Write an SQL query to return the top three highest-scoring players from a table 'scores'.","output":"SELECT player_name FROM scores ORDER BY score DESC LIMIT 3;"},{"instruction":"Develop a high-level algorithm for pathfinding.","output":"def find_path(start, end):     # Create an empty list to store the path     path = []     # Create a dictionary to store visited nodes     visited = {start: None}     # Create a queue and add the initial space to it     queue = [start]     # Keep looping until the queue is empty     while len(queue) > 0:         # Get the first element in the queue         curr = queue.pop(0)         # Add the current node to the path         path.append(curr)         # Check if we reached the end of the path         if curr == end:             return path         # Explore all neighbours of the current node         for neighbour in get_neighbours(curr):             # Check if the neighbour is not visited previously             if neighbour not in visited:                 # Add the neighbour to the queue and mark it as visited                 queue.append(neighbour)                 visited[neighbour] = curr     # If the queue is empty, there is no path     return None"},{"instruction":"Using React, create a component to display a table containing a list of cities.","output":"const CityTable = ({ cities }) => {   const cityRows = cities.map(city => (     <tr key={city.id}>       <td>{city.name}</td>       <td>{city.population}</td>       <td>{city.country}</td>     </tr>   ));   return (     <table>       <thead>         <tr>           <th>Name</th>           <th>Population</th>           <th>Country</th>         </tr>       </thead>       <tbody>{cityRows}</tbody>     </table>   ); };"},{"instruction":"Write an expression in Java to calculate the exponential value of a number.","output":"Math.exp(x)"},{"instruction":"Debug the following Java code snippet to makes sure it is syntactically correct: public class Test  {     public static void main(String[] args)     {         int num1 = 0;         int num2 = 0;         if (num1 = 0)         {            num2 = 1;         }      }  }","output":"public class Test  {     public static void main(String[] args)     {         int num1 = 0;         int num2 = 0;         if (num1 == 0)         {            num2 = 1;         }      }  }"},{"instruction":"Create a regular expression to match a string that contains a number followed by a letter.","output":"/d[a-zA-Z]/"},{"instruction":"Create a Python program to calculate the average of all the ratings in the given list of tuple. [(3, 4), (5, 5), (7, 3)]","output":"def avg_rating(ratings): total = 0 for rating in ratings: total += rating[0] + rating[1] return total / (len(ratings)*2)"},{"instruction":"Create a REST API in Python Flask for a simple blog application with endpoints for creating a post, getting a post, and updating a post. Not applicable","output":"from flask import Flask, request, jsonify app = Flask(__name__) posts = [] @app.route('/posts',methods=['POST']) def create_post(): data = request.get_json() post = { 'title': data['title'], 'content': data['content'] } posts.append(post) return jsonify(post) @app.route('/posts/<string:title>', methods=['GET']) def get_post(title): for post in posts: if post['title'] == title: return jsonify(post) return jsonify({'message': 'Post not found!'}) @app.route('/posts/<string:title>', methods=['PUT']) def update_post(title): data = request.get_json() for post in posts: if post['title'] == title: post['title'] = data['title'] post['content'] = data['content'] return jsonify(post) return jsonify({'message': 'Post not found!'}) if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Create a python function that takes a list of numbers and returns their median.","output":"def get_median(lst): sorted_list = sorted(lst) len_list = len(lst) if len_list % 2 == 0: return (sorted_list[len_list//2 - 1] + sorted_list[len_list//2])/2 else: return sorted_list[len_list//2]"},{"instruction":"Create a python program to detect whether a string contains any duplicate characters.","output":"def foundDuplicates(string): '''This function will detect if a string contains any duplicate characters.''' seen = set() for char in string: if char in seen: return True seen.add(char) return False"},{"instruction":"Generate a function in Python that takes a web page URL and returns the page's HTML source code. url = https://www.example.com","output":"import requests def get_html_source(url): \\"\\"\\" This function takes a web page URL and returns the page's HTML source code. :param url: url :return: html source \\"\\"\\" response = requests.get(url) return response.text"},{"instruction":"Write a function in Python to convert a list of strings to an array of integers. list = ['12','14','17','25','99','168']","output":"def convert_list_integers(str_list): return list(map(int, str_list)) list = ['12','14','17','25','99','168'] arr = convert_list_integers(list) print(arr) # [12, 14, 17, 25, 99, 168]"},{"instruction":"Write a Python program to split a list into two halves. [14, 8, 3, 7, 5]","output":"def split_list(lst): half = len(lst) // 2 return lst[:half], lst[half:] left, right = split_list([14, 8, 3, 7, 5]) print (\\"Left list : \\", left) print (\\"Right list : \\", right)"},{"instruction":"Rearrange the words in the following sentence to create a meaningful sentence. sentence = program a to write Python","output":"Write a program in Python."},{"instruction":"Create an algorithm using Python to find the largest number in a list. [8, 5, 10, 3]","output":"def find_largest_number(numbers): # Finds the largest number from the given list largest = 0 for num in numbers: if num > largest: largest = num return largest numbers = [8, 5, 10, 3] largest = find_largest_number(numbers) print(largest)"},{"instruction":"Generate a function in Python that takes a list and returns a list of all possible subsequences. [1, 2, 3]","output":"def get_subsequences(arr): subsequences = [[]] for num in arr: new_subsequences = [] for sub in subsequences: new_subsequences.append(sub + [num]) subsequences += new_subsequences return subsequences arr = [1, 2, 3] result = get_subsequences(arr) print(result)"},{"instruction":"Create a python program to find all possible combination of arrangements of a list of words. ['dog', 'cat', 'fish']","output":"import itertools words = ['dog', 'cat', 'fish'] result = list(itertools.permutations(words)) for word in result: print(word)"},{"instruction":"Write a Python program to calculate the sum of the digits of an integer.","output":"def digitSum(n): if n == 0: return 0 else: return (n % 10) + digitSum(int(n / 10))"},{"instruction":"Design a function in Python to classify all the numbers in a list as even or odd. my_list = [1,2,3,4,5]","output":"def classify_odd_even(nums): output = [] for n in nums: if n%2 == 0: output.append('even') else: output.append('odd') return output if __name__ == '__main__': print(classify_odd_even(my_list))"},{"instruction":"Can you make a Python program to print out the Fibonacci sequence up to the nth element of the sequence? 8","output":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return 0 elif n == 1: return 1 else: for i in range(2,n): c = a + b a = b b = c return b print(Fibonacci(8)) # Output: 13"},{"instruction":"Create a Python script to reverse a string using recursion. Not applicable","output":"def reverse_string(s): if len(s) == 0: return s else: return reverse_string(s[1:]) + s[0] # Test string = \\"test string\\" print(reverse_string(string)) # Output: \\"gnirts tset\\""},{"instruction":"Build a Python program to print out the 3 largest odd numbers in a given list. [4, 7, 1, 2, 8, 5]","output":"list_of_nums = [4, 7, -1, 2, 8, 5] largest_odd_numbers = [] for num in list_of_nums: if num % 2 != 0 and len(largest_odd_numbers) < 3: largest_odd_numbers.append(num) largest_odd_numbers.sort() print (largest_odd_numbers)"},{"instruction":"Write a python code to find all numbers in a given string, and print them out. There are 45.8 apples and 12.3 oranges.","output":"import re string = \\"There are 45.8 apples and 12.3 oranges.\\" numbers = re.findall(r\\"[-+]?d*.d+|d+\\", string) print(numbers) # Output: ['45.8', '12.3']"},{"instruction":"Code a function in Python that generates a list of prime numbers up to a given limit.","output":"def generate_prime_numbers(limit): # Create an initial list of all numbers from 0 up to the limit. primes = [True] * (limit + 1) # Set 0 and 1 to False since that are not primes. primes[0] = False primes[1] = False # Iterate through the numbers up to the square root of the limit for i in range(2, int(limit**0.5) + 1): if primes[i] == True: # set the multiples of this number to False for j in range(i*i, limit+1, i): primes[j] = False # Create a list with only True elements (those which are prime numbers) true_primes = [i for i in range(2, limit+1) if primes[i] == True] return true_primes"},{"instruction":"Write a Python script to combine two dictionaries into one. dict1 = {'a':1, 'b':2} dict2 = {'c':3, 'd':4}","output":"def merge_dicts(dict1, dict2): merged_dict = {**dict1, **dict2} return merged_dict"},{"instruction":"Create a Python script that takes in an array of numbers and returns the mode. [1, 2, 5, 2, 3, 2, 5, 2]","output":"def mode(list): count_dict = {} for item in list: if item in count_dict: count_dict[item] += 1 else: count_dict[item] = 1 max_count = 0 mode = 0 for key in count_dict.keys(): if count_dict[key] > max_count: max_count = count_dict[key] mode = key return mode numbers = [1, 2, 5, 2, 3, 2, 5, 2] print(mode(numbers))"},{"instruction":"Build a REST API endpoint in Python that takes a user's name and returns a personalized greeting message. name = John","output":"from flask import Flask app = Flask(__name__) @app.route('/greeting', methods=['GET']) def get_greeting(name): return 'Hello, ' + name + '!' if __name__ == '__main__': app.run()"},{"instruction":"Develop a function in Python which takes an input array of strings and returns a dictionary with the strings stored in their reverse order. [Hello, World]","output":"def reverseStrings(arr): revDict = {}; for str in arr: revDict[str[::-1]] = str; return revDict; reverseStrings([\\"Hello\\", \\"World\\"]); // Outputs: {'olleH': 'Hello', 'dlroW': 'World'}"},{"instruction":"Write a Python function to count the number of digits in a given number.","output":"def count_digits(num): return len(str(abs(num)))"},{"instruction":"Optimize a function for generating a random string in Python. The function should generate a string with 7 characters that include both numbers and letters def random_string(): string = '' for i in range(7): string += chr(randint(97, 122)) string += str(randint(0, 9)) return string","output":"import random def random_string(): string = ''.join(random.sample( 'abcdefghijklmnopqrstuvwxyz' + '0123456789', 7)) return string"},{"instruction":"Create a code in python for performing principal component analysis on the given dataset. import pandas as pd data = {'Name':['Alice','Bob','Charlie','Dave','Emily'], 'Score1':[62,89,85,72,74], 'Score2':[64,87,84,78,76]} df = pd.DataFrame(data)","output":"import pandas as pd from sklearn.decomposition import PCA data = {'Name':['Alice','Bob','Charlie','Dave','Emily'], 'Score1':[62,89,85,72,74], 'Score2':[64,87,84,78,76]} df = pd.DataFrame(data) # Define X and y X = df[['Score1', 'Score2']] y = df['Name'] # Perform PCA pca = PCA(n_components=2) X_reduced = pca.fit_transform(X) # Print the explained variance for each component print(pca.explained_variance_ratio_)"},{"instruction":"Create an API request using Python to get the status of your favorite website. Website URL: example.com","output":"import requests url = 'http://example.com' r = requests.get(url) if r.status_code == 200: print('Website is up and running.') else: print('Website is not responding.')"},{"instruction":"To use the Djangomptt package, follow these steps: 1. Import os, INSTALL_SCHEMES, and setup from distutils.command.install. 2. Define a function called fullsplit that splits a pathname into components in a platformneutral way. 3. Modify the INSTALL_SCHEMES to put the data_files in platformspecific installation locations. 4. Compile the list of packages available and the data files. 5. Call the setup function with the appropriate parameters, including the name, description, version, author, author_email, url, packages, data_files, and classifiers.","output":"\\"\\"\\" Based entirely on Django's own \`\`setup.py\`\`. \\"\\"\\" import os from distutils.command.install import INSTALL_SCHEMES from distutils.core import setup def fullsplit(path, result=None): \\"\\"\\" Split a pathname into components (the opposite of os.path.join) in a platform-neutral way. \\"\\"\\" if result is None: result = [] head, tail = os.path.split(path) if head == '': return [tail] + result if head == path: return result return fullsplit(head, [tail] + result) # Tell distutils to put the data_files in platform-specific installation # locations. See here for an explanation: # http://groups.google.com/group/comp.lang.python/browse_thread/thread/35ec7b2fed36eaec/2105ee4d9e8042cb for scheme in INSTALL_SCHEMES.values(): scheme['data'] = scheme['purelib'] # Compile the list of packages available, because distutils doesn't have # an easy way to do this. packages, data_files = [], [] root_dir = os.path.dirname(__file__) mptt_dir = os.path.join(root_dir, 'mptt') pieces = fullsplit(root_dir) if pieces[-1] == '': len_root_dir = len(pieces) - 1 else: len_root_dir = len(pieces) for dirpath, dirnames, filenames in os.walk(mptt_dir): # Ignore dirnames that start with '.' for i, dirname in enumerate(dirnames): if dirname.startswith('.'): del dirnames[i] if '__init__.py' in filenames: packages.append('.'.join(fullsplit(dirpath)[len_root_dir:])) elif filenames: data_files.append([dirpath, [os.path.join(dirpath, f) for f in filenames]]) setup( name = 'django-mptt', description = 'Utilities for implementing Modified Preorder Tree Traversal with your Django Models and working with trees of Model instances', version = '0.3_pre', author = 'Jonathan Buchanan', author_email = 'jonathan.buchanan@gmail.com', url = 'http://code.google.com/p/django-mptt/', packages = packages, data_files = data_files, classifiers = ['Development Status :: 4 - Beta', 'Environment :: Web Environment', 'Framework :: Django', 'Intended Audience :: Developers', 'License :: OSI Approved :: BSD License', 'Operating System :: OS Independent', 'Programming Language :: Python', 'Topic :: Utilities'], )"},{"instruction":"Create a Python script to identify the frequency of words in a sentence. Sentence = This is a test sentence","output":"from collections import Counter sentence = \\"This is a test sentence\\" #split the sentence into words words = sentence.split() #count the frequency of each word word_frequency = Counter(words) #print the results print(word_frequency)"},{"instruction":"Compose a program to take in a string as an input and output only the unique characters in it. pytho","output":"def unique_chars(string): unique_characters = set() for char in string: unique_characters.add(char) return unique_characters print(unique_chars(\\"python\\"))"},{"instruction":"Design a Python function to print out all permutations of a given string. ABC","output":"def permute(s): if len(s) == 1: return s perms = [] for i in range(len(s)): element = s[i] remaining_elements = s[:i] + s[i+1:] z = permute(remaining_elements) for t in z: perms.append(element + t) return perms print(permute(\\"ABC\\"))"},{"instruction":"Create a program using Python to make a request to an API and predict the probability of a type of tree occurring in a given area. Sample geojson features in the area, specific tree type","output":"import requests import json import pandas as pd def predict_tree(geojson, tree_type): # Make a request to the API url = \\"http://api.example.com\\" response = requests.post(url, data=geojson) # Parse the json of the response data = json.loads(response.text) # Check for errors if data[\\"error\\"]: print(data[\\"error\\"]) return # Create a pandas DataFrame from the response df = pd.DataFrame(data[\\"tree_data\\"]) # Calculate the probability of the tree_type risk = df[tree_type].sum() / df[\\"total_trees\\"].sum() return risk"},{"instruction":"Write a Python function to classify a given animal as a mammal, bird, reptile, or fish. lio","output":"def classify_animal(animal): if animal == \\"lion\\": return \\"mammal\\" elif animal == \\"eagle\\": return \\"bird\\" elif animal == \\"crocodile\\": return \\"reptile\\" elif animal == \\"salmon\\": return \\"fish\\" else: return \\"unknown\\""},{"instruction":"Design a loop in Python to iterate over the elements of a list and print the elements in reverse order. [10, 15, 20]","output":"my_list = [10, 15, 20] for i in my_list[::-1]: print(i)"},{"instruction":"Construct a python code structure to compute the distance between two points in a 3D coordinate system. Point 1: (3, 4, 9) Point 2: (5, 6, 7)","output":"import math # Define a function to calculate the distance between two points def distance(x1, y1, z1, x2, y2, z2): # Compute the length of each side a = x2 - x1 b = y2 - y1 c = z2 - z1 # Compute the distance d = math.sqrt(a**2 + b**2 + c**2) return d # Call the function with the two points d = distance(3, 4, 9, -5, -6, -7) # Print the distance print(d)"},{"instruction":"Compress the following string using the gzip library in Python. String: This is a sample string to compress.","output":"import gzip string = \\"This is a sample string to compress.\\" compressed_string = gzip.compress(string.encode('utf-8')) print(compressed_string)"},{"instruction":"Create a program in Python to find the second highest number in a list of numbers. [8, 5, 11, 6, 9, 15]","output":"# Create an array of numbers nums = [8, 5, 11, 6, 9, 15] # Sort the array in descending order nums.sort(reverse=True) # Get the second highest number second_highest = nums[1] # Output the result print(\\"The second highest number is\\", second_highest)"},{"instruction":"Convert the given Python program from procedural to objectoriented. def multiply(a, b): c = a * b print(Result is: , c)","output":"class Multiplier: def __init__(self): pass def multiply(self, a, b): c = a * b print(\\"Result is: \\", c) mult = Multiplier() mult.multiply(a, b)"},{"instruction":"Using the turtle library in Python, create a geometric shape.","output":"import turtle t = turtle.Turtle(); t.speed(2); t.right(72); t.fd(100); t.left(144); t.fd(100); t.left(144); t.fd(100); t.left(144); t.fd(100); t.left(144); t.fd(100); t.done();"},{"instruction":"mplement a solution using Python to analyze text and determine the sentiment of a given text. Text: This movie was absolutely amazing!","output":"#Import libraries import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer #Define text text = \\"This movie was absolutely amazing!\\" #Create SentimentIntensityAnalyzer sia = SentimentIntensityAnalyzer() #Analyze sentiment sentiment_scores = sia.polarity_scores(text) #Print sentiment scores print(\\"{:-<40} {}\\".format(text, str(sentiment_scores))) #Print sentiment label if sentiment_scores['compound'] > 0: print(\\"Positive\\") elif sentiment_scores['compound'] == 0: print(\\"Neutral\\") else: print(\\"Negative\\")"},{"instruction":"Design a neural network in python to recognize handwritten digits","output":"import tensorflow as tf mnist = tf.keras.datasets.mnist (x_train, y_train),(x_test, y_test) = mnist.load_data() x_train, x_test = x_train / 255.0, x_test / 255.0 model = tf.keras.models.Sequential([ tf.keras.layers.Flatten(input_shape=(28, 28)), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dropout(0.2), tf.keras.layers.Dense(10, activation='softmax') ]) model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) model.fit(x_train, y_train, epochs=5)"},{"instruction":"Create a program in Python to print the greatest of three numbers. 2, 4, 3","output":"def get_max(x, y, z): if (x > y) and (x > z): maximum = x elif (y > x) and (y > z): maximum = y else: maximum = z return maximum result = get_max(2, 4, 3) print(result)"},{"instruction":"Write a python program to take in two strings, s1 and s2, and return the longest common substring. s1 = abcd1234 s2 = aa112345","output":"def longest_common_substring(s1, s2): \\"\\"\\" Function to return the longest common substring of two input strings Parameters: s1 (string): String #1 s2 (string): String #2 Returns: longest_sub (string): The longest common substring \\"\\"\\" m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] longest, x_longest = 0, 0 for x in range(1, 1 + len(s1)): for y in range(1, 1 + len(s2)): if s1[x - 1] == s2[y - 1]: m[x][y] = m[x - 1][y - 1] + 1 if m[x][y] > longest: longest = m[x][y] x_longest = x else: m[x][y] = 0 longest_sub = s1[x_longest - longest: x_longest] return longest_sub longest_common_substring(s1, s2) # Result: '123'"},{"instruction":"Generate a python function to find the largest number from the given list [10, 20, 40, 19]","output":"def largest_number(list): largest = list[0] for number in list: if number > largest: largest = number return largest"},{"instruction":"Construct a Python dictionary to store information about a user. name: John Smith age: 32 location: US","output":"user_info = { 'name': 'John Smith', 'age': 32, 'location': 'USA' }"},{"instruction":"Write a Python program to sort a given list of dictionaries based on a given key. list = [{'name': 'Alice', 'age': 24}, {'name': 'Bob', 'age': 27}, {'name': 'David', 'age': 29}]","output":"def sort_dictionaries(list, key): return sorted(list, key=lambda i: i[key])"},{"instruction":"Create a REST API using Python and Flask to allow users to store and access data. Not applicable","output":"import flask from flask import jsonify import sqlite3 from flask import g app = flask.Flask(name) DATABASE = 'data.db' def get_db(): db = getattr(g, '_database', None) if db is None: db = g._database = sqlite3.connect(DATABASE) return db @app.route('/data', methods=['POST']) def store_data(): db = get_db() cur = db.cursor() cur.execute(\\"INSERT INTO data (data) VALUES (?)\\", (flask.request.form['data'],)) db.commit() return jsonify(status='OK', message='Data stored') @app.route('/data', methods=['GET']) def get_data(): db = get_db() cur = db.cursor() cur.execute('SELECT * FROM data') row = cur.fetchall() data = [item[0] for item in row] return jsonify(status='OK', message=data) if name == 'main': app.run(debug=True)"},{"instruction":"Construct a function in Python to check if the provided year is a leap year.","output":"def is_leap_year(year): if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0): return True else: return False"},{"instruction":"Can you develop a program using Python to check if number is prime? 13","output":"def is_prime(n): if (n <= 1): return False elif (n <= 3): return True elif (n % 2 == 0 or n % 3 == 0): return False i = 5 while(i * i <= n): if (n % i == 0 or n % (i + 2) == 0): return False i = i + 6 return True print(is_prime(13))"},{"instruction":"Create a class in Python that takes a string of characters as its argument and stores it.","output":"class StringClass: def __init__(self, string): self.string = string def printString(self): print(self.string)"},{"instruction":"Create a Python algorithm that takes in an array of integers and prints out a sum of its elements. [3, 4, 5, 6]","output":"def sum_array(arr): s = 0 for i in arr: s += i return s"},{"instruction":"Write a function using Python that takes two strings and checks whether one is an anagram of the other.","output":"def is_anagram(str1, str2): \\"\\"\\"This function checks whether two strings are an anagram of each other. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the two strings are an anagram, False otherwise. \\"\\"\\" if len(str1) == len(str2): return all(str1.lower().count(c) == str2.lower().count(c) for c in str1.lower()) else: return False"},{"instruction":"Create a background job in Python to run every 5 minutes.","output":"# Importing the necessary module import schedule # Defining the job def job(): print(\\"Job executed!\\") # Scheduling the job to run every 5 minutes schedule.every(5).minutes.do(job) # Running the job while True: schedule.run_pending()"},{"instruction":"Generate a Python program to find the missing element in a given integer array of 1 to 100. [1, 2, 4, 6, 7, 10]","output":"def find_missing_element(nums): # Sum of the numbers from 1 to 100 sum_of_nums = (100*(101))//2 # Compute the sum of the given numbers sum_of_given_nums = 0 for num in nums: sum_of_given_nums += num # Compute the missing element missing_element = sum_of_nums - sum_of_given_nums return missing_element nums = [1, 2, 4, 6, 7, 10] missing_element = find_missing_element(nums) print(\\"The missing element is:\\", missing_element)"},{"instruction":"Generate a class in Python for a Simple Moving Average (SMA) calculator with a constructor that takes the window size and a method named calculate to calculate the SMA from a given list of values. list = [10, 20, 30, 40, 50]","output":"class SMA: def __init__(self, window_size): self.window_size = window_size self.window = [] def calculate(self, values): window = [] sma = 0 for value in values: if len(self.window) < self.window_size: self.window.append(value) else: self.window.pop(0) self.window.append(value) sma += value return sma / self.window_size list = [10, 20, 30, 40, 50] sma = SMA(3) print(sma.calculate(list)) # Output: 30"},{"instruction":"Create a function in Python that takes a number n and returns the sum of its digits. 378","output":"def sum_of_digits(n): sum = 0 while n: sum += n % 10 n //= 10 return sum print(sum_of_digits(378))"},{"instruction":"Develop a python program to predict whether a given customer is going to pay next month's bill. A dataset containing customer information such as credit score, payment history etc.","output":"# Load the data df = pd.read_csv('data.csv') # Create the necessary features X = df.drop('Payment', axis=1) y = df['Payment'] # Train the model model = LogisticRegression() model.fit(X, y) # Make predictions predictions = model.predict(X) # Check accuracy of predictions accuracy = accuracy_score(y,predictions) print(accuracy)"},{"instruction":"Create a script in Python that checks a provided URL for a specific keyword within its content and outputs either a pass or fail result. URL: http://www.example.com Keyword: succe","output":"import requests url = 'http://www.example.com' keyword = 'success' r = requests.get(url) if keyword in r.text: print('Pass') else: print('Fail')"},{"instruction":"Build a recommendation system in Python for finding similar items.","output":"# import libraries import numpy as np import scipy from nltk.stem.porter import * import pandas as pd from scipy.spatial.distance import cosine, correlation from sklearn import metrics # Read the metadata metadata = pd.read_csv('movies_metadata.csv') # select the required columns metadata = metadata[['title', 'genres']] # calculate the genre of the movie by using any tokenizer like # RegexpTokenizer or PorterStemmer tokenizer stemmer = PorterStemmer() # Function to get genre def get_genre(x): genre1 = [] try: mylist = x['genres'].split('|') for i in mylist: # print(stemmer.stem(i)) genre1.append(stemmer.stem(i)) except: pass return genre1 # create a new column having all the genres metadata['genre_new'] = metadata.apply(get_genre, axis = 1) # Function to calculate the similarity between moviess # based on their genres def genre_similarity(x): sim = [] for i in x['genre_new']: indx = metadata[metadata['genre_new'].map(lambda d: i in d)].index sim.extend(list(metadata['title'][indx])) return sim[:20] # create a new column having the similar movies to each movie metadata['sim_movies'] = metadata.apply(genre_similarity, axis = 1)"},{"instruction":"Write a Python script that takes a list of integers and returns a list of all unique combinations (of length 2) of integers that sum up to a given total. listOfIntegers = [1, 2, 3, 4, 5] sumTotal = 7","output":"def findCombinations(listOfIntegers, sumTotal): combinations = [] for i in range(len(listOfIntegers)): for j in range(i+1, len(listOfIntegers)): if listOfIntegers[i] + listOfIntegers[j] == sumTotal: combinations.append([listOfIntegers[i], listOfIntegers[j]]) return combinations listOfIntegers = [1, 2, 3, 4, 5] sumTotal = 7 print(findCombinations(listOfIntegers, sumTotal)) # Output: [[6, 1], [5, 2], [4, 3]]"},{"instruction":"Build an AI chatbot using Python and Dialogflow. Not applicable","output":"import os import json #import the packages from flask import Flask, request #initialization app = Flask(__name__) @app.route('/webhook', methods=['GET', 'POST']) def webhook(): #handle user message req = request.get_json(silent=True, force=True) user_input = req[\\"queryResult\\"][\\"queryText\\"] result = { \\"fulfillmentText\\":\\"This is a sample response from your webhook!\\" } #send response res = json.dumps(result, indent=4) print(res) r = make_response(res) r.headers['Content-Type'] = 'application/json' return r @app.route('/', methods=['GET']) def index(): return 'hello world' if __name__ == '__main__': port = int(os.getenv('PORT', 5000)) print(\\"Starting app on port %d\\" % port) app.run(debug=False, port=port, host='0.0.0.0')"},{"instruction":"Write a Python program to find the index of an item in a list. my_list = [1,2,3,4] item = 3","output":"def find_index(lst,item): for i in range(len(lst)): if item == lst[i]: return i index = find_index(my_list, item) print(index) # 2"},{"instruction":"Generate a Python program to remove a keyvalue pair in a dictionary. d = { 'a': 10, 'b': 20, 'c':30 }","output":"def remove_pair(d, key): if key in d: del d[key] return d d = { 'a': 10, 'b': 20, 'c':30 } remove_pair(d, 'c')"},{"instruction":"Compute the prime factors of a given number using Python. 24","output":"def primeFactors(num): for div in range(2, num // 2 + 1): while num % div == 0: print(div) num //= div if num > 1: print(num) num = 24 primeFactors(num) // 2, 2, 2, 3"},{"instruction":"Create a Python program that accepts two numbers as an input and prints out the ratio of the two numbers. number1 = 13 number2 = 24","output":"def calculateRatio(number1, number2): return number1/number2 number1 = 13 number2 = 24 ratioOfNumbers = calculateRatio(number1, number2) print(\\"The ratio of the two numbers is: \\" + str(ratioOfNumbers))"},{"instruction":"Create a program in Python to identify whether a character is uppercase, lowercase or a digit. char = 'A'","output":"def char_type(char): # check if character is uppercase if char.isupper(): print('Uppercase') # check if character is lowercase elif char.islower(): print('Lowercase') # check if character is digit elif char.isdigit(): print('Digit') else: print('Special Character') char_type('A')"},{"instruction":"Create a Python program that takes a list and an integer, and returns whether the list contains a sublist with the given sum. List: [2, 3, 4] Integer: 8","output":"def has_sublist_with_sum(list, n): for i in range(len(list) - 1): sum = 0 for j in range(i + 1, len(list)): sum += list[j] if sum == n: return True return False list = [2, 3, 4] n = 8 print(has_sublist_with_sum(list, n)) # prints True"},{"instruction":"Generate a random number between two given numbers, using Python. min_range = 30 max_range = 100","output":"\\"\\"\\" Generate a random number between two given numbers, using Python \\"\\"\\" import random def random_number(min_range, max_range): return random.randrange(min_range, max_range) print(random_number(30, 100))"},{"instruction":"Write a Python program to clean a given text from unwanted words and punctuations. A raw string","output":"import string def clean_text(text): # remove punctuation translator = str.maketrans('', '', string.punctuation) text = text.translate(translator) # remove unwanted words unwanted_words = {'the', 'and', 'a'} words = text.split(' ') words = [word for word in words if word not in unwanted_words] return ' '.join(words)"},{"instruction":"Create a Python script that takes in a positive integer as argument and prints out the Fibonacci sequence up to that number. 5","output":"def fibonacci(n): a, b = 0, 1 fibonacci = [a] while b < n: fibonacci.append(b) a, b = b, a + b return fibonacci print(fibonacci(5)) # Output: [0, 1, 1, 2, 3]"},{"instruction":"Optimize an existing Python program that calculates the average age of a group of people. people = [ [Bob, 18], [Emily, 24], [Sam, 15], [John, 35] ]","output":"total_age = 0 for person in people: total_age += int(person[1]) average_age = total_age / len(people) print(f\\"The average age of the group is {average_age}\\") # Optimized version total_age = sum([int(person[1]) for person in people]) average_age = total_age / len(people) print(f\\"The average age of the group is {average_age}\\")"},{"instruction":"Create a Python program to find the total distance of a set of given (x,y) coordinates. coordinates = [(2, 4), (3, 5), (4, 3), (9, 7)]","output":"def totalDistance(coordinates): total = 0 for i in range(len(coordinates) - 1): distance = ((coordinates[i+1][0] - coordinates[i][0])**2 + (coordinates[i+1][1] - coordinates[i][1])**2)**(1/2) total += distance return total print(totalDistance(coordinates))"},{"instruction":"Create a GUI for a Python program that calculates the area of a rectangle. The GUI should allow users to enter the length and width of the rectangle, and it should provide a button for calculating the area. Not applicable","output":"import tkinter as tk root = tk.Tk() length_label = tk.Label(text=\\"Length:\\") length_label.grid(row=0, column=0) length_entry = tk.Entry() length_entry.grid(row=0, column=1) width_label = tk.Label(text=\\"Width:\\") width_label.grid(row=1, column=0) width_entry = tk.Entry() width_entry.grid(row=1, column=1) def area(): area = float(length_entry.get()) * float(width_entry.get()) area_label = tk.Label(root, text=\\"Area: \\" + str(area)) area_label.grid(row=2, column=0, columnspan=2) calc_button = tk.Button(text=\\"Calculate\\", command=area) calc_button.grid(row=2, column=1) root.mainloop()"},{"instruction":"Construct a Python program to calculate the age in years of a person given their birthdate. 06/11/1996","output":"import datetime def calculate_age(birthdate): today = datetime.date.today() current_year = today.year age = current_year - birthdate.year if ((birthdate.month, birthdate.day) > (today.month, today.day)): age -= 1 return age birthdate = datetime.date(1996, 6, 11) age = calculate_age(birthdate) print(age) # 24"},{"instruction":"Create a Python script for a sorting algorithm that can efficiently sort an array of integers. [8, 3, 5, 1, 4, 6]","output":"def bubble_sort(lst): for i in range(len(lst)): for j in range(0, len(lst) - i - 1): if lst[j] > lst[j + 1] : lst[j], lst[j + 1] = lst[j + 1], lst[j] return lst lst = [8, 3, 5, 1, 4, 6] sorted_list = bubble_sort(lst) print(\\"Sorted Array:\\", sorted_list)"},{"instruction":"Find the most efficient algorithm to reverse a string in Python","output":"def reverse(input): str = \\"\\" for i in input: str = i + str return str"},{"instruction":"Create a Python program to encode/decode data using a onetime padstyle of encryption. encrypted_string = 8a04de1fbc1e1fe9828ef decryption_key = a31c98","output":"import base64 encrypted_string = base64.b64decode(encrypted_string) decryption_key = base64.b64decode(decryption_key) decrypted_string = \\"\\" assert len(encrypted_string) == len(decryption_key) for i in range(len(encrypted_string)): decrypted_string += chr(ord(encrypted_string[i]) ^ ord(decryption_key[i])) print(decrypted_string)"},{"instruction":"Rewrite the code below to use Python data structures. let numbersArray = [5, 9, 3, 2, 6, 10]; let numbersArrayIndex = 0; let currentNumber = numbersArray[numbersArrayIndex]; while (numbersArrayIndex < numbersArray.length) { console.log(currentNumber); numbersArrayIndex++; currentNumber = numbersArray[numbersArrayIndex]; }","output":"numbers_array = [5, 9, 3, 2, 6, 10] for current_number in numbers_array: print(current_number)"},{"instruction":"Write a Python program to find the largest and smallest number from a given list of numbers. [7, 4, 2, 9, 0, 5]","output":"def find_num(input_list): \\"\\"\\"Finds the largest and smallest number from a given list of numbers.\\"\\"\\" max_num = max(input_list) min_num = min(input_list) return max_num, min_num largest, smallest = find_num([7, 4, 2, 9, 0, 5]) print('The largest number is', largest) print('The smallest number is', smallest)"},{"instruction":"Write a Python program to iterate over a list of tuples containing student names and scores and find the student with the highest score. students = [(John, 20), (Alex, 12), (Henry, 15), (Alice, 22)]","output":"# Store highest score and the corresponding name max_score = 0 name = '' # Loop over the list of tuples for student in students: # Get score score = student[1] # Check if score is higher than max_score if score > max_score: # Set max_score max_score = score # Set name name = student[0] # Print output print(\\"The student with the highest score is\\", name, \\"with a score of\\", max_score)"},{"instruction":"Write a Python program to find the index of an element in an array. array = [3, 7, 9, 10] element = 7","output":"def findIndex(array, element): for i in range(len(array)): if(array[i] == element): return i return -1 # Driver code print(findIndex([3, 7, 9, 10], 7))"},{"instruction":"Create a Python program to print out the powers of 2 up to the input number n.","output":"def print_powers_of_2(n): result = [] for i in range(n+1): result.append(2**i) return result"},{"instruction":"mplement the Kmeans algorithm in Python to cluster similar data points. Data points: [[0, 0], [4, 5], [6, 2], [2, 4]]","output":"\\"\\"\\" Implement the K-Means Algorithm \\"\\"\\" import numpy as np def k_means_clustering(X, k): # Get data points points = np.array(X) # Generate cluster centers randomly centers = np.random.uniform(points.min(), points.max(), (k, points.shape[1])) while True: # Calculate the distances between each point and the clusters distances = np.array([np.sqrt(np.sum((points - c)**2, axis=1)) for c in centers]) # Assign each point to the closest cluster clusters = np.argmin(distances, axis=0) # Calculate the centroids of each cluster new_centers = np.array([points[clusters == i].mean(axis=0) for i in range(k)]) # Stop if the centroids haven't moved if np.linalg.norm(new_centers - centers) == 0: break # Update the cluster centers centers = new_centers return clusters if __name__ == '__main__': X = [[0, 0], [4, 5], [6, 2], [-2, 4]] k = 2 clusters = k_means_clustering(X, k) print(clusters)"},{"instruction":"Construct a function in Python that will take a list as an argument and prompt the user to delete elements from that list. my_list = [1, 2, 3, 4, 5]","output":"def delete_element(list): print(\\"Original list: \\" + str(list)) element = int(input(\\"Please enter the element which you want to delete: \\")) list.remove(element) print(\\"List after deletion of element: \\" + str(list))"},{"instruction":"Use a recursive algorithm in Python to calculate the sum of a given array. array1 = [1, 2, 3, 4, 5]","output":"def array_sum(arr): if len(arr) == 1: return arr[0] else: return arr[0] + array_sum(arr[1:]) #Driver code print(array_sum(array1)) #prints 15"},{"instruction":"Create a python program that encrypts a message. message = 'Hello World!'","output":"#library to generate random numbers import random #library to perform string operations import string # function to encrypt the string def encryptMessage(message): # convert message to uppercase message = message.upper() # make a list of possible characters chars = string.ascii_uppercase #stores the encrypted form of the message encryptedMessage = \\"\\" # loops through the message for char in message: if char in chars: # finds the corresponding position of character position = chars.find(char) # takes a random element from alphabet list newposition = random.randrange(0,26) # replace the character by the character in new position encryptedMessage += chars[newposition] return encryptedMessage # Driver Code encryptedMessage = encryptMessage(message) print(encryptedMessage)"},{"instruction":"Optimize a Python program for performing matrix multiplication.","output":"def MatrixMultiplication(A, B): # Dimensions of A m = len(A) p = len(A[0]) # Dimensions of B q = len(B) r = len(B[0]) # Generating the result matrix # C with dimensions m x r C = [[0 for row in range(0, r)] for col in range(0, m)] for i in range(0, m): for j in range(0, r): for k in range(0, p): # Performing the multiplication operation C[i][j] += A[i][k] * B[k][j] # Printing the result matrix return C"},{"instruction":"Develop a Python program to send a mail notification when a certain event is triggered.","output":"import smtplib # Chnage this variable when the event is triggered message_sent = False if not message_sent: # Replace sender_email and receiver_email with valid email sender_email = \\"SENDER EMAIL\\" receiver_email = \\"RECEIVER EMAIL\\" message = \\"The event has been triggered.\\" server = smtplib.SMTP('smtp.gmail.com', 587) server.ehlo() server.starttls() server.login(sender_email, \\"YOUR PASSWORD\\") server.sendmail(sender_email, receiver_email, message) message_sent = True"},{"instruction":"Write a function to return the first n prime numbers in Python. Number of Prime Numbers needed: 5","output":"def firstPrimeNumbers(number): primeNumbers = [] for num in range(1, number + 1): if (num > 1): for i in range(2, num): if (num % i == 0): break else: primeNumbers.append(num) return primeNumbers # Test code prime = firstPrimeNumbers(5) print(prime)"},{"instruction":"Modify a Python script to make it run more efficiently. import time def func(n): # the computation of the # nth term of the Fibonacci series f1 = 0 f2 = 1 count = 0 # check if the number of terms is valid if n <= 0: print(Please enter a positive integer) elif n == 1: print(f1) else: while count < n: print(f1,end= , ) nth = f1 + f2 # update values f1 = f2 f2 = nth count += 1 time.sleep(1) func(5)","output":"import time def func(n): # the computation of the # nth term of the Fibonacci series f1 = 0 f2 = 1 nth = 0 # declaring variables to store # the previous two values so that # we can use them afterwards prev1 = 0 prev2 = 1 count = 0 # check if the number of terms is valid if n <= 0: print(\\"Please enter a positive integer\\") elif n == 1: print(f1) else: while count < n: print(f1,end=\\" , \\") # updating the values before # performing next iteration prev1 = f1 prev2 = f2 # updating nth value nth = prev1 + prev2 # update values f1 = prev2 f2 = nth count += 1 time.sleep(1) func(5)"},{"instruction":"Write a Python script to find the longest word in a given text.","output":"def find_longest_word(text): words = text.split(' ') longest_word = '' for word in words: if len(word) > len(longest_word): longest_word = word return longest_word longest_word = find_longest_word('The quick brown fox jumps over the lazy dog') print(longest_word)"},{"instruction":"Develop a web scraper in Python to download a list of educational videos from YouTube.","output":"# Import the necessary libraries import requests from bs4 import BeautifulSoup import urllib.parse # Make a GET request r = requests.get('https://www.youtube.com/results?search_query=' + urllib.parse.quote('educational videos')) # Parse the HTML page soup = BeautifulSoup(r.text, 'html.parser') videos = soup.find_all('h3', {'class': 'yt-lockup-title'}) # Save the links links = [video.find('a')['href'] for video in videos] # Download the videos for link in links: r = requests.get(link) with open('video.mp4', 'wb') as f: f.write(r.content)"},{"instruction":"Refactor and improve the efficiency of the following Python code. def get_intersection(list_1, list_2): result = [] for elem in list_1: if elem in list_2: result.append(elem) return resul","output":"def get_intersection(list_1, list_2): return [elem for elem in list_1 if elem in list_2]"},{"instruction":"Create a class in Python to represent a Person.","output":"class Person: # constructor def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender # creating a person person1 = Person(\\"John Doe\\", 35, \\"Male\\") # printing the details print(\\"Name:\\", person1.name) print(\\"Age:\\", person1.age) print(\\"Gender:\\", person1.gender)"},{"instruction":"Generate a Python script to play a simple game of tictactoe.","output":"import random def display_board(board): print(' | |') print(' ' + board[7] + ' | ' + board[8] + ' | ' + board[9]) print(' | |') print('-----------') print(' | |') print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6]) print(' | |') print('-----------') print(' | |') print(' ' + board[1] + ' | ' + board[2] + ' | ' + board[3]) print(' | |') def player_choice(board): position = 0 while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position): position = int(input('Choose your next position: (1-9) ')) return position def place_marker(board, marker, position): board[position] = marker def win_check(board, mark): return ((board[7] == mark and board[8] == mark and board[9] == mark) or (board[4] == mark and board[5] == mark and board[6] == mark) or (board[1] == mark and board[2] == mark and board[3] == mark) or (board[7] == mark and board[4] == mark and board[1] == mark) or (board[8] == mark and board[5] == mark and board[2] == mark) or (board[9] == mark and board[6] == mark and board[3] == mark) or (board[7] == mark and board[5] == mark and board[3] == mark) or (board[9] == mark and board[5] == mark and board[1] == mark)) def space_check(board, position): return board[position] == ' ' def full_board_check(board): for i in range(1,10): if space_check(board, i): return False return True def main(): print('Welcome to Tic Tac Toe!') while True: # Reset the board theBoard = [' '] * 10 player1_marker, player2_marker = player_input() turn = choose_first() print(turn + ' will go first.') play_game = input('Are you ready to play? Enter Yes or No.') if play_game.lower()[0] == 'y': game_on = True else: game_on = False while game_on: if turn == 'Player 1': # Player1's turn. display_board(theBoard) position = player_choice(theBoard) place_marker(theBoard, player1_marker, position) if win_check(theBoard, player1_marker): display_board(theBoard) print('Congratulations! You have won the game!') game_on = False else: if full_board_check(theBoard): display_board(theBoard) print('The game is a draw!') break else: turn = 'Player 2' else: # Player2's turn. display_board(theBoard) position = player_choice(theBoard) place_marker(theBoard, player2_marker, position) if win_check(theBoard, player2_marker): display_board(theBoard) print('Player 2 has won!') game_on = False else: if full_board_check(theBoard): display_board(theBoard) print('The game is a draw!') break else: turn = 'Player 1' if not replay(): break def player_input(): marker = '' while not (marker == 'X' or marker == 'O'): marker = input('Player 1: Do you want to be X or O? ').upper() if marker == 'X': return ('X', 'O') else: return ('O', 'X') def choose_first(): if random.randint(0, 1) == 0: return 'Player 2' else: return 'Player 1' def replay(): return input('Do you want to play again? Enter Yes or No: ').lower().startswith('y') main()"},{"instruction":"Generate a list of fibonacci numbers using iterative function in Python. n=10","output":"def generate_fibonacci_numbers(n): # Initialize variables a = 0 b = 1 # Iterate and calculate fibonacci numbers fib_list = [a] for i in range(1, n): c = a + b fib_list.append(c) a = b b = c return fib_list if __name__ == '__main__': print(generate_fibonacci_numbers(10))"},{"instruction":"Design a function in Python to find the area of a circle from the given radius. 5","output":"def areaCircle(radius): pi = 3.14 area = pi * (radius**2) return area print(areaCircle(5)) # 78.5"},{"instruction":"Create a function in Python for computing the average of elements in a given list. [15, 16, 5, 20, 6, 8]","output":"def calculate_average(nums): total = 0 for i in range(len(nums)): total += nums[i] return total / len(nums)"},{"instruction":"mplement a Monte Carlo simulation in Python to calculate the probability of completing a given task. Not applicable","output":"import random trials = 10000 successes = 0 for _ in range(trials): # Simulate process (e.g. a dice roll) outcome = random.randint(1, 6) # Keep track of successes if outcome == 6: successes += 1 # Calculate probability probability = successes / trials print(f'Probability of success: {probability: .2f}')"},{"instruction":"Write a machine learning algorithm in Python to find the nearest neighbors of a given point. point = [3, 4]","output":"from sklearn.neighbors import NearestNeighbors def nearest_neighbors(point): neighbors = NearestNeighbors(n_neighbors=1).fit(point) return neighbors.kneighbors([point], return_distance=False)[0]"},{"instruction":"Using Python, create a function to calculate the volume of a cube with the side length as a parameter. Not applicable","output":"def cube_volume(side): # calculate the volume of a cube return side**3 volume = cube_volume(5) # volume = 125 print(volume)"},{"instruction":"Create a Python script that given a list of numbers, multiplies each number by two and prints out the resulting list. List: [1, 5, 8, 10]","output":"def multiply_by_two(numbers): result = [] for num in numbers: result.append(num * 2) return result numbers = [1, 5, 8, 10] print(multiply_by_two(numbers)) # Outputs: [2, 10, 16, 20]"},{"instruction":"Suggest alternative code to determine the mode of a given list in Python.","output":"from collections import Counter def get_mode(numbers): num_count = Counter(numbers) max_count = max(num_count.values()) mode = [x for x in num_count.keys() if num_count[x] == max_count] return mode"},{"instruction":"Create a deep learning model in Python to classify animals. Input data: A dataset of images of cats, dogs, horses, and rabbits.","output":"import tensorflow as tf from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten # Create the model model = Sequential() model.add( Conv2D(input_shape=(150,150,3), filters=64, strides=2, padding='same', activation='relu', kernel_size=(3,3)) ) model.add( MaxPooling2D(padding='same', pool_size=(2,2)) ) model.add( Conv2D(filters=32, strides=2, activation='relu',kernel_size=(3,3)) ) model.add( MaxPooling2D(padding='same', pool_size=(2,2)) ) model.add( Flatten() ) model.add( Dense(128, activation='relu') ) model.add( Dense(4, activation='softmax') ) # Compile the model model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) # Train the model model.fit(train_data, train_labels, epochs=10, validation_data=(test_data, test_labels))"},{"instruction":"Create a Python program to print out a multiplication table. The table should print out the first 10 multiples of a given number. 2","output":"number = int(input(\\"Please enter a number:\\")) for i in range(1, 11): print(f'{number} * {i} = {number*i}')"},{"instruction":"Write a Python program to optimize the following code to reduce its time complexity. def isPrime(n): for i in range(2, n): if n % i == 0: return False return True","output":"def isPrime(n): \\"\\"\\" This function takes a number and checks if it is a prime number Args: n: an integer Returns: true if number is prime, false otherwise \\"\\"\\" # Edge case: 1 is not a prime number if n <= 1: return False # Check from 2 to the square root of number for i in range(2, int(math.sqrt(n))+1): # If number is divisible by i, it is not a prime number if (n % i == 0): return False # If not divisible by any number, it is a prime number return True # Call the function with the given input print(isPrime(n))"},{"instruction":"Construct a program in Python to check if a string contains only digits.","output":"def is_number(s): try: float(s) return True except ValueError: return False"},{"instruction":"Construct a Python class that behaves like a stack.","output":"class Stack: def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items)"},{"instruction":"Write a function in Python to traverse a multidimensional array and print each item in the array. [[1,2,3], [4,5,6], [7,8,9]]","output":"def traverse_array(arr): if isinstance(arr, list) or isinstance(arr, tuple): for item in arr: traverse_array(item) else: print(arr) arr = [[1,2,3], [4,5,6], [7,8,9]] traverse_array(arr)"},{"instruction":"Optimize this Python code to run faster. def find_largest_number(numbers): largest = 0 for n in numbers: if n > largest: largest = n return large","output":"def find_largest_number(numbers): largest = numbers[0] for n in numbers[1:]: if n > largest: largest = n return largest"},{"instruction":"Edit the existing Python code to output two separate lines. print(Hello World)","output":"print(\\"Hello\\") print(\\"World\\")"},{"instruction":"Design an API in Python to compare two strings and provide an output/ match score. String1 = Hello World String2 = Hello Everyone","output":"import difflib def compare_strings(string1, string2): # Convert strings to lowercase string1 = string1.lower() string2 = string2.lower() # Compute match score score = difflib.SequenceMatcher(None, string1, string2).ratio() # Return the match score return score"},{"instruction":"Create an algorithm in Python for finding the longest common substring of two strings. String 1: ABCDEFG String 2: FOHIJKL","output":"# Function to find the longest common substring def longestSubstring(s1, s2): # Create an array mat = [[0 for col in range(len(s2)+1)] for row in range(len(s1)+1)] # Set maximum to 0 largestCount = 0 # Iterate through array for x in range(1, len(s1)+1): for y in range(1, len(s2)+1): # If there is a match, count increases by 1 if (s1[x-1] == s2[y-1]): mat[x][y] = mat[x-1][y-1] + 1 # check for new max, and update if (largestCount < mat[x][y]): largestCount = mat[x][y] # If no match, set count as 0 else: mat[x][y] = 0 # Return largest count return largestCount"},{"instruction":"Construct a Python script that automates the process of detecting an object. The input consists of an image with a dog, an image with a cat, an image with a table and an image with a chair.","output":"from keras.preprocessing import image from keras.applications.imagenet_utils import preprocess_input, decode_predictions import numpy as np object_types = ['dog', 'cat', 'table', 'chair'] def detect_objects(img_path): img = image.load_img(img_path, target_size=(224, 224)) x = image.img_to_array(img) x = np.expand_dims(x, axis=0) x = preprocess_input(x) predictions = model.predict(x) results = decode_predictions(predictions) top_result = results[0][0] top_result_class = top_result[1] if top_result_class in object_types: print(\\"The detected object is a {}\\".format(top_result_class)) else: print(\\"The object is not in the given categories\\")"},{"instruction":"Create a Python class for a library book with fields for title, author, and ISBN. Not applicable","output":"class Book: def __init__(self, title, author, isbn): self.title = title self.author = author self.isbn = isbn b1 = Book(\\"Great Expectations\\", \\"Charles Dickens\\", \\"123-456-789\\") b2 = Book(\\"Brave New World\\", \\"Aldous Huxley, \\"987-654-321\\")"},{"instruction":"Design a class in Python for representing a student.","output":"class Student: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender"},{"instruction":"Generate a python program that calculates the area of a triangle given the coordinates of its vertices. A=(2, 0), B=(2, 0), C=(0, 4)","output":"def triangle_area(A, B, C): return abs((A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2.0) # Driver Code A = (2, 0) B = (-2, 0) C = (0, 4) print(\\"Area of Triangle is\\", triangle_area(A, B, C))"},{"instruction":"Keep a record of all the URLs visited from a given website in Python.","output":"def track_urls(url): visited_urls = set() current_url = url while current_url: if current_url not in visited_urls: visited_urls.add(current_url) current_url = get_next_url(current_url) return visited_urls"},{"instruction":"Write a Python program to read in a list of words separated by spaces and reverse them inplace. word_list = [Birds, fly, in, the, sky]","output":"word_list.reverse()"},{"instruction":"With Python, create a web scraper that collects text from a blog. Not applicable","output":"import requests from bs4 import BeautifulSoup def scrape_blog(url): r = requests.get(url) content = r.content soup = BeautifulSoup(content) text_blocks = soup.find_all('p') text = '' for block in text_blocks: text += block.text return text"},{"instruction":"We are given the input and output schematic of a neural network. You are required to implement the network in Python code. Inputs=[2,1] Hidden1=[2] Outputs=[1]","output":"import numpy as np # Inputs x = np.array([2, 1]) # Weights - Initilise to random values w1 = np.random.rand(2, 2) w2 = np.random.rand(2, 1) # Hidden layer h1 = np.matmul(x, w1) # Output layer y = np.matmul(h1, w2)"},{"instruction":"Develop a function in Python which takes two inputs and returns the greatest common divisor of those two numbers. 12, 24","output":"def greatest_common_divisor(a, b): if a < b: a, b = b, a while b > 0: a, b = b, a % b return a result = greatest_common_divisor(12, 24) print(result)"},{"instruction":"Using any programming language of your choice, write a calculator program that takes in two integers and returns the result of the addition operation. 7, 9","output":"// Java public int Add(int a, int b) { return a + b; } // Python def add(a, b): return a + b"},{"instruction":"Write a Python program to find the largest palindrome number less than 4400. Not applicable","output":"max_palindrome = 0 for i in range(4400, 0, -1): if str(i) == str(i)[::-1]: max_palindrome = i break print(max_palindrome) # Output: 4331"},{"instruction":"Write a Python function that takes an array of integers as input and computes the average of the elements. array = [1, 2, 3, 4]","output":"def compute_average(arr): sum = 0 for i in arr: sum += i return sum / len(arr) arr = [1, 2, 3, 4] avg = compute_average(arr) print(\\"Average of array elements is:\\", avg)"},{"instruction":"Create a script in Python to select topn most frequent words from a list of words. words.txt (plaintext file; each line containing a word)","output":"import collections # Load Data with open('words.txt', 'r') as file: words = [line.strip() for line in file.readlines()] # Count the frequency of each word in the list frequency = collections.Counter(words) # Select the top n most frequent words n = 10 top_words = frequency.most_common(n) # Output print('The ' + str(n) + ' most frequent words are:') for word, count in top_words: print('t' + word + ' (' + str(count) + ')')"},{"instruction":"Create an optimization problem in Python to maximize a given linear objective function subject to two linear constraints. Not applicable","output":"# Importing packages import scipy.optimize as opt # Objective function z = lambda x, y: 5*x + 6*y # Defining constraints c1 = lambda x, y: 22 - x - y c2 = lambda x, y: 15 - 2*x - 4*y # Bounds bnds = ((0, None), (0, None)) # Constraints con1 = {'type': 'ineq', 'fun': c1} con2 = {'type': 'ineq', 'fun': c2} cons = [con1, con2] #Optimization sol = opt.minimize(z, (0, 0), bounds = bnds, constraints = cons) print(sol)"},{"instruction":"mplement a class in Python called “Multiplier” with a constructor function that takes an argument “factor”. The class should have a method called “multiply” which takes a number as an argument and returns this multiplied by “factor”. factor = 5","output":"class Multiplier: def __init__(self, factor): self.factor = factor def multiply(self, num): return num * self.factor"},{"instruction":"Write a python program to calculate the maximum of 3d array and return the value. arr = [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]]","output":"def calc_max(arr): max_val = arr[0][0][0] for i in range(len(arr)): for j in range(len(arr[i])): for k in range(len(arr[i][j])): if arr[i][j][k] > max_val: max_val = arr[i][j][k] return max_val print(calc_max(arr))"},{"instruction":"Create a Python program to accept two values from the user and calculate the greatest common divisor. val1 = 4 val2 = 12","output":"# Function for calculating the # greatest common divisor def gcd(a, b): if (a == 0): return b return gcd(b%a, a) # Take input from the user val1 = int(input(\\"Enter the first value: \\")) val2 = int(input(\\"Enter the second value: \\")) # Calculate the gcd result = gcd(val1, val2) print(\\"The GCD of\\",val1,\\"and\\",val2,\\"is\\",result)"},{"instruction":"Generate a Python script that classifies dogs into breed classes.","output":"import cv2 # Classifies a given image into one of the breed classes def classify(image): # Retrieve the breed classes from the database breeds = get_breeds() closest_distance = float('inf') closest_breed = None # Create a feature descriptor for the image feature_descriptor = cv2.xfeatures2d.SIFT_create() (keypoints, descriptors) = feature_descriptor.detectAndCompute(image, None) # For each breed in the database for breed in breeds: # Compute the Euclidean distance between the descriptors distance = 0 for i in range(len(descriptors)): distance += np.linalg.norm(descriptors[i] - breed[i]) # If it is smaller than the current distance, set it as the new closest distance if distance < closest_distance: closest_distance = distance closest_breed = breed # Return the closest breed return closest_breed"},{"instruction":"Create an AI model in Python that can classify text into 3 classes: positive, negative or neutral. <example data> I had a great experience The customer support was horrible It was ok","output":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # Create labels data = [\\"I had a great experience\\", \\"The customer support was horrible\\", \\"It was ok\\"] labels = [1, 0, 2] # Fit the Vectorizer vectorizer = CountVectorizer() counts = vectorizer.fit_transform(data) # Train the classifier classifier = MultinomialNB() targets = labels classifier.fit(counts, targets) # Make predictions examples = [\\"I had a great time\\", \\"Their customer service was so bad\\"] example_counts = vectorizer.transform(examples) predictions = classifier.predict(example_counts) # Print predictions print(predictions) # Output: [1, 0]"},{"instruction":"Design and build a binary tree structure and associated functions in Python to insert and search elements.","output":"# Node class class Node: def __init__(self, data): self.data = data self.left = None self.right = None # Binary Tree class class BinaryTree: def __init__(self): self.root = None def insert(self, data): # Instantiate new Node new_node = Node(data) # Set the root node to the new node if the tree is empty if self.root == None: self.root = new_node else: # Create a current node pointer current_node = self.root while True: # If current node's data is greater than data to be inserted if current_node.data > data: # Check if left node is empty if current_node.left == None: # If left node is empty, insert the data and break loop current_node.left = new_node break else: # If left node is occupied, move left node to current node and loop current_node = current_node.left # If current node's data is lesser than data to be inserted else: # Check if right node is empty if current_node.right == None: # If right node is empty, insert the data and break loop current_node.right = new_node break else: # If right node is occupied, move right node to current node and loop current_node = current_node.right def search(self, data): current_node = self.root while current_node: if current_node.data == data: return True elif current_node.data > data: current_node = current_node.left else: current_node = current_node.right return False if __name__ == '__main__': tree = BinaryTree() tree.insert(5) tree.insert(1) tree.insert(0) tree.insert(4) tree.insert(2) tree.insert(3) tree.insert(6) tree.insert(7) result = tree.search(3) print(result)"},{"instruction":"Create a Python program that takes in two strings, and find out all the characters that occur in both strings. s1 = elephant s2 = phantasm","output":"s1 = set([i for i in s1]) s2 = set([i for i in s2]) common = list(s1.intersection(s2)) print(\\"The following characters occur in both the words: \\" + ', '.join(common))"},{"instruction":"Generate a Python program which will classify a given set of words into two groups: nouns and verbs.","output":"\\"\\"\\" Generate a Python program which will classify a given set of words into two groups: nouns and verbs. \\"\\"\\" import nltk def classify_words(words): # initialize empty dictionaries nouns = {} verbs = {} # extract parts-of-speech for word in words: pos = nltk.pos_tag([word])[0][1] # add to nouns or verbs if pos.startswith('N'): nouns[word] = pos elif pos.startswith('V'): verbs[word] = pos return nouns,verbs if __name__ == '__main__': words = ['apple', 'walk', 'write', 'run'] nouns, verbs = classify_words(words) print('Nouns:', nouns) print('Verbs:', verbs)"},{"instruction":"Create a program in Python to find the total number of words in a text This is a sample tex","output":"def word_total(text): words = text.split(\\" \\") word_count = len(words) return word_count"},{"instruction":"Create a function in Python that takes a sorted list of random integers and returns only the unique values in the list (no duplicates). Not applicable","output":"def get_unique_values(list_of_integers): unique_values = [] for value in list_of_integers: if value not in unique_values: unique_values.append(value) return unique_values # Testing list_integers = [2, 3, 4, 4, 5, 6, 7, 7, 8, 8] print(get_unique_values(list_integers)) # [2, 3, 4, 5, 6, 7, 8]"},{"instruction":"Generate a json response from a python method that takes two parameters and returns a dictionary of keyvalue mappings. param1 = 'key1' param2 = 'value1'","output":"def generate_response(param1, param2): # dictionary of key-value mappings key_value_mappings = { param1: param2 } # create json response json_response = json.dumps(key_value_mappings) return json_response"},{"instruction":"Generate a python class 'Employee' with properties 'name' and 'salary'.","output":"class Employee: def __init__(self, name, salary): self.name = name self.salary = salary def get_name(self): return self.name def get_salary(self): return self.salary"},{"instruction":"Create a Python function to sort the words in a sentence. Sentence = I love coding","output":"def sort_words(sentence): words = sentence.split(\\" \\") words.sort() return ' '.join(words) sentence = \\"I love coding\\" sortedSentence = sort_words(sentence) print(sortedSentence) // Outputs 'I coding love'"},{"instruction":"Create a game using only Python code. Not applicable","output":"import random import time def game_loop(): game_running = True display_intro() while game_running: user_input = input(\\" What action do you choose? \\") if user_input == \\"run\\": start_running() elif user_input == \\"look\\": enemy_random_number = random.randint(1, 10) if enemy_random_number > 3: print(\\"You see a monster!\\") continue_running = input(\\"Do you continue running or do you fight? \\") if continue_running == \\"run\\": start_running() elif continue_running == \\"fight\\": fight_monster() else: print(\\"Nothing to see here.\\") elif user_input == \\"quit\\": print(\\"You quitted the game.\\") game_running = False else: print(\\"Invalid input!\\") def display_intro(): print(\\"Welcome to the game!\\") print(\\"Type 'run' to start the game or 'quit' to quit the game.\\") def start_running(): print(\\"You started running.\\") time.sleep(3) print(\\"You encountered an obstacle.\\") obstacle_random_number = random.randint(1,10) if obstacle_random_number < 3: print(\\"You were successful in overcoming the obstacle.\\") print(\\"You continue running.\\") elif obstacle_random_number > 6: print(\\"You were unsuccessful in overcoming the obstacle.\\") print(\\"You got stuck and had to turn back.\\") else: print(\\"You were lucky and the obstacle disappeared.\\") print(\\"You continue running.\\") def fight_monster(): monster_random_number = random.randint(1,10) if monster_random_number < 5: print(\\"You won the fight!\\") elif monster_random_number > 6: print(\\"You lost the fight!\\") else: chance_random_number = random.randint(1,10) if chance_random_number < 5: print(\\"You managed to escape the fight!\\") else: print(\\"You failed to escape the fight and lost!\\") #Run game loop game_loop()"},{"instruction":"Develop an object recognition code in Python.","output":"import cv2 # Create the classifier classifier = cv2.CascadeClassifier(\\"haarcascade.xml\\") # Load the image img = cv2.imread(\\"image.jpg\\") # Detect objects in the image objects = classifier.detectMultiScale(img) # Loop through the objects and identify it for (x,y,w,h) in objects: cv2.rectangle(img,(x,y),(x+w,y+h), (255,0,0), 2) cv2.putText(img, \\"Object\\", (x,y-10), cv2.FONT_HERSHEY_PLAIN, 1, (0,255,0), 2) # Display the resulting frame cv2.imwrite(\\"result.jpg\\", img)"},{"instruction":"Write a Python program that sorts a list of integers from smallest to largest. [2,7,3,9,0,4]","output":"def sort_list(input_list): sorted_list = sorted(input_list) return sorted_list input_list = [2,7,3,9,0,4] output = sort_list(input_list) print(output)"},{"instruction":"Create an algorithm in Python to fill every element in a matrix with its own column number. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","output":"matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] for row_index, row in enumerate(matrix): for col_index, _ in enumerate(row): matrix[row_index][col_index] = col_index + 1 print(matrix)"},{"instruction":"Create a Python program that takes in an array and returns an array with each element multiplied by two. [2, 3, 4]","output":"def double_array_elements(arr): new_arr = [] for num in arr: new_arr.append(num * 2) return new_arr arr = [2, 3, 4] new_arr = double_array_elements(arr) print(new_arr) # [4, 6, 8]"},{"instruction":"Create a program in Python for a simple chatbot that can answer questions about the weather in the US. Sample customer inquiries about the weather: What is the weather like in Chicago today? What will the temperature be in San Francisco tomorrow? What is the forecast for the weekend in New York City?","output":"import requests def get_weather(city): url = 'http://api.openweathermap.org/data/2.5/weather?q={}&units=imperial&appid=c2e5d854b5f0820c9e02e76bc5ad7e9f'.format(city) r = requests.get(url) data = r.json() if data['cod'] != '404': temp = data['main']['temp'] desc = data['weather'][0]['description'] return 'The Temperature in {} is {}, {}'.format(city, temp, desc) else: return 'City not found!' while True: city = raw_input('Enter the name of a city: ') print(get_weather(city))"},{"instruction":"Design a REST API with Python and Flask for a ticket reservation system that allows customers to view available tickets, create reservations, and cancel reservations. Not applicable","output":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/tickets', methods=['GET']) def get_tickets(): # Get the list of available tickets tickets = get_available_tickets() return jsonify(tickets) @app.route('/tickets/<ticket_id>', methods=['POST']) def create_reservation(ticket_id): # Create a reservation for the specified ticket reservation = create_reservation(ticket_id) return jsonify(reservation) @app.route('/tickets/<ticket_id>', methods=['DELETE']) def cancel_reservation(ticket_id): # Cancel the specified reservation deleted = cancel_reservation(ticket_id) return jsonify(deleted) if __name__ == '__main__': app.run()"},{"instruction":"The code provided is a Python module that contains functions for loading and saving data from an HDF5 file to an SDF file format. The load function takes two arguments, the filename of the HDF5 file and the name of the object to load from the file. It returns an SDF group or dataset object depending on the type of object loaded from the HDF5 file. The save function takes two arguments, the filename of the SDF file to save to and the SDF group object to save. It converts the SDF group object and its child datasets to HDF5 format and saves them to the specified file.","output":"# Copyright (c) 2019 Dassault Systemes. All rights reserved. import h5py import sdf import numpy as np import os import sys def _to_python_str(s): \\"\\"\\" Convert to Python string \\"\\"\\" if isinstance(s, bytes): return s.decode('utf-8') else: return s def load(filename, objectname): with h5py.File(filename, 'r') as f: datasets = {} dsobj = f[objectname] class_name = dsobj.__class__.__name__ if class_name == 'Group': group = _create_group(dsobj, datasets) _restore_scales(datasets) return group elif class_name == 'Dataset': dataset = _create_dataset(dsobj, datasets) for ri in range(dsobj.ndim): if dsobj.dims[ri]: sobj = dsobj.dims[ri][0] s = _create_dataset(sobj, dict()) s.is_scale = True dataset.scales[ri] = s return dataset else: raise Exception('Unexpected object') def save(filename, group): with h5py.File(filename, 'w') as f: datasets = dict() _write_group(f, group, '/', datasets) # attach the scales for ds, h5ds in datasets.items(): for i, s in enumerate(ds.scales): if s is None: continue elif s in datasets: h5s = datasets[s] dimname = s._display_name if dimname is None: dimname = '' h5s.make_scale(_str(dimname)) h5ds.dims[i].attach_scale(h5s) else: print(\\"Cannot attach scale for '\\" + h5ds.name + \\"' because the referenced scale for dimension \\" + str(i) + \\" is not part of the file\\") def _create_group(gobj, datasets): \\"\\"\\" Create an sdf.Group from an h5py group \\"\\"\\" ds_obj_list = [] g_obj_list = [] group_attrs = {key: gobj.attrs[key] for key in gobj.attrs.keys() if key != 'COMMENT'} comment = gobj.attrs.get('COMMENT') for ds_name in gobj.keys(): # TODO: fix this? if isinstance(gobj[ds_name], h5py._hl.dataset.Dataset): ds_obj_list.append(gobj[ds_name]) elif isinstance(gobj[ds_name], h5py._hl.group.Group): g_obj_list.append(gobj[ds_name]) child_groups = [] for cgobj in g_obj_list: child_groups.append(_create_group(cgobj, datasets)) ds_list = [_create_dataset(dsobj, datasets) for dsobj in ds_obj_list] name = gobj.name.split('/')[-1] return sdf.Group(name=name, comment=comment, attributes=group_attrs, groups=child_groups, datasets=ds_list) def _create_dataset(dsobj, datasets): \\"\\"\\" Create a dataset from an h5py dataset \\"\\"\\" _, name = os.path.split(dsobj.name) ds = sdf.Dataset(name, data=dsobj[()]) for attr in dsobj.attrs: if attr == 'COMMENT': ds.comment = _to_python_str(dsobj.attrs[attr]) elif attr == 'NAME': ds.display_name = _to_python_str(dsobj.attrs[attr]) elif attr == 'RELATIVE_QUANTITY' and _to_python_str(dsobj.attrs[attr]) == 'TRUE': ds.relative_quantity = True elif attr == 'UNIT': ds.unit = _to_python_str(dsobj.attrs[attr]) elif attr == 'DISPLAY_UNIT': ds.display_unit = _to_python_str(dsobj.attrs[attr]) elif attr == 'CLASS' and _to_python_str(dsobj.attrs[attr]) == 'DIMENSION_SCALE': ds.is_scale = True elif attr == 'REFERENCE_LIST': ds.is_scale = True elif attr in ['REFERENCE_LIST', 'DIMENSION_LIST']: pass else: ds.attributes[attr] = _to_python_str(dsobj.attrs[attr]) ds.scales = [None] * ds.data.ndim datasets[dsobj] = ds return ds def _restore_scales(datasets): for dsobj, ds in datasets.items(): for i in range(ds.data.ndim): if dsobj.dims[i]: sobj = dsobj.dims[i][0] scale = datasets[sobj] scale.is_scale = True ds.scales[i] = scale pass def _str(s): \\"\\"\\" Convert to byte string \\"\\"\\" if sys.version_info.major >= 3 and isinstance(s, bytes): return s else: # convert the string to an fixed-length utf-8 byte string return np.string_(s.encode('utf-8')) def _write_group(f, g, path, datasets): if path == '/': gobj = f else: gobj = f.create_group(path) # iterate over the child groups for subgroup in g.groups: _write_group(f, subgroup, path + subgroup.name + '/', datasets) if g.comment is not None: gobj.attrs['COMMENT'] = _str(g.comment) for key, value in g.attributes.items(): gobj.attrs[key] = _str(value) # write the datasets for ds in g.datasets: _write_dataset(f, ds, path, datasets) def _write_dataset(f, ds, path, datasets): f[path + ds.name] = ds.data dsobj = f[path + ds.name] datasets[ds] = dsobj if ds.comment: dsobj.attrs['COMMENT'] = _str(ds.comment) if ds._display_name: dsobj.attrs['NAME'] = _str(ds.display_name) if ds.relative_quantity: dsobj.attrs['RELATIVE_QUANTITY'] = _str('TRUE') if ds.unit: dsobj.attrs['UNIT'] = _str(ds.unit) if ds.display_unit != ds.unit: dsobj.attrs['DISPLAY_UNIT'] = _str(ds.display_unit) if ds.is_scale: dimname = ds.display_name if dimname is None: dimname = '' h5py.h5ds.set_scale(dsobj.id, _str(dimname)) return dsobj"},{"instruction":"Create a Bitcoin wallet application using Python. This application should have endpoints for creating a wallet, sending coins to another wallet, and retrieving the balance of a wallet. Wallet address: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfN","output":"import hashlib import base58 class BitcoinWallet: def __init__(self): self.address = None self.public_key = None self.private_key = None self.balance = 0 def generate_keys(self): priv_key = hashlib.sha256(os.urandom(64)).hexdigest() public_key = hashlib.sha256(priv_key.encode('utf-8')).hexdigest() self.private_key = priv_key self.public_key = public_key self.address = self.generate_address() def generate_address(self): address = hashlib.new('ripemd160', self.public_key.encode('utf-8')).hexdigest() address_encoded = base58.b58encode_check(address) return address_encoded def send_coins(self, recipient, amount): ... def check_balance(self): ..."},{"instruction":"Design an algorithm in Python which takes a given 2D array and finds the product of the elements in each row. [[1, 2], [3, 4]]","output":"def rowProduct(arr): result = [] for row in arr: product = 1 for num in row: product = product * num result.append(product) return result arr = [[1, 2], [3, 4]] result = rowProduct(arr) print(result)"},{"instruction":"Write a Python script for automatically disabling a set of services in Windows. Services to be disabled: Windows Update, Windows Firewall Setup","output":"import win32com.client #provide list of services to be disabled disableservices = [\\"Windows Update\\",\\"Windows Firewall Setup\\"] #connect to windows services services = win32com.client.Dispatch(\\"WbemScripting.SWbemLocator\\").ConnectServer(\\".\\",\\"rootcimv2\\").ExecQuery(\\"Select * from Win32_Service\\") for service in services: #iterate over the list and deactivate the services if service.Name in disableservices: service.Stopservice() print(\\"Successfully disabled \\",service.Name)"},{"instruction":"Create a command line tool in Python. The tool should take a URL as an input and print out which links on the page are most frequently clicked. https://www.example.com/","output":"import bs4 import requests from collections import defaultdict url = 'https://www.example.com/' source = requests.get(url).text soup = bs4.BeautifulSoup(source, 'lxml') links_clicks = defaultdict(int) for link in soup.find_all('a'): href = link.get('href') links_clicks[href] += 1 sort_clicks = sorted(links_clicks.items(), key=lambda x: x[1], reverse=True) for link, clicks in sort_clicks: print(f'{link} clicks: {clicks}')"},{"instruction":"This code audits a user table and compares the current date to the last password update. If the last update exceeds the threshold, it sends a notice to the users. To use this code, define the imported libraries, turn the mail function on or off, define today and lookback day, define msg as multipart, application, and message to be sent to listed users, connect to the MySQL database, query the user table, format the data so it is in readable columns, send an email to the users displayed, close the database connection, and print the done message.","output":"#!/usr/bin/python2.7 -Wd ''' file:user_audit.py use: audits users table and compares current date to last password update if last update exceeds threshold send a notice to users author: ty.talmadge@gmail.com date: 20131002 connector: mysqldb because the SQL only changes per table layout ''' # define imported libraries import datetime,MySQLdb,smtplib # import mimetext if you want to include a copy of the password update policy from email.mime.text import MIMEText # turn mail function off and on # 0 is off 1 is on mail_on=0 # define today and lookback day lookback_days=90 today_day=datetime.datetime.today() today_holdout=datetime.date.today() day_format=\\"%Y-%m-%d\\" hour_format=\\"%H:%M:%S\\" this_day=today_day.strftime(day_format) this_hour=today_day.strftime(hour_format) today=\\"%s %s\\" % (this_day,this_hour) lookback=datetime.timedelta(days=lookback_days) holdout=today_holdout-lookback threshhold_d=\\"%s %s\\" % (holdout,this_hour) threshhold=str(threshhold_d) # define msg as multipart, application and message to be sent to listed users audit_file=\\"/path/to/audit_message.txt\\" ap=open(audit_file, 'rb') msg=MIMEText(ap.read()) ap.close() me='application_name@mycompany.com' application_name='Your_Application' #connect to mysql database audit_db = MySQLdb.connect(host=\\"localhost\\",user=\\"some_user\\",passwd=\\"some_password\\",db=\\"some_db_schema\\") # create cursor object cursor = audit_db.cursor() # query user table cursor.execute(\\"select name,full_name,password_created,email from users where password_created < '%s' order by name asc\\" % threshhold) print \\"Auditing users starting %s and looking back %s days to %s.n\\" % (today,lookback_days,threshhold) print \\"The following users have not updated their passwords in the last %s days.n \\" % lookback_days # echo results if running in a scheduler, i.e. Control-M, Open-Scheduler, etc. so they will appear in sysout # format the data so it is in readable columns for row in cursor.fetchall(): pw_format=str(row[2]) if mail_on == '0': # send an email to the users displayed msg['Subject']='Password update reminder from %s' % application_name msg['From']=me msg['To']=row[3] sendme=smtplib.SMTP('mail_server') sendme=sendmail(me,[row[3]], msg.as_string()) sendme.quit() else: print row[0].ljust(30), \\" \\", row[1].ljust(30), \\" \\",pw_format.ljust(30), \\" \\", row[3].ljust(30) # close the database connection audit_db.close() # print the done message print \\"nFinished auditing user table.n\\""},{"instruction":"Write a Python code for extracting numbers from a given text.","output":"import re def extract_numbers(input_string): \\"\\"\\"This function extracts numbers from a given textstring using regular expressions.\\"\\"\\" # Compile the regular expression pattern = re.compile(r'd+') # Find all numbers in the string output_list = pattern.findall(input_string) return output_list # Sample Input input_string = 'I have 2 cats and 3 dogs' # Print the output print(extract_numbers(input_string))"},{"instruction":"Write a Python program which prints the index of the given value in a list. my_list = [2, 4, 6, 8] value = 4","output":"def find_index(my_list, value): for i in range(len(my_list)): if my_list[i] == value: return i"},{"instruction":"Generate a code snippet to convert a string to an integer in Python. str = 145","output":"num = int(str) print(num) # Prints 145"},{"instruction":"Write a python program to calculate the Mean Squared Error (MSE) loss between the predicted output and the actual output. Actual Output: [1, 2, 3, 4, 5] Predicted Output: [2, 3, 4, 5, 6]","output":"mse_loss = ((1-2)**2 + (2-3)**2 + (3-4)**2 + (4-5)**2 + (5-6)**2)/5 print(mse_loss) # Output: 1.2"},{"instruction":"Design a function in Python that takes a list of numbers as a parameter and returns the largest number in the list.","output":"def getLargestNum(nums): largestNum = nums[0] for num in nums[1:]: if num > largestNum: largestNum = num return largestNum"},{"instruction":"Create a function in Python that takes two strings as parameters and returns true if one string is the reverse of the other.","output":"def is_reverse(string1, string2): return string1[::-1] == string2"},{"instruction":"Write a Python program to find out the number of days in a given year between two dates. Date 1: 04/10/2019 Date 2: 10/11/2020","output":"\\"\\"\\" Write a Python program to find out the number of days in a given year between two dates \\"\\"\\" import datetime def find_days(date1, date2): date1 = datetime.datetime.strptime(date1, \\"%d/%m/%Y\\") date2 = datetime.datetime.strptime(date2, \\"%d/%m/%Y\\") delta = date2 - date1 return delta.days if __name__ == '__main__': date1 = '04/10/2019' date2 = '10/11/2020' result = find_days(date1, date2) print(result)"},{"instruction":"Develop a code in Python to compare two lists and remove the common elements list1 = [10, 15, 20, 25, 30, 35, 40] list2 = [25, 40, 35]","output":"list1 = [10, 15, 20, 25, 30, 35, 40] list2 = [25, 40, 35] def remove_common_elements(list1, list2): list1_unique = [] for i in list1: if i not in list2: list1_unique.append(i) return list1_unique print(remove_common_elements(list1, list2))"},{"instruction":"Create a python class called Student that can store students' information, such as name, gender, and age.","output":"class Student(): def __init__(self, name, gender, age): self.name = name self.gender = gender self.age = age def get_name(self): return self.name def get_gender(self): return self.gender def get_age(self): return self.age"},{"instruction":"Compose a Python program to generate a list of numbers from 1 to 50.","output":"number_list = [i for i in range(1, 51)] print(number_list)"},{"instruction":"Create a simple program in Python that prints out the first n fibonacci numbers.","output":"def fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return fibonacci(n-1)+fibonacci(n-2) # Driver Program nterms = 4 for i in range(nterms): print(fibonacci(i))"},{"instruction":"Write a function in Python to identify all the keywords present in a given sentence. Sentence: I like to eat apple","output":"def find_keywords(sentence): keywords = set() words = sentence.split(' ') for word in words: if word.iskeyword(): keywords.add(word) return list(keywords)"},{"instruction":"Design a program in Python to filter a given array of integers and output only the even numbers. arr = [2, 7, 3, 4, 8, 9, 10]","output":"def filterEvenNo(arr): # return a list containing only even numbers return [num for num in arr if num % 2 == 0]"},{"instruction":"Write a Python program for optimizing a web page for speed. The program should use the PageSpeed Insights API to identify page resource optimization opportunities. Not applicable","output":"import requests import json API_KEY = \\"YOUR_API_KEY\\" def get_website_score(website): url = f'https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url={website}&key={API_KEY}&strategy=mobile' response = requests.get(url) if response.status_code == 200: ps_data = json.loads(response.content.decode('utf-8')) return ps_data['lighthouseResult']['categories']['performance']['score']*100 else: return 'unable to get website score'"},{"instruction":"Create an algorithm in Python that takes a string as an input and returns all its anagrams in alphabetical order. word","output":"def getAnagrams(word): alphabet = list(word) anagrams = [] def getPermutations(alphabet): if len(alphabet) == 0: anagrams.append(''.join(permutation)) return for i in range(len(alphabet)): character = alphabet[i] permutation.append(character) getPermutations(alphabet[:i] + alphabet[i+1:]) permutation.pop() permutation = [] getPermutations(alphabet) return sorted(anagrams) print(getAnagrams('word'))"},{"instruction":"Write a web scraper in Python to fetch the title, rating and synopsis of the first 10 movies from IMDB","output":"import requests from bs4 import BeautifulSoup url = \\"https://www.imdb.com/chart/top\\" response = requests.get(url) soup = BeautifulSoup(response.text, \\"html.parser\\") for movie in soup.find_all(\\"td\\", class_=\\"titleColumn\\"): title = movie.find(\\"a\\").text rating = float(movie.find(\\"strong\\").text) synopsis = movie.find(\\"span\\", class_=\\"outline\\").text print(\\"Title: {}nRating: {}nSynopsis: {}n\\".format(title, rating, synopsis))"},{"instruction":"Create a Python function to calculate the cost of a pizza. The function should take in the size of the pizza in inches and return the total cost. Size (in inches): 14","output":"def pizzaCost(size): cost = 0 if size == 14: cost = 10.00 elif size == 16: cost = 12.50 elif size == 18: cost = 15.00 else: cost = \\"Unknown size\\" return cost print(pizzaCost(14)) // Output: 10.00"},{"instruction":"Create a program in Python using pygame library to build a simple game","output":"import pygame # Define some colors BLACK = (0, 0, 0) WHITE = (255, 255, 255) # Call this function so the Pygame library can initialize itself pygame.init() # Create an 800x600 sized screen screen = pygame.display.set_mode([800, 600]) # Set the title of the window pygame.display.set_caption('My Game') clock = pygame.time.Clock() # Set positions of graphics background_position = [0, 0] # Load and set up graphics. background_image = pygame.image.load(\\"image.jpg\\").convert() # Set positions of graphics player_image = pygame.image.load(\\"player.jpg\\").convert() player_position = [100,100] #Iterate through the loop until the user clicks the close button. done = False while not done: # --- Event Processing for event in pygame.event.get(): if event.type == pygame.QUIT: done = True # --- Drawing Code # First, clear the screen to white. screen.fill(WHITE) #Draw the background screen.blit(background_image, background_position) #Draw the character screen.blit(player_image, player_position) # Go ahead and update the screen with what we've drawn. pygame.display.flip() # Limit frames per second clock.tick(60) # Be IDLE friendly pygame.quit()"},{"instruction":"Create a Python program that takes a string input and for each line prints the length of the line, the longest/shortest word in the line, and the average word length. The quick brown fox jumps over the lazy dog.","output":"# take input as a string text = 'The quick brown fox jumps over the lazy dog.' # loop through lines for line in text.splitlines(): # get line stats line_length = len(line) words = line.split() longest_word_length = len(max(words)) shortest_word_length = len(min(words)) average_word_length = line_length / len(words) # print line stats print(\\"Line length:\\", line_length) print(\\"Longest word length:\\", longest_word_length) print(\\"Shortest word length:\\", shortest_word_length) print(\\"Average word length:\\", average_word_length) print()"},{"instruction":"Create a web service in Python that provides a list of prime numbers given a range. Lower Limit: 2 Upper Limit: 11","output":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/prime_numbers', methods=['GET']) def prime_numbers(): lower_limit = request.args.get('lower_limit') upper_limit = request.args.get('upper_limit') prime_nums = [] for num in range(int(lower_limit), int(upper_limit)+1): if num > 1: for i in range(2,num): if (num % i) == 0: break else: prime_nums.append(num) return jsonify(prime_nums) if __name__ == '__main__': app.run()"},{"instruction":"Generate a Python program to compare two strings.","output":"def compare_strings(str1, str2): if len(str1) == len(str2): for char in str1: if not char in str2: return False return True else: return False str1 = \\"foo\\" str2 = \\"bar\\" print(compare_strings(str1, str2))"},{"instruction":"Construct a program in Python to find all the possible substrings of a given string.","output":"def find_substrings(string): # Create an empty list to store all the possible substrings substrings = [] # Iterate through each character of the string for i in range(len(string)): for j in range(i, len(string)): substrings.append(string[i: j + 1]) return substrings"},{"instruction":"This code is a Python program that scrapes the ESPN FC website for content. To run the program, you need to import the necessary libraries, set the output path for Windows or Mac environments, and define the team URLs. The program will then parse the team news for each team URL and output the results to a text file. To download images, use the downloadImage function.","output":"# -*- coding: utf-8 -*- ''' Created on Jan 30, 2015 Modified on Jan 30, 2015 @author: rainier.madruga@gmail.com A simple Python Program to scrape the ESPN FC website for content. ''' ''' Version Number of Script ''' version = '0.01.a' # Import Libraries needed for Scraping the various web pages from bs4 import BeautifulSoup import urllib2 import datetime import requests import os import platform import sys reload(sys) sys.setdefaultencoding('utf-8') # Establish the process Date & Time Stamp ts = datetime.datetime.now().strftime(\\"%H:%M:%S\\") ds = datetime.datetime.now().strftime(\\"%Y-%m-%d\\") date = datetime.datetime.now().strftime(\\"%Y%m%d\\") # Updates the Time Stamp def updateTS(): update = datetime.datetime.now().strftime(\\"%H:%M:%S\\") return update # Download Image def downloadImage(imageURL, localFileName): response = requests.get(imageURL) if response.status_code == 200: print 'Downloading %s...' % (localFileName) with open(localFileName, 'wb') as fo: for chunk in response.iter_content(4096): fo.write(chunk) return True # Program Version & System Variables parseVersion = 'ESPN Premier League Team News ' + version print ds + ' :: ' + ts + ' :: ' + parseVersion # Set Output Path for Windows or Mac environments os_System = platform.system() win_BasePath = \\"C:/Users/Rainier/Documents/GitHub/python-soccer\\" if os_System == \\"Windows\\": outputPath = win_BasePath + \\"/PL-Data/\\" outputImgPath = win_BasePath + \\"/PL-Data/imgs/\\" outputTeamPath = win_BasePath + \\"/PL-Data/teams/\\" outputMatchPath = win_BasePath + \\"/PL-Data/match/\\" else: outputPath = 'PL-Data/' outputImgPath = 'PL-Data/imgs/' outputTeamPath = 'PL-Data/teams/' outputMatchPath = 'PL-Data/match/' hr = \\" >>> *** ====================================================== *** <<<\\" shr = \\" >>> *** ==================== *** <<<\\" prefixBBC = \\"http://www.bbc.com\\" prefixESPN = \\"http://www.espnfc.us\\" teamURLs = ['/club/arsenal/359/index','/club/aston-villa/362/index','/club/burnley/379/index','/club/chelsea/363/index','/club/crystal-palace/384/index','/club/everton/368/index','/club/hull-city/306/index','/club/leicester-city/375/index','/club/liverpool/364/index','/club/manchester-city/382/index','/club/manchester-united/360/index','/club/newcastle-united/361/index','/club/queens-park-rangers/334/index','/club/southampton/376/index','/club/stoke-city/336/index','/club/sunderland/366/index','/club/swansea-city/318/index','/club/tottenham-hotspur/367/index','/club/west-bromwich-albion/383/index','/club/west-ham-united/371/index'] def teamNews(x): teamURL = x teamName = x teamName = teamName[6:len(teamName)-10] teamURL = prefixESPN + teamURL teamHTML = urllib2.urlopen(teamURL) teamSoup = BeautifulSoup(teamHTML) recentNews = teamSoup.find(\\"div\\", {\\"id\\":\\"feed\\"}) recentNewsItems = recentNews.find_all(\\"div\\", {\\"class\\":\\"feed-item-content\\"}) recapOutput = [] print \\"Team News Parsed :: \\" + teamName for i in recentNewsItems: recapPhotoItem = i.find(\\"div\\", {\\"class\\":\\"thumbnail picture\\"}) if len(i) > 3: # recapPhotoItem = recapPhotoItem.find(\\"img\\") # print recapPhotoItem[\\"src\\"] # with open(outputTxt, \\"a\\") as f: # f.write('n' + shr + 'n') # f.write(i.prettify()) # f.write('n' + shr + 'n') # f.close() # print shr recapHeadline = i.find(\\"h2\\") recapHeadlineDetails = recapHeadline.find(\\"a\\") recapHeadlineDetails = recapHeadlineDetails[\\"href\\"] recapHeadline = recapHeadline.get_text(strip=True) recapAge = i.find(\\"span\\", {\\"class\\":\\"age\\"}) recapAge = recapAge.get_text(strip=True) recapOutput.append(date + \\"|\\" + teamName + \\"|\\" + recapHeadline + \\"|\\" + recapHeadlineDetails + \\"|\\" + recapAge) #print shr # print i.prettify() #print recapHeadlineDetails #print shr #recapDetails = recapHeadline.find(\\"a\\") #recapDetails = recapDetails[\\"href\\"] #print recapDetails # print recapAge.get_text(strip=True) #print updateTS() #print shr # print i else: #print i #print shr recapGameOpponents = i.find_all(\\"div\\", {\\"class\\":\\"team-name\\"}) recapGameScore = i.find_all(\\"div\\", {\\"class\\":\\"team-score\\"}) recapGameStatus = i.find(\\"div\\", {\\"class\\":\\"game-info\\"}) recapGameHome = recapGameOpponents[0].get_text(strip=True) recapGameAway = recapGameOpponents[1].get_text(strip=True) recapHomeScore = recapGameScore[0].get_text(strip=True) recapAwayScore = recapGameScore[1].get_text(strip=True) #recapGameInfo = i.find(\\"div\\", {\\"clas=\\":\\"game-info\\"}) recapOutput.append(date + \\"|\\" + teamName + \\"|\\" + recapGameHome + \\" \\" + recapHomeScore + \\" v. \\" + recapAwayScore + \\" \\"+ recapGameAway + \\"||\\") # print i for i in recapOutput: print i print hr return recapOutput teamNewstxt = 'teamNews.txt' with open(teamNewstxt, \\"w\\") as f: f.write(ds + \\" :: \\" + updateTS() + \\" :: \\" + parseVersion + 'n' ) f.close() for i in teamURLs: for x in teamNews(i): with open(teamNewstxt, \\"a\\") as f: f.write(x + 'n') f.close()"},{"instruction":"Convert the given code from JS to Python. let add = (a, b) => { return a + b; }","output":"def add(a, b): return a + b"},{"instruction":"Create an AI chatbot in Python to answer simple user questions about a specific topic.","output":"# import libraries import random import nltk from nltk.corpus import wordnet # define a function to find the synonym of a given word def get_synonym(word): synonyms = set() for syn in wordnet.synsets(word): for l in syn.lemmas(): synonyms.add(l.name()) if word in synonyms: synonyms.remove(word) return list(synonyms) # define a function to generate a response def bot_response(question): responses = [\\"I'm not sure I understand, could you rephrase the question?\\", \\"I don't have enough information to answer that question, can you give me more data?\\", \\"I'm not sure I can help you with that.\\", \\"Can you rephrase the question?\\", \\"What would you like to know?\\"] # tokenize the sentence tokens = nltk.word_tokenize(question) # look for a synonym of each word synonyms_list = [] for word in tokens: synonyms_list.append(get_synonym(word)) # generate a response with synonyms of each word response_tokens = [] for synonyms in synonyms_list: if len(synonyms) > 0: response_tokens.append(random.choice(synonyms)) else: response_tokens.append(word) response = ' '.join(response_tokens) # if not, randomly select one of the predefined responses if not response: response = random.choice(responses) return response"},{"instruction":"Write Python code to implement a class like this. class Employee: def __init__(self, name, age): self.name = name self.age = age","output":"class Employee: def __init__(self, name, age): self.name = name self.age = age def __str__(self): return \\"Employee({0}, {1})\\".format(self.name,self.age) emp = Employee(\\"John\\", 24) print(emp)"},{"instruction":"Generate a program in Python to take the inputted text content and modify it into a valid Python program content = print('hello world')","output":"def parse_to_python(content): ''' This function takes a text content and modifies it into a valid Python program. Parameters ---------- content : str Text content to be modified Returns ------- Str Modified content as a Python program. ''' # Create a python program from content content_list = content.split(\\"'\\") content_list[0] = content_list[0] + \\"\\"\\" content_list[-1] = \\"\\"\\" + content_list[-1] content = \\"\\".join(content_list) content = \\"import sysnif __name__ == \\"__main__\\":ntsys.stdout.write(\\" + content + \\")\\" # Return modified content as python program return content"},{"instruction":"Generate a Python program which reads a string as input and removes all vowels present in the string and print out the revised string. apple","output":"def removeVowels(string): vowels = ('a', 'e', 'i', 'o', 'u') revised_string = \\"\\" for letter in string: if letter.lower() not in vowels: revised_string += letter return revised_string string = \\"apple\\" reviseString = removeVowels(string) print(\\"Revised string =\\", reviseString)"},{"instruction":"Write a Python program to add two matrices of different sizes. matrix1 = [[1, 2], [3, 4]] matrix2 = [[5, 6, 7], [8, 9, 10], [1, 4, 6]]","output":"def add_matrix(m1, m2): row1 = len(m1) col1 = len(m1[0]) row2 = len(m2) col2 = len(m2[0]) row = min(row1, row2) col = min(col1, col2) # result stores the addition of the two matrices result = [[0 for j in range(col)] for i in range(row)] for i in range(row): for j in range(col): result[i][j] = m1[i][j] + m2[i][j] return result m1 = [[1,2], [3,4]] m2 = [[5,6,7], [8,9,10], [1,4,6]] result = add_matrix(m1, m2) print(result)"},{"instruction":"Design an algorithm in Python to check if an integer is even or odd. n = 5","output":"def check_number(n): if n%2==0: return \\"Even\\" else: return \\"Odd\\" check_number(5) # Output: Odd"},{"instruction":"Generate a list comprehension of python that adds two to each element of a given list. list = [1, 2, 3, 4]","output":"list = [x+2 for x in [1, 2, 3, 4]]"},{"instruction":"Generate a Python program which returns the most recognized word in a given list of strings. [Hello, Hi, Greeting]","output":"def most_recognized(strings): max_string = \\"\\" max_count = 0 for string in strings: count = len(string.split()) if count > max_count: max_string = string max_count = count return max_string strings = [\\"Hello\\", \\"Hi\\", \\"Greeting\\"] most_recognized_word = most_recognized(strings) print(f\\"Most recognized word: {most_recognized_word}\\")"},{"instruction":"Create a Python program that uses a pretrained machine learning model to classify text. Not applicable","output":"import numpy as np import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.preprocessing import LabelEncoder from sklearn.svm import LinearSVC # Create training and test sets data = pd.read_csv('data.csv', sep=',') X_train, X_test, y_train, y_test = train_test_split(data['text'], data['label']) # Create vocab features vectorizer = CountVectorizer(stop_words=\\"english\\") vectorizer.fit(X_train) X_train_vector = vectorizer.transform(X_train) X_test_vector = vectorizer.transform(X_test) # Train the model model = LinearSVC() model.fit(X_train_vector, y_train) # Make predictions on the test set y_pred = model.predict(X_test_vector) # Evaluate the model accuracy = accuracy_score(y_test, y_pred) print(\\"Model accuracy: {}\\".format(accuracy))"},{"instruction":"Create a function in Python which takes in a number n and returns Fizz if the number is divisible by 3, Buzz if the number is divisible by 5, and FizzBuzz if the number is divisible by both 3 and 5. Number: 15","output":"def fizzbuzz(n): if n % 3 == 0 and n % 5 == 0: return 'FizzBuzz' elif n % 3 == 0: return 'Fizz' elif n % 5 == 0: return 'Buzz' else: return n"},{"instruction":"Develop a program in Python to calculate the areas of different shapes. Not applicable","output":"def calculate_area(shape): \\"\\"\\" Calculates the area of the given shape. Parameters ---------- shape: string The name of the shape to calculate the area for Returns ------- float The area of the given shape \\"\\"\\" if shape == \\"rectangle\\": length = float(input(\\"Enter the length of the rectangle: \\")) width = float(input(\\"Enter the width of the rectangle: \\")) area = length * width return area elif shape == \\"triangle\\": base = float(input(\\"Enter the base of the triangle: \\")) height = float(input(\\"Enter the height of the triangle: \\")) area = (base * height) / 2 return area elif shape == \\"circle\\": radius = float(input(\\"Enter the radius of the circle: \\")) area = 3.14159265358979 * (radius * radius) return area else: return \\"This shape is not supported\\""},{"instruction":"Develop a basic web scraper in Python to scrape the text of Wikipedia articles. A URL of any Wikipedia page, for example, https://en.wikipedia.org/wiki/Google.","output":"import requests from bs4 import BeautifulSoup # Make an HTTP GET request to the Wikipedia page url = \\"https://en.wikipedia.org/wiki/Google\\" response = requests.get(url) # Parse the response HTML soup = BeautifulSoup(response.text, \\"html.parser\\") # Extract the raw content of the Wikipedia page content = soup.find(\\"div\\", {\\"id\\": \\"mw-content-text\\"}).text print(content)"},{"instruction":"Develop a python program for predicting house prices. The input dataset contains a collection of 248 house prices from a neighborhood in the United States. Each house price is associated with 6 different attributes.","output":"import pandas as pd # Load the input dataset data = pd.read_csv(\\"data.csv\\") # Split into X and y X = data.iloc[:,0:6] y = data.iloc[:,6] # Build the model from sklearn.linear_model import LinearRegression model = LinearRegression() model.fit(X,y) # Make predictions predictions = model.predict(X)"},{"instruction":"Write a Python program to find the maximum length of consecutive 1s in a binary array. Array = [1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0]","output":"def find_max_consecutive_1s(Array): max_count = 0 count = 0 for i in Array: if i == 1: count += 1 max_count = max(max_count, count) else: count = 0 return max_count"},{"instruction":"Create a Python program that takes an address as an input and returns the latitude and longitude of the address. 2100 Pennsylvania Ave NW Washington D.C. 20006","output":"import requests def get_coordinates(address): api_key = \\"insert your API key here\\" url = \\"https://maps.googleapis.com/maps/api/geocode/json?address=\\" + address + \\"&key=\\" + api_key response = requests.get(url) result = response.json() if result['status'] == 'OK': latitude = result['results'][0]['geometry']['location']['lat'] longitude = result['results'][0]['geometry']['location']['lng'] return latitude, longitude"},{"instruction":"Write a function in Python which takes one string as input and checks if the string starts with a vowel. String abc","output":"def start_vowel(input_string): vowel_list = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\"] if input_string[0] in vowel_list: print(\\"String starts with a vowel\\") else: print(\\"String does not start with a vowel\\") start_vowel(\\"abc\\")"},{"instruction":"Write a function to tokenize a sentence using NLTK library in Python. Not applicable","output":"# Solution # First, let's import NLTK library import nltk # Define our sentence to tokenize sentence = 'This is a test sentence.' # Tokenize the sentence tokenized_sentence = nltk.word_tokenize(sentence) # Print out the result print(tokenized_sentence)"},{"instruction":"Write a Python program to remove the vowels from a given sentence. A beautiful sun rises in the morning.","output":"def removeVowels(my_string): vowels = 'aeiouAEIOU' no_vowels = \\"\\" for char in my_string: if char not in vowels: no_vowels += char return no_vowels sentence = \\"A beautiful sun rises in the morning.\\" print(removeVowels(sentence)) Output: A btfll sn rs s n th mrnn."},{"instruction":"Write a Python script to remove all leading and trailing whitespace from all string data in a list of dictionaries. data = [{'name': 'John Doe ', 'age': 34}, {'name': 'Tim Smith ', 'age': 14}]","output":"def strip_whitespace_from_data(data): for i in range(len(data)): for key, value in data[i].items(): if isinstance(value, str): data[i][key] = value.strip() return data data = [{'name': 'John Doe ', 'age': 34}, {'name': 'Tim Smith ', 'age': 14}] data = strip_whitespace_from_data(data) print(data)"},{"instruction":"Create a sentiment analysis program in Python which predicts whether the sentiment of a given sentence is positive or negative. Not applicable","output":"#importing libraries import pandas as pd import numpy as np from nltk.tokenize import word_tokenize from nltk import pos_tag from nltk.corpus import stopwords from nltk.stem import WordNetLemmatizer from sklearn.preprocessing import LabelEncoder from collections import defaultdict from nltk.corpus import wordnet as wn from sklearn.feature_extraction.text import TfidfVectorizer from sklearn import model_selection , naive_bayes , svm from sklearn.metrics import accuracy_score # Define function to tag parts of speech for the text def get_simple_pos(tag): if tag.startswith('J'): return wordnet.ADJ elif tag.startswith('V'): return wordnet.VERB elif tag.startswith('N'): return wordnet.NOUN elif tag.startswith('R'): return wordnet.ADV else: return wordnet.NOUN # Tokenize input text input_sentence = 'This sentence is positive' token_sentence = word_tokenize(input_sentence) # Create a list to store the POS tags pos_token_sentence = pos_tag(token_sentence) # Create an empty list to store the lemmatized words word_lemmatized = [] # Lemmatize the words with POS tags and store in the list for word, tag in pos_token_sentence: wordnet_pos = get_simple_pos(tag) or wordnet.NOUN word_lemmatized.append(lemmatizer.lemmatize(word, pos=wordnet_pos)) # Create a vectorizer object to generate a bag of words tfidf_vect = TfidfVectorizer(tokenizer = word_tokenize, analyzer='word') #Transform the lemmatized text tfidf_sent = tfidf_vect.fit_transform(word_lemmatized) # Create a dataframe for the vectorized text sent_dataset = pd.DataFrame(tfidf_sent.toarray()) sent_df = pd.DataFrame(sent_dataset.toarray()) # Define the model SVM = svm.SVC(C=1.0, kernel='linear', gamma='auto') # Train the model SVM.fit(sent_df,label) # Make predictions predictions = SVM.predict(sent_df) # Print the sentiment if predictions[0] == 0: sentiment = 'Negative' else: sentiment = 'Positive' print('Sentiment: ', sentiment)"},{"instruction":"Generate a Python script that plots the relationship between two variables. x = [1, 2, 3, 4, 5] y = [2, 4, 6, 8, 10]","output":"import matplotlib.pyplot as plt x = [1, 2, 3, 4, 5] y = [2, 4, 6, 8, 10] plt.plot(x, y) plt.xlabel(\\"x\\") plt.ylabel(\\"y\\") plt.title(\\"Relationship between x and y\\") plt.show()"},{"instruction":"Create a Python script that does linear regression on a given dataset. Not applicable","output":"import numpy as np import pandas as pd from matplotlib import pyplot as plt import statsmodels.api as sm # Load the data data = pd.read_csv('data.csv') # Add constant to the dataset data = sm.add_constant(data) # Fit the model results = sm.OLS(data['x'], data[['const','y']]).fit() # Get the fitted parameters parameters = results.params # Get the current values of x and y x = data['x'] y = data['y'] # Calculate the predicted values y_pred = parameters[0] + parameters[1] * x # Plot the data and the prediction plt.scatter(x, y, label='Data') plt.plot(x, y_pred, color='r', label='Prediction') plt.legend() plt.show()"},{"instruction":"This code tests the anime filename output. It includes two functions, test_group and test_group_no_epname, which test the output of anime filenames with and without episode names, respectively. The functions use the run_tvnamer and verify_out_data functions from the functional_runner module to test the output against expected files. The functions also use configuration settings to format the output filenames. To run the tests, execute the code.","output":"#!/usr/bin/env python \\"\\"\\"Tests anime filename output \\"\\"\\" from functional_runner import run_tvnamer, verify_out_data from nose.plugins.attrib import attr @attr(\\"functional\\") def test_group(): \\"\\"\\"Anime filename [#100] \\"\\"\\" out_data = run_tvnamer( with_files = ['[Some Group] Scrubs - 01 [A1B2C3].avi'], with_config = \\"\\"\\" { \\"batch\\": true, \\"filename_anime_with_episode\\": \\"[%(group)s] %(seriesname)s - %(episode)s - %(episodename)s [%(crc)s]%(ext)s\\" } \\"\\"\\") expected_files = ['[Some Group] Scrubs - 01 - My First Day [A1B2C3].avi'] verify_out_data(out_data, expected_files) @attr(\\"functional\\") def test_group_no_epname(): \\"\\"\\"Anime filename, on episode with no name [#100] \\"\\"\\" out_data = run_tvnamer( with_files = ['[Some Group] Somefakeseries - 01 [A1B2C3].avi'], with_config = \\"\\"\\" { \\"batch\\": true, \\"filename_anime_without_episode\\": \\"[%(group)s] %(seriesname)s - %(episode)s [%(crc)s]%(ext)s\\" } \\"\\"\\") expected_files = ['[Some Group] Somefakeseries - 01 [A1B2C3].avi'] verify_out_data(out_data, expected_files)"},{"instruction":"Edit the existing Python code to forward declare a function called compute that takes two arguments, a and b, and returns the result of a + b. def func1(): result = compute(2,3) print(result)","output":"def compute(a,b): return a + b def func1(): result = compute(2,3) print(result)"},{"instruction":"Design an algorithm in Python to find all the ways a point on the plane can be reached from the origin.","output":"def find_all_ways(x, y): if x == 0 and y == 0: return [[(0, 0)]] paths = [] if x > 0: paths += find_all_ways(x-1, y) if y > 0: paths += find_all_ways(x, y-1) for path in paths: path.append((x, y)) return paths"},{"instruction":"Python, create a lambda function to input two numbers, and return their product.","output":"product = lambda x, y : x * y"},{"instruction":"Generate a Python code to create a class which creates an empty dictionary with the given keys. name, age","output":"class EmptyDictionary: def __init__(self, keys): self.keys = [k.strip() for k in keys.split(\\",\\")] self.dictionary = {k: None for k in self.keys} def get_dictionary(self): return self.dictionary"},{"instruction":"Build a decison tree in Python to classify emails as spam or not spam.","output":"import pandas as pd from sklearn.tree import DecisionTreeClassifier # Create dataframe df = pd.DataFrame({'content': ['This is a great deal!', 'Buy now!'], 'spam': [0, 1]}) # Create features and labels X = df['content'] y = df['spam'] # Create decision tree dtree_model = DecisionTreeClassifier(max_depth = 2).fit(X, y) dtree_predictions = dtree_model.predict(X) # Print accuracy print(\\"Accuracy:\\", dtree_model.score(X, y))"},{"instruction":"Create a Python script to calculate and display the distance between two points in 2dimensional space. Two points: (5,3) & (2,2)","output":"import math def distance(p1,p2): x1,y1 = p1 x2,y2 = p2 d = math.sqrt((x2-x1)**2+(y2-y1)**2) return d x1,y1 = (5,3) x2,y2 = (2,2) print(f\\"The distance between 2 points ({x1},{y1}) & ({x2},{y2}) is: {distance((x1,y1),(x2,y2))}\\") // Output: The distance between 2 points (5,3) & (2,2) is: 3.1622776601683795"},{"instruction":"Generate a function in Python to check if an integer is a palindrome. A number is a palindrome if it reads the same forward and backward. Not applicable","output":"def is_palindrome(num): temp = num rev = 0 while(temp > 0): digit = temp % 10 rev = rev * 10 + digit temp = temp // 10 if rev == num: return True else: return False"},{"instruction":"Generate a random string in Python of length 8 containing only digits and lowercase characters.","output":"import string, random length = 8 chars = string.ascii_letters + string.digits random_str = ''.join(random.choice(chars) for _ in range(length)) print(random_str)"},{"instruction":"Write a Python program to implement the Bubble Sort algorithm and sort a given list of integers. list = [4, 9, 5, 2, 7, 1]","output":"def bubble_sort(list): is_sorted = False while not is_sorted: is_sorted = True for i in range(len(list)-1): if (list[i] > list[i+1]): list[i], list[i+1] = list[i+1], list[i] is_sorted = False return list"},{"instruction":"Generate a program to reverse a string in python.","output":"def reverse_string(string): return string[::-1]"},{"instruction":"Produce a unit test report in Python for a program to find the mean of an array. Sample array: [1, 2, 3, 4, 5]","output":"import unittest def calculate_mean(numbers): return sum(numbers)/len(numbers) class MeanCalculationTest(unittest.TestCase): def setUp(self): self.sample_array = [1, 2, 3, 4, 5] def test_mean_calculation(self): self.assertEqual(calculate_mean(self.sample_array), 3) if __name__ == '__main__': unittest.main()"},{"instruction":"Design a Python program which takes two lists and returns their intersection. list1 = [1, 2, 3, 4, 5, 6] list2 = [3, 6, 8, 9, 10]","output":"def intersection(list1, list2): return list(set(list1) & set(list2)) # Output: [3, 6]"},{"instruction":"Create a Python program to calculate the formula 2*sqrt(x+2). x = 10","output":"import math x = 10 result = 2*math.sqrt(x+2) print(result ) # 12.0"},{"instruction":"mplement an algorithm to determine if a number is prime in Python.","output":"def is_prime(num): if num < 2: return False for i in range(2, num): if num % i == 0: return False return True"},{"instruction":"Create a web scraper in Python to access the data in a given url https://www.example.com/","output":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com/' resp = requests.get(url) soup = BeautifulSoup(resp.content, 'html.parser') # Scraping code goes here"},{"instruction":"Design a Python function to automatically generate the next BST level based on the given level. Given level = [1,2,3]","output":"def generateNextLevel(level): next_level = [] for node in level: if node.left != None: next_level.append(node.left) if node.right != None: next_level.append(node.right) return next_level"},{"instruction":"Create a class in Python to convert raw text into a structured format.","output":"class TextParser: \\"\\"\\"A class in Python to convert raw text into a structured format\\"\\"\\" def __init__(self, text): self.text = text def parse(self): \\"\\"\\"This method will parse the given text and return it in a structured format\\"\\"\\" # initialize an empty output array output = [] # loop over the lines in the text for line in self.text.split('n'): # split each line into it’s individual words separated by spaces words = line.split(' ') # add each line to the output array output.append(words) return output"},{"instruction":"Write a Python script that finds the most common element of a given list. list = [3, 5, 6, 3, 7, 8, 3, 4]","output":"def find_most_frequent_element(list): count_map = {} max_element= list[0] max_count = 1 for num in list: if num in count_map: count_map[num] += 1 else: count_map[num] = 1 for num in count_map: if count_map[num] > max_count: max_element = num max_count = count_map[num] return max_element"},{"instruction":"Create a web API with Flask and Python for requesting random articles from a database. Not applicable","output":"from flask import Flask, request from flask_restful import Resource, Api import sqlite3 app = Flask(__name__) api = Api(app) articles_db = 'articles.db' class getArticle(Resource): def get(self): conn = sqlite3.connect(articles_db) conn.row_factory = sqlite3.Row c = conn.cursor() c.execute('SELECT * FROM articles ORDER BY RANDOM() LIMIT 1') data = c.fetchone() c.close() return { 'article_id': data['article_id'], 'title': data['title'], 'body': data['body'] } api.add_resource(getArticle, '/get_article') if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Generate a python program to extract all the words starting with a given letter given letter: e","output":"def extract_words(word_list, given_letter): extracted_words=[] for word in word_list: if word[0]==given_letter: extracted_words.append(word) return extracted_words"},{"instruction":"Analyze this Python code and suggest any improvements. def calc_sum(a, b): return a + b sum = 0 for i in range(5): sum += calc_sum(i, i + 1) print(sum)","output":"def calc_sum(a, b): return a + b sum = 0 for i in range(5): sum += calc_sum(i, i + 1) print(sum) # Suggested fix: sum = 0 for i in range(0, 5): # Use the range(start, stop) syntax sum += sum + calc_sum(i, i + 1) print(sum)"},{"instruction":"Generate a Python script that prints the sum of the numbers in the given range. Start: 10 End: 19","output":"# Initialize one variable to store result result = 0 # Use a loop to iterate through the given range for num in range(10, 20): result += num # Print the result print(result)"},{"instruction":"mplement a Python function to find the smallest element in an array [3, 5, 2, 1, 4]","output":"def findSmallest(arr): smallest = arr[0] for i in arr: if i < smallest: smallest = i return smallest findSmallest([3, 5, 2, 1, 4]) # Output: 1"},{"instruction":"Write a Python program to check whether a number is divisible by 7 or not. 92","output":"number = 92 if (number % 7) == 0: print(\\"The number is divisible by 7\\") else: print(\\"The number is not divisible by 7\\")"},{"instruction":"Generate a Python class to represent a customer object with the following properties: name, email, and phone number. Not applicable","output":"class Customer: def __init__(self, name, email, phone_number): self.name = name self.email = email self.phone_number = phone_number def getName(self): return self.name def getEmail(self): return self.email def getPhoneNumber(self): return self.phone_number"},{"instruction":"Write a Python code to create a program that will generate a random password.","output":"import string import random def generate_password(length): password = \\"\\" for i in range(length): password += random.choice(string.ascii_letters + string.digits + string.punctuation) return password"},{"instruction":"Construct a function in Python that takes in a number as an argument and prints out the double of the input. Not applicable","output":"def double_num(n): return n*2 print(double_num(5)) # Outputs: 10"},{"instruction":"Create a Python function to tokenize sentences into words. The quick brown fox jumped over the lazy dog.","output":"def tokenize(sentence): tokens = [] current_word = \\"\\" for char in sentence: if char.isalpha(): current_word += char else: if current_word: tokens.append(current_word) current_word = \\"\\" if char.isnumeric(): tokens.append(char) if current_word: tokens.append(current_word) return tokens print(tokenize('The quick brown fox jumped over the lazy dog.')) # ['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']"},{"instruction":"Generate a Python program to scrape the content of an HTTPS website and output the result. Not applicable","output":"import requests from bs4 import BeautifulSoup # make a get request to fetch the contents of the page r = requests.get('https://example.com') # parse the html content soup = BeautifulSoup(r.content, 'html.parser') # print out the result print(soup.prettify())"},{"instruction":"Generate a Python program to merge two dictionaries. dict1 = {'a':1, 'b':2, 'c':3} dict2 = {'d':4, 'e':5, 'f':6}","output":"dict1 = {'a':1, 'b':2, 'c':3} dict2 = {'d':4, 'e':5, 'f':6} dict3 = {**dict1, **dict2} print(dict3) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}"},{"instruction":"Write a Python code to return the highest frequency element in a given array of integers. arr = [1, 2, 4, 2, 3, 2]","output":"from collections import Counter def highest_frequency(arr): arr_counts = Counter(arr) max_freq = 0 max_freq_num = 0 for num in arr_counts: if arr_counts[num] > max_freq: max_freq = arr_counts[num] max_freq_num = num return max_freq_num print(highest_frequency(arr))"},{"instruction":"Generate a web service in Python Flask to provide the weather data for a given date and region.","output":"# Import packages from flask import Flask, jsonify, request import requests # Create Flask app app = Flask(__name__) # Make a GET request to fetch weather data for a given date and region @app.route('/weather', methods=['GET']) def get_weather_data(): region = request.args.get('region') date = request.args.get('date') url = 'http://api.openweathermap.org/data/2.5/forecast?q='+region+'&appid= YOUR_API_KEY'+'&date='+date data = requests.get(url).json() return jsonify(data) if __name__ == '__main__': app.run(host='0.0.0.0', port=8000, debug = True)"},{"instruction":"Create a Python script to check whether a given number is an even number or an odd number.","output":"def is_even(n): if n % 2 == 0: return True else: return False"},{"instruction":"Construct a machine learning model in Python to predict whether a customer will buy a product or not. Features of customer: Age: 34 Gender: Male Homeowner: Yes Education: Bachelor's Marital Status: Married Employment: PartTime Income: 50,000","output":"#import relevant libraries import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier #define customer data customer_data = { 'Age': [34], 'Gender': ['Male'], 'Homeowner': [1], 'Education': [1], 'Marital Status': [1], 'Employment': [2], 'Income': [50000], } #convert to a dataframe customer_data_df = pd.DataFrame(customer_data, columns=['Age', 'Gender', 'Homeowner', 'Education', 'Marital Status', 'Employment', 'Income']) #load data data = pd.read_csv('data.csv') #create the features for our model features = [x for x in data.columns if x not in ['label']] #split into data and labels X = data[features] y = data['label'] #split into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42) #fit a random forest model model = RandomForestClassifier(n_estimators=100) model.fit(X_train, y_train) #get the customer's prediction prediction = model.predict(customer_data_df)[0] if prediction == 0: print(\\"Customer is not likely to buy the product.\\") else: print(\\"Customer is likely to buy the product.\\")"},{"instruction":"Write a Python program to calculate the standard deviation of a given list of numbers. [1, 2, 3, 4]","output":"def calculate_sd(lst): avg = sum(lst) / len(lst) return (sum([(x - avg)**2 for x in lst]) / len(lst)) ** 0.5"},{"instruction":"Write a Python program to split a given string into substrings of fixed length, and print the substrings in a single line seperated by comma. PythonProgramming","output":"def split_string(string, length): substrings = [string[i:i+length] for i in range(0, len(string), length)] return ','.join(substrings)"},{"instruction":"Design a machine learning model in Python which can detect if a given document is written in British English or American English.","output":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.metrics import accuracy_score, precision_score, recall_score # Read data into a dataframe df = pd.read_csv('data.csv') # Define predictors and the target X = df['text'] y = df['language'] # Split in train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42) # Initialise and fit a CountVectorizer cv = CountVectorizer(analyzer='word', ngram_range=(1,2)) X_train_cv = cv.fit_transform(X_train) X_test_cv = cv.fit_transform(X_test) # Initialise and fit a MultinomialNB model nb = MultinomialNB() nb.fit(X_train_cv, y_train) # Make predictions y_pred = nb.predict(X_test_cv) # Print metrics print(\\"Accuracy score: %.2f\\" % accuracy_score(y_test, y_pred)) print(\\"Precision score: %.2f\\" % precision_score(y_test, y_pred, average='macro')) print(\\"Recall score: %.2f\\" % recall_score(y_test, y_pred, average='macro'))"},{"instruction":"Construct an algorithm in Python to compute the maximum profit from selling a stock within a specific period of days. [8, 12, 4, 5, 7, 10, 9]","output":"def max_profit(prices): min_price = float('inf') max_profit = 0 for price in prices: min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit prices = [8, 12, 4, 5, 7, 10, 9] print(max_profit(prices))"},{"instruction":"Develop a minigame in Python where the user can play rock, paper and scissors against the computer.","output":"import random def check_winner(user_choice, computer_choice): if user_choice == computer_choice: return 'Draw' elif (user_choice == 'rock' and computer_choice == 'paper') or (user_choice == 'paper' and computer_choice == 'scissors') or (user_choice == 'scissors' and computer_choice == 'rock'): return 'Computer won!' else: return 'You won!' def play_rock_paper_scissors(): items = ['rock', 'paper', 'scissors'] user_choice = input(\\"Choose rock, paper, or scissors:\\") computer_choice = random.choice(items) result = check_winner(user_choice, computer_choice) print(\\"Computer chose {}.\\".format(computer_choice)) print(\\"{}\\".format(result)) play_rock_paper_scissors()"},{"instruction":"Design a class in Python with instance attributes for name, height, and age of a person. Not applicable","output":"class Person: def __init__(self, name, height, age): self.name = name self.height = height self.age = age"},{"instruction":"Predict the output for the following Python code snippet. a = [1, 2, 3, 4] b = [2, 4, 5, 7]","output":"c = [3, 6, 8, 11]"},{"instruction":"Build a web scraping script in Python that stores the HTML content of a website in a variable. URL: https://www.example.com","output":"import urllib.request url = 'https://www.example.com' html_content = urllib.request.urlopen(url).read()"},{"instruction":"Create a Python program to check if a given number is in a given linear list or not, and return the position if found. List: [2, 3, 5, 6, 8, 9], Number: 5","output":"def is_in_linear_list(lst, num): for i, val in enumerate(lst): if val == num: return \\"Found at {0} position\\".format(i) return False lst = [2, 3, 5, 6, 8, 9] num = 5 result = is_in_linear_list(lst, num) print(result)"},{"instruction":"Create a method in Python that takes two arguments and returns a specified error message if one of the two conditions is not met. error_message = The input must be a number!","output":"def check_input(arg1, arg2): if type(arg1) is not int or type(arg2) is not int: return \\"The input must be a number!\\" else: return \\"The input is valid!\\""},{"instruction":"What are the advantages of using a set data structure in Python?","output":"The main advantages of using a set data structure in Python are that it is unordered, meaning that the elements in a set are not stored in a particular order, and that it is unindexed, meaning that each element must be referenced based on its value. Additionally, because sets do not contain duplicate elements, they are useful for performing various operations on a dataset such as searching, filtering, and removing duplicate elements. Finally, using sets can improve the speed of the overall code since different operations may have O(1) time complexity."},{"instruction":"Develop a program to sort an list of strings by their length using Python. ['dog', 'cat', 'mouse', 'elephant']","output":"def sort_by_length(strings): return sorted(strings, key=len) # Test strings = ['dog', 'cat', 'mouse', 'elephant'] print(sort_by_length(strings))"},{"instruction":"Create a program in Python that reads a text and then prints out the longest word in the text. This is an example of a sample text.","output":"def find_longest_word(text): words = text.split(\\" \\") longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest if __name__ == \\"__main__\\": text = \\"This is an example of a sample text.\\" print(find_longest_word(text))"},{"instruction":"Create a Python script to generate a Fibonacci sequence of the specified length, given an initial twonumber sequence. initial_sequence = [1, 1], sequence_length = 5","output":"def generate_fibonacci_sequence(initial_sequence, sequence_length): fibonacci_sequence = initial_sequence for i in range(2, sequence_length): fibonacci_sequence.append(fibonacci_sequence[i-1] + fibonacci_sequence[i-2]) return fibonacci_sequence sequence = generate_fibonacci_sequence([1, 1], 5) print(sequence)"},{"instruction":"Format the following code to meet the style guidelines of Python. class Building(): def __init__(self,size ='medium'): self.size = size if self.size == 'small': self.rooms = 2 elif self.size == 'medium': self.rooms = 3 else: self.rooms = 4","output":"class Building: def __init__(self, size=\\"medium\\"): self.size = size if self.size == \\"small\\": self.rooms = 2 elif self.size == \\"medium\\": self.rooms = 3 else: self.rooms = 4"},{"instruction":"dify the following Python program such that it returns an error if the input is an empty string. def print_string(text): print(text)","output":"def print_string(text): if len(text) > 0: print(text) else: raise Exception('The input string is empty')"},{"instruction":"Develop an algorithm in Python for clustering a set of data points. Input Data (x, y, z): [(1, 2, 3), (4, 5, 6), (7, 8, 9)]","output":"from sklearn.cluster import KMeans import numpy as np # Create array of the data points data_points = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # Calculate clusters kmeans = KMeans(n_clusters=3).fit(data_points) # Get labels for each point labels = kmeans.predict(data_points) # Print clusters print(labels) # Output: [0, 1, 2]"},{"instruction":"Write a Python program to delete keys from a dictionary whose value is equal to a given value. my_dict = {'a':1, 'b':2, 'c':3, 'd':2} value = 2","output":"def delete_keys(my_dict, value): \\"\\"\\"This function deletes keys from a dictionary whose value is equal to a given value.\\"\\"\\" keys_to_remove = [] for key, val in my_dict.items(): if val == value: keys_to_remove.append(key) for key in keys_to_remove: del my_dict[key] return my_dict my_dict = {'a':1, 'b':2, 'c':3, 'd':2} value = 2 new_dict = delete_keys(my_dict, value) print(new_dict)"},{"instruction":"This code is a Python script that loads ordered data from a folder to a PostgreSQL database using PDAL. To use this script, create an instance of the LoaderOrdered class and call its process() method. The LoaderOrdered class extends the Loader class and overrides its getFileBlockTable(), loadFromFile(), and loadFromFileSequential() methods. The loadFromFile() method loads a file into the database using PDAL, while the loadFromFileSequential() method inserts the blocks of a file into the global blocks table in the correct order. The process() method loads the files in parallel using the loadFromFile() and loadFromFileSequential() methods.","output":"#!/usr/bin/env python # Created by Oscar Martinez # # o.rubi@esciencecenter.nl # import os, logging from pointcloud import pdalops, postgresops from pointcloud.postgres.blocks.Loader import Loader class LoaderOrdered(Loader): def getFileBlockTable(self, index): return self.blockTable + '_' + str(index) def process(self): logging.info('Starting ordered data loading with PDAL (parallel by python) from ' + self.inputFolder + ' to ' + self.dbName) return self.processMulti(self.inputFiles, self.numProcessesLoad, self.loadFromFile, self.loadFromFileSequential, True) def loadFromFile(self, index, fileAbsPath): # Get connection connection = self.getConnection() cursor = connection.cursor() #Create a temporal blocks table for the blocks of the current file fileBlockTable = self.getFileBlockTable(index) self.createBlocksTable(cursor, fileBlockTable, self.indexTableSpace) # We use the index table space for the temporal table # Add point cloud format to poinctcloud_formats table (columns, pcid, compression) = self.addPCFormat(cursor, self.schemaFile, fileAbsPath, self.srid) connection.close() pdalCols = [] for c in cols: pdalCols.append(self.DM_PDAL[c]) # Get PDAL config and run PDAL xmlFile = os.path.basename(fileAbsPath) + '.xml' pdalops.PostgreSQLWriter(xmlFile, fileAbsPath, self.getConnectionString(), pcid, pdalCols, fileBlockTable, self.srid, self.blockSize, compression) pdalops.executePDAL(xmlFile) def loadFromFileSequential(self, fileAbsPath, index, numFiles): fileBlockTable = self.getFileBlockTable(index) connection = self.getConnection() cursor = connection.cursor() # Insert the blocks on the global blocks table (with correct order) query = \\"INSERT INTO \\" + self.blockTable + \\" (pa) SELECT pa FROM \\" + fileBlockTable + \\" ORDER BY id\\" postgresops.mogrifyExecute(cursor, query) # Drop the temporal table postgresops.dropTable(cursor, fileBlockTable) connection.close()"},{"instruction":"Analyze a Python program to remove all global variables and replace them with local variables. a = 1 def foo(): print(a) def bar(): global a a = 2 foo() bar()","output":"def foo(): a = 1 print(a) def bar(): a = 2 foo() bar()"},{"instruction":"Generate a code in Python for validating a given password Minimum length of 8 characters and must contain at least 1 uppercase letter, 1 lowercase letter, 1 special character and 1 number","output":"import re def validate_password(passwd): Rule = re.compile(r\\"^(?=.*[a-z])(?=.*[A-Z])(?=.*d)(?=.*[@!%*#?&])[A-Za-zd@!#%*?&]{8,}\\") return Rule.search(passwd)"},{"instruction":"Create a Python program to transform text into pig latin.","output":"def pig_latin(word): first_letter = word[0] # check if vowel if first_letter in 'aeiou': pig_word = word+'ay' else: pig_word = word[1:]+first_letter+'ay' return pig_word if __name__=='__main__': word = 'apple' print(pig_latin(word)) # prints 'appleay'"},{"instruction":"Write a python code to generate a random password with at least 8 characters that includes at least one lower case letter, one upper case letter and one number.","output":"\\"\\"\\" Write a python code to generate a random password with at least 8 characters that includes at least one lower case letter, one upper case letter and one number \\"\\"\\" import string import random def generate_password(): letters = string.ascii_letters digits = string.digits symbols = string.punctuation all_chars = letters + digits + symbols password = \\"\\".join(random.choice(all_chars) for i in range(8)) lower_count = 0 upper_count = 0 digit_count = 0 for char in password: if char.islower(): lower_count += 1 elif char.isupper(): upper_count += 1 elif char.isdigit(): digit_count += 1 while lower_count == 0 or upper_count == 0 or digit_count == 0: password = \\"\\".join(random.choice(all_chars) for i in range(8)) lower_count = 0 upper_count = 0 digit_count = 0 for char in password: if char.islower(): lower_count += 1 elif char.isupper(): upper_count += 1 elif char.isdigit(): digit_count += 1 return password if __name__ == '__main__': print(generate_password())"},{"instruction":"Develop a function in Python to find the largest two numbers in a given array. input_array = [1, 9, 5, 2, 4, 7]","output":"def find_largest_two(input_array): largest1, largest2 = -float(\\"inf\\"), -float(\\"inf\\") if len(input_array)<2: return for el in input_array: if el > largest1: largest2 = largest1 largest1 = el elif el > largest2: largest2 = el return largest1,largest2"},{"instruction":"Create a basic authentication system in Python using hashing and salting. Not applicable","output":"import hashlib import random import string # Generate a salt def generate_salt(): salt = ''.join(random.choice(string.ascii_letters) for _ in range(16)) return salt # Generate a hashed password def generate_hashed_password(password, salt): hashed_password = hashlib.sha256(password.encode() + salt.encode()).hexdigest() return hashed_password # Create a user def create_user(username, password): # Generate a new salt salt = generate_salt() # Create a hashed password hashed_password = generate_hashed_password(password, salt) # Store the user data user = { 'username': username, 'salt': salt, 'hashed_password': hashed_password } # Login def login(username, password): # Get the user data user = get_user(username) # Generate a hashed password hashed_password = generate_hashed_password(password, user['salt']) # Compare the passwords if user['hashed_password'] == hashed_password: login_success() else: login_failure()"},{"instruction":"Develop a program in Python that will take a list of numbers as input and calculate the median of the numbers numbers = [10,50,30,20,60]","output":"def find_median(numbers): numbers.sort() if len(numbers) % 2 == 0: median1 = numbers[len(numbers)//2] median2 = numbers[len(numbers)//2 - 1] median = (median1 + median2)/2 else: median = numbers[len(numbers)//2] return median # Driver Code numbers = [10,50,30,20,60] median = find_median(numbers) print(\\"Median is: \\" + str(median))"},{"instruction":"Write a function in Python that calculates the average of two numeric values. Not applicable","output":"def avg(x, y): \\"\\"\\" Calculates the average of two numbers Args: x (float): The first number y (float): The second number Returns: avg (float): The average of the two numbers \\"\\"\\" return (x + y) / 2"},{"instruction":"Write a Python program to implement a decision tree using a given dataset. The dataset contains 10,000 examples and 5 features.","output":"import numpy as np from sklearn import tree # Load the data X = np.loadtxt('data.txt', delimiter=',') # Create a decision tree model clf = tree.DecisionTreeClassifier() clf.fit(X, y) # print the model tree tree.export_graphviz(clf, out_file=\\"model.dot\\")"},{"instruction":"Generate a Python script to find the average grade across all students enrolled in a given class. { students: [ { name: John, grade: A }, { name: Zoe, grade: C }, { name: Susie, grade: B } ] }","output":"def get_average_grade(students): grades = [] for student in students: grades.append(student['grade']) return sum(grades)/len(students) if __name__ == '__main__': students = [{ 'name': 'John', 'grade': 'A' }, { 'name': 'Zoe', 'grade': 'C' }, { 'name': 'Susie', 'grade': 'B' }] average_grade = get_average_grade(students) print('Average Grade: {}'.format(average_grade))"},{"instruction":"Create a neural network class in Python that computes the derivative of a given function.","output":"class NNClass: def __init__(self): pass def forward(self, x): self.x = x def backward(self, dy): dFdx = dy * (1/self.x) return dFdx"},{"instruction":"Create a Python program that will print out all of the prime numbers between 0 and 100. Not applicable","output":"for num in range(2,101): prime = True for i in range(2,num): if (num%i==0): prime = False if prime: print(num)"},{"instruction":"Create an objectoriented program in python that allows user to add, update, delete and search an item in a catalogue.","output":"class ItemCatalogue(): def __init__(self): self.items = {} def add(self, item_name, item_details): self.items[item_name] = item_details def update(self, item_name, item_details): self.items[item_name] = item_details def delete(self, item_name): del self.items[item_name] def search(self, item_name): if item_name in self.items: return self.items[item_name] else: return None"},{"instruction":"Formulate an algorithm in Python to find the sum of all elements in a given matrix. [[ 1, 2, 3 ], [ 4, 5, 6 ]]","output":"def matrixSum(matrix): sum = 0 for row in matrix: for element in row: sum += element return sum matrix = [[1, 2, 3], [4, 5, 6]] total = matrixSum(matrix) print(total)"},{"instruction":"Write a Python program for generating a password that meets the following criteria: Length 8 characters, At least one lowercase letter, At least one uppercase letter, At least one special character","output":"import random import string def generate_password(length, lowercase, uppercase, special): characters = string.ascii_letters + string.digits + '!\\"#%&'()*+,-./:;<=>?@[]^_{|}~' password = '' for i in range(length): if lowercase > 0: password += random.choice(string.ascii_lowercase) lowercase -= 1 elif uppercase > 0: password += random.choice(string.ascii_uppercase) uppercase -= 1 elif special > 0: password += random.choice(special) special -= 1 else: password += random.choice(characters) return password print(generate_password(8, 1, 1, 1))"},{"instruction":"mplements an algorithm in Python to find common elements in two given unsorted arrays. [1, 2, 3], [2, 4, 5]","output":"def common_elements(arr1, arr2): commonList = [] for num1 in arr1: for num2 in arr2: if(num1 == num2): commonList.append(num1) return commonList arr1 = [1, 2, 3] arr2 = [2, 4, 5] print (\\"Common elements: \\", common_elements(arr1, arr2))"},{"instruction":"Create a REST API to search for a user in the database.","output":"A REST API can be created using programming languages such as Python, JavaScript, etc. It will contain code to connect to the database, query it for a user, and return a response in the appropriate format."},{"instruction":"Generate a Python script to iterate through a list and print each element. lst = [hello, how, are, you]","output":"for item in lst: print(item)"},{"instruction":"Design an algorithm in Python to find the highest one digit number in a given list. [5, 11, 15, 8, 9]","output":"def get_highest_one_digit(list_nums): highest_num = 0 for num in list_nums: if num <= 9 and num > highest_num: highest_num = num return highest_num"},{"instruction":"Construct a Python program that reads a user input and returns twice the value. Number = 3","output":"def double(number): return number * 2 # Output 6"},{"instruction":"Write a Python program to illustrate an Object Oriented programming concept.","output":"# Example illustrating Object Oriented programming class Employee: def __init__(self, first_name, last_name, salary): self.first_name = first_name self.last_name = last_name self.salary = salary def get_full_name(self): return self.first_name + \\" \\" + self.last_name if __name__ == \\"__main__\\": emp1 = Employee(\\"John\\", \\"Doe\\", 10000) print(\\"Full name:\\", emp1.get_full_name()) print(\\"Salary:\\", emp1.salary)"},{"instruction":"Optimize the following Python program for computing Fibonacci numbers: def fib(n): if n <= 1: return n else: return fib(n1) + fib(n2) Not applicable","output":"def fib(n): fibonacci_numbers = [0, 1] for i in range(2, n + 1): fibonacci_numbers.append(fibonacci_numbers[i - 1] + fibonacci_numbers[i - 2]) return fibonacci_numbers[n]"},{"instruction":"Design a Greedy Algorithm in Python to implement the 0/1 knapsack problem. Not applicable","output":"class Item(object): # create the item with its associated values def __init__(self, n, v, w): self.name = n self.value = v self.weight = w # Evaluate the items by their value density def getValue(self): return self.value/self.weight def knapsack(items, maxWeight): # sort items by value density in descending order items.sort(key=Item.getValue, reverse=True) totalValue = 0 # iterate over the items for i in range(len(items)): if(maxWeight - items[i].weight >= 0): totalValue += items[i].value maxWeight -= items[i].weight return totalValue"},{"instruction":"Build a Python script to multiply two integer values.","output":"def multiply(a, b): return a * b print(multiply(2, 3))"},{"instruction":"Design a function to print a chessboard of size n x n in Python.","output":"def print_chessboard(n): for i in range(1, n+1): for j in range(1, n+1): if (i+j) % 2 == 0: print(\\"X\\",end=\\" \\") else: print(\\"O\\",end=\\" \\") print() print_chessboard(8)"},{"instruction":"The given code is a Python function that creates a natural language game creation program. To use the program, call the function start_dialog with an optional output file name as an argument. The program will prompt the user for input to define the game environment, including board size, number of players, game pieces, player moves, win conditions, and game end conditions. The program will then generate a GDL file based on the user's input and write it to the output file. If no output file name is provided, the program will write the GDL file to a file named test.txt.","output":"import re import nltk import ngdl_classes import global_vars import ngdl_parse import ngdl_write def start_dialog(output_file=\\"test.txt\\"): if not global_vars.initialized: global_vars.init() else: reset_global_vars() output = open(output_file, \\"w\\") print \\"Welcome to the natural language game creation program for general game playing!\\" #print \\"First we'll work on defining the game environment\\" board_size_dialog() player_num_dialog() game_pieces_dialog() player_move_dialog() goal_dialog() terminal_dialog() ngdl_write.write_gdl_file(output) output.close() def reset_global_vars(): global_vars.write_queue = [[\\"noop\\", []], [\\"goals\\", []], [\\"terminal\\", []], [\\"distinct_cells\\", []], [\\"successors\\", [50]]] global_vars.game = ngdl_classes.Game() def board_size_dialog(): in_board_size = raw_input(\\"What size would you like your board to be?: \\") valid_input = re.search(\\"([0-9]+)s?(by|x|X)s?([0-9]+)\\", in_board_size) while not valid_input: print \\"Sorry, I can't understand that input yet, can you try again?\\" in_board_size = raw_input(\\"What size would you like your game to be?: \\") valid_input = re.search(\\"([0-9]+)s?(by|x|X)s?([0-9]+)\\", in_board_size) board_size = (valid_input.group(1), valid_input.group(3)) #confirmation = raw_input(\\"To confirm, there will be \\" + board_size[0] + \\" columns and \\" + board_size[1] + \\" rows?: \\") global_vars.game.board = ngdl_classes.Board((int(board_size[0]), int(board_size[1]))) global_vars.write_queue.append([\\"board\\" , []]) def player_num_dialog(): in_player_num = raw_input(\\"How many players does your game have?: \\") valid_input = re.search(\\"[0-9]+\\", in_player_num) while not valid_input: print \\"Sorry, I can't understand that input yet, can you try again?\\" in_player_num = raw_input(\\"How many players does your game have?: \\") valid_input = re.search(\\"[0-9]+\\", in_player_num) num_players = int(valid_input.group()) for p in range(1,num_players+1): global_vars.game.players.append(ngdl_classes.Player(\\"player\\" + str(p))) global_vars.write_queue.append([\\"players\\", []]) def game_pieces_dialog(): for player in global_vars.game.players: in_piece_names = raw_input(\\"What types of pieces does \\" + player.name + \\" have?: \\") pieces = re.findall(\\"([0-9]*)s|^([^Wd]+)\\", in_piece_names) for p in pieces: global_vars.game.pieces[p[1]] = ngdl_classes.Piece(p[1]) player.pieces.append(p[1]) on_board_response = raw_input(\\"Do any of \\" + player.name + \\"'s pieces start on the board?: \\") on_board_response = on_board_response.lower() if not re.match(\\"[no|n]\\", on_board_response): for p in pieces: if p[0] == \\"\\" or int(p[0]) > 1: p_positions = raw_input(\\"What are the starting positions <col, row> of the \\" + p[1] + \\" that start on the board? (enter to skip): \\") else: p_positions = raw_input(\\"What is the starting position <col, row> of the \\" + p[1] + \\" if it starts on the board? (enter to skip): \\") positions = re.findall(\\"([0-9]+),s?([0-9]+)\\", p_positions) if positions: for pos in positions: global_vars.game.board.starting_positions[(int(pos[0]), int(pos[1]))] = player.name + \\" \\" + piece.name def player_move_dialog(): move_conditions = raw_input(\\"What can a player do on their turn?: \\") parse_trees = ngdl_parse.parse(move_conditions, 2) nltk_tree = parse_trees[0] tree = translate_tree(nltk_tree) conditions = process_condition(tree) action = tree.find_closest_node(\\"ACTION\\") while action.children: index = [child.name for child in action.children].index(\\"ACTION\\") action = action[index] if action.value == \\"drop\\": drop_response = raw_input(\\"By 'drop', do you mean dropping a piece like in Connect-4, or placing a piece like in Shogi?: \\") drop_response.lower() if re.match(\\"[connect-4|drop]\\", drop_response): global_vars.write_queue.append([\\"drop_occupant_conditions\\", [[conditions]]]) global_vars.write_queue.append([\\"perpetuate_untouched_cells\\", [[\\"drop\\"]]]) else: global_vars.write_queue.append([\\"place_occupant_conditions\\", [[conditions]]]) global_vars.write_queue.append([\\"perpetuate_untouched_cells\\", [[\\"place\\"]]]) elif action.value in [\\"place\\", \\"mark\\"]: global_vars.write_queue.append([\\"place_occupant_conditions\\", [[conditions]]]) global_vars.write_queue.append([\\"perpetuate_untouched_cells\\", [[\\"place\\"]]]) #def piece_move_dialog(): def goal_dialog(): win_conditions = raw_input(\\"How does a player win?: \\") parse_trees = ngdl_parse.parse(win_conditions, 1) nltk_tree = parse_trees[0] tree = translate_tree(nltk_tree) #result = tree.find_closest_node(\\"RESULT\\") conditions_tree = tree.find_closest_node(\\"COND\\") conditions = process_condition(conditions_tree) global_vars.write_queue.append([\\"win_conditions\\", [[conditions], \\"\\"]]) def terminal_dialog(): game_end_conditions = raw_input(\\"Aside from a player winning, how does the game end?: \\") parse_trees = ngdl_parse.parse(game_end_conditions, 1) nltk_tree = parse_trees[0] tree = translate_tree(nltk_tree) conditions_tree = tree.find_closest_node(\\"COND\\") conditions = process_condition(conditions_tree) global_vars.write_queue.append([\\"game_end_conditions\\", [[conditions]]]) def process_result(result): return def process_conditions(conds): conditions = [] if \\"OR\\" in [child.name for child in conds.children]: conditions.append(\\"OR\\") for child in conds.children: if child.name == \\"COND\\": conditions.append(process_condition(child)) elif \\"AND\\" in [child.name for child in conds.children]: conditions.append(\\"AND\\") for child in conds.children: if child.name == \\"COND\\": conditions.append(process_condition(child)) else: conditions.append(\\"COND\\") conditions.append(process_condition(conds)) return conditions def process_condition(cond_node): for leaf in cond_node.leaves(): if leaf.value in cond_dictionary: cond_definition = cond_dictionary[leaf.value] slot_values = [] for slot in cond_definition[0]: slot_node = leaf.find_closest_node(slot[0]) if not slot_node: if len(slot) == 2: slot_values.append(slot[1]) else: print \\"Slot fill error1!\\" elif cond_node not in slot_node.ancestors(): if len(slot) == 2: slot_values.append(slot[1]) else: print \\"Slot fill error2!\\" elif slot_node.name == \\"PLAYER\\": slot_values.append(process_player(slot_node)) elif slot_node.name == \\"BOARD_PART\\": slot_values.append(process_board_part(slot_node)) elif slot_node.name == \\"PIECE\\": slot_values.append(process_piece(slot_node)) else: slot_values.append(slot_node.value) if cond_definition[-1]: global_vars.write_queue.append([cond_definition[2], slot_values]) else: global_vars.write_queue.append([cond_definition[2], []]) return cond_definition[1].format(*slot_values) def process_player(player_node): return \\"?player\\" def process_board_part(board_part_node): square_equivalents = [\\"cell\\"] board_part = board_part_node while board_part.children: index = [child.name for child in board_part.children].index(\\"BOARD_PART\\") board_part = board_part[index] if board_part.value in square_equivalents: return \\"square\\" else: return board_part.value def process_piece(piece_node): piece = piece_node while piece.children: index = [child.name for child in piece.children].index(\\"PIECE\\") piece = piece[index] if piece.value == \\"piece\\": return \\"?piece\\" else: return piece.value def translate_tree(nltk_tree): if nltk_tree.height() == 2: tree = ngdl_classes.Tree(nltk_tree.node) tree.value = nltk_tree[0] return tree tree = ngdl_classes.Tree(nltk_tree.node) for subtree in nltk_tree: if type(subtree) == str: tree.value = subtree else: tree.children.append(translate_tree(subtree)) for subtree in tree.children: subtree.parent = tree return tree cond_dictionary = {\\"empty\\": [[[\\"BOARD_PART\\"], [\\"NUM\\", \\"?col\\"], [\\"NUM\\", \\"?row\\"]], \\"(empty {0} {1} {2})\\", \\"board_part_empty\\", False], \\"open\\": [[[\\"BOARD_PART\\"], [\\"NUM\\", \\"?col\\"], [\\"NUM\\", \\"?row\\"]], \\"(open {0} {1} {2})\\", \\"board_part_open\\", False], \\"full\\": [[[\\"BOARD_PART\\"], [\\"NUM\\", \\"?col\\"], [\\"NUM\\", \\"?row\\"]], \\"(full {0} {1} {2})\\", \\"board_part_full\\", False], \\"in-a-row\\": [[[\\"NUM\\"], [\\"PLAYER\\", \\"?player\\"], [\\"PIECE\\", \\"?piece\\"]], \\"({0}_in_a_row {1} {2})\\", \\"x_in_a_row\\", True] }"},{"instruction":"Generate Python code to print all Armstrong numbers between 1 and 1000.","output":"for num in range(1,1001): sum = 0 temp = num while temp > 0: digit = temp % 10 sum += digit ** 3 temp //= 10 if num == sum: print(num)"},{"instruction":"Write a Python program to calculate the mode of the given list of numbers. [2, 3, 4, 5, 2, 6, 1, 5]","output":"def find_mode(numbers): most_freq = 0 mode = None counts = {} for num in numbers: if num in counts: counts[num] += 1 else: counts[num] = 1 for num in counts: if counts[num] > most_freq: most_freq = counts[num] mode = num return mode"},{"instruction":"Given a set of sentences as input, write a Python program to return only the sentences that contain at least one noun. ['The sky is blue.', 'Roses are red.', 'The cat is cute.']","output":"import nltk def find_nouns(sentences): noun_sentences = [] for sentence in sentences: words = nltk.tokenize.word_tokenize(sentence) pos_tags = nltk.pos_tag(words) for tag in pos_tags: if tag[1] == 'NN' or tag[1] == 'NNS': noun_sentences.append(sentence) break return noun_sentences"},{"instruction":"Create an AI ML model using Python to classify a given dataset which contains restaurants reviews into different categories. dataset containing 8,000 restaurant review","output":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.metrics import classification_report # Read the dataset data = pd.read_csv('restaurant_reviews.csv') # Split the dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(data['review'], data['category'], test_size=0.2, random_state=42) # Initialize the CountVectorizer vect = CountVectorizer().fit(X_train) # Transform the training and testing sets X_train_vectorized = vect.transform(X_train) X_test_vectorized = vect.transform(X_test) # Initialize and train the model model = MultinomialNB().fit(X_train_vectorized, y_train) # Make predictions preds = model.predict(X_test_vectorized) # Generate the classification report print(classification_report(y_test, preds))"},{"instruction":"This code configures an MML file with datasource settings. To use it, you need to run the script with the following arguments: host: the host name (default is 'localhost') port: the port number (default is '5432') dbname: the database name (default is 'abs') user: the user name (default is 'abs') password: the password (default is 'abs') srs: the spatial reference system (default is '+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over') shapedir: the directory where the shapefiles are located (default is './layers/') extent: the bounding box to restrict queries (default is '12570320.00,5403474.50,17711958.00,1636391.88') mml: the name of the MML file to be configured (required) The script will modify the MML file by updating the datasource settings for layers that use a postgis datasource and adding datasource settings for layers that use shapefiles. The modified MML file will be saved in the same location as the original file.","output":"#!/usr/bin/env python # Copyright (c) 2011, Development Seed, Inc. # 2011, Andrew Harvey <andrew.harvey4@gmail.com> # All rights reserved. # # Redistribution and use in source and binary forms, with or without # modification, are permitted provided that the following conditions are # met: # # * Redistributions of source code must retain the above copyright # notice, this list of conditions and the following disclaimer. # * Redistributions in binary form must reproduce the above copyright # notice, this list of conditions and the following disclaimer in # the documentation and/or other materials provided with the # distribution. # * Neither the name of the Development Seed, Inc. nor the names of # its contributors may be used to endorse or promote products # derived from this software without specific prior written # permission. # # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\"AS # IS\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED # TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A # PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER # OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF # LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING # NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS # SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. import json from sys import path from os.path import join import argparse # argparse parser = argparse.ArgumentParser(description='Configure an MML file with datasource settings') parser.add_argument('--host', default='localhost') parser.add_argument('--port', default='5432') parser.add_argument('--dbname', default='abs') parser.add_argument('--user', default='abs') parser.add_argument('--password', default='abs') parser.add_argument('--srs', default='+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over') parser.add_argument('--shapedir', default='./layers/') # Increase performance if you are only rendering a particular area by # specifying a bounding box to restrict queries. Format is \\"XMIN,YMIN,XMAX,YMAX\\" in the # same units as the database (probably spherical mercator meters). The # whole world is \\"-20037508.34,-20037508.34,20037508.34,20037508.34\\". # Leave blank to let Mapnik estimate. parser.add_argument('--extent', default='12570320.00,-5403474.50,17711958.00,-1636391.88') parser.add_argument('--mml', required=True) args = parser.parse_args() # configure mml mml = join(path[0], args.mml + '/' + args.mml + '.mml') shoreline_300 = args.shapedir.rstrip('/') + '/shoreline_300.shp' processed_p = args.shapedir.rstrip('/') + '/processed_p.shp' with open(mml, 'r') as f: newf = json.loads(f.read()) f.closed with open(mml, 'w') as f: for layer in newf[\\"Layer\\"]: if \\"Datasource\\" in layer: ds_type = layer[\\"Datasource\\"].get(\\"type\\") if ds_type and ds_type == \\"postgis\\": layer[\\"Datasource\\"][\\"host\\"] = args.host layer[\\"Datasource\\"][\\"port\\"] = args.port layer[\\"Datasource\\"][\\"dbname\\"] = args.dbname layer[\\"Datasource\\"][\\"user\\"] = args.user layer[\\"Datasource\\"][\\"password\\"] = args.password layer[\\"Datasource\\"][\\"extent\\"] = args.extent layer[\\"srs\\"] = args.srs else: if layer[\\"id\\"] == \\"shoreline_300\\": layer[\\"Datasource\\"] = dict(); layer[\\"Datasource\\"][\\"file\\"] = shoreline_300 layer[\\"Datasource\\"][\\"type\\"] = 'shape' layer[\\"geometry\\"] = 'polygon' layer[\\"srs\\"] = '+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over' elif layer[\\"id\\"] == \\"processed_p\\": layer[\\"Datasource\\"] = dict(); layer[\\"Datasource\\"][\\"file\\"] = processed_p layer[\\"Datasource\\"][\\"type\\"] = 'shape' layer[\\"geometry\\"] = 'polygon' layer[\\"srs\\"] = '+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over' f.write(json.dumps(newf, indent=2)) f.closed"},{"instruction":"Design a program in Python to reverse a given string.","output":"def reverse_string(string): rev_str = '' idx = len(string) while idx > 0: rev_str += string[idx-1] idx -= 1 return rev_str"},{"instruction":"Design a python class for representing a student object which has name and grade as its instance variables.","output":"class Student(): def __init__(self, name, grade): self.name = name self.grade = grade def get_name(self): return self.name def get_grade(self): return self.grade def set_grade(self, grade): self.grade = grade"},{"instruction":"Optimize an existing Python web scraper to retrieve data from a website more quickly. def scrape(url): html = requests.get(url).text soup = BeautifulSoup(html, 'html.parser') page_info = {} page_info['text'] = soup.find('div',{'class':'contenttext'}).text page_info['url'] = url return page_info","output":"import requests from bs4 import BeautifulSoup import lxml import cProfile def scrape(url): cProfile.runctx('get_data(url)', globals(), locals(), filename='scraper.profile') def get_data(url): html_string = requests.get(url, timeout=5).text parsed_html = BeautifulSoup(html_string, 'lxml') page_info = {} page_text = parsed_html.find('div',{'class':'content-text'}).text page_info['text'] = page_text page_info['url'] = url return page_info"},{"instruction":"Create a REST API with Python and Django Rest Framework that supports a simple TODO list functionality. Not applicable","output":"from rest_framework import serializers from .models import Todo class TodoSerializer(serializers.ModelSerializer): class Meta: model = Todo fields = '__all__' # views.py from rest_framework import viewsets from .models import Todo from .serializers import TodoSerializer class TodoViewSet(viewsets.ModelViewSet): queryset = Todo.objects.all() serializer_class = TodoSerializer # urls.py from django.urls import path from .views import TodoViewSet urlpatterns = [ path('todos/', TodoViewSet.as_view()), ]"},{"instruction":"Design a data structure in Python to store a list of student names and their ages.","output":"student_data = { \\"student1\\" : {\\"name\\": \\"John\\", \\"age\\": 20}, \\"student2\\" : {\\"name\\": \\"Sam\\", \\"age\\": 22}, \\"student3 : {\\"name\\": \\"Alice\\", \\"age\\": 19} }"},{"instruction":"Create a program in Python to compress a given string using Runlength Encoding algorithm. Input string: “wwwwaaadexxxxxx”","output":"def compress(string): # Initialize dictionary dict_rle = {} # Traverse input string # and keep count of each # character for ch in string : dict_rle[ch] = dict_rle.get(ch, 0) + 1 # Store encoded string encoded_string = \\"\\" # Encode each character and its count for key,value in dict_rle.items(): # print \\"%s%s\\" % (key,value) encoded_string += key + str(value) return encoded_string len_encoded_string = compress(string) print \\"Encoded String: \\", encoded_string"},{"instruction":"Create a web application using Python and Flask that displays the temperature of a given city.","output":"from flask import Flask, render_template import requests #initialise flask application app = Flask(__name__) @app.route('/weather') def show_weather(): #get json weather data from api url = 'http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=YOUR_API_KEY' response = requests.get(url) data = response.json() #extract temperature from json data temp = data['main']['temp'] #convert temperature from kelvin to Celsius temp_celsius = temp - 273.15 #render template with temperature return render_template('weather.html', temp=temp_celsius) if __name__ == '__main__': app.run(debug=True, port=3000)"},{"instruction":"Develop a python code to find out the frequent items from a given list. list1 = [1,2,3,4,5,6,7,2,2,2,2,8,8,8,8,9,9,9]","output":"from collections import Counter list1 = [1,2,3,4,5,6,7,2,2,2,2,8,8,8,8,9,9,9] # Most common items in the list data = Counter(list1) # Printing most common items print(data.most_common()) # Output: [(2, 4), (8, 4), (9, 3), (1, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)]"},{"instruction":"Write a Python script that returns the most common words from a given text This is a sample text.","output":"def most_common_words(text): words = text.split() word_frequency = {} for word in words: if word in word_frequency: word_frequency[word] += 1 else: word_frequency[word] = 1 max_value = 0 most_common = None for word in word_frequency: if word_frequency[word] > max_value: max_value = word_frequency[word] most_common = word return most_common"},{"instruction":"Generate a Python code for finding the sum and difference of two numbers. 7, 9","output":"# Function to calculate the sum and difference def sum_difference(num1, num2): sum = num1 + num2 difference = num1 - num2 return sum, difference # Calculating the sum and difference x,y = sum_difference(7,9) # Print the results print(\\"Sum:\\", x) print(\\"Difference:\\", y)"},{"instruction":"Create an AI chatbot in Python that uses natural language processing and machine learning. The chatbot should be able to process user input, understand intents, and generate appropriate responses. Not applicable","output":"import nltk import numpy as np import random import string from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.metrics.pairwise import cosine_similarity # Download the corpus nltk.download('wordnet') # Get a text file with open('chatbot.txt', 'r', encoding='utf8', errors='ignore') as fin: raw = fin.read().lower() # Tokenize the text sent_tokens = nltk.sent_tokenize(raw) # Normalize the tokens lemmer = nltk.stem.WordNetLemmatizer() def LemTokens(tokens): return [lemmer.lemmatize(token) for token in tokens] remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation) def LemNormalize(text): return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict))) # Generate response for user's input def response(user_response): robo_response='' sent_tokens.append(user_response) TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english') tfidf = TfidfVec.fit_transform(sent_tokens) vals = cosine_similarity(tfidf[-1], tfidf) idx=vals.argsort()[0][-2] flat = vals.flatten() flat.sort() req_tfidf = flat[-2] if(req_tfidf==0): robo_response=robo_response+\\"I am sorry! I don't understand you\\" else: robo_response = robo_response+sent_tokens[idx] sent_tokens.remove(user_response) return robo_response"},{"instruction":"Rewrite this Python code to modernize it and make it more efficient. def removeNegatives(nums): result = [] for n in nums: if n >= 0: result.append(n) return resul","output":"def removeNegatives(nums): return [n for n in nums if n >= 0]"},{"instruction":"Create a function in Python that takes an array of integers as input and outputs the number of unique values in the array. [1,5,5,4,4,6,7,7]","output":"def get_unique_values(arr): # convert to set unique_arr = set(arr) # return length return len(unique_arr) # driver code arr = [1, 5, 5, 4, 4, 6, 7, 7] # function call unique_values = get_unique_values(arr) # print unique values print(unique_values)"},{"instruction":"Write an algorithm for solving the 8puzzle game in Python. Not applicable","output":"class PuzzleState: def __init__(self, puzz): self.puzz = puzz def get_neighbors(self): indices = [[i, j] for i in range(3) for j in range(3)] neighbors = [] for i, j in indices: if self.puzz[i][j] == 0: zero_list = [[i-1, j], [i+1, j], [i, j-1], [i, j+1]] for row, col in zero_list: if 0<=row<3 and 0<=col<3: neighbor = [list(x) for x in self.puzz] neighbor[i][j], neighbor[row][col] = neighbor[row][col], neighbor[i][j] neighbors.append(PuzzleState(neighbor)) return neighbors def bfs(start_state): visited = set() # stores previously visited states frontier = [start_state] while frontier: current = frontier.pop(0) if current.puzz == [[1,2,3],[4,5,6],[7,8,0]]: return current visited.add(str(current.puzz)) for nbr in current.get_neighbors(): if str(nbr.puzz) not in visited: frontier.append(nbr) start_state = PuzzleState([[4,2,3],[1,0,5],[7,8,6]]) bfs(start_state)"},{"instruction":"Create a Python program to validate user input. The program should take a string and only return valid if the string contains only the characters az, 09, and _ . text_string = valid_string123","output":"text_string = input() valid_characters = \\"abcdefghijklmnopqrstuvwxyz0123456789_\\" is_valid = True for c in text_string: if c not in valid_characters: is_valid = False if is_valid: print \\"Valid\\" else: print \\"Invalid\\""},{"instruction":"Write a Python program to insert an item at a given position into a list lst = [Red, Orange, Yellow] item = Black pos = 2","output":"def insert_item(lst, item, pos): lst.insert(pos, item) return lst lst = [\\"Red\\", \\"Orange\\", \\"Yellow\\"] item = \\"Black\\" pos = 2 print(insert_item(lst, item, pos))"},{"instruction":"Create an algorithm in Python that finds the minimum number of coins required to make a given amount of money. amount = 15","output":"# coins in denominations of 1, 5, 10 def numberOfCoins(amount): coins = [1,5,10] c = len(coins)-1 count = 0 while amount>0: if (amount >= coins[c]): count += amount // coins[c] amount %= coins[c] c -= 1 return count # Driver Code if __name__ == \\"__main__\\": amount = 15 coins = [1,5,10] print(\\"Minimum coins required is\\",numberOfCoins(amount))"},{"instruction":"Write a Python program to print the number of characters in a given string. The quick brown fox jumps over the lazy dog","output":"def count_chars(string): \\"\\"\\"Function to count characters in a given string\\"\\"\\" count = 0 # Loop through each character for char in string: count += 1 # Return the count return count # Given string string = \\"The quick brown fox jumps over the lazy dog\\" # Print the result print(\\"The number of characters in the given string:\\", count_chars(string))"},{"instruction":"Generate an instance of a linear programming problem in Python that minimizes the cost of the following inputs: 1kg at 2 and 2kg at 3","output":"from pulp import * # define the problem prob = LpProblem(\\"min cost problem\\", LpMinimize) # define the decision variables x = LpVariable(\\"x\\", 0, None) y = LpVariable(\\"y\\", 0, None) # define the objective function prob += 2*x+3*y # define the constraints prob += x + 2*y >= 1 # solve the problem prob.solve() # print the status of the problem print(\\"Status:\\", LpStatus[prob.status]) # print the optimal solution print(\\"Optimal Solutions:\\") print(\\"x=%.2f\\" % x.value()) print(\\"y=%.2f\\" % y.value())"},{"instruction":"Generate a Python program for predicting players' positions in a game of chess based on their moves. Not applicable","output":"import chess def predict_position(moves): board = chess.Board() for move in moves: board.push_san(move) return board.fen() if name == '__main__': moves = ['e4', 'e5', 'Nf3', 'Nc6', 'Bb5'] position = predict_position(moves) print(position) # Output: rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 3"},{"instruction":"Generate a Python code to search a number in a sorted array","output":"def binary_search(arr, x): l = 0 r = len(arr)-1 while l <= r: mid = l + (r - l) // 2 if arr[mid] == x: return mid elif arr[mid] < x: l = mid + 1 else: r = mid - 1 return -1"},{"instruction":"Create a Python script to calculate the mode of an integer list. [1,1,2,2,2]","output":"def get_mode(nums): # create a dictionary to store count of each number counts = {} # loop through the list for num in nums: # add the number to the count if not present if num not in counts: counts[num] = 1 # else increment the count else: counts[num] += 1 # sort the dictionary by count sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True) # get the most frequently occurring number mode = sorted_counts[0][0] return mode # test nums = [1,1,2,2,2] print(get_mode(nums)) # prints 2"},{"instruction":"Design an algorithm in Python to count the number of occurrences of each character in a given string. Hello World","output":"def count_chars(string): chars = {} for c in string: if c not in chars: chars[c] = 0 chars[c] += 1 return chars str = \\"Hello World\\" print(count_chars(str)) # {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}"},{"instruction":"mplement a REST API endpoint with Python and Flask to POST user data including username, email, and password. { username: scott_pilgrim, email: scott@pilgrim.com, password: ferriswheel }","output":"import flask from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/users', methods=['POST']) def create_user(): data = request.get_json() username = data['username'] email = data['email'] password = data['password'] # Insert into database return jsonify({\\"message\\": \\"User created successfully\\"}) if __name__ == '__main__': app.run()"},{"instruction":"Using the Keras library, create a neural network in Python for a binary classification task. Not applicable","output":"import numpy as np import keras from keras.models import Sequential from keras.layers import Dense, Dropout # Create a basic model model = Sequential() model.add(Dense(64, activation='relu', input_shape=(64,))) model.add(Dropout(0.5)) model.add(Dense(64, activation='relu')) model.add(Dropout(0.5)) model.add(Dense(1, activation='sigmoid')) # Compile the model model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])"},{"instruction":"Generate a Python function that takes a list as input, and returns the number of values in the list that are greater than the average of the values in the list. input_list = [4, 8, 6, 3, 10]","output":"def count_above_average(input_list): average = sum(input_list)/len(input_list) count = 0 for value in input_list: if value > average: count += 1 return count"},{"instruction":"Create a Django web application that allows users to view, add, and edit blog posts.","output":"# create our Django project django-admin startproject blogapp # create our app cd blogapp python manage.py startapp posts # create a model for our blog posts # in posts/models.py: from django.db import models class Post(models.Model): title = models.CharField(max_length=255) content = models.TextField() created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(auto_now=True) # register the model with admin # in posts/admin.py: from django.contrib import admin from .models import Post admin.site.register(Post) # create a form for our blog posts # in posts/forms.py: from django import forms from .models import Post class PostForm(forms.ModelForm): class Meta: model = Post fields = ['title', 'content'] # create a view for our posts # in posts/views.py: from django.shortcuts import render from .models import Post from .forms import PostForm def posts_view(request): posts = Post.objects.all() if request.method == 'POST': form = PostForm(request.POST) if form.is_valid(): post = form.save() return redirect('posts_view') else: form = PostForm() return render(request, 'posts/posts_view.html', { 'posts': posts, 'form': form })"},{"instruction":"Generate a neural network model in Python code to do multilevel classification We need a model to determine which of these 5 categories an image belongs to. The 5 categories are animals, vehicles, plants, scenery and objects.","output":"from keras.layers import Dense, Dropout, Activation, Input from keras.models import Model from keras.optimizers import SGD input_layer = Input(shape=(128,)) x = Dense(128, activation='relu')(input_layer) x = Dropout(0.25)(x) x = Dense(128, activation='relu')(x) x = Dropout(0.25)(x) x = Dense(128, activation='relu')(x) output_layer = Dense(5, activation='softmax')(x) model = Model(inputs=input_layer, outputs=output_layer) model.compile(loss='categorical_crossentropy', optimizer=SGD(lr=0.001, momentum=0.9, nesterov=True), metrics=['accuracy'])"},{"instruction":"Create a Python program to generate Fibonacci sequence upto n terms","output":"def fibonacci(n): a, b = 0, 1 fibs = [] while len(fibs) < n: fibs.append(a) a, b = b, a + b return fibs #get the Fibonacci sequence upto n terms print(fibonacci(n))"},{"instruction":"Using the comment as a guide, write a Python program to find the occurrence of any given word in a string. string = Welcome to my website website word = website","output":"string = \\"Welcome to my website website\\" word = \\"website\\" # TODO: Initialize count count = 0 # TODO: Find the words in the string words = string.split() # TODO: Update count for w in words: if w == word: count += 1 # TODO: Print print(\\"The word \\"{}\\" occured {} times in the given string\\".format(word, count))"},{"instruction":"it possible to generate a random password with a minimum length of 8 and this password should contain at least one upper case letter, one lower case letter, one number and one special character?","output":"Yes, it is possible to generate a random password with a minimum length of 8 and this password should contain at least one upper case letter, one lower case letter, one number and one special character. You can generate a random password using the following Python code snippet: import random import string def generate_password(): lowercaseletter = string.ascii_lowercase uppercaseletter = string.ascii_uppercase numerals = string.digits specialcharacters = string.punctuation characters = lowercaseletter + uppercaseletter + numerals + specialcharacters password = ''.join(random.choice(characters) for x in range(8)) return password"},{"instruction":"Create a function \`\`squareSum\`\` in python which will take a list of numbers as arguments and calculate their sum of squares. numbers=[1, 2, 3, 4, 5]","output":"def squareSum(numbers): sum_of_squares = 0 for num in numbers: sum_of_squares += num**2 return sum_of_squares"},{"instruction":"Write a python program which will show the number of even numbers in a list. [1, 2, 3, 4, 5, 6]","output":"def count_even_numbers(list): count = 0 for num in list: if num % 2 == 0: count += 1 return count"},{"instruction":"Write a Python program to format a number with leading zeros.","output":"def leading_zeros(num, zeros=6): return str(num).zfill(zeros)"},{"instruction":"Construct a Python program to remove duplicate values from a list. [1, 2, 1, 4, 6, 2]","output":"def remove_duplicates(list): new_list = [] for item in list: if item not in new_list: new_list.append(item) return new_list"},{"instruction":"Write a Python program to print an empty square based on size Size = 8","output":"def print_square(size): # loop to print size number of lines for _ in range(size): # print stars on each line print(\\"*\\" * size) if __name__ == '__main__': size = 8 print_square(size)"},{"instruction":"Create a program in Python that takes a given string and prints out the number of times each letter occurs in the string. Hello World","output":"def count_letters(str): # initialize an empty dictionary counts = {} # count the frequency of each letter for letter in str: if letter in counts: counts[letter] += 1 else: counts[letter] = 1 return counts # main program str = \\"Hello World\\" counts = count_letters(str) #print the resulting dictionary print(\\"Letter counts: \\", counts)"},{"instruction":"mplement a genetic algorithm in Python for solving an optimization problem. The algorithm should find the minimum of a given function. The function is f(x) = x^2 – 5x + 6","output":"import random def fitness_function(x): return x**2 - 5*x + 6 #target function def gen_population(population_size): population = [] for _ in range(population_size): individual = random.random() * 10 population.append(individual) return population def selection(population): # Calculate fitness values fitness_values = [] for individual in population: fitness_values.append(fitness_function(individual)) # Select fittest individual fittest_individual = population[fitness_values.index(min(fitness_values))] return fittest_individual def mutate(indivudal): mutate_prob = 0.2 rand = random.random() if rand < mutate_prob: mutated_individual = indivudal * random.uniform(0.5,1.5) else: mutated_individual = indivudal return mutated_individual def crossover(parent1, parent2): crossover_prob = 0.7 rand = random.random() if rand < crossover_prob: offspring = [] offspring.append((parent1 + parent2)/2) else: offspring = [parent1, parent2] return offspring def genetic_algorithm(population_size): population = gen_population(population_size) for epoch in range(100): fittest_individual = selection(population) population = [mutate(individual) for individual in population] population = [crossover(parent1, parent2) for parent1, parent2 in zip(population[0::2], population[1::2])] return fittest_individual print(genetic_algorithm(50)) # Prints the minimum of the function"},{"instruction":"Convert the following code into equivalent Python 3 function. function doubleString(str) { return str + str; }","output":"def doubleString(str): return str + str"},{"instruction":"Write a function in Python that computes the average of all numbers in a given list. numbers = [4, 8, 6, 2, 10]","output":"def compute_average(numbers): total = 0 for num in numbers: total += num return total / len(numbers) average = compute_average(numbers) print(average) # Outputs 6"},{"instruction":"Create a Python script that takes in a string of text and returns the number of characters that contain a vowel.","output":"def count_vowels(text): counter = 0 for char in text: if char in \\"aeiouAEIOU\\": counter += 1 return counter"},{"instruction":"Create an API with a Python Flask backend that returns the average number of a given list of numbers. [6, 7, 9, 8]","output":"from flask import Flask, request, jsonify # create the flask app app = Flask(__name__) # define an endpoint to compute the average value @app.route(\\"/average\\", methods=['POST']) def average(): # get the list of numbers from the request numbers = request.json # compute the average avg = sum(numbers)/len(numbers) # return the average return jsonify({ 'average': avg }) # start the server if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Classify the following programming languages: JavaScript, Python, R, PHP, Java, and C. Not applicable","output":"JavaScript: Scripting/Web Python: Scripting/General-purpose R: Statistical/Data Science PHP: Scripting/Web Java: Object-oriented/General-purpose C: Low-level/Systems programming"},{"instruction":"Write a python program to generate the first n prime numbers. n = 10","output":"def generate_prime_numbers(n): prime_numbers = [] count = 0 num = 2 while count < n: is_prime = True for i in range(2, num): if num % i == 0: is_prime = False break if is_prime: prime_numbers.append(num) count += 1 num += 1 return prime_numbers primes = generate_prime_numbers(n) print(primes) # Outputs [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"},{"instruction":"Generate a Python function to calculate the sum of the first 100 positive natural numbers Not applicable","output":"def sum_first_100_natural_numbers(): total = 0 for i in range(1,101): total += i return total # example print(sum_first_100_natural_numbers()) # output: 5050"},{"instruction":"Write a Python program to print out all the distinct elements of an array.","output":"def print_distinct(lst): seen = set() distinct = [] for x in lst: if x not in seen: distinct.append(x) seen.add(x) print(distinct)"},{"instruction":"Create a Python program that finds all combinations of two given numbers that sum up to a given goal.","output":"def combination sums(nums, target): result = [] for i in range(len(nums)): x = nums[i] for j in range(i + 1, len(nums)): if (x + nums[j]) == target: result.append([x,nums[j]]) return result"},{"instruction":"Create a program to calculate the Fibonacci number for a given number using Python. Not applicable","output":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program print(Fibonacci(9))"},{"instruction":"Construct a Python program to sum the items of a given list. [3, 5, 6, 10]","output":"def list_sum(input_list): \\"\\"\\"Computes the sum of the items of a given list.\\"\\"\\" output = 0 for item in input_list: output += item return output print(list_sum([3, 5, 6, 10]))"},{"instruction":"Develop an automated tool that can convert Python code to C++ code. Not applicable","output":"import ast import sys from cpp import parser, generator def py2cpp(py_code): py_ast = ast.parse(py_code) cpp_ast = parser.convert(py_ast) cpp_code = generator.convert(cpp_ast) return cpp_code if __name__ == '__main__': py_code = sys.stdin.read() cpp_code = py2cpp(py_code) sys.stdout.write(cpp_code)"},{"instruction":"Design a simple OOP calculator class in Python to carry our basic arithematic operations.","output":"class SimpleCalculator: \\"\\"\\"A simple class which has methods to do basic arithmetic operations.\\"\\"\\" def __init__(self): \\"\\"\\"Initializing an instance of the SimpleCalculator class.\\"\\"\\" self.result = 0 def __str__(self): \\"\\"\\"Returns the string representation for the SimpleCalculator class.\\"\\"\\" return \\"Simple Calculator\\" def add(self, num1, num2): self.result = num1 + num2 return self.result def subtract(self, num1, num2): self.result = num1 - num2 return self.result def multiply(self, num1, num2): self.result = num1 * num2 return self.result def divide(self, num1, num2): self.result = num1 / num2 return self.result"},{"instruction":"Write a python program to concatenate strings within a given list and join them using a space. [Hello, World]","output":"''.join(str(x) for x in [\\"Hello\\", \\"World\\"])"},{"instruction":"Print the Fibonacci sequence up to a given number in Python. 10","output":"# Declare a function def Fibonacci(num): a = 0 b = 1 # Iterate for i in range(num): print(a, end=\\" \\") c = a + b a = b b = c print() # Print the sequence Fibonacci(10)"},{"instruction":"Generate a Python function to print a pattern of stars n = 5","output":"def starPattern(n): # outer loop to handle number of rows for i in range(0, n): # inner loop to handle number of columns for j in range(0, i + 1): # printing stars print(\\"* \\", end=\\"\\") # ending line after each row print(\\"r\\") # Driver code n = 5 starPattern(n)"},{"instruction":"Calculate the number of days between two dates in Python. date1 = '20200818' date2 = '20200901'","output":"from datetime import date # Function to calculate number of days between two dates def getNumberOfDays(date1, date2): return (date2 - date1).days # Driver program date1 = date(2020, 8, 18) date2 = date(2020, 9, 1) print(getNumberOfDays(date1, date2))"},{"instruction":"Write a Python program to encrypt a plaintext using Advanced Encryption Standard (AES). Plaintext: This is a secret message","output":"from Crypto.Cipher import AES plaintext = \\"This is a secret message\\" key = b\\"Sixteen Byte Key\\" cipher = AES.new(key, AES.MODE_ECB) encrypted_text = cipher.encrypt(plaintext.encode('utf-8')) print(encrypted_text.hex()) # Output c3a40f3dce503efa1f00561d60e579b9"},{"instruction":"Can you modify this Python program to store strings in a dictionary instead of lists? data = [['a', 1], ['b', 2], ['c', 3], ['a', 4]]","output":"data = {'a': [1, 4], 'b': [2], 'c': [3]}"},{"instruction":"Construct an algorithm in python that evaluates whether a number is an Armstrong number (371 is an Armstrong number where 3<sup>3</sup> + 7<sup>3</sup> + 1<sup>3</sup> = 371) 371","output":"def isArmstrong(num): temp = num sum = 0 while temp > 0: digit = temp % 10 sum += digit ** 3 temp //= 10 if num == sum: return True else: return False if __name__ == \\"__main__\\": num = 371 result = isArmstrong(num) if result == True: print(f\\"{num} is an Armstrong number\\") else: print(f\\"{num} is not an Armstrong number\\")"},{"instruction":"Using Python and TensorFlow, optimize a convolutional neural network model so that its prediction accuracy is maximized. Not applicable.","output":"import tensorflow as tf import numpy as np # model definition model = tf.keras.models.Sequential([ tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)), tf.keras.layers.MaxPooling2D((2, 2)), tf.keras.layers.Conv2D(64, (3, 3), activation='relu'), tf.keras.layers.MaxPooling2D((2, 2)), tf.keras.layers.Conv2D(64, (3, 3), activation='relu'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(10, activation='softmax') ]) # optimization model.compile(optimizer='sgd', loss='sparse_categorical_crossentropy', metrics=['accuracy']) # data train_data = np.load('train_data.npy') train_labels = np.load('train_labels.npy') X_train = train_data/255. y_train = train_labels # fitting model.fit(X_train, y_train, epochs=10, validation_split=0.2)"},{"instruction":"Generate a random password that contains 10 digits in Python.","output":"import random def generate_password(): data = \\"0123456789\\" length = 10 password = \\"\\".join(random.sample(data, length)) return password print(generate_password())"},{"instruction":"Create a database using Python to store information about movie reviews.","output":"import sqlite3 # create an in-memory SQLite3 database db_connection = sqlite3.connect(':memory:') cursor = db_connection.cursor() # Create a table called 'reviews' cursor.execute('''CREATE TABLE reviews (movie_name text, review_text text, reviewer_name text, rating int)''') db_connection.commit()"},{"instruction":"Given a string, write a python program to print the next largest palindrome. 1234","output":"def next_largest_palindrome(num): # convert string to a number num = int(num) # increment number by 1 num += 1 while not is_palindrome(str(num)): # increment number by 1 num += 1 return num def is_palindrome(num): return num == num[::-1] print(next_largest_palindrome(\\"1234\\")) # Output: 1331"},{"instruction":"Create a function in Python that takes two strings and checks if they are anagrams of each other. apple, pleap","output":"def is_anagram(str1, str2): if len(str1)!= len(str2): return False first_list = list(str1.lower()) second_list = list(str2.lower()) first_list.sort() second_list.sort() return first_list == second_list print(is_anagram(\\"apple\\",\\"pleap\\"))"},{"instruction":"Build a program to remove all duplicate words from a given list of strings [Python, Python, programming, language, language]","output":"def remove_duplicates(lst): new_list = [] for i in lst: if i not in new_list: new_list.append(i) return new_list print(remove_duplicates([\\"Python\\", \\"Python\\", \\"programming\\", \\"language\\", \\"language\\"]))"},{"instruction":"mplement a function in Python that takes a list of integers and a number and returns a list of numbers that have the given number as their sum. lst = [1, 2, 3, 4] num = 4","output":"def find_combos(lst, num): result = [] for i in range(len(lst)): for j in range(i+1, len(lst)): if lst[i] + lst[j] == num: result.append([lst[i], lst[j]]) return result print(find_combos([1, 2, 3, 4], 4)) # Output: [[1, 3], [2, 2], [3, 1]]"},{"instruction":"Generate a Python program to calculate the area of a rectangle given two parameters representing the length and the width. Not applicable","output":"def area_rectangle(length, width): return length * width print(area_rectangle(2, 3)) # Output: 6"},{"instruction":"Construct a Python program to encrypt a given text using the Caesar cipher. abc","output":"def encrypt_caesar(text, shift): \\"\\"\\"Encrypt the text using the Caesar cipher\\"\\"\\" encrypted_text = \\"\\" for char in text: if char.isalpha(): encrypted_char = chr(ord(char) + shift) if encrypted_char.isalpha(): encrypted_text += encrypted_char else: encrypted_text += chr(ord(encrypted_char) - 26) else: encrypted_text += char return encrypted_text result = encrypt_caesar('abc', 2) print(result)"},{"instruction":"Please rank the following libraries according to their relevance for our program in Python. NumPy, SciPy, Pand","output":"NumPy > SciPy > Pandas"},{"instruction":"Construct a python program to flatten a nested list recursively. list = [[1,2,3], [4,5], [6]]","output":"# Defining a function to flatten a nested list def flatten(list): flatlist = [] for item in list: if isinstance(item, list): flatlist.extend(flatten(item)) else: flatlist.append(item) return flatlist # Testing the flatten function list = [[1,2,3], [4,5], [6]] print(flatten(list)) # [1, 2, 3, 4, 5, 6]"},{"instruction":"Create a web scraper in Python that fetches news headlines from different news outlets. Not applicable","output":"import requests from bs4 import BeautifulSoup url = \\"http://example.com/\\" # Fetch the page r = requests.get(url) html = r.text # Parse the html soup = BeautifulSoup(html, 'html.parser') # Extract headlines headlines = soup.find_all('h3') for headline in headlines: print(headline.get_text())"},{"instruction":"Given a data frame that has the following columns 'Name', 'Phone', and 'Email', use Python to print the name and phone number of all customers in the data frame.","output":"import pandas as pd df = pd.read_csv(\\"data.csv\\") for index, row in df.iterrows(): print(\\"Name:\\", row['Name'], \\"Phone:\\", row['Phone'])"},{"instruction":"Create a Python program to simulate a vending machine with two coins, a quarter and a dime. No inpu","output":"class VendingMachine: def __init__(self): self.coins_inserted = 0 def insert_coins(self, quarters, dimes): self.coins_inserted += quarters * 25 + dimes * 10 def get_coins_inserted(self): return self.coins_inserted"},{"instruction":"Create a python script to output all the valid paths from the root to the leaves of a tree. tree = { Root: { A: { A1: {}, A2: {} }, B: { B1: {}, B2: {} } } }","output":"def list_paths(tree, path=[]): all_paths = [] head = list(tree.keys())[0] tail = tree[head] if path: cur_path = path + [head] else: cur_path = [head] if not tail: all_paths.append(cur_path) else: for node in tail.keys(): all_paths += list_paths(tail[node], cur_path) return all_paths list_paths(tree)"},{"instruction":"Create a python program to remove all the values in a list that are greater than a given value. list = [10, 15, 20, 25, 30], remove values greater than 15","output":"# Defining a function to remove all the values in a list that are greater than a given value def remove_greater(list, n): return [val for val in list if val <= n] # Testing the remove_greater() function list = [10, 15, 20, 25, 30] print(remove_greater(list, 15)) # [10, 15]"},{"instruction":"Create a class in Python for representing a Stack data structure. The class should support two methods: push and pop. Not applicable","output":"class Stack: def __init__(self): self._items = [] def push(self, item): self._items.append(item) def pop(self): return self._items.pop()"},{"instruction":"Generate a program to output the most frequently used words in a given string txt = Python is a powerful language that is used for a wide range of applications","output":"from collections import Counter def most_frequent(string): data = string.split(\\" \\") data1 = Counter(data) return data1.most_common(1)[0] txt = \\"Python is a powerful language that is used for a wide range of applications\\" assert most_frequent(txt) == ('is', 2) print(\\"Most frequent word is : \\", most_frequent(txt))"},{"instruction":"Create a Python program that recommends products based on the input preferences. Example input: Preferences: User likes items of type 'clothing'.","output":"# Define a function to get recommendations for a given user def get_recommendations(user): # Get the user preferences user_preferences = user.get_preferences() # Initialize an empty list for recommendations recommendations = [] # Get all products of type 'clothing' clothing_products = get_all_products('clothing') # Iterate over the clothing products for product in clothing_products: # Calculate the similarity score score = calculate_similarity_score(product, user_preferences) # If the score is greater than 0, add the product to the list of recommendations if score > 0: recommendations.append(product) # Return the list of recommendations return recommendations"},{"instruction":"Given two strings s and t, create a new Python function to check if s is an anagram of t. s = anagram t = nagaram","output":"def is_anagram(s, t): s_list = list(s) t_list = list(t) s_list.sort() t_list.sort() if s_list == t_list: return True else: return False"},{"instruction":"Create a supervised Machine Learning classification model in Python to predict the type of animal based on four numerical features. Not applicable","output":"import pandas as pd from sklearn.preprocessing import StandardScaler from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier # Read the dataset dataset = pd.read_csv('dataset.csv') # Define features and labels X = dataset.iloc[:, :4] y = dataset.iloc[:, -1] # Split the dataset into training set and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2) # Normalize the data scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Create and train the model model = KNeighborsClassifier(n_neighbors=3) model.fit(X_train, y_train) # Test the model accuracy = model.score(X_test, y_test) print('Accuracy: ', accuracy)"},{"instruction":"Develop an ordinary least squares regression model in Python for the following data and explain the meaning of the parameters: independent variables (x1, x2): 2.0, 5.0 dependent variables (y): 7.5","output":"import numpy as np from sklearn.linear_model import LinearRegression # define input data X = np.array([[2.0,5.0]]) y = np.array([7.5]) # initialise and train the model regr = LinearRegression() regr.fit(X, y) # The coefficients print('Coefficient/Parameter: ', regr.coef_) # The intercept print('Intercept: ', regr.intercept_) # The meaning of the parameters: # The coefficient/Parameters is the slope of the regression line. It indicates the effect that a unit change in one of the independent variables has on the dependent variable. # The intercept is the point where the regression line intersects the y-axis. It indicates the value of the dependent variable when all independent variables are equal to zero."},{"instruction":"Edit the given code segment in Python and make it a valid program: x = 5 def add_two_numbers(x, y): z = x + y return z","output":"x = 5 def add_two_numbers(x, y): z = x + y return z result = add_two_numbers(x, 5) print(result)"},{"instruction":"This code is a controller for a differential drive. To use it, you need to create an instance of the DiffController class, passing in the device and name as arguments. Then, call the startup() method to initialize the controller. Finally, call the update() method in a loop to update the controller and handle movement requests. The cmdVelCb() method can be used to handle movement requests. The shutdown() method can be called to stop the controller. The getDiagnostics() method can be used to get a diagnostics status.","output":"#!/usr/bin/env python \\"\\"\\" diff_controller.py - controller for a differential drive Copyright (c) 2010-2011 Vanadium Labs LLC. All right reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of Vanadium Labs LLC nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\"AS IS\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL VANADIUM LABS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \\"\\"\\" import rospy from math import sin,cos,pi from geometry_msgs.msg import Quaternion from geometry_msgs.msg import Twist from nav_msgs.msg import Odometry from diagnostic_msgs.msg import * from tf.broadcaster import TransformBroadcaster from ax12 import * from controllers import * from struct import unpack class DiffController(Controller): \\"\\"\\" Controller to handle movement & odometry feedback for a differential drive mobile base. \\"\\"\\" def __init__(self, device, name): Controller.__init__(self, device, name) self.pause = True self.last_cmd = rospy.Time.now() # parameters: rates and geometry self.rate = rospy.get_param('~controllers/'+name+'/rate',10.0) self.timeout = rospy.get_param('~controllers/'+name+'/timeout',1.0) self.t_delta = rospy.Duration(1.0/self.rate) self.t_next = rospy.Time.now() + self.t_delta self.ticks_meter = float(rospy.get_param('~controllers/'+name+'/ticks_meter')) self.base_width = float(rospy.get_param('~controllers/'+name+'/base_width')) self.base_frame_id = rospy.get_param('~controllers/'+name+'/base_frame_id', 'base_link') self.odom_frame_id = rospy.get_param('~controllers/'+name+'/odom_frame_id', 'odom') # parameters: PID self.Kp = rospy.get_param('~controllers/'+name+'/Kp', 5) self.Kd = rospy.get_param('~controllers/'+name+'/Kd', 1) self.Ki = rospy.get_param('~controllers/'+name+'/Ki', 0) self.Ko = rospy.get_param('~controllers/'+name+'/Ko', 50) # parameters: acceleration self.accel_limit = rospy.get_param('~controllers/'+name+'/accel_limit', 0.1) self.max_accel = int(self.accel_limit*self.ticks_meter/self.rate) # output for joint states publisher self.joint_names = [\\"base_l_wheel_joint\\",\\"base_r_wheel_joint\\"] self.joint_positions = [0,0] self.joint_velocities = [0,0] # internal data self.v_left = 0 # current setpoint velocity self.v_right = 0 self.v_des_left = 0 # cmd_vel setpoint self.v_des_right = 0 self.enc_left = None # encoder readings self.enc_right = None self.x = 0 # position in xy plane self.y = 0 self.th = 0 self.dx = 0 # speeds in x/rotation self.dr = 0 self.then = rospy.Time.now() # time for determining dx/dy # subscriptions rospy.Subscriber(\\"cmd_vel\\", Twist, self.cmdVelCb) self.odomPub = rospy.Publisher(\\"odom\\", Odometry, queue_size=5) self.odomBroadcaster = TransformBroadcaster() rospy.loginfo(\\"Started DiffController (\\"+name+\\"). Geometry: \\" + str(self.base_width) + \\"m wide, \\" + str(self.ticks_meter) + \\" ticks/m.\\") def startup(self): if not self.fake: self.setup(self.Kp,self.Kd,self.Ki,self.Ko) def update(self): now = rospy.Time.now() if now > self.t_next: elapsed = now - self.then self.then = now elapsed = elapsed.to_sec() if self.fake: x = cos(self.th)*self.dx*elapsed y = -sin(self.th)*self.dx*elapsed self.x += cos(self.th)*self.dx*elapsed self.y += sin(self.th)*self.dx*elapsed self.th += self.dr*elapsed else: # read encoders try: left, right = self.status() except Exception as e: rospy.logerr(\\"Could not update encoders: \\" + str(e)) return rospy.logdebug(\\"Encoders: \\" + str(left) +\\",\\"+ str(right)) # calculate odometry if self.enc_left == None: d_left = 0 d_right = 0 else: d_left = (left - self.enc_left)/self.ticks_meter d_right = (right - self.enc_right)/self.ticks_meter self.enc_left = left self.enc_right = right d = (d_left+d_right)/2 th = (d_right-d_left)/self.base_width self.dx = d / elapsed self.dr = th / elapsed if (d != 0): x = cos(th)*d y = -sin(th)*d self.x = self.x + (cos(self.th)*x - sin(self.th)*y) self.y = self.y + (sin(self.th)*x + cos(self.th)*y) if (th != 0): self.th = self.th + th # publish or perish quaternion = Quaternion() quaternion.x = 0.0 quaternion.y = 0.0 quaternion.z = sin(self.th/2) quaternion.w = cos(self.th/2) self.odomBroadcaster.sendTransform( (self.x, self.y, 0), (quaternion.x, quaternion.y, quaternion.z, quaternion.w), rospy.Time.now(), self.base_frame_id, self.odom_frame_id ) odom = Odometry() odom.header.stamp = now odom.header.frame_id = self.odom_frame_id odom.pose.pose.position.x = self.x odom.pose.pose.position.y = self.y odom.pose.pose.position.z = 0 odom.pose.pose.orientation = quaternion odom.child_frame_id = self.base_frame_id odom.twist.twist.linear.x = self.dx odom.twist.twist.linear.y = 0 odom.twist.twist.angular.z = self.dr self.odomPub.publish(odom) if now > (self.last_cmd + rospy.Duration(self.timeout)): self.v_des_left = 0 self.v_des_right = 0 # update motors if not self.fake: if self.v_left < self.v_des_left: self.v_left += self.max_accel if self.v_left > self.v_des_left: self.v_left = self.v_des_left else: self.v_left -= self.max_accel if self.v_left < self.v_des_left: self.v_left = self.v_des_left if self.v_right < self.v_des_right: self.v_right += self.max_accel if self.v_right > self.v_des_right: self.v_right = self.v_des_right else: self.v_right -= self.max_accel if self.v_right < self.v_des_right: self.v_right = self.v_des_right self.write(self.v_left, self.v_right) self.t_next = now + self.t_delta def shutdown(self): if not self.fake: self.write(0,0) def cmdVelCb(self,req): \\"\\"\\" Handle movement requests. \\"\\"\\" self.last_cmd = rospy.Time.now() if self.fake: self.dx = req.linear.x # m/s self.dr = req.angular.z # rad/s else: # set motor speeds in ticks per 1/30s self.v_des_left = int( ((req.linear.x - (req.angular.z * self.base_width/2.0)) * self.ticks_meter) / 30.0) self.v_des_right = int( ((req.linear.x + (req.angular.z * self.base_width/2.0)) * self.ticks_meter) / 30.0) def getDiagnostics(self): \\"\\"\\" Get a diagnostics status. \\"\\"\\" msg = DiagnosticStatus() msg.name = self.name msg.level = DiagnosticStatus.OK msg.message = \\"OK\\" if not self.fake: msg.values.append(KeyValue(\\"Left\\", str(self.enc_left))) msg.values.append(KeyValue(\\"Right\\", str(self.enc_right))) msg.values.append(KeyValue(\\"dX\\", str(self.dx))) msg.values.append(KeyValue(\\"dR\\", str(self.dr))) return msg # # Controller Specification: # # setup: Kp, Kd, Ki, Ko (all unsigned char) # # write: left_speed, right_speed (2-byte signed, ticks per frame) # # status: left_enc, right_enc (4-byte signed) # def setup(self, kp, kd, ki, ko): success = self.device.execute(253, AX_CONTROL_SETUP, [10, kp, kd, ki, ko]) def write(self, left, right): \\"\\"\\" Send a closed-loop speed. Base PID loop runs at 30Hz, these values are therefore in ticks per 1/30 second. \\"\\"\\" left = left&0xffff right = right&0xffff success = self.device.execute(253, AX_CONTROL_WRITE, [10, left%256, left>>8, right%256, right>>8]) def status(self): \\"\\"\\" read 32-bit (signed) encoder values. \\"\\"\\" values = self.device.execute(253, AX_CONTROL_STAT, [10]) left_values = \\"\\".join([chr(k) for k in values[0:4] ]) right_values = \\"\\".join([chr(k) for k in values[4:] ]) try: left = unpack('=l',left_values)[0] right = unpack('=l',right_values)[0] return [left, right] except: return None"},{"instruction":"Write a Python program to find the longest common substring in two given strings. xyzabcd, aabcdxyz","output":"def longest_common_substring(str1, str2): n1 = len(str1) n2 = len(str2) maxi = 0 c = [[0 for x in range(n2+1)] for x in range(n1+1)] result = 0 for i in range(n1): for j in range(n2): if (str1[i] == str2[j]): if(i == 0 or j == 0): c[i][j] = 1 else: c[i][j] = c[i -1][j-1] + 1 if (c[i][j] > maxi): maxi = c[i][j] result = i - maxi + 1 return str1[result:result + maxi] print(longest_common_substring(\\"xyzabcd\\", \\"aabcdxyz\\")) # abcd"},{"instruction":"Create a Python program that classifies a given sentence as positive, neutral, or negative. The movie was really terrible.","output":"def predict_sentiment(sentence): pred = model.predict([sentence]) if pred[0] == 0: print(\\"Negative sentiment\\") elif pred[0] == 1: print(\\"Neutral sentiment\\") else: print(\\"Positive sentiment\\")"},{"instruction":"Create a data structure in Python to store employee names and their corresponding salaries. Michael 45000, Andrew 55000, Mark 70000","output":"employee_data = { \\"Michael\\": 45000, \\"Andrew\\": 55000, \\"Mark\\": 70000 }"},{"instruction":"Design an algorithm in Python that prints out all the prime numbers up to a certain number. n = 15","output":"def is_prime(n): if n == 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def get_prime_numbers(n): result = [] for num in range(2, n+1): if is_prime(num): result.append(num) return result prime_numbers = get_prime_numbers(15) print(prime_numbers)"},{"instruction":"Write a basic web scraper in Python using the BeautifulSoup library. The scraper should take as input a URL and output the text on the page. Input URL: https://en.wikipedia.org/wiki/Web_scraping","output":"import requests from bs4 import BeautifulSoup url = \\"https://en.wikipedia.org/wiki/Web_scraping\\" response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') text = soup.find_all('p') for t in text: print(t.text)"},{"instruction":"Create a Python script to detect any missing numbers in a given sorted array and return the missing numbers. [2, 3, 5, 6, 7, 8, 10]","output":"def missingNumbers(arr): start = arr[0] end = arr[len(arr)-1] result = [] for i in range(start, end+1): if i not in arr: result.append(i) return result # Test Case arr = [2, 3, 5, 6, 7, 8, 10] print(missingNumbers(arr)) # Output: # [4, 9]"},{"instruction":"Construct a Python class to represent a point in the Cartesian plane.","output":"class Point: def __init__ (self, x=0, y=0): self.x = x self.y = y def __str__ (self): return \\"({0},{1})\\".format(self.x,self.y) def distance_from_origin (self): return ((self.x ** 2) + (self.y ** 2)) ** 0.5"},{"instruction":"Write Python code to parse a PDF document and extract all text from it. None","output":"import PyPDF2 #open the pdf file pdfFileObj = open('sample.pdf', 'rb') #create an object for pdf file pdfReader = PyPDF2.PdfFileReader(pdfFileObj) #get number of pages numPages = pdfReader.numPages #print no. of pages print(\\"Number of pages:\\", numPages) #define a counter count = 0 #while loop to read each page while count < numPages: #define a page object pageObj = pdfReader.getPage(count) #extract text from the page object print (pageObj.extractText()) #increment the counter count += 1 #closing pdf file object pdfFileObj.close()"},{"instruction":"Design a Python program to print prime numbers between two given integer numbers. 30, 50","output":"#Function to check if a number is prime def checkPrime(num): if num > 1: for i in range(2, num): if (num % i) == 0: return False return True else: return False #Function to find prime numbers in given range def getPrimeNumbersInRange(low,high): if low < high: for i in range(low,high + 1): if checkPrime(i): print(i,\\" is a prime number\\") #Call the function low = 30 high = 50 getPrimeNumbersInRange(low, high)"},{"instruction":"Develop a Python program that takes a natural number N as input, and returns a list of the first N prime numbers. N = 10","output":"# Python3 Program to print a # list of prime numbers # Function to generate prime numbers def generatePrimeNumbers(N): checkprime = 1 # variable to check prime number prime = [2] # List to store prime numbers count = 1 # Counter to store number of prime numbers for num in range(3, N + 1, 2): for j in range(2, num): # If anything neatly divides the number, don't consider it prime if (num % j == 0): checkprime = 0 # Otherwise check if it isPrime if (checkprime != 0): prime.append(num) count += 1 checkprime = 1 # Store only First N Prime Numbers if(count == N): return prime # Driver code N = 10 prime = generatePrimeNumbers(N) print(\\"First\\", N, \\"prime numbers are:\\") for i in range(0, N): print(prime[i], end = \\" \\")"},{"instruction":"Generate a python script that replaces each character in a string with its reverse: string = 'Hello World'","output":"def reverseString(string): n = len(string) # create an empty array revString = [0 for i in range(n)] for i in range(n): revString[n-i-1] = string[i] return \\"(\\" + ''.join(revString) + \\")\\" print(reverseString(\\"Hello World\\"))"},{"instruction":"Create a program in Python that given a list of integer inputs, sorts them in descending order. list = [4, 9, 2, 6, 5]","output":"list = [4, 9, 2, 6, 5] # sort list in descending order list.sort(reverse=True) print(list) # [9, 6, 5, 4, 2]"},{"instruction":"Create a correct python code to combine two lists into one. listA = [1, 2, 3] listB = [4, 5, 6]","output":"listA = [1, 2, 3] listB = [4, 5, 6] combined_list = listA + listB print(combined_list)"},{"instruction":"Create a python script to generate all possible valid parentheses combinations with n pairs of parentheses.","output":"def generate_parentheses(n): \\"\\"\\" Generates all possible valid parentheses combinations with n pairs of parentheses. \\"\\"\\" res = [] def backtrack(s = '', left = 0, right = 0): if len(s) == 2 * n: res.append(s) return if left < n: backtrack(s + '(', left+1, right) if right < left: backtrack(s + ')', left, right+1) backtrack() return res print(generate_parentheses(3))"},{"instruction":"Construct a web service using flask that takes a JSON payload and returns a response in the form of a python dictionary","output":"from flask import Flask, request import json app = Flask(__name__) @app.route('/web_service', methods=['POST']) def web_service(): json_payload = request.get_json() # Do stuff to manipulate the data # ... response_dictionary = { 'key1': 'val1', 'key2': 'val2', } return json.dumps(response_dictionary) if __name__ == '__main__': app.run()"},{"instruction":"Generate a Python script to delete the duplicate element from an array. [3, 8, 4, 3, 2, 8]","output":"def removeDuplicates(arr): final_list = [] for num in arr: if num not in final_list: final_list.append(num) return final_list # Driver Code arr = [3, 8, 4, 3, 2, 8] print(removeDuplicates(arr))"},{"instruction":"Design a class in Python to represent a circle. < noinput >","output":"class Circle: \\"\\"\\"Class to represent a circle.\\"\\"\\" def __init__(self, radius): \\"\\"\\"Initialize the circle.\\"\\"\\" self.radius = radius def get_area(self): \\"\\"\\"Calculate and return the area of the circle.\\"\\"\\" return 3.14 * self.radius * self.radius"},{"instruction":"Create a program in Python which can calculate the median of an array of integers. [3, 5, 7, 4, 8, 1, 9]","output":"def median(arr): arr.sort() if len(arr) % 2 != 0: return arr[len(arr)//2] else: return (arr[len(arr)//2 - 1] + arr[len(arr)//2]) / 2 arr = [3, 5, 7, 4, 8, 1, 9] med = median(arr) print('Median of the given array is:', med)"},{"instruction":"Update the given Python program to shuffle an array of numbers. [1, 2, 3, 4, 5, 6]","output":"import random def shuffleArray(arr): random.shuffle(arr) return arr array = [1, 2, 3, 4, 5, 6] shuffledArray = shuffleArray(array) print(shuffledArray)"},{"instruction":"Create a python program to summarize a given text using natural language processing.","output":"import nltk from nltk.tokenize import sent_tokenize, word_tokenize from nltk.corpus import stopwords from collections import defaultdict from string import punctuation from heapq import nlargest import numpy as np # Function to summarize the given text def summarize(text, n): # Tokenize the sentences in the text sents = sent_tokenize(text) # Tokenize the words in the text words = word_tokenize(text.lower()) # Generate a list of stop words stop_words = set(stopwords.words('english') + list(punctuation)) # Create a word frequency dictionary word_freq = defaultdict(int) for word in words: if word not in stop_words: word_freq[word] += 1 max_freq = max(word_freq.values()) # Normalize the frequencies for word in word_freq.keys(): word_freq[word] *= 1.0/max_freq # Compute sentence scores sent_scores = defaultdict(int) for i, sent in enumerate(sents): for word in word_tokenize(sent.lower()): if word in word_freq.keys(): sent_scores[i] += word_freq[word] # Identify the n highest scoring sentences summary_sents = nlargest(n, sent_scores, key=sent_scores.get) summary = [sents[j] for j in sorted(summary_sents)] return ' '.join(summary)"},{"instruction":"Build a web scraper in Python that scrapes the content from a web page. Not applicable","output":"import requests from bs4 import BeautifulSoup URL = 'https://example.com/page' r = requests.get(URL) soup = BeautifulSoup(r.content, 'html5lib') # Get all the links on the page links = soup.find_all('a') # Get the text from all the links link_text = [link.text for link in links] # Get the URLs for all the links link_urls = [link.get('href') for link in links]"},{"instruction":"Create a python function to check if a given string contains a specific substring. The function should loop through the string and find the substring, and return a boolean value indicating if the substring was found or not. myString = Hello World! substring = World","output":"def checkIfStringContainsSubstring(myString, substring): for i in range(len(myString) - len(substring) + 1): if myString[i:i+len(substring)] == substring: return True return False"},{"instruction":"Write a Python function to multiply two given numbers.","output":"def multiply(num1, num2): return num1 * num2"},{"instruction":"Create a Python program to parse a list of strings and print the words with odd length. ['abc', 'hello', 'world']","output":"list = ['abc', 'hello', 'world'] for word in list: if (len(word) % 2 != 0): print(word)"},{"instruction":"Generate a function for multiplying two matrices in Python. matrix1 = [ [1, 2], [3, 4] ] matrix2 = [ [5, 6], [7, 8] ]","output":"def multiply_matrices(matrix1, matrix2): # Calculates the number of rows and columns of the matrices rows_A = len(matrix1) cols_A = len(matrix1[0]) rows_B = len(matrix2) cols_B = len(matrix2[0]) # Check if the matrices have valid dimensions if cols_A != rows_B: print(\\"Error! The matrices have invalid dimensions\\") # Initialize a new matrix as result result = [[0 for row in range(cols_B)] for col in range(rows_A)] # Iterate over the rows of the first matrix for i in range(rows_A): # Iterate over the columns of the second matrix for j in range(cols_B): # Iterate over the columns of the first matrix for k in range(cols_A): result[i][j] += matrix1[i][k] * matrix2[k][j] return result # Input matrices matrix1 = [ [1, 2], [3, 4] ] matrix2 = [ [5, 6], [7, 8] ] # Call the function and print the result result = multiply_matrices(matrix1, matrix2) print(result) // [[19, 22], [43, 50]]"},{"instruction":"Convert the following code from C++ to Python. int main() { int val1 = 25; int val2 = 6; int sum = val1 + val2; cout << sum; return 0; }","output":"def main(): val1 = 25 val2 = 6 sum = val1 + val2 print(sum) return 0"},{"instruction":"Program a function in Python that takes an array and shuffles its elements.","output":"import random def shuffleArray(array): for i in range(len(array)): randomIdx = random.randint(0,len(array)-1) temp = array[i] array[i] = array[randomIdx] array[randomIdx] = temp return array"},{"instruction":"Build a natural language processor that can translate English to French.","output":"# Python import googletrans from googletrans import Translator translator = Translator() text = 'Hello, World!' result = translator.translate(text, dest='fr') print(result.text)"},{"instruction":"Create a Python program with a class \`\`\`Book\`\`\` that has \`\`\`title\`\`\` and \`\`\`author\`\`\` properties. Not applicable","output":"class Book: def __init__(self, title, author): self.title = title self.author = author def __str__(self): return f'{self.title} by {self.author}'"},{"instruction":"Generate a correct python code to sort a given array of numbers.","output":"def bubble_sort(arr): for i in range(len(arr)-1): for j in range(len(arr)-1-i): if arr[j] > arr[j+1]: arr[j],arr[j+1] = arr[j+1],arr[j] return arr"},{"instruction":"Create a Python function to calculate the particle diameter of a given radius. radius = 0.75","output":"def particle_diameter(radius): return 2 * radius diameter = particle_diameter(0.75) print(diameter) # Output: 1.5"},{"instruction":"Write Python code to determine whether or not a given string contains a valid IP address.","output":"import re def is_ip_valid(ip): pattern = r\\"^d{1,3}.d{1,3}.d{1,3}.d{1,3}\\" if re.match(pattern, ip): return True else: return False print(is_ip_valid(\\"192.168.0.1\\"))"},{"instruction":"Create a REST API with Python and Django that allows users to list items, create a new item, and delete an existing item. Not applicable","output":"# models.py from django.db import models class Item(models.Model): name = models.CharField(max_length=255) # views.py from django.http import JsonResponse from .models import Item def list_items(request): items = Item.objects.all() items_list = [item.name for item in items] return JsonResponse(items_list, safe=False) def create_item(request): item = Item(name=request.POST['name']) item.save() return JsonResponse({'message': 'Item created'}) def delete_item(request): item = Item.objects.get(name=request.POST['name']) item.delete() return JsonResponse({'message': 'Item deleted'}) # urls.py from django.urls import path from .views import list_items, create_item, delete_item urlpatterns = [ path('items/', list_items, name='items-list'), path('items/create', create_item, name='items-create'), path('items/delete', delete_item, name='items-delete'), ]"},{"instruction":"Create a Python program to display the Fibonacci sequence up to n.","output":"# This Python 3 code prints the Fibonacci sequence up to n def Fibonacci(n): f0, f1 = 0, 1 for i in range(0, n): print(f0,end=\\" \\"); next = f0 + f1; f0 = f1; f1 = next; # Driver Program print(\\"Fibonacci sequence up to n: \\") Fibonacci(10)"},{"instruction":"Write a Python program to automatically format and validate user input. Not applicable","output":"import re def validate_input(input): # validate pattern: pattern = r\\"^[a-zA-Z]*\\" # compile regex regex = re.compile(pattern) # check if input matches pattern if(regex.match(input)): # format the input input = input.lower().capitalize() # return formatted input return input else: # return error return \\"Error: Invalid input\\""},{"instruction":"Create a program to detect plagiarism using Python.","output":"import difflib def detect_plagiarism(text1, text2): sequenceMatcher = difflib.SequenceMatcher(None, text1, text2) matchPercentage = sequenceMatcher.ratio() * 100 return matchPercentage detect_plagiarism(\\"This is a sample text\\", \\"This is a sample text.\\")"},{"instruction":"Create a random number generator in Python.","output":"import random def random_num_generator(): return random.randint(0, 9) # Print a number print(random_num_generator())"},{"instruction":"Given a set of input and output vectors, write a Python function to train a perceptron to classify the vectors. The function should take two parameters: the input training data X and the corresponding output labels y. X = [[0, 0], [0, 1], [1, 0], [1, 1]] y = ['0', '1', '1', '0']","output":"import numpy as np def train_perceptron(X, y): # initialize weights and bias values weights = np.zeros(len(X[0])) bias = 0 # define learning rate lr = 0.01 # number of epochs epochs = 100 # train the weights and bias for _ in range(epochs): for i in range(len(X)): z = np.dot(X[i], weights) + bias prediction = 1 if z >= 0 else 0 weights = weights + lr * (y[i] - prediction) * X[i] bias = bias + lr * (y[i] - prediction) return weights, bias"},{"instruction":"Create a webhook in Python for a Slack bot. This webhook should provide an endpoint to post messages to Slack. Not applicable","output":"from flask import Flask, request, Response import json import requests app = Flask(__name__) # replace THIS_IS_YOUR_SLACK_WEBHOOK_URL with the URL of Slack Webhook SLACK_WEBHOOK_URL = 'THIS_IS_YOUR_SLACK_WEBHOOK_URL' # create a route for the webhook @app.route('/slack', methods=['POST']) def post_to_slack(): # get the payload from the request data = request.get_json() # process the payload # post the message to the Slack webhook payload = { 'text': data['message'] } response = requests.post(SLACK_WEBHOOK_URL, data=json.dumps(payload)) if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Write a piece of code in Python to reverse a given string. abcdef","output":"string = 'abcdef' print(string[::-1])"},{"instruction":"Write a Python program that takes an input list of integers and finds out the sum of all the odd elements in the list. List: [2, 3, 4, 5, 6]","output":"def sum_odd_elements(int_list): '''This function takes a list of integers and returns the sum of all the odd elements.''' total = 0 for num in int_list: if num % 2 != 0: total += num return total int_list = [2, 3, 4, 5, 6] sum = sum_odd_elements(int_list) print(sum) # 8"},{"instruction":"Write a Python function that takes in a list of strings and returns a new list with all duplicates removed. [apple,apple,banana,orange,pear,banana]","output":"def remove_duplicates(lst): new_list = [] for x in lst: if x not in new_list: new_list.append(x) return new_list print(remove_duplicates([\\"apple\\",\\"apple\\",\\"banana\\",\\"orange\\",\\"pear\\",\\"banana\\"]))"},{"instruction":"Design a software that reverse orders of string words. Python programming is fu","output":"def reverse_string_words(string): words = string.split(\\" \\") words.reverse() return ' '.join(words) string = \\"Python programming is fun\\" print(reverse_string_words(string))"},{"instruction":"Create a Python program that takes a varchar input and encodes it using the Base 64 algorithm. Hello World!","output":"import base64 string = \\"Hello World!\\" data_bytes = string.encode('ascii') encoded_string = base64.b64encode(data_bytes) print(encoded_string)"},{"instruction":"Write a Python script to predict the sentiment of a given sentence using the TextBlob library. Life is full of surprises.","output":"import textblob sentence = \\"Life is full of surprises.\\" sentiment = textblob.TextBlob(sentence).sentiment.polarity if sentiment == 0: # neutral sentiment print(\\"Neutral Sentiment\\") elif sentiment > 0: # positive sentiment print(\\"Positive Sentiment\\") else: # negative sentiment print(\\"Negative Sentiment\\")"},{"instruction":"Generate a Python program to determine if a given binary tree is balanced","output":"class Node: def __init__(self, val): self.val = val self.left = None self.right = None def is_balanced(node): if node is None: return True left_height = get_height(node.left) right_height = get_height(node.right) return (abs(left_height - right_height) <= 1 and is_balanced(node.left) == True and is_balanced(node.right) == True ) def get_height(node): if node is None: return 0 return 1 + max(get_height(node.left), get_height(node.right))"},{"instruction":"Design a neural network application in Python to predict the price of real estate. Table Name: Properties Columns: id: int location: varchar size: int price:","output":"# Imports import numpy as np import pandas as pd from sklearn import preprocessing import tensorflow as tf import keras # Read in the data data = pd.read_csv('data/properties.csv') # Split data into features and labels X = data[['location', 'size']] y = data['price'] # Preprocess the data scaler = preprocessing.StandardScaler() X = scaler.fit_transform(X) # Build the model model = keras.Sequential() # Input Layer model.add(tf.keras.layers.InputLayer(input_shape=(2,))) # Hidden Layers model.add(tf.keras.layers.Dense(128, activation='relu')) model.add(tf.keras.layers.Dense(128, activation='relu')) model.add(tf.keras.layers.Dense(128, activation='relu')) # Output Layer model.add(tf.keras.layers.Dense(1)) # Compile the model model.compile( optimizer='adam', loss='mean_squared_error', metrics=['mae'] ) # Train the model model.fit(X, y, epochs=10, batch_size=256) # Test the model test_data = np.array([[127, 2123]], dtype=float) test_data = scaler.transform(test_data) prediction = model.predict(test_data) print(prediction)"},{"instruction":"Generate a Python program to remove duplicates from a list. [1, 4, 2, 6, 4, 1, 2]","output":"def remove_duplicates(list1): # Function to remove duplicates from a list # convert the list into a set of unique elements list_unique = set(list1) # convert the set to a list list_unique = list(list_unique) return list_unique # input list list1 = [1, 4, 2, 6, 4, 1, 2] # remove duplicates from the list list1 = remove_duplicates(list1) # print the new list print(list1)"},{"instruction":"Write a Python program to calculate the value of the expression 2x^2 + 5x + 3 for x = 3. Not applicable","output":"x = 3 result = 2*(x**2) + 5*x + 3 print(result) # Outputs: 34"},{"instruction":"Fix the following python code. def remove_vowel(string): vowels = ('a', 'e', 'o', 'u') for x in vowels: txt = string.replace(x, ) return tx","output":"def remove_vowel(string): vowels = ('a', 'e', 'o', 'u') for x in vowels: string = string.replace(x, \\"\\") return string"},{"instruction":"Using the comment as a guide, create a python loop that calculates the sum of the numbers in a given list Input List: [1, 2, 3, 4, 5]","output":"def sum_list(input_list): \\"\\"\\"Calculate the sum of the numbers in a given list\\"\\"\\" total = 0 for num in input_list: total += num return total"},{"instruction":"Generate a Python program to classify the types of letters contained in a string. 'abcdefghijklmnopqrstuvwxyz'","output":"def classify_letter_types(string): lowercase_letters = [] uppercase_letters = [] for letter in string: if letter.isupper(): uppercase_letters.append(letter) else: lowercase_letters.append(letter) return { 'lowercase_letters': lowercase_letters, 'uppercase_letters': uppercase_letters }"},{"instruction":"Write a Python script to calculate the distance between two points. Point1 = (x1, y1) Point2 = (x2, y2)","output":"import math def calculate_distance(x1, y1, x2, y2): x_diff = x2 - x1 y_diff = y2 - y1 distance = math.sqrt(x_diff**2 + y_diff**2) return distance result = calculate_distance(x1, y1, x2, y2) print(result)"},{"instruction":"Construct a python program to delete all duplicate elements in a list list_input = [1,2,3,1,2,4]","output":"def delete_duplicates(list_input): # Initialize a new list to store non-duplicate elements non_duplicate_list = [] # Iterate through the input list for i in list_input: # Check if the element is already in the non-duplicate list if i not in non_duplicate_list: # If not, add the element to the non-duplicate list non_duplicate_list.append(i) # Return the list without any duplicate elements return non_duplicate_list"},{"instruction":"Design an algorithm to search for a given keyword in a collection of documents using Python. Collection of documents Keyword: ‘Python’","output":"# an algorithm to search for a given keyword in a collection of documents # the algorithm takes two arguments def search(documents, keyword): # create an empty list matches = [] # loop over the documents for document in documents: # loop over the words in the document for word in document.words: # compare the word to the keyword if word == keyword: # add the document to the list matches.append(document) # return the list of matches return matches"},{"instruction":"Generate a script to establish a secure connection between two computers.","output":"# Use Python import socket # Create socket object s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Bind the socket to an address and port s.bind((‘127.0.0.1’, 8888)) # Listen for incomming connections s.listen() # Perform handshake to establish a secure connection while True: # Accept connection conn, addr = s.accept() with conn: print('Connected by', addr) # Generate handshake messages handshake_msg = generate_handshake_msg() # Send handshake message conn.send(handshake_msg) # Receive message received_msg = conn.recv(1024) # Validate handshake message if validate_handshake_msg(received_msg): # Establish connection print('Secure connection established!') break"},{"instruction":"Write a Python program to search a substring in a string without using builtin functions. string = ‘This is a test string’ substring = ‘test’","output":"def search_substring(string, substring): \\"\\"\\"Function to search substring within a string\\"\\"\\" matches = [] # Iterate over the search string for i in range(len(string)): temp = \\"\\" # Iterate over the substring for j in range(len(substring)): if substring[j] == string[i + j]: temp += substring[j] else: break if temp == substring: matches.append(i) # Return the list of matches return matches string = 'This is a test string' substring = 'test' result = search_substring(string, substring) # Print the result print(result) # Output # [10]"},{"instruction":"Generate a python program to print all possible paths from top left to bottom right of a mXn matrix both the row and column indices of the matrix should be numbered starting from 0.","output":"def print_all_paths(m, n): # create a two dimensional array to store the path path = [[0 for i in range(m)] for j in range(n)] print_all_paths_util(m, n, 0, 0, path) # utility function to print all paths def print_all_paths_util(m, n, row, col, path): # if we reach the bottommost row, then append the # current position to the path array if (row == m-1): for i in range(col, n): path[row][i] = 1 print(path) # If we reach the rightmost column, then append the # current position to the path array elif (col == n-1): for i in range(row, m): path[i][col] = 1 print(path) # When neither row or the column indices # have reached the bottom or rightmost else: # mark the current cell 1 path[row][col] = 1 # print all paths by exploring right print_all_paths_util(m, n, row, col + 1, path) # print all paths by exploring down print_all_paths_util(m, n, row + 1, col, path) # mark the current cell 0 path[row][col] = 0"},{"instruction":"Using Python, construct an algorithm that creates a dictionary with the numbers 15 as keys and the square of each number as its value. Not applicable","output":"numbers_dictionary = {} for i in range(1,6): numbers_dictionary[i] = i*i print(numbers_dictionary)"},{"instruction":"Design a Python program to simulate a simple calculator.","output":"#Function to add two numbers def add(val1, val2): return val1+val2 #Function to subtract two numbers def subtract(val1, val2): return val1-val2 #Function to multiply two numbers def multiply(val1, val2): return val1*val2 #Function to divide two numbers def divide(val1, val2): return val1/val2 while True: print(\\"Please provide the operator and operands\\") print(\\"1. Add\\") print(\\"2. Subtract\\") print(\\"3. Multiply\\") print(\\"4. Divide\\") print(\\"5. Exit\\") # Take input from the user choice = int(input(\\"Enter your choice of operation: \\")) # Check if choice is one of the four options if choice in (1, 2, 3, 4): num1 = float(input(\\"Enter the first number: \\")) num2 = float(input(\\"Enter the second number: \\")) if choice == 1: print(num1, \\"+\\", num2, \\"=\\", add(num1,num2)) elif choice == 2: print(num1, \\"-\\", num2, \\"=\\", subtract(num1,num2)) elif choice == 3: print(num1, \\"*\\", num2, \\"=\\", multiply(num1,num2)) elif choice == 4: print(num1, \\"/\\", num2, \\"=\\", divide(num1,num2)) elif choice == 5: print(\\"Exiting Program!\\") break else: print(\\"Please enter a valid option!\\")"},{"instruction":"Write a Python program to calculate the area of a triangle given three side lengths.","output":"def area_of_triangle(a, b, c): # calculate the semi-perimeter s = (a + b + c) / 2 # calculate the area area = (s * (s-a) * (s-b) * (s-c)) ** 0.5 return area"},{"instruction":"Generate a list of integers from 1 to 10 using a for loop in Python.","output":"nums = [] for i in range(1, 11): nums.append(i) print(nums)"},{"instruction":"Generate a python script to calculate the distance between two points in 3D space","output":"def distance_three_d(p1,p2): a = (p2[0] - p1[0])**2 b = (p2[1] - p1[1])**2 c = (p2[2] - p1[2])**2 return (a + b + c) **0.5"},{"instruction":"Enumerate several simple programming solutions to compute the factorial of a number in Python.","output":"\\"\\"\\" Enumerate several simple programming solutions to compute the factorial of a number in Python \\"\\"\\" # Solution 1: Using a loop def factorial_1(n): fact = 1 for i in range(2, n+1): fact *= i return fact # Solution 2: Using recursion def factorial_2(n): if n == 0: return 1 else: return n * factorial_2(n-1) # Solution 3: Using math library import math def factorial_3(n): return math.factorial(n)"},{"instruction":"Create a function in Python that takes a string as parameter and returns 'True' if the string contains at least one number.","output":"def contains_number(string): return any(char.isdigit() for char in string)"},{"instruction":"Suggest some techniques to optimize the speed of a python program.","output":"Some techniques to optimize the speed of a Python program include: - Optimal use of libraries - Use of efficient data structures - Using vectorization and/or NumPy arrays - Writing efficient loops - Enabling for in-place operations - Avoiding unnecessary computations - Using efficient algorithms - Avoiding global accesses - Profiling and memory optimization"},{"instruction":"Create a Python program to calculate the dot product of two vectors. [1, 2, 3] and [4, 5, 6]","output":"def dot_product(v1, v2): total = 0 for (x1, x2) in zip(v1, v2): total += x1*x2 return total"},{"instruction":"Write a Python script to download a website and save it to a local folder. Domain name of the website = example.com","output":"import requests from bs4 import BeautifulSoup import os import urllib # Set the URL you want to webscrape from url = 'https://example.com/' # Connect to the URL response = requests.get(url) # Parse HTML and save to BeautifulSoup object soup = BeautifulSoup(response.text, 'html.parser') # Create directory for website os.mkdir(url.split('//')[-1]) # Changing working directory to website directory os.chdir(url.split('//')[-1]) # Create HTML file and save content with open('index.html', 'wb') as f: f.write(soup.prettify('utf-8')) # Get all images # images = soup.findAll('img') images = soup.findAll('img', {'src': True}) # Download images: for image in images: filename = image['src'].split('/')[-1] urllib.request.urlretrieve(image['src'], filename)"},{"instruction":"Edit a given Python program in order to make it run faster. # This function calculates the sum of the numbers 0 to n. def my_sum(n): s = 0 for i in range(n+1): s += i return","output":"# This function calculates the sum of the numbers 0 to n. def my_sum(n): if n <= 1: return n else: return n + my_sum(n-1)"},{"instruction":"Write a Python program to find the sum of natural numbers less than 500 that are multiples of 3 or 5.","output":"def sum_multiples(max_num): values = [] for i in range(1, max_num): if i % 3 == 0 or i % 5 == 0: values.append(i) return sum(values) result = sum_multiples(500) print(result)"},{"instruction":"Develop a code in Python to print the nth Fibonacci number. 6","output":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) print(Fibonacci(6))"},{"instruction":"Suggest a way to get a substring of a given string in Python.","output":"def substring(string, start, end): '''This function takes a string, start index and end index, and returns the substring between the two given indexes.''' return string[start:end]"},{"instruction":"mplement a spell checker in Python.","output":"import re import collections def words(text): return re.findall('[a-z]+', text.lower()) def train(features): model = collections.defaultdict(lambda: 1) for f in features: model[f] += 1 return model NWORDS = train(words(open('big.txt').read())) def edits1(word): s = [(word[:i], word[i:]) for i in range(len(word) + 1)] deletes = [a + b[1:] for a, b in s if b] transposes = [a + b[1] + b[0] + b[2:] for a, b in s if len(b)>1] replaces = [a + c + b[1:] for a, b in s for c in alphabet if b] inserts = [a + c + b for a, b in s for c in alphabet] return set(deletes + transposes + replaces + inserts) def known_edits2(word): return set(e2 for e1 in edits1(word) for e2 in edits1(e1) if e2 in NWORDS) def known(words): return set(w for w in words if w in NWORDS) def correct(word): candidates = known([word]) or known(edits1(word)) or known_edits2(word) or [word] return max(candidates, key=NWORDS.get)"},{"instruction":"Given a duration in seconds, write a Python code to convert it into a string showing hours, minutes and seconds. 32400","output":"def to_time_string(duration): hours, remainder = divmod(duration, 3600) minutes, seconds = divmod(remainder, 60) return \\"%02d:%02d:%02d\\" % (hours, minutes, seconds) print(to_time_string(32400))"},{"instruction":"Create a class in Python to represent a Person with attributes: name, age, height, and weight. Not applicable","output":"class Person: def __init__(self, name, age, height, weight): self.name = name self.age = age self.height = height self.weight = weight def describe(self): return f'{self.name} is {self.age} years old, {self.height} cm tall and weighs {self.weight} kg.'"},{"instruction":"Can you write a Python script to print the first 20 prime numbers?","output":"# Program to print the first 20 prime numbers def is_prime(num): # Base case if num == 1: return False elif num == 2: return True elif num % 2 == 0: return False # Iterate from 3 to the sqrt of number i = 3 while(i * i <= num): if num % i == 0: return False i = i + 2 return True # Print the first 20 prime numbers n = 2 count = 0 while count < 20: if is_prime(n): print(n, end=' ', flush=True) count += 1 n += 1"},{"instruction":"Create a Python script that reverses the order of the words in each sentence in a given text. The quick brown fox jumped over the lazy dog.","output":"def reverse_order(text): # Split the text into sentences sentences = text.split(\\".\\") # Reverse the order of the words in each sentences for index, sentence in enumerate(sentences): words = sentence.split(\\" \\") reversed_words = words[::-1] sentences[index] = \\" \\".join(reversed_words) # Join the sentences in the original order reversed_text = \\". \\".join(sentences) # Return the result return reversed_text reverse_order(\\"The quick brown fox jumped over the lazy dog.\\") # Output: dog. lazy the over jumped fox brown quick The"},{"instruction":"Create a Python script to print the numbers between 500 and 1000 that are divisible by 7","output":"for i in range(500, 1001): if i%7 == 0: print(i, end=' ')"},{"instruction":"Create a machine learning model in Python that can predict the number of likes a post in a social media platform will get given its text content, shares count, and other additional information. text content: “I am going on a vacation next week! #vacation #excited” shares count: 25 additional information: post published within the last 24 hour","output":"# Import the relevant libraries import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression # Load the dataset data = pd.read_csv('posts.csv') # Preprocess the data data['is_recent'] = data['date'] > (pd.datetime.now() - pd.Timedelta(days=1)) # Create the feature matrix and the target vector X = data[['text_content', 'shares_count', 'is_recent']] y = data['likes_count'] # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train the model model = LinearRegression() model.fit(X_train, y_train) # Make predictions on test set predictions = model.predict(X_test) # Calculate the accuracy accuracy = model.score(X_test, y_test) print('Model accuracy:', accuracy)"},{"instruction":"Write a Python program to find the first nonrepeated character of a given string. string = teststring","output":"def first_non_repeated_char(string): for ch in string: if string.count(ch) == 1: return ch"},{"instruction":"Use the BeautifulSoup library in Python to parse HTML from a website. Example website: https://www.example.com","output":"import requests from bs4 import BeautifulSoup #make a GET request response = requests.get('https://www.example.com') #parse HTML soup = BeautifulSoup(response.text, 'html.parser')"},{"instruction":"This code generates a GNU Radio Python Flow Graph for an output window. To use it, import the necessary libraries and create an instance of the Output_window class. Set the desired threshold, sample rate, frequency, and FFT size using the provided methods. Then start the flow graph using the Start() method and wait for it to finish using the Wait() method.","output":"#!/usr/bin/env python2 # GNU Radio Python Flow Graph # Title: Output Window # Generated: Sat Apr 30 16:45:27 2016 if __name__ == '__main__': import ctypes import sys if sys.platform.startswith('linux'): try: x11 = ctypes.cdll.LoadLibrary('libX11.so') x11.XInitThreads() except: print \\"Warning: failed to XInitThreads()\\" from gnuradio import analog from gnuradio import blocks from gnuradio import eng_notation from gnuradio import fft from gnuradio import gr from gnuradio import wxgui from gnuradio.eng_option import eng_option from gnuradio.fft import window from gnuradio.filter import firdes from gnuradio.wxgui import fftsink2 from gnuradio.wxgui import forms from gnuradio.wxgui import numbersink2 from grc_gnuradio import wxgui as grc_wxgui from optparse import OptionParser import osmosdr import time import wx class Output_window(grc_wxgui.top_block_gui): def __init__(self): grc_wxgui.top_block_gui.__init__(self, title=\\"Output Window\\") _icon_path = \\"/usr/share/icons/hicolor/32x32/apps/gnuradio-grc.png\\" self.SetIcon(wx.Icon(_icon_path, wx.BITMAP_TYPE_ANY)) # Variables self.threshold = threshold = -55 self.samp_rate = samp_rate = 2.048e6 self.freq = freq = 658e6 self.fft_size = fft_size = 1.024e3 # Blocks self.notebook = self.notebook = wx.Notebook(self.GetWin(), style=wx.NB_TOP) self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \\"Spectrum\\") self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \\"Output\\") self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \\"Stream\\") self.Add(self.notebook) _threshold_sizer = wx.BoxSizer(wx.VERTICAL) self._threshold_text_box = forms.text_box( parent=self.notebook.GetPage(1).GetWin(), sizer=_threshold_sizer, value=self.threshold, callback=self.set_threshold, label=\\"Threshold\\", converter=forms.float_converter(), proportion=0, ) self._threshold_slider = forms.slider( parent=self.notebook.GetPage(1).GetWin(), sizer=_threshold_sizer, value=self.threshold, callback=self.set_threshold, minimum=-100, maximum=0, num_steps=100, style=wx.SL_HORIZONTAL, cast=float, proportion=1, ) self.notebook.GetPage(1).Add(_threshold_sizer) _freq_sizer = wx.BoxSizer(wx.VERTICAL) self._freq_text_box = forms.text_box( parent=self.notebook.GetPage(0).GetWin(), sizer=_freq_sizer, value=self.freq, callback=self.set_freq, label=\\"freq\\", converter=forms.float_converter(), proportion=0, ) self._freq_slider = forms.slider( parent=self.notebook.GetPage(0).GetWin(), sizer=_freq_sizer, value=self.freq, callback=self.set_freq, minimum=10e6, maximum=10e9, num_steps=100, style=wx.SL_HORIZONTAL, cast=float, proportion=1, ) self.notebook.GetPage(0).Add(_freq_sizer) self.wxgui_numbersink2_1 = numbersink2.number_sink_f( self.notebook.GetPage(1).GetWin(), unit=\\"signal present\\", minval=0, maxval=1, factor=1, decimal_places=0, ref_level=0, sample_rate=samp_rate, number_rate=15, average=False, avg_alpha=None, label=\\"Signal Detection\\", peak_hold=False, show_gauge=True, ) self.notebook.GetPage(1).Add(self.wxgui_numbersink2_1.win) self.wxgui_numbersink2_0 = numbersink2.number_sink_f( self.notebook.GetPage(1).GetWin(), unit=\\"dB\\", minval=-120, maxval=0, factor=1.0, decimal_places=10, ref_level=0, sample_rate=samp_rate, number_rate=15, average=False, avg_alpha=30e-3, label=\\"level\\", peak_hold=False, show_gauge=False, ) self.notebook.GetPage(1).Add(self.wxgui_numbersink2_0.win) self.wxgui_fftsink2_0 = fftsink2.fft_sink_c( self.notebook.GetPage(0).GetWin(), baseband_freq=freq, y_per_div=5, y_divs=10, ref_level=0, ref_scale=2.0, sample_rate=samp_rate, fft_size=1024, fft_rate=15, average=True, avg_alpha=30e-3, title=\\"Spectrum\\", peak_hold=False, win=window.rectangular, ) self.notebook.GetPage(0).Add(self.wxgui_fftsink2_0.win) self.rtlsdr_source_0 = osmosdr.source( args=\\"numchan=\\" + str(1) + \\" \\" + \\"\\" ) self.rtlsdr_source_0.set_sample_rate(samp_rate) self.rtlsdr_source_0.set_center_freq(freq, 0) self.rtlsdr_source_0.set_freq_corr(0, 0) self.rtlsdr_source_0.set_dc_offset_mode(0, 0) self.rtlsdr_source_0.set_iq_balance_mode(0, 0) self.rtlsdr_source_0.set_gain_mode(False, 0) self.rtlsdr_source_0.set_gain(20, 0) self.rtlsdr_source_0.set_if_gain(10, 0) self.rtlsdr_source_0.set_bb_gain(5, 0) self.rtlsdr_source_0.set_antenna(\\"\\", 0) self.rtlsdr_source_0.set_bandwidth(0, 0) self.fft_1 = fft.fft_vcc(1024, True, (window.rectangular(1024)), True, 1) self.blocks_vector_to_stream_0 = blocks.vector_to_stream(gr.sizeof_float*1, 1024) self.blocks_threshold_ff_0 = blocks.threshold_ff(-100, threshold, 0) self.blocks_stream_to_vector_0 = blocks.stream_to_vector(gr.sizeof_gr_complex*1, 1024) self.blocks_nlog10_ff_0 = blocks.nlog10_ff(10, 1, 0) self.blocks_file_sink_0 = blocks.file_sink(gr.sizeof_float*1, \\"/media/shashwat/DATA/Q3/Wireless Networking/gnu codes/Outputs/db_498\\", False) self.blocks_file_sink_0.set_unbuffered(False) self.blocks_divide_xx_0 = blocks.divide_ff(1) self.blocks_complex_to_mag_squared_0 = blocks.complex_to_mag_squared(1024) self.analog_const_source_x_0 = analog.sig_source_f(0, analog.GR_CONST_WAVE, 0, 0, 1.04858e6) # Connections self.connect((self.analog_const_source_x_0, 0), (self.blocks_divide_xx_0, 1)) self.connect((self.blocks_complex_to_mag_squared_0, 0), (self.blocks_vector_to_stream_0, 0)) self.connect((self.blocks_divide_xx_0, 0), (self.blocks_nlog10_ff_0, 0)) self.connect((self.blocks_nlog10_ff_0, 0), (self.blocks_file_sink_0, 0)) self.connect((self.blocks_nlog10_ff_0, 0), (self.blocks_threshold_ff_0, 0)) self.connect((self.blocks_nlog10_ff_0, 0), (self.wxgui_numbersink2_0, 0)) self.connect((self.blocks_stream_to_vector_0, 0), (self.fft_1, 0)) self.connect((self.blocks_threshold_ff_0, 0), (self.wxgui_numbersink2_1, 0)) self.connect((self.blocks_vector_to_stream_0, 0), (self.blocks_divide_xx_0, 0)) self.connect((self.fft_1, 0), (self.blocks_complex_to_mag_squared_0, 0)) self.connect((self.rtlsdr_source_0, 0), (self.blocks_stream_to_vector_0, 0)) self.connect((self.rtlsdr_source_0, 0), (self.wxgui_fftsink2_0, 0)) def get_threshold(self): return self.threshold def set_threshold(self, threshold): self.threshold = threshold self._threshold_slider.set_value(self.threshold) self._threshold_text_box.set_value(self.threshold) self.blocks_threshold_ff_0.set_hi(self.threshold) def get_samp_rate(self): return self.samp_rate def set_samp_rate(self, samp_rate): self.samp_rate = samp_rate self.rtlsdr_source_0.set_sample_rate(self.samp_rate) self.wxgui_fftsink2_0.set_sample_rate(self.samp_rate) def get_freq(self): return self.freq def set_freq(self, freq): self.freq = freq self._freq_slider.set_value(self.freq) self._freq_text_box.set_value(self.freq) self.rtlsdr_source_0.set_center_freq(self.freq, 0) self.wxgui_fftsink2_0.set_baseband_freq(self.freq) def get_fft_size(self): return self.fft_size def set_fft_size(self, fft_size): self.fft_size = fft_size if __name__ == '__main__': parser = OptionParser(option_class=eng_option, usage=\\"%prog: [options]\\") (options, args) = parser.parse_args() tb = Output_window() tb.Start(True) tb.Wait()"},{"instruction":"Develop a Python 3 script to find all substrings of a given string. String = “codecode”","output":"def find_substrings(input_string): # Initializing empty list to contain substrings substrings = [] for i in range(len(input_string)+1): for j in range(i+1, len(input_string)+1): # populating the list with substrings substrings.append(input_string[i:j]) return substrings # driver code string = \\"codecode\\" print(find_substrings(string)) # Output: ['c', 'co', 'cod', 'code', 'codec', 'codeco', 'codecod', 'codecode']"},{"instruction":"Generate a function to find the GCD of two numbers in Python.","output":"def gcd(a,b): if(b==0): return a else: return gcd(b,a%b)"},{"instruction":"Create a Python script which automates the process of making API requests to a given URL. https://example.com","output":"import requests url = 'https://example.com' # Make get request r = requests.get(url) # Check the response status if r.status_code == 200: print('success') # Make post request r = requests.post(url, data = {'key':'value'}) # Check the response status if r.status_code == 200: print('success')"},{"instruction":"Generate a Python script that takes two arguements, a filename and a number, and prints out all the lines from the filename whose length is less than the number. file_name = 'sample.txt' number = 10","output":"import sys file_name = sys.argv[1] number = int(sys.argv[2]) with open(file_name, 'r') as f: for line in f: if len(line) < number: print(line, end='')"},{"instruction":"Write a Python code fragment to print all the leap years between two years. start_year = 2010 end_year = 2020","output":"for year in range(start_year, end_year+1): if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0): print(year)"},{"instruction":"Perform an optimization of a given Python program to reduce its execution time. Sample Program: def find_longest_sequence(arr): current = [] longest = [] i = 0 while i < len(arr): j = i while j < len(arr) and arr[j] > arr[j1]: current.append(arr[j]) j += 1 if len(current) > len(longest): longest = current current = [] i += 1 return longest arr = [3, 10, 2, 1, 20]","output":"def find_longest_sequence(arr): longest = [] for i in range(len(arr)): current = [] for j in range(i, len(arr)): if arr[j] > arr[j-1]: current.append(arr[j]) if len(current) > len(longest): longest = current current = [] return longest arr = [3, 10, 2, 1, 20]"},{"instruction":"Create a Python program to sort a given list of integers in descending order without using a library/builtin function. ex_list = [5, 2, 8, 9, 4, 1]","output":"def sort_list(lst): for i in range(len(lst) - 1): for j in range(i+1, len(lst)): if lst[i] < lst[j]: lst[i], lst[j] = lst[j], lst[i] return lst"},{"instruction":"mplement a data structure for a stack in Python.","output":"class Stack(object): def __init__(self): self.items = [] def is_empty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items)"},{"instruction":"Write a Python program that extracts the domain name from a given URL. https://www.google.com","output":"def get_domain(url): from urllib.parse import urlparse parsed_uri = urlparse(url) domain = '{uri.netloc}'.format(uri=parsed_uri) return domain domain = get_domain(\\"https://www.google.com\\") print(domain)"},{"instruction":"Optimize the following Python program for sorting a given array in ascending order such that it runs in O(n) time complexity. A = [9, 4, 5, 1, 3]","output":"def sort_array(A): if len(A) <= 1: return A less = [] equal = [] greater = [] pivot = A[0] for num in A: if num < pivot: less.append(num) elif num == pivot: equal.append(num) elif num > pivot: greater.append(num) return sort_array(less) + equal + sort_array(greater)"},{"instruction":"Design a system in Python that takes in two strings as input and finds out if they are anagrams of each other. Two strings: sister and Resist","output":"def is_anagram(s1, s2): s1 = s1.lower() s2 = s2.lower() if (len(s1) != len(s2)): return False count = {} for i in s1: if i in count: count[i] += 1 else: count[i] = 1 for i in s2: if i in count: count[i] -= 1 else: return False for i in count: if count[i] != 0: return False return True"},{"instruction":"Create a machine learning model in Python that predicts the stock price the next day given past 6 days' prices. Not applicable","output":"import numpy as np import pandas as pd from sklearn.linear_model import LinearRegression data = pd.read_csv('stock_data.csv') X = data.iloc[:, :-1] y = data.iloc[:, -1] model = LinearRegression() model.fit(X, y) def predict_price(prices): x = np.array(prices).reshape(1, -1) return model.predict(x)[0]"},{"instruction":"Create a Python script to scrape data from a website. The script should take a URL as an argument and return the extracted data as a list of tuples (title, URL) for links on the webpage. Example url: https://en.wikipedia.org/wiki/Web_scraping","output":"import requests from bs4 import BeautifulSoup def extract_site_information(url): result = requests.get(url) soup = BeautifulSoup(result.text, 'html.parser') data = [] for link in soup.find_all('a'): if link.get('href'): data.append((link.text, link.get('href'))) return data if __name__ == '__main__': url = 'https://en.wikipedia.org/wiki/Web_scraping' print(extract_site_information(url))"},{"instruction":"Program a web crawler in Python to find all URLs on a particular webpage. Page URL: https://www.example.com","output":"import requests from bs4 import BeautifulSoup def crawl(url): r = requests.get(url) html_doc = r.text soup = BeautifulSoup(html_doc, 'html.parser') # find all links on web page links = soup.find_all('a') # filter the link sending with http for link in links: if 'http' in link.get('href'): print(link.get('href')) # Driver code if __name__ == '__main__': crawl(\\"https://www.example.com\\")"},{"instruction":"Write a Python program for a smart search engine. The program should take a query as input and return the most relevant result. Not applicable","output":"import json import requests def search_engine(query): # Make a request to the search engine API r = requests.get('http://search-engine.com/api/search', params={'query': query}) # Parse the response response = json.loads(r.text) # Return the most relevant result return response['results'][0] search_engine('python programming')"},{"instruction":"Create a python function to extract the largest DNA sequence from a list of sequences. sequences = [ATGATATCATCGATTGTA, ATGCGATATACGATGAT, ATGGATCGATTATATTA]","output":"def longest_sequence(sequences): longest_sequence = sequences[0] for sequence in sequences: if len(sequence) > len(longest_sequence): longest_sequence = sequence return longest_sequence print(longest_sequence(sequences)) # ATGATATCATCGATTGTA"},{"instruction":"Write a python program to classify a given list of sentences as positive or negative","output":"def classify_sentence(sentences): labels = [] for sentence in sentences: # add code to classify the sentence # e.g. using a sentiment classifier labels.append(\\"positive\\" if is_positive(sentence) else \\"negative\\") return labels"},{"instruction":"Construct a Python program to scrape a web page for specific data.","output":"import requests import bs4 url = \\"YOUR WEBPAGE URL\\" response = requests.get(url) soup = bs4.BeautifulSoup(response.text, 'html.parser') # Retrieve appropriate data from webpage data = soup.find_all('YOUR TAGS') # Code to write the data to a file with open('scraped_data.txt', 'w') as file: for item in data: file.write(str(item))"},{"instruction":"Create a Python program to check if two strings are anagrams. leg, gel","output":"def is_anagram(s1, s2): # Convert both strings to lower case s1 = s1.lower() s2 = s2.lower() # Sort both strings s1 = sorted(s1) s2 = sorted(s2) if s1 == s2: return True else: return False"},{"instruction":"Generate an AI program in Python that will predict the stock prices for an asset.","output":"import pandas as pd def predict_stock_prices(data): # Your code here # ... return prediction"},{"instruction":"Generate code in Python to convert an infix expression into a postfix expression.","output":"# Function to convert Infix expression to Postfix def infixToPostfix(expression): # empty list that will store the postfix expression postfix = [] # dictionary containing the precedence value of operators precedence = {'^':3, '*':3, '/':3, '+':2, '-':2, '(':1} # Stack to store operators stack = [] # Iterate over the expression for conversion for char in expression: # If an operand is encountered, add it to the list postfix if char not in precedence.keys(): postfix.append(char) # If left parenthesis is encountered, push it onto the stack elif char == '(': stack.append(char) # If right parenthesis is encountered, pop from the # stack, till the corresponding left parenthesis is not found # and append all operators to postfix expression elif char == ')': temp = stack.pop() while(temp != '('): postfix.append(temp) temp = stack.pop() # If an operator is encountered, check which operator # has higher precedence, then pop the higher precedence # operator and add it to the postfix expression, then # push the lower precedence operator onto the stack else: while(len(stack) != 0 and precedence[char] <= precedence[stack[-1]]): postfix.append(stack.pop()) stack.append(char) # Pop the remaining operators from the stack and add them while len(stack) != 0: postfix.append(stack.pop()) return \\"\\".join(postfix)"},{"instruction":"mplement the following pseudocode in Python A = [x, y, z] B = [a, b, c] Output: [x, a, y, b, z, c]","output":"A = [x, y, z] B = [a, b, c] C = [] for x,y in zip(A,B): C.append(x) C.append(y) print(C) #[x, a, y, b, z, c]"},{"instruction":"Design a Python program for Bubble Sort","output":"def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: # swap elements arr[j], arr[j+1] = arr[j+1], arr[j]"},{"instruction":"Write a Python script that takes a list of integers and checks if any two numbers sum up to a given target. [3, 2, 5, 7], target = 9","output":"def checkSum(arr, target): for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] + arr[j] == target: return True return False nums = [3, 2, 5, 7] target = 9 print(checkSum(nums, target)) # output: True"},{"instruction":"Create a class in Python to store 3D coordinates in Euclidean space.","output":"class Euclidean3D: def __init__(self, x, y, z): self.x = x self.y = y self.z = z if __name__ == '__main__': point1 = Euclidean3D(1, 2, 3) point2 = Euclidean3D(4, 5, 6)"},{"instruction":"Design an algorithm in Python to convert a binary string into its decimal representation. 1010","output":"def binaryToDecimals(binary_number): decimal = 0 for i, digit in enumerate(reversed(binary_number)): decimal += int(digit) * (2**i) return decimal print (binaryToDecimals(\\"1010\\")) # Output 10"},{"instruction":"Write a Python program to generate all possible combinations of a set of numbers. nums = [1, 2, 3]","output":"def combinations(nums): \\"\\"\\" Generate all possible combinations of a given set of numbers Args: nums: a list of integers Returns: A list of list representing the possible combinations \\"\\"\\" # Base case if len(nums) == 0: return [[]] # Recursive step ans = [] for comb in combinations(nums[1:]): for i in range(len(comb)+1): ans.append(comb[:i] + [nums[0]] + comb[i:]) return ans # Call the function with the given input print(combinations(nums))"},{"instruction":"Write a Python program to count the number of even and odd numbers in a given list of integers. [1, 2, 3, 4, 5, 6]","output":"def count_even_odd(numbers): even_count = 0 odd_count = 0 for num in numbers: if num % 2 == 0: even_count += 1 else: odd_count += 1 return even_count, odd_count"},{"instruction":"Write a function in Python that takes a given string and checks if it is a palindrome or not. racecar","output":"def isPalindrome(s): left = 0 right = len(s)-1 while(left < right ): if (s[left] != s[right]): return False left += 1 right -= 1 return True print (isPalindrome(\\"racecar\\"))"},{"instruction":"Create a function in Python that takes an input string, counts the occurrence of each word in the string, and returns a dictionary containing the word and its count. Not applicable","output":"def count_words(string): word_counts = {} words = string.split() for word in words: if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 return word_counts string = 'the quick brown fox jumps over the lazy dog' word_counts = count_words(string) print(word_counts) # output: {'the': 2, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 1}"},{"instruction":"Create a function in Python to determine whether a given number is an Armstrong number.","output":"def is_armstrong_number(num): n = len(str(num)) # initialize sum sum = 0 # find the sum of the cube of each digit temp = num while temp > 0: digit = temp % 10 sum += digit ** n temp //= 10 # if num is equal to the sum, # then the number is an Armstrong number if num == sum: return True else: return False"},{"instruction":"Utilizing Python, design a data structure for storing and sorting books according to their ISBN numbers.","output":"class BookSet: def __init__(self): self.books = [] def add_book(self, book): self.books.append(book) def sort_by_isbn(self): self.books.sort(key=lambda x: x.isbn) class Book: def __init__(self, isbn, title, author): self.isbn = isbn self.title = title self.author = author # Instantiate the BookSet bs = BookSet() # Add books bs.add_book(Book(1234567890, \\"Harry Potter\\", \\"J.K. Rowling\\")) bs.add_book(Book(11223344, \\"Book title\\", \\"Author name\\")) # Sort by ISBN numbers bs.sort_by_isbn()"},{"instruction":"Construct an algorithm in Python to calculate the area of a triangle given its sides. 3 4 5","output":"def areaTriangle(a, b, c): \\"\\"\\" Calculate the area of a triangle. Parameters: a (float): length of side a b (float): length of side b c (float): length of side c \\"\\"\\" s = (a + b + c) / 2.0 area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 return area a = 3 b = 4 c = 5 area = areaTriangle(a, b, c) print(\\"The area of the triangle is\\", area) # 6.0"},{"instruction":"Create a Python program to provide the sum of all numbers from 0 to N","output":"def sum_n(n): total = 0 for i in range(n+1): total += i return total"},{"instruction":"Write a script in Python to generate random strings containing uppercase, lowercase, and numeric characters up to a length of 8.","output":"import random import string def random_string(stringLength=8): letters_and_numbers = string.ascii_uppercase + string.ascii_lowercase + string.digits return ''.join(random.choice(letters_and_numbers) for i in range(stringLength))"},{"instruction":"Create a function in Python that sorts the elements of a given list. [5, 7, 2, 3, 4, 1]","output":"def sort_list(numbers): numbers.sort() return numbers result = sort_list([5, 7, 2, 3, 4, 1]) print(result)"},{"instruction":"Create a Python script to filter out elements in a list that are divisible by 3. [9, 8, 10, 27, 12, 15]","output":"numbers = [9, 8, 10, 27, 12, 15] def filter_div_by_3(numbers): return [num for num in numbers if num % 3 != 0] filtered_numbers = filter_div_by_3(numbers) print(filtered_numbers)"},{"instruction":"Write a Python program to classify a dataset with 6 classes. List of sample d","output":"import pandas as pd # Load the dataset df = pd.read_csv('dataset.csv') # Split the dataset into features and labels X = df.drop('label', axis=1).values y = df['label'].values # Train the model from sklearn.ensemble import RandomForestClassifier model = RandomForestClassifier() model.fit(X, y) # Make predictions on the dataset predictions = model.predict(X)"},{"instruction":"Write a Python program to select a random element from a given list.","output":"import random def random_element(lst): return random.choice(lst)"},{"instruction":"Write a Python program to filter a list of strings according to a given pattern. Pattern: asterisks Strings: [daisy, sunflower, asterisk, cat, monkey]","output":"def filter_strings(pattern, strings): filtered_strings = [x for x in strings if pattern in x] return filtered_strings result = filter_strings('asterisks', [\\"daisy\\", \\"sunflower\\", \\"asterisk\\", \\"cat\\", \\"monkey\\"]) print(result)"},{"instruction":"Develop a tool to detect plagiarism in python programs. program1.py def factorial(n): res = 1 for i in range(1, n+1): res = res * i return res program2.py def factorial(n): res = 1 for i in range(1, n+1): res = res * i return re","output":"\\"\\"\\" Develop a tool to detect plagiarism in python programs \\"\\"\\" import difflib def detect_plagiarism(file1, file2): file1_lines = open(file1).readlines() file2_lines = open(file2).readlines() similarity = difflib.SequenceMatcher(None, file1_lines, file2_lines).ratio() print(\\"Similarity between the two files is : \\" + str(similarity*100) + \\"%\\") if similarity > 0.7: print(\\"Highly Plagiarised code!\\") elif similarity <= 0.7 and similarity > 0.5: print(\\"Moderately Plagiarised Code\\") else: print(\\"Unique code\\") # Driver Code detect_plagiarism(\\"program1.py\\", \\"program2.py\\")"},{"instruction":"Write a Python program to loop through a list and print each element of the list. [1, 2, 3, 4]","output":"for x in [1, 2, 3, 4]: print(x)"},{"instruction":"Code a function in Python that returns the length of the longest increasing subsequence in a given list of integers. list = [1, 3, 4, 5, 7, 6, 9, 10]","output":"def longestIncreasingSubsequence(list): n = len(list) maxLength = 0 # Create a list to store the maximum length # of the increasing subsequence ending at 'i' lengthList = [1] * n # Compute optimized values in bottom up manner for i in range(1, n): for j in range(0, i): if (list[i] > list[j] and lengthList[i] < lengthList[j] + 1): lengthList[i] = lengthList[j] + 1 # Pick maximum of all computed values maxLength = max(lengthList) return maxLength"},{"instruction":"Design a Python class to represent a point in a 3D space.","output":"class Point3D: # constructor to define a point def __init__(self, x, y, z): self.x = x self.y = y self.z = z # method to calculate the distance from origin def distance_from_origin(self): return (self.x**2 + self.y**2 + self.z**2)**(1/2)"},{"instruction":"Edit the following Python function to return a sorted list of the words in the given string. def get_words(text): words = text.split() return word","output":"def get_words(text): words = text.split() return sorted(words)"},{"instruction":"Design a Python program to calculate simple interest given the principal amount, rate of interest and duration.","output":"def calculateSimpleInterest(principal, rate, duration): if rate != 0: interest = (principal * rate * duration) / 100 else: interest = 0 return interest"},{"instruction":"Generate a Python code snippet to extract the rate of inflation for a given year from a given JSON. JSON data with rate of inflation for years 20172020","output":"import json data = '{\\"2017\\":2.2,\\"2018\\":2.4,\\"2019\\":1.7,\\"2020\\":0.1}' inflation_data = json.loads(data) inflation_rate = inflation_data[\\"2020\\"] print(inflation_rate) # Output: 0.1"},{"instruction":"Design and implement a program in Python that converts temperatures from Celsius to Fahrenheit and vice versa.","output":"def cel_to_fahr(cel): return cel * (9 / 5) + 32 def fahr_to_cel(fahr): return (fahr - 32) * (5 / 9)"},{"instruction":"Design a class in Python to store a student's name, age and subject of interest.","output":"class Student: def __init__(self, name, age, subject): self.name = name self.age = age self.subject = subject"},{"instruction":"Create a python script to take in a number as input and output its binary equivalent.","output":"# Input number n = int(input(\\"Enter a number: \\")) # Using format() print(\\"The binary equivalent of {} is:\\".format(n), format(n, 'b'))"},{"instruction":"Create a program in Python to add two numbers using functions. num1 = 5, num2 = 7","output":"def add(num1, num2): return num1 + num2 result = add(5, 7) print(result)"},{"instruction":"Write a Python function that takes an array of integers and finds the maximum difference between any two elements in the array [2, 3, 10, 6, 4, 8, 1]","output":"def max_difference(arr): if len(arr) < 2: return 0 curr_max = arr[1]-arr[0] min_elem = min(arr[0], arr[1]) for i in range(2, len(arr)): curr_max = max(curr_max, arr[i] - min_elem) min_elem = min(min_elem, arr[i]) return curr_max print(max_difference([2, 3, 10, 6, 4, 8, 1]))"},{"instruction":"Can you develop a python program that uses a loop to print the numbers 10 to 1 in reverse order?","output":"for i in range(10, 0, -1): print(i)"},{"instruction":"Create a graphical user interface in Python using Tkinter that allows users to enter name and age information and save the data. Not applicable","output":"import tkinter # Create main window. main_window = tkinter.Tk() main_window.title(\\"User Data Entry\\") main_window.geometry(\\"200x100\\") # Create entry boxes name_label = tkinter.Label(main_window, text=\\"Name\\") name_label.grid(row=0, column=0, sticky=\\"w\\") name_entry = tkinter.Entry(main_window) name_entry.grid(row=0, column=1, sticky=\\"w\\") age_label = tkinter.Label(main_window, text=\\"Age\\") age_label.grid(row=1, column=0, sticky=\\"w\\") age_entry = tkinter.Entry(main_window) age_entry.grid(row=1, column=1, sticky=\\"w\\") # Create button save_button = tkinter.Button(main_window, text=\\"Save\\") save_button.grid(row=2, column=0, sticky=\\"w\\") main_window.mainloop()"},{"instruction":"Generate a Python script to detect the number of capitalized words in a sentence. sentence = This is a Sample Sentence","output":"def count_capitals(s): count = 0 arr = s.split(' ') for word in arr: if word[0].isupper(): count += 1 return count"},{"instruction":"Design a program in Python to change the background color of a web page. color = '#FF0000'","output":"from selenium import webdriver from selenium.webdriver.common.keys import Keys driver = webdriver.Chrome() driver.get(\\"http://example.com\\") html = driver.find_element_by_tag_name('html') html.send_keys(Keys.CONTROL + Keys.SHIFT + Keys.BACKSPACE) driver.execute_script(\\"document.body.style.backgroundColor='\\" + color + \\"'\\")"},{"instruction":"Create a table in Python that stores a list of countries and their population. Not applicable","output":"import sqlite3 # Establish a connection conn = sqlite3.connect('population.db') cursor = conn.cursor() # Create the table create_query = 'CREATE TABLE population_table (country TEXT, population INT)' cursor.execute(create_query) # Insert data insert_query = 'INSERT INTO population_table VALUES (\\"USA\\", 331000000), (\\"Brazil\\", 212000000), (\\"China\\", 1420000000), (\\"India\\", 1380000000), (\\"Russia\\", 144000000)' cursor.execute(insert_query) # Commit the changes conn.commit() # Close the connection conn.close()"},{"instruction":"Generate a python program to minimize the difference of two given lists list_1 = [3, 2, 4, 1, 6] list_2 = [6, 5, 1, 2]","output":"def minimize_difference(list_1, list_2): '''This function takes two lists, lists, and minimizes the differences between them.''' min_diff = float('inf') for i in range(len(list_1)): for j in range(len(list_2)): diff = abs(list_1[i] - list_2[j]) if diff < min_diff: min_diff = diff return min_diff"},{"instruction":"Write a Python program to classify the type of an angle based on the measure of the angle. angle = 180","output":"def classify_angle(angle): if angle == 0: return \\"Zero angle\\" elif angle > 0 and angle < 90: return \\"Acute angle\\" elif angle == 90: return \\"Right angle\\" elif angle > 90 and angle < 180: return \\"Obtuse angle\\" elif angle == 180: return \\"Straight angle\\" result = classify_angle(angle)"},{"instruction":"Write Python script to replace all occurrences of a given letter in a string with another. String: fortnite Letter to replace: t Letter to replace with: l","output":"\\"\\"\\"Write Python script to replace all occurrences of a given letter in a string with another.\\"\\"\\" # Take a string as an input string = \\"fortnite\\" # Replace the target letter with the replacement letter new_string = string.replace(\\"t\\", \\"l\\") # Print the new string print(new_string)"},{"instruction":"Write a python program to print out the character frequency of a given string. String: hello world!","output":"string = 'hello world!' freq = {} for i in string: if i in freq: freq[i] += 1 else: freq[i] = 1 print (\\"count of all characters in hello world! is :n \\" + str(freq)) # Output would be count of all characters in hello world! is : {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1, '!': 1}"},{"instruction":"Write a Python script to sort the following numbers in ascending order [125, 33, 52,45, 24].","output":"# function to sort the array def sort_nums(arr): # Use Selection Sort Algorithm for i in range(len(arr)): min_index = i for j in range(i+1, len(arr)): if arr[min_index] > arr[j]: min_index = j arr[i], arr[min_index] = arr[min_index], arr[i] return arr # driver code arr = [125, 33, 52, 45, 24] result = sort_nums(arr) print(result)"},{"instruction":"Your client has asked you to convert an existing Java program into a Python program. The Java program takes a list of integers and returns the maximum value. listOfIntegers = [1, 3, 8, 2, 9]","output":"def get_max_value(listOfIntegers): maxValue = listOfIntegers[0] for num in listOfIntegers: if num > maxValue: maxValue = num return maxValue print(get_max_value(listOfIntegers))"},{"instruction":"Generate a numerical sequence in a given range using Python. start = 3 end = 15","output":"def generate_sequence(start, end): nums = [] for i in range(start, end+1): nums.append(i) return nums nums = generate_sequence(3, 15) print(nums) // [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"},{"instruction":"Code a program in Python to calculate the mean from a dataset [0.07, 0.69, 0.29, 0.17, 0.11, 0.51, 0.5]","output":"def calculate_mean(numbers): total = 0 for num in numbers: total += num return total / len(numbers) dataset = [0.07, 0.69, 0.29, 0.17, 0.11, 0.51, 0.5] mean = calculate_mean(dataset) print(mean) # Output: 0.3542857142857143"},{"instruction":"Find a bug in the given Python program and fix it. def get_times_table(x): times_table = [] for i in range(10): times_table[i] = x * i return times_table","output":"def get_times_table(x): times_table = [] for i in range(10): times_table.append(x * i) return times_table"},{"instruction":"Optimize this python code to reduce the number of lines and make it more efficient def calculate_sum(numbers): sum = 0 for n in numbers: sum += n return sum","output":"def calculate_sum(numbers): return sum(numbers)"},{"instruction":"Convert a set of Python functions to JavaScript. def say_hello(name): return Hello, {}!.format(name) def add_two(num): return num + 2","output":"function say_hello(name) { return \`Hello, {name}!\`; } function add_two(num) { return num + 2; }"},{"instruction":"Design a function to calculate the volume of a cube in Python.","output":"def cube_volume(side_length): volume = side_length ** 3 return volume"},{"instruction":"Create a Python script that takes a string and returns an array with the unique characters in the string. string: aeiou","output":"def unique_chars(s): # Create an empty list unique_list = [] # Intialize index index = 0 # Iterate through the string for i in range(len(s)): # Check if the character is present in # unique_list or not if s[i] not in unique_list: unique_list.append(s[i]) return unique_list # Driver code s = \\"aeiou\\" print(unique_chars(s)) # Output # ['a', 'e', 'i', 'o', 'u']"},{"instruction":"Write a Python program that takes an integer as input and returns a list which contains all the prime numbers up to the given integer. n = 10","output":"def generate_prime_numbers(n): prime_numbers = [] for num in range(2, n + 1): for i in range(2, num): if (num % i) == 0: break else: prime_numbers.append(num) return prime_numbers if __name__ == \\"__main__\\": n = 10 prime_numbers = generate_prime_numbers(n) print(prime_numbers) # Output: [2, 3, 5, 7]"},{"instruction":"Create a Python function to generate a web page from a given set of HTML and CSS code.","output":"def generate_web_page(html, css): html = html.encode('utf-8') css = css.encode('utf-8') html = html.replace(\\"<style>\\", f\\"<style>{css}\\") page = f\\"\\"\\"<!DOCTYPE html> <html> <head> <title>Generated web page</title> </head> <body> {html} </body> </html>\\"\\"\\" return page"},{"instruction":"Construct a program, in Python code, to calculate the histogram of the elements in a list. example_list = [1,2,2,2,3,4,5,5,5,5,5]","output":"def histogram_elements(example_list): histogram = {} for i in example_list: histogram[i] = example_list.count(i) return histogram"},{"instruction":"Write a Python program to find the longest substring in a given string without any repeating characters.","output":"def find_longest_substring(string): seenChars = set() longestSubstring = '' currentSubstring = '' for char in string: if char not in seenChars: seenChars.add(char) currentSubstring += char if len(currentSubstring) > len(longestSubstring): longestSubstring = currentSubstring else: seenChars.clear() currentSubstring = '' return longestSubstring"},{"instruction":"Create a Python class called Person with attributes name and age.","output":"class Person: def __init__(self, name, age): self.name = name self.age = age"},{"instruction":"Generate a function in Python that takes a list of values and returns a dictionary with the sums of adjacent values. [1,4,5,6,10]","output":"def sum_adjacent(my_list): result = {} for i in range(len(my_list)-1): key = (my_list[i],my_list[i+1]) result[key] = my_list[i]+my_list[i+1] return result my_list = [1,4,5,6,10] print(sum_adjacent(my_list)) # Output: {(1, 4): 5, (4, 5): 9, (5, 6): 11, (6, 10): 16}"},{"instruction":"Generate a Python algorithm to generate the following pattern * * * *","output":"for i in range(4): for j in range(4): print(\\"*\\", end=\\" \\") print()"},{"instruction":"Generate a solution in python that takes a string containing letters and numbers and returns the frequency of each character. helloWorld12345","output":"def count_frequency(string): counts = {} for char in string: if char in counts: counts[char] += 1 else: counts[char] = 1 return counts"},{"instruction":"Create a Python program to sort a dictionary by value d = {'z': 1, 'b': 2, 'a': 4, 'c': 3}","output":"def sort_dict_by_value(input_dict): output_list = [] for item in sorted(input_dict.items(), key=lambda x: x[1]): output_list.append(item) return output_list d = {'z': 1, 'b': 2, 'a': 4, 'c': 3} result = sort_dict_by_value(d) print(result)"},{"instruction":"Write a Python AI program to play the 2048 game.","output":"import pygame # used to display the game board import numpy as np # used to manage board states import time # used for measuring time spent for each move import copy # used to copy game boards # define the game board size BOARD_SIZE = 4 # define useful game constants TILE_2 = 2 TILE_4 = 4 # define useful game variables opening_tile_value = TILE_2 score = 0 # define a game board class class Board: # init game board def __init__(self): self.board = np.zeros((BOARD_SIZE,BOARD_SIZE), dtype=int) self.place_opening_tile() # get available moves def get_available_moves(self): x_direction = [0,1,0,-1] y_direction = [1,0,-1,0] valid_moves = [] # loop through each column/row for i in range(BOARD_SIZE): for j in range(BOARD_SIZE): # loop through each direction for x_dir, y_dir in zip(x_direction, y_direction): x, y = i + x_dir, j + y_dir if 0 <= x < BOARD_SIZE and 0 <= y < BOARD_SIZE and self.board[x][y] == 0: valid_moves.append((i, j, x, y)) return valid_moves # make a move def make_move(self, tile_value, movement): x_from, y_from = movement[0], movement[1] x_to, y_to = movement[2], movement[3] self.board[x_from][y_from] = 0 self.board[x_to][y_to] = tile_value self.place_opening_tile() # place an opening tile def place_opening_tile(self): available_pos = np.where(self.board == 0) if len(available_pos[0]) == 1: x_pos, y_pos = available_pos[0][0], available_pos[1][0] self.board[x_pos][y_pos] = opening_tile_value elif len(available_pos[0]) == 0: # game over pass else: x_pos, y_pos = available_pos[0][np.random.choice(range(len(available_pos[0])))], available_pos[1][np.random.choice(range(len(available_pos[1])))] self.board[x_pos][y_pos] = opening_tile_value"},{"instruction":"The given code contains several Python functions that can be used to check the status of a xArm robot. To use these functions, import them into your Python script and use them as decorators for the functions that you want to check. For example, to check if the robot is connected before running a function, use the \`xarm_is_connected\` decorator. To check if the robot is ready before running a function, use the \`xarm_is_ready\` decorator. To log the API calls made by your script, use the \`api_log\` decorator.","output":"# !/usr/bin/env python3 # Software License Agreement (BSD License) # # Copyright (c) 2018, UFACTORY, Inc. # All rights reserved. # # Author: Vinman <vinman.wen@ufactory.cc> <vinman.cub@gmail.com> import time import functools from ..core.utils.log import logger from .code import APIState def check_modbus_baud(baud=2000000, _type='set', default=None): def _check_modbus_baud(func): @functools.wraps(func) def decorator(*args, **kwargs): code = args[0].checkset_modbus_baud(baud) if code != 0: logger.error('check modbus baud is failed, code={}'.format(code)) return code if _type == 'set' else (code, default if default != -99 else []) else: return func(*args, **kwargs) return decorator return _check_modbus_baud def xarm_is_connected(_type='set'): def _xarm_is_connected(func): @functools.wraps(func) def decorator(*args, **kwargs): if args[0].connected: return func(*args, **kwargs) else: logger.error('xArm is not connect') return APIState.NOT_CONNECTED if _type == 'set' else (APIState.NOT_CONNECTED, 'xArm is not connect') return decorator return _xarm_is_connected def xarm_is_ready(_type='set'): def _xarm_is_ready(func): @functools.wraps(func) def decorator(*args, **kwargs): if args[0].connected and kwargs.get('auto_enable', False): if not args[0].ready: args[0].motion_enable(enable=True) args[0].set_mode(0) args[0].set_state(0) if args[0].connected: if args[0].state_is_ready: return func(*args, **kwargs) else: logger.error('xArm is not ready') logger.info('Please check the arm for errors. If so, please clear the error first. ' 'Then enable the motor, set the mode and set the state') return APIState.NOT_READY if _type == 'set' else (APIState.NOT_READY, 'xArm is not ready') else: logger.error('xArm is not connect') return APIState.NOT_CONNECTED if _type == 'set' else (APIState.NOT_CONNECTED, 'xArm is not connect') return decorator return _xarm_is_ready def xarm_is_pause(_type='set'): def _xarm_is_pause(func): @functools.wraps(func) def decorator(*args, **kwargs): args[0].check_is_pause() return func(*args, **kwargs) return decorator return _xarm_is_pause def xarm_wait_until_cmdnum_lt_max(only_wait=False): def _xarm_wait_until_cmdnum_lt_max(func): @functools.wraps(func) def decorator(*args, **kwargs): ret = args[0].wait_until_cmdnum_lt_max() if not only_wait and ret is not None: args[0].log_api_info('API -> {} -> code={}'.format(func.__name__, ret), code=ret) return ret return func(*args, **kwargs) return decorator return _xarm_wait_until_cmdnum_lt_max def xarm_is_not_simulation_mode(ret=0): def _xarm_is_not_simulation_mode(func): @functools.wraps(func) def decorator(*args, **kwargs): if not args[0].check_is_simulation_robot(): return func(*args, **kwargs) else: return ret return decorator return _xarm_is_not_simulation_mode def api_log(func): @functools.wraps(func) def decorator(*args, **kwargs): ret = func(*args, **kwargs) logger.info('{}, ret={}, args={}, kwargs={}'.format(func.__name__, ret, args[1:], kwargs)) return ret return decorator def compare_time(time1, time2): try: s_time = time.mktime(time.strptime(time1, '%Y-%m-%d')) e_time = time.mktime(time.strptime(time2, '%Y-%m-%d')) return int(s_time) - int(e_time) > 0 except: return False def compare_version(v1, v2): for i in range(3): if v1[i] > v2[i]: return True elif v1[i] < v2[i]: return False return False"},{"instruction":"Write a Python program to create a game of TicTacToe that can be played between two human players. Not applicable","output":"class Game: def __init__(self, player1, player2, board_size=3): self.player1 = player1 self.player2 = player2 self.board_size = board_size self.board = [] self.turn = player1 def create_board(self): for x in range(self.board_size): self.board.append([\\"_\\"] * self.board_size) return self.board def print_board(self): for row in self.board: print(\\" \\".join(row)) def move(self): while True: move_column = int(input(f\\"{self.turn} enter a column: \\")) move_row = int(input(f\\"{self.turn} enter a row: \\")) if self.board[move_row][move_column] == \\"_\\": self.board[move_row][move_column] = self.turn return True else: print(\\"This position is already taken\\") def game_over(self): # Check for winner for player in [self.player1, self.player2]: # check for columns for col in range(self.board_size): if self.board[0][col] == self.board[1][col] == self.board[2][col] == player: return True # check for rows for row in range(self.board_size): if self.board[row] == [player, player, player]: return True # check for diagonals if self.board[0][0] == self.board[1][1] == self.board[2][2] == player: return True if self.board[0][2] == self.board[1][1] == self.board[2][0] == player: return True # Check for draw if \\"_\\" not in self.board[0] and \\"_\\" not in self.board[1] and \\"_\\" not in self.board[2]: return True return False def run_game(self): self.create_board() while True: self.print_board() self.move() is_game_over = self.game_over() if is_game_over: if self.turn == self.player1: print(f\\"{self.player2} wins!\\") else: print(f\\"{self.player1} wins!\\") break #change turn if self.turn == self.player1: self.turn = self.player2 else: self.turn = self.player1 if __name__ == \\"__main__\\": player1 = input(\\"Player 1, enter a name: \\") player2 = input(\\"Player 2, enter a name: \\") game = Game(player1, player2) game.run_game()"},{"instruction":"Write a Python program using NumPy to calculate the dot product of two vectors. x = [3, 4, 5] y = [2, 6, 4]","output":"import numpy as np x = np.array([3, 4, 5]) y = np.array([2, 6, 4]) dot_product = np.dot(x, y) print(dot_product) # 46"},{"instruction":"Create a network search algorithm in Python for finding the shortest path between two nodes.","output":"def network_search(graph, start, end): visited, queue = set(), [(start, 0)] while queue: vertex, depth = queue.pop(0) if vertex not in visited: visited.add(vertex) if vertex == end: return depth for neighbor in graph[vertex]: queue.append((neighbor, depth + 1)) return -1"},{"instruction":"Develop an AI chatbot in Python that greets a user and helps them with basic tasks like booking tickets and hotel rooms.","output":"\\"\\"\\" Creating an AI Chatbot in Python \\"\\"\\" import re import random bot_greetings = [\\"Hi!\\", \\"Hey there!\\", \\"Good morning!\\", \\"Good afternoon!\\"] # Define a function that responds to a user's message def respond_to_message(message): # If the message is a greeting, then return a random greeting response if re.search('(hey|hi|hello|morning|afternoon)', message): return random.choice(bot_greetings) # For other messages, you can provide a response that contains the appropriate task instructions elif re.search('(ticket|booking|reservation)', message): return \\"To book a ticket, you can enter your travel details here .\\" elif re.search('(hotel|accomodation)', message): return \\"To book a hotel room, you can enter your dates and other details here .\\" else: return \\"I don't understand your query. Please enter a valid input!\\" if __name__ == '__main__': user_message = input(\\"User: \\") bot_response = respond_to_message(user_message) print(\\"Bot:\\", bot_response)"},{"instruction":"mplement a decision tree classifier in Python that takes in an input of data and predicts which category a given data point belongs to. Input data will be provided as an array containing age, height, and weight attributes.","output":"import numpy as np from sklearn import tree # example data as an array X = np.array([[21, 180, 70], [22, 178, 68], [19, 182, 72], [18, 186, 80]]) # output label (The label can be any string that you set) y = np.array(['male', 'male', 'female', 'female']) # decision tree classifier clf = tree.DecisionTreeClassifier() clf = clf.fit(X, y) # predict based on the given input prediction = clf.predict([[24, 185, 85]]) print(prediction)"},{"instruction":"Create a program in Python to compare the elements of two given arrays and return the number of matches. arr1 = [1, 2, 3] arr2 = [3, 4, 5]","output":"def count_matches(arr1, arr2): count = 0 for i in arr1: if i in arr2: count += 1 return count print(count_matches(arr1, arr2))"},{"instruction":"Write a script in Python for merging two or more sorted arrays. [5, 7, 11] [2, 3, 8]","output":"def merge_arrays(arr1, arr2): merged_array = [] # While both arrays have elements while len(arr1) and len(arr2): if arr1[0] < arr2[0]: merged_array.append(arr1.pop(0)) else: merged_array.append(arr2.pop(0)) # If one of the array still has elements while len(arr1): merged_array.append(arr1.pop(0)) while len(arr2): merged_array.append(arr2.pop(0)) return merged_array arr1 = [5, 7, 11] arr2 = [2, 3, 8] merged_array = merge_arrays(arr1, arr2) print(merged_array)"},{"instruction":"Generate Python code to print out the number of times each character appears in a string. string = 'mississippi'","output":"from collections import Counter string = 'mississippi' c = Counter(string) for char, count in c.most_common(): print(f\\"{char}: {count}\\")"},{"instruction":"Create a Python program to detect if a given string has any palindrome substrings.","output":"def is_palindrome(s): for i in range(len(s)): for j in range(len(s)-i+1): substring = s[i:j] if substring == substring[::-1]: return True return False"},{"instruction":"Can you write a function in Python that takes in a 2dimensional array of integers and returns the lowest element in the array? [[3, 4, 5], [2, 7, 8], [12, 1, 9]]","output":"def find_min(matrix): result = float('inf') for row in matrix: result = min(result, min(row)) return result matrix = [[3, 4, 5], [2, 7, 8], [12, 1, 9]] print(find_min(matrix)) # Output: 1"},{"instruction":"Design a Python program to search for a substring in a given string. str = This is a string; substr = is","output":"def searchSubstring(str, substr): for i in range(len(str)): if str[i:i+len(substr)] == substr: return i return -1"},{"instruction":"Edit the existing Python program so that it rounds a number to the nearest whole number. # Program to round off a number num = 89.15","output":"# Program to round off a number num = 89.15 rounded_num = round(num) print(\\"The rounded number is: \\", rounded_num)"},{"instruction":"Write a Python program to read a list of numbers and return the sum of elements in the list. [1,2,3,4,5]","output":"def sum_list(nums): if not nums: return 0 return nums[0] + sum_list(nums[1:]) sum_list([1,2,3,4,5]) # 15"},{"instruction":"Create a Python program to calculate factorials recursively. Not applicable","output":"def factorial(n): # Base Case if n == 0: return 1 # Recursive Case else: return n * factorial(n-1) #Testing num = int(input(\\"Enter a number to calculate it's factorial: \\")) print(f\\"The factorial of {num} is { factorial(num)})"},{"instruction":"Can you modify the provided code in Python to prompt the user to enter their name, and then greet the user? name=Bob","output":"name = input(\\"Please enter your name: \\") print(\\"Hello \\" + name + \\"!\\")"},{"instruction":"Design a web scraper using Python's BeautifulSoup library that extracts data from HTML sites. Not applicable","output":"#Import libraries import requests from bs4 import BeautifulSoup #Make a request to the url url = 'http://www.example.com' r = requests.get(url) soup = BeautifulSoup(r.content, 'html.parser') #Extract data data = [] for x in soup.find_all('div', class_=\\"data-cell\\"): data.append(x.text.strip()) #Print the data print(data)"},{"instruction":"Write a function in Python to find the maximum two numbers in a list. List: [2, 4, 5, 9, 10, 11]","output":"def max_two(list): #sort the list in ascending order list.sort() #return the last two elements return list[-2:] #example number_list = [2, 4, 5, 9, 10, 11] result = max_two(number_list) print(result) # Output: [10, 11]"},{"instruction":"Write a Python program to add two numbers given as input from the user. Input: 2, 4","output":"num1 = int(input(\\"Enter the first number: \\")) num2 = int(input(\\"Enter the second number: \\")) sum = num1 + num2 print(\\"The sum of the two numbers is:\\", sum)"},{"instruction":"Build an interactive calculator app with a Graphical User Interface (GUI) using Python and the Tkinter library. Not applicable","output":"import tkinter as tk class CalculatorApp: def __init__(self, master): self.master = master master.title('Calculator') self.total = 0 self.entered_number = 0 self.total_label_text = tk.StringVar() self.total_label_text.set(self.total) self.total_label = tk.Label(master, textvariable=self.total_label_text) self.label = tk.Label(master, text=\\"Total:\\") vcmd = master.register(self.validate) self.entry = tk.Entry(master, validate=\\"key\\", validatecommand=(vcmd, '%P')) self.add_button = tk.Button(master, text=\\"+\\", command=lambda: self.update(\\"add\\")) self.subtract_button = tk.Button(master, text=\\"-\\", command=lambda: self.update(\\"subtract\\")) self.reset_button = tk.Button(master, text=\\"Reset\\", command=lambda: self.update(\\"reset\\")) self.label.grid(row=0, column=0, sticky=tk.W) self.total_label.grid(row=0, column=1, columnspan=2, sticky=tk.E) self.entry.grid(row=1, column=0, columnspan=3, sticky=tk.W+tk.E) self.add_button.grid(row=2, column=0) self.subtract_button.grid(row=2, column=1) self.reset_button.grid(row=2, column=2, sticky=tk.W+tk.E) def validate(self, new_text): if not new_text: self.entered_number = 0 return True try: self.entered_number = int(new_text) return True except ValueError: return False def update(self, method): if method == \\"add\\": self.total += self.entered_number elif method == \\"subtract\\": self.total -= self.entered_number else: self.total = 0 self.total_label_text.set(self.total) self.entry.delete(0, tk.END) root = tk.Tk() my_gui = CalculatorApp(root) root.mainloop()"},{"instruction":"Develop a Python program that takes two lists of numbers and returns all the common elements contained in both lists? list1 = [1, 2, 3, 4], list2 = [2, 3, 4, 5]","output":"def find_common_elements(list1, list2): common_elements = [] for element in list1: if element in list2: common_elements.append(element) return common_elements list1 = [1, 2, 3, 4] list2 = [2, 3, 4, 5] result = find_common_elements(list1, list2) print(result) # [2, 3, 4]"},{"instruction":"Write a method in Python to print each element in a given dictionary. { Alice: 23, Bob: 30, John: 27 }","output":"def printDict(dictionary): for key in dictionary: print(\\"{}: {}\\".format(key, dictionary[key])) dict = { \\"Alice\\": 23, \\"Bob\\": 30, \\"John\\": 27 } printDict(dict)"},{"instruction":"To use the Vlcclient class for communication with VLC player, follow these steps: 1. Import the necessary modules: threading, time, urllib, player.client.baseplayer, vlc.Meta, vlc.EventType, queue, and util.fileutil. 2. Create an instance of the Vlcclient class. 3. Call the start_client() method to start the threads for handling VLC events. 4. Call the set_proxy() method to create a new VLC player. 5. Call the play() method to start playing a specified track/station. 6. Call the stop() method to stop playback. 7. Call the seek() method to jump to a specified position in the track. 8. Call the play_pause() method to play/pause playback. 9. Call the set_volume() method to set the volume level. 10. Call the mute() method to mute the audio. 11. Call the current() method to return the current song. 12. Call the shutdown() method to shutdown the player. 13. Call the get_current_track_time() method to return the current track time. 14. Call the get_current_playlist() method to return the current playlist.","output":"# Copyright 2016-2021 Peppy Player peppy.player@gmail.com # # This file is part of Peppy Player. # # Peppy Player is free software: you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # Peppy Player is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with Peppy Player. If not, see <http://www.gnu.org/licenses/>. import threading import time import urllib from player.client.baseplayer import BasePlayer from vlc import Meta from vlc import EventType from queue import Queue from util.fileutil import FILE_PLAYLIST, FILE_AUDIO class Vlcclient(BasePlayer): \\"\\"\\" This class extends base player and provides communication with VLC player using Python binding for 'libvlc' library \\"\\"\\" def __init__(self): \\"\\"\\" Initializer. Starts separate threads for handling VLC events \\"\\"\\" self.RADIO_MODE = \\"radio\\" BasePlayer.__init__(self) self.mode = self.RADIO_MODE self.instance = None self.player = None self.media = None self.current_track = \\"\\" self.seek_time = \\"0\\" self.cd_track_id = None self.cd_drive_name = None self.END_REACHED = \\"end reached\\" self.TRACK_CHANGED = \\"track changed\\" self.PAUSED = \\"paused\\" self.player_queue = Queue() self.threads_running = False self.changing_volume = False def start_client(self): \\"\\"\\" Start threads. \\"\\"\\" self.threads_running = True thread_1 = threading.Thread(target = self.radio_stream_event_listener) thread_1.start() thread_2 = threading.Thread(target = self.handle_event_queue) thread_2.start() def stop_client(self): \\"\\"\\" Stop threads \\"\\"\\" with self.lock: self.threads_running = False def set_proxy(self, proxy_process, proxy=None): \\"\\"\\" Create new VLC player \\"\\"\\" self.instance = proxy_process self.proxy = proxy self.player = self.instance.media_player_new() player_mgr = self.player.event_manager() player_mgr.event_attach(EventType.MediaPlayerEndReached, self.player_callback, [self.END_REACHED]) player_mgr.event_attach(EventType.MediaPlayerPlaying, self.player_callback, [self.TRACK_CHANGED]) def player_callback(self, event, data): \\"\\"\\" Player callback method :param event: event to handle :param data: event data \\"\\"\\" if data: self.player_queue.put(data[0]) def radio_stream_event_listener(self): \\"\\"\\" Starts the loop for listening VLC events for radio track change \\"\\"\\" while self.threads_running: with self.lock: if self.media and self.mode == self.RADIO_MODE: t = self.media.get_meta(Meta.NowPlaying) if t and t != self.current_track: self.current_track = t if self.enabled: self.notify_player_listeners({\\"current_title\\": t}) time.sleep(1) def handle_event_queue(self): \\"\\"\\" Handling player event queue \\"\\"\\" if not self.enabled: return while self.threads_running: d = self.player_queue.get() # blocking line if d == self.END_REACHED: self.notify_end_of_track_listeners() self.player_queue.task_done() elif d == self.TRACK_CHANGED: self.track_changed() self.player_queue.task_done() def track_changed(self): \\"\\"\\" Handle track change event \\"\\"\\" if not self.enabled: return if self.mode == self.RADIO_MODE: return current = {\\"source\\": \\"player\\"} current[\\"state\\"] = \\"playing\\" t = self.media.get_meta(Meta.Title) if t == \\".\\": return if self.cd_track_id and t.startswith(\\"cdda:\\"): current[\\"cd_track_id\\"] = self.cd_track_id if self.cd_tracks: t = self.cd_tracks[int(self.cd_track_id) - 1].name else: t = self.cd_drive_name + self.cd_track_title + \\" \\" + self.cd_track_id m = self.media.get_mrl() m = m[m.rfind(\\"/\\") + 1:] m = urllib.parse.unquote(m) current[\\"file_name\\"] = m current[\\"current_title\\"] = t current[\\"Time\\"] = str(self.player.get_length()/1000) if not self.seek_time: self.seek_time = \\"0\\" current[\\"seek_time\\"] = self.seek_time self.notify_player_listeners(current) def set_player_volume_control(self, flag): \\"\\"\\" Player Volume Control type setter :param volume: True - player volume cotrol type, False - amixer or hardware volume control type \\"\\"\\" BasePlayer.set_player_volume_control(self, flag) if not self.player_volume_control: self.set_volume(100) def play(self, state): \\"\\"\\" Start playing specified track/station. First it cleans the playlist then adds new track/station to the list and then starts playback syntax for CD: self.media = self.instance.media_new(\\"cdda:///E:/\\", (\\":cdda-track=7\\")) :param state: button state which contains the track/station info \\"\\"\\" url = None self.enabled = True if state == None: if self.state != None: url = getattr(self.state, \\"url\\", None) else: url = None else: url = getattr(state, \\"url\\", None) self.state = state if url == None: return url = url.replace(\\"\\", \\"/\\").replace(\\"\\"\\", \\"\\") track_time = getattr(self.state, \\"track_time\\", None) if track_time == None: track_time = \\"0\\" else: track_time = str(track_time) if \\":\\" in track_time: track_time = track_time.replace(\\":\\", \\".\\") self.seek_time = track_time s = getattr(self.state, \\"playback_mode\\", None) if s and s == FILE_PLAYLIST: self.stop() self.mode = FILE_PLAYLIST self.enabled = True elif s and s == FILE_AUDIO: self.mode = FILE_AUDIO else: self.mode = self.RADIO_MODE if url.startswith(\\"http\\") and self.mode != self.RADIO_MODE: url = self.encode_url(url) with self.lock: file_name = getattr(self.state, \\"file_name\\", None) if file_name and file_name.startswith(\\"cdda://\\"): parts = file_name.split() self.cd_track_id = parts[1].split(\\"=\\")[1] self.cd_drive_name = parts[0][len(\\"cdda:///\\"):] self.media = self.instance.media_new(parts[0], parts[1]) else: self.media = self.instance.media_new(url) self.player.set_media(self.media) self.player.play() try: self.player.set_time(int(float(self.seek_time)) * 1000) except: pass if self.player_volume_control and getattr(self.state, \\"volume\\", None) != None: self.set_volume(int(self.state.volume)) def stop(self, state=None): \\"\\"\\" Stop playback \\"\\"\\" with self.lock: self.enabled = False self.player.stop() def seek(self, time): \\"\\"\\" Jump to the specified position in the track :param time: time position in track \\"\\"\\" if \\":\\" in time: self.seek_time = self.get_seconds_from_string(time) else: self.seek_time = time with self.lock: msec = int(float(self.seek_time) * 1000) t = threading.Thread(target=self.seek_method, args=[msec]) t.start() def seek_method(self, msec): \\"\\"\\" Seek track thread method :param msec: milliseconds for new position \\"\\"\\" self.player.set_time(msec) def play_pause(self, pause_flag=None): \\"\\"\\" Play/Pause playback :param pause_flag: play/pause flag \\"\\"\\" with self.lock: self.seek_time = self.get_current_track_time() self.player.pause() def set_volume(self, level): \\"\\"\\" Set volume. :param level: new volume level \\"\\"\\" self.player.audio_set_volume(int(level)) if getattr(self, \\"state\\", None) != None: if self.state.volume == level: return self.state.volume = level v = self.get_volume() if v != int(level): # usually initial volume setting if hasattr(self, \\"volume_thread\\"): self.volume_thread.join() self.volume_thread = threading.Thread(target=self.set_volume_level, args=[level]) self.volume_thread.start() def set_volume_level(self, level): \\"\\"\\" Set volume level in separate thread :param level: volume level \\"\\"\\" n = 0 max_n = 20 vol = -2 while n < max_n and level != vol: self.player.audio_set_volume(int(level)) time.sleep(0.1) vol = self.get_volume() n += 1 def get_volume(self): \\"\\"\\" Return current volume level :return: volume level or -1 if not available \\"\\"\\" with self.lock: return self.player.audio_get_volume() def mute(self): \\"\\"\\" Mute \\"\\"\\" with self.lock: self.player.audio_toggle_mute() def current(self): \\"\\"\\" Return the current song \\"\\"\\" pass def shutdown(self): \\"\\"\\" Shutdown the player \\"\\"\\" with self.lock: self.player.stop() def get_current_track_time(self): \\"\\"\\" Return current track time :return: current track time \\"\\"\\" t = self.player.get_time()/1000 return str(t) def get_current_playlist(self): \\"\\"\\" Return current playlist :return: current playlist \\"\\"\\" return self.playlist"},{"instruction":"Create an algorithm in Python to determine if a set of numbers are all unique.","output":"def is_unique(num_list): return len(num_list) == len(set(num_list))"},{"instruction":"Write a Python program to find and print all numbers divisible by 5 between 0 and 15.","output":"def find_divisible_numbers(start, end): for i in range(start, end + 1): if i % 5 == 0: print(i) find_divisible_numbers(0, 15)"},{"instruction":"Given a list of words, write a Python program to check whether two words are anagrams of each other. words = [silent, listen]","output":"def is_anagram(s1, s2): # remove all whitespaces and make it lower case s1 = ''.join(s1.split()).lower() s2 = ''.join(s2.split()).lower() # edge case check if len(s1) != len(s2): return False # count occurrences of each character count = {} for char in s1: if char in count: count[char] += 1 else: count[char] = 1 for char in s2: if char in count: count[char] -= 1 else: return False # check that count of each character is zero for k in count: if count[k] != 0: return False return True # sample call to function words = [\\"silent\\", \\"listen\\"] print(is_anagram(words[0], words[1]))"},{"instruction":"Build a program to convert a given text into its equivalent Morse code in Python. Text: hello","output":"MORSE_CODE_DICT = { 'A':'.-', 'B':'-...', 'C':'-.-.', 'D':'-..', 'E':'.', 'F':'..-.', 'G':'--.', 'H':'....', 'I':'..', 'J':'.---', 'K':'-.-', 'L':'.-..', 'M':'--', 'N':'-.', 'O':'---', 'P':'.--.', 'Q':'--.-', 'R':'.-.', 'S':'...', 'T':'-', 'U':'..-', 'V':'...-', 'W':'.--', 'X':'-..-', 'Y':'-.--', 'Z':'--..', '1':'.----', '2':'..---', '3':'...--', '4':'....-', '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', '0':'-----', ', ':'--..--', '.':'.-.-.-', '?':'..--..', '/':'-..-.', '-':'-....-', '(':'-.--.', ')':'-.--.-'} def text_to_morse(text): morse_code = \\"\\" for ch in text: if ch.upper() in MORSE_CODE_DICT: morse_code += MORSE_CODE_DICT[ch.upper()] + \\" \\" return morse_code text = \\"hello\\" morse_code = text_to_morse(text) print(morse_code)"},{"instruction":"Develop a solution in Python for combining two sorted arrays into a third sorted array. arr1 = [1, 2, 5] arr2 = [2, 4, 6]","output":"def combine_sorted_arrays(arr1, arr2): arr3 = arr1 + arr2 arr3.sort() return arr3 arr1 = [1, 2, 5] arr2 = [2, 4, 6] arr3 = combine_sorted_arrays(arr1, arr2) print(arr3)"},{"instruction":"Develop an AI solution for object recognition using Python.","output":"import cv2 import numpy as np import tensorflow as tf # Load the COCO class labels .txt file labels_file_path = tf.keras.utils.get_file('label.txt', 'https://raw.githubusercontent.com/qw3081020/models/master/label.txt') with open(labels_file_path, 'r') as f: labels = [line.strip() for line in f.readlines()] # Initialize the recognition model model = tf.keras.models.Sequential() model.add(tf.keras.layers.ZeroPadding2D((1, 1), input_shape=(300, 300, 3))) model.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu')) model.add(tf.keras.layers.ZeroPadding2D((1, 1))) model.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu')) model.add(tf.keras.layers.MaxPooling2D((2, 2), strides=(2, 2))) model.add(tf.keras.layers.Flatten()) model.add(tf.keras.layers.Dense(256, activation='relu')) model.add(tf.keras.layers.Dense(128, activation='relu')) model.add(tf.keras.layers.Dense(len(labels), activation='softmax')) # Load model weights model.load_weights('model.h5') # Load the input image image = cv2.imread('input_image.jpg') image = cv2.resize(image, (300, 300)) # Use the model to predict the labels labels_predicted = model.predict(np.expand_dims(image, axis=0))[0] # Sort the labels by confidence labels_sorted_by_confidence = [ label for label, confidence in sorted(zip(labels, labels_predicted), key=lambda x: x[1], reverse=True) ] # Print the predicted labels print(labels_sorted_by_confidence)"},{"instruction":"Develop a REST API in Python that can handle basic authentication. Not applicable","output":"import flask from flask_restful import Resource, Api from flask_basicauth import BasicAuth app = flask.Flask(__name__) api = Api(app) # Set BasicAuth credentials app.config['BASIC_AUTH_USERNAME'] = 'user' app.config['BASIC_AUTH_PASSWORD'] = 'pass' # Initialize BasicAuth basic_auth = BasicAuth(app) # Create a protected endpoint @app.route('/protected') @basic_auth.required def protected(): return 'You have access!' # Create an unprotected endpoint @app.route('/unprotected') def unprotected(): return 'This endpoint is unprotected!' if __name__ == '__main__': app.run()"},{"instruction":"Create a Python program to generate a random password of 8 characters with 1 upper case, 1 lower case, 1 number, and 1 special character. Not applicable","output":"import string import random chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation def generate_password(size=8, chars=chars): return ''.join(random.choice(chars) for _ in range(size)) print(generate_password())"},{"instruction":"Create a class in Python to define a circle object.","output":"class Circle: def __init__(self, radius): self.radius = radius def get_area(self): return 3.14 * (self.radius ** 2)"},{"instruction":"Create a Python program to convert weights from pounds to kilograms. Not applicable","output":"def pounds_to_kilos(pounds): return pounds * 0.453592 while True: pounds = float(input(\\"Enter a weight in pounds: \\")) print(f\\"{pounds} lbs = {pounds_to_kilos(pounds)} kgs\\")"},{"instruction":"Write a Python program that optimizes an array to find the smallest and largest numbers in the array. [45, 2, 84, 33, 8, 1, 2]","output":"def optimize(arr): min = arr[0] max = arr[0] for i in range(1, len(arr)): if arr[i] < min: min = arr[i] if arr[i] > max: max = arr[i] print(\\"Minimum element is:\\", min) print(\\"Maximum element is:\\", max) # Main arr = [45, 2, 84, 33, 8, 1, 2] optimize(arr)"},{"instruction":"Design a program in Python that takes a starting point and end point as input and prints the number of ways to reach the end point. start = 0 end = 5","output":"def num_ways(start, end): # Create an array to store results of subproblems dp = [0 for i in range(end + 1)] # Count of ways for 0'th step is 1 dp[0] = 1 for i in range(start, end + 1): if i > start: dp[i] += dp[i - 1] if i > start + 1: dp[i] += dp[i - 2] return dp[end] print(num_ways(start, end))"},{"instruction":"Create a class in Python that has three methods: add, subtract and multiply.","output":"class Calc: def add(self, x, y): return x + y def subtract(self, x, y): return x - y def multiply(self, x, y): return x * y calc = Calc() print(calc.add(2, 3)) print(calc.subtract(2, 3)) print(calc.multiply(2, 3))"},{"instruction":"Develop an Artificial Neural Network (ANN) model in Python to predict prices of houses. A dataset containing housing prices and related feature","output":"#import required libraries import pandas as pd import numpy as np from sklearn.preprocessing import MinMaxScaler from sklearn.model_selection import train_test_split import tensorflow as tf #load the dataset df = pd.read_csv('housing_data.csv') #separate features and targets X = df.iloc[:, 0:-1].values y = df.iloc[:, -1].values #scale the data scaler = MinMaxScaler() X_scaled = scaler.fit_transform(X) #split the data in train and test X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2) #build the model model = tf.keras.models.Sequential([ tf.keras.layers.Dense(32, activation='relu', input_shape=[X_train.shape[1]]), tf.keras.layers.Dense(1) ]) model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mae']) #train the model model.fit(X_train, y_train, epochs=50, batch_size=10) #test the model model.evaluate(X_test, y_test)"},{"instruction":"Produce a Python code section to calculate the average value for all elements of a given array. [2, 7, 5, 4]","output":"array = [2, 7, 5, 4] total = 0 for num in array: total += num average = total/len(array) print(\\"The average of the array is:\\", average)"},{"instruction":"Generate a python program to calculate the equilibrium price of a commodity in different stores.","output":"def calculate_equilibrium_price(data): \\"\\"\\" Args: data (dict): A dictionary with the prices of the commodity in different stores Returns: int: The equilibrium price of the commodity \\"\\"\\" num_stores = len(data) total_price = 0 for store_price in data.values(): total_price += store_price equilibrium_price = total_price / num_stores return equilibrium_price"},{"instruction":"Optimize the following Python code for improved performance. def factorial(n): if n == 0: return 1 else: return n * factorial(n 1)","output":"def factorial(n): fact = 1 for i in range(1, n+1): fact *= i return fact"},{"instruction":"Generate a Python program to download data from a given URL and write it into a database. The URL is “https://example.com/data.json”and it contains a list of people with their name, email, phone number and address.","output":"import requests import sqlite3 # Get the data from the URL response = requests.get(\\"https://example.com/data.json\\") people_data = response.json() conn = sqlite3.connect('people.db') cursor = conn.cursor() # Create the people table cursor.execute(''' CREATE TABLE people ( name text, email text, phone text, address text ) ''') # Insert the data into the database for person in people_data: name = person['name'] email = person['email'] phone = person['phone'] address = person['address'] cursor.execute(''' INSERT INTO people (name, email, phone, address) VALUES (?, ?, ?, ?) ''', (name, email, phone, address)) conn.commit() conn.close()"},{"instruction":"Convert the following SQL statement into equivalent Python code SELECT * FROM table ORDER BY col1, col2 DESC","output":"def query_table(table): query = \\"\\"\\"SELECT * FROM %s ORDER BY col1, col2 DESC\\"\\"\\" % table return query"},{"instruction":"Construct a neural network model in Python to predict the sale numbers of a product. Product: A Historical data of sales: [3, 4, 2, 6, 5, 10]","output":"model = Sequential() model.add(Dense(8, activation='relu', input_shape=[6])) model.add(Dense(1, activation='linear')) model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae']) model.fit(x_train, y_train, epochs=500, verbose=False)"},{"instruction":"porate AI into an existing Python program to sort a list of integers. list=[4,3,7,8,2,1,6]","output":"def AI_sort(list): sorted_list = sorted(list) return sorted_list list = [4,3,7,8,2,1,6] print(\\"Sorted list is :\\", AI_sort(list))"},{"instruction":"Create a search engine that can take a query and return a list of matching documents.","output":"# Load libraries from sklearn.feature_extraction.text import CountVectorizer from sklearn.metrics.pairwise import cosine_similarity # Create a corpus doc1 = \\"Python is a great programming language\\" doc2 = \\"Python and web development go hand in hand\\" doc3 = \\"Data science is also powered by Python\\" corpus = [doc1, doc2, doc3] # Create a CountVectorizer object vectorizer = CountVectorizer() # Generate the matrix X = vectorizer.fit_transform(corpus) # Generate the cosine similarity matrix similarity_matrix = cosine_similarity(X) # Function to get a query def get_query(query): query_vector = vectorizer.transform([query]) results = cosine_similarity(query_vector, X) return results # Function to get the results def get_results(results, corpus): list_results = [] for i, score in enumerate(results): if score[0] > 0.0: list_results.append([score[0], corpus[i]]) # Sort in descending order sorted_results = sorted(list_results, reverse = True) return sorted_results"},{"instruction":"Write a Python program to identify strings with all unique characters","output":"def is_unique_string(s): d = {} for i in s: if i in d: return False d[i] =1 return True"},{"instruction":"Write a Python script that prints all the prime numbers between 0 and the given number. 10","output":"def prime_numbers(num): primes = [] for n in range(2, num + 1): is_prime = True for i in range(2, n): if n % i == 0: is_prime = False break if is_prime: primes.append(n) return primes print(prime_numbers(10)) # Outputs: [2, 3, 5, 7]"},{"instruction":"Create a TensorFlow model in Python to classify handwritten numbers. Not applicable","output":"import tensorflow as tf # load the MNIST dataset (x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data() # reshape and rescale the data x_train = x_train.reshape(x_train.shape[0], 28, 28, 1).astype('float32') x_test = x_test.reshape(x_test.shape[0], 28, 28, 1).astype('float32') x_train = x_train / 255.0 x_test = x_test / 255. # build the model model = tf.keras.models.Sequential([ tf.keras.layers.Conv2D(32, (3, 3), input_shape=(28, 28 ,1), activation='relu'), tf.keras.layers.MaxPooling2D(2, 2), tf.keras.layers.Dropout(0.2), tf.keras.layers.Flatten(), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(10, activation='softmax')]) # compile and train the model model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) model.fit(x_train, y_train, epochs=10) # evaluate the model test_loss, test_accuracy = model.evaluate(x_test, y_test, verbose=1) print('Test Accuracy:', test_accuracy)"},{"instruction":"Create a data visualization in Python using Matplotlib that displays the total number of cases for coronavirus in different countries. [[United States, 212000], [Russia, 180000], [Italy, 105000], [Spain, 90000], [Germany, 70000]]","output":"import matplotlib.pyplot as plt country_data = [['United States', 212000], ['Russia', 180000], ['Italy', 105000], ['Spain', 90000], ['Germany', 70000]] country = [data[0] for data in country_data] cases = [data[1] for data in country_data] plt.barh(country, cases) plt.title(\\"Total number of Coronavirus cases by country\\") plt.xlabel('Number of cases') plt.ylabel('Country') plt.show()"},{"instruction":"Create a function in Python to generate a random data matrix with a given shape.","output":"import numpy as np def generate_random_matrix(rows, columns): matrix = np.random.randint(low = 0, high = 100, size = (rows,columns)) return matrix"},{"instruction":"Create a function in Python to generate an array of numbers, each element in the array being twice the value of its previous one. Size of Array: 10","output":"def generate_double_array(size): arr = [1] for i in range(1, size): arr.append(arr[i - 1] * 2) return arr"},{"instruction":"Generate a Python script to create a random password of length 8 characters consisting of alphabets(lower and upper), numbers, and symbols. Not applicable","output":"import random import string # generate a random password def randomPassword(): password = '' all_characters = string.ascii_letters + string.digits + string.punctuation # loop over the length for _ in range(8): # select a random character password += random.choice(all_characters) return password # print the generated password print(randomPassword())"},{"instruction":"Develop a Python program to find the most common word in a sentence","output":"def frequency(sentence): words = sentence.split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 most_common_word, frequency = max(frequency.items(), key=lambda x: x[1]) return most_common_word, frequency"},{"instruction":"Write a python program to calculate a person's BMI (body mass index). Height: 1.75m Weight: 80kg","output":"# Calculate BMI height = 1.75 # meters weight = 80 # kilograms bmi = weight / (height * height) print(\\"BMI: \\", bmi)"},{"instruction":"Write a sequence of instructions in Python to establish an SSH connection to a remote computer.","output":"import paramiko hostname = \\"[REMOTEHOSTNAME]\\" username = \\"[USERNAME]\\" password = \\"[PASSWORD]\\" ssh_client = paramiko.SSHClient() ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) ssh_client.connect(hostname=hostname, username=username, password=password)"},{"instruction":"Write a Python script to make an HTTP request using the Requests library. url = 'https://example.org'","output":"import requests resp = requests.get(url) if resp.status_code == 200: print('Success!') print(resp.text) else: print('An error occurred.')"},{"instruction":"Create a Python program that takes in a string and counts the number of vowels in it. Hello","output":"def count_vowels(s): count = 0 for char in s: if char in \\"aeiouAEIOU\\": count += 1 return count s = \\"Hello\\" result = count_vowels(s) print(result)"},{"instruction":"Create a Python function to encode a given sentence into base64.","output":"import base64 def encodeInBase64(msg): msg_bytes = msg.encode('ascii') base64_bytes = base64.b64encode(msg_bytes) base64_message = base64_bytes.decode('ascii') return base64_message"},{"instruction":"Utilizing the given data, write a Python code to calculate the average of numbers stored in a list. list = [2, 3, 6, 8, 9]","output":"def calculate_average(lst): sum = 0 for num in lst: sum+=num avg = sum/len(lst) return avg list = [2, 3, 6, 8, 9] average = calculate_average(list) print(\\"Average of list:\\", average)"},{"instruction":"Write a Python program to filter strings linked by commas and return only strings longer than three characters in length. Code,Generation,Task,Instructions","output":"def filter_strings(string): strings = string.split(',') filtered = [] for s in strings: if len(s) > 3: filtered.append(s) return filtered filtered_strings = filter_strings(\\"Code,Generation,Task,Instructions\\") print(filtered_strings)"},{"instruction":"Create a Python program to determine whether input text is a palindrome. Madam, I'm Adam","output":"def is_palindrome(text): # preprocess the text to remove whitespace, punctuation, etc text = ''.join(ch for ch in text.lower() if ch.isalpha()) # reverse the text rev_text = text[::-1] # compare the reversed text to the original text return rev_text == text input_text = \\"Madam, I'm Adam\\" if is_palindrome(input_text): print(\\"The text '{}' is a palindrome\\".format(input_text)) else: print(\\"The text '{}' is not a palindrome\\".format(input_text))"},{"instruction":"Write an algorithm in Python to determine if a number is an Armstrong number or not. The number is 370.","output":"def armstrong_number(num): digits = [int(x) for x in str(num)] n_digits = len(digits) sum_of_cubes = 0 for digit in digits: sum_of_cubes += digit ** n_digits if sum_of_cubes == num: return True else: return False armstrong_number(370)"},{"instruction":"Generate a Python program that reads a line from the user and prints out the number of words in the line.","output":"def count_words(): sentence = input(\\"Please enter a sentence here: \\") num_words = len(sentence.split()) print(\\"The sentence has\\", num_words, \\"words.\\") count_words()"},{"instruction":"Generate a random Rubik's cube configuration in Python. Not applicable","output":"import random # Create a 3x3x3 cube cube = [[[0] * 3 for _ in range(3)] for _ in range(3)] # Fill the cube with random colors colors = [1, 2, 3, 4, 5, 6] for plane in cube: for row in plane: for i in range(3): row[i] = random.choice(colors) # Print out the cube configuation for plane in cube: print(plane)"},{"instruction":"This code generates a set of C++ files for the BAGEL package. To use it, create a file named RelCASPT2.cc and add the desired code to it. Then run the script to generate the necessary files.","output":"#!/opt/local/bin/python import string import os import re def header(n) : return \\"//n // BAGEL - Brilliantly Advanced General Electronic Structure Libraryn // Filename: RelCASPT2\\" + n + \\".ccn // Copyright (C) 2014 Toru Shiozakin //n // Author: Toru Shiozaki <shiozaki@northwestern.edu>n // Maintainer: Shiozaki groupn //n // This file is part of the BAGEL package.n //n // This program is free software: you can redistribute it and/or modifyn // it under the terms of the GNU General Public License as published byn // the Free Software Foundation, either version 3 of the License, orn // (at your option) any later version.n //n // This program is distributed in the hope that it will be useful,n // but WITHOUT ANY WARRANTY; without even the implied warranty ofn // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See then // GNU General Public License for more details.n //n // You should have received a copy of the GNU General Public Licensen // along with this program. If not, see <http://www.gnu.org/licenses/>.n //n n #include <bagel_config.h>n #ifdef COMPILE_SMITHn n n #include <src/smith/relcaspt2/RelCASPT2.h>n\\" def insert(): return \\"#include <src/smith/relcaspt2/RelCASPT2_tasks.h>n\\" def header2(): return \\"n using namespace std;n using namespace bagel;n using namespace bagel::SMITH;n n \\" footer = \\"#endifn\\" f = open('RelCASPT2.cc', 'r') lines = f.read().split(\\"n\\")[34:] tasks = [] tmp = \\"\\" for line in lines: if (len(line) >= 17 and (line[0:17] == \\"shared_ptr<Queue>\\" or line[0:17] == \\"RelCASPT2::RelCAS\\")): if (tmp != \\"\\"): tasks.append(tmp) tmp = \\"\\" tmp += line + \\"n\\" if (line == \\"}\\"): tmp += \\"n\\" tasks.append(tmp) p = re.compile('make_[a-z0-9]+q') for task in tasks[0:-1]: tag = p.search(task).group()[5:] fout = open(\\"RelCASPT2_\\" + tag + \\".cc\\", \\"w\\") out = header(\\"_\\" + tag + \\"q\\") + insert() + header2() + task + footer fout.write(out) fout.close() os.remove(\\"RelCASPT2.cc\\") fout = open(\\"RelCASPT2.cc\\", \\"w\\") out = header(\\"\\") + header2() + tasks[len(tasks)-1] + footer fout.write(out) fout.close()"},{"instruction":"Convert the following JavaScript function to Python. function double(x) { return 2 * x; }","output":"def double(x): return 2 * x"},{"instruction":"Create an algorithm for sorting numbers in Python that uses selection sort. [8, 5, 2, 9, 5, 6, 3]","output":"def selectionSort(nums): for i in range(len(nums) - 1): # Find the minimum element in the unsorted array # Assume it is the first element min_index = i for j in range(i+1, len(nums)): if nums[j] < nums[min_index]: min_index = j # Swap the minimum element with the first element if min_index != i: nums[i], nums[min_index] = nums[min_index], nums[i] return nums print(selectionSort([8, 5, 2, 9, 5, 6, 3])) # [2, 3, 5, 5, 6, 8, 9]"},{"instruction":"Develop a Python guess the number game. The program should pick a random number between 1 to 10 and the user has to guess it. Not applicable","output":"import random answer = random.randint(1, 10) guess = int(input('Guess a number between 1 and 10: ')) if guess == answer: print('You guessed correct!') elif guess < answer: print('Your guess is too low') elif guess > answer: print('Your guess is too high')"},{"instruction":"Write a Python program to create a stack using a linked list.","output":"class Node: def __init__(self, data): self.data= data self.next = None class Stack: def __init__(self): self.head = None self.tail = self.head self.items = 0 def push(self, data): new_node = Node(data) if self.head is None: self.head = new_node else: new_node.next = self.head self.head = new_node self.tail = self.head self.items +=1 def pop(self): if self.head is None: return None data = self.head.data self.head = self.head.next self.items -= 1 return data"},{"instruction":"Create an algorithm in Python that takes in a sequence of numbers and finds the two numbers that have the highest product. Sequence of numbers: 4, 2, 10, 8, 9","output":"def highest_product(arr): largest = max(arr[0], arr[1]) smallest = min(arr[0], arr[1]) largest_product = arr[0] * arr[1] for i in range(2, len(arr)): if arr[i] > largest: largest = arr[i] elif arr[i] < smallest: smallest = arr[i] largest_product = max(largest_product, largest*smallest) return largest_product print(highest_product([4, -2, 10, 8, 9]))"},{"instruction":"Design a neural network to recognize handwritten digits in Python. Not applicable","output":"import numpy as np import tensorflow as tf from tensorflow.keras import layers # define the model model = tf.keras.Sequential() model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1))) model.add(layers.MaxPooling2D((2, 2))) model.add(layers.Conv2D(64, (3, 3), activation='relu')) model.add(layers.MaxPooling2D((2, 2))) model.add(layers.Conv2D(64, (3, 3), activation='relu')) model.add(layers.Flatten()) model.add(layers.Dense(64, activation='relu')) model.add(layers.Dense(10, activation='softmax')) # compile the model model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"},{"instruction":"Make a program to find and replace all occurrences of a certain word in a string using Python. String: 'Course: Machine Learning, Platform: Coursera.' Word: 'Course' Word to replace: 'Program'","output":"def replace_all_occurrences(string, word, replace_word): \\"\\"\\" This function takes a string and finds all occurrences of the given 'word' and replaces it with the 'replace_word'. \\"\\"\\" new_str = string.replace(word, replace_word) return new_str # Driver Code text = 'Course: Machine Learning, Platform: Coursera.' word = 'Course' replace_word = 'Program' print(replace_all_occurrences(text, word, replace_word))"},{"instruction":"This code reads images from a directory, averages their pixel intensities, and saves the resulting image in an output directory. To use this code, run the script with the commandline arguments d or directory followed by the path to the directory of images to average, and o or outdir followed by the path to the output directory.","output":"#!/usr/bin/env python import argparse import numpy as np import sys, os from os import listdir import plantcv as pcv import datetime # Parse command-line arguments def options(): parser = argparse.ArgumentParser(description=\\"Get images from an SQLite database and some input information\\") parser.add_argument(\\"-d\\", \\"--directory\\", help=\\"path to directory of images to average.\\") parser.add_argument(\\"-o\\", \\"--outdir\\", help=\\"Output directory.\\", required=False) args = parser.parse_args() return args # Functions def average_all_img(directory,outdir): allfiles=os.listdir(directory) path=str(directory) allpaths=[] for files in allfiles: p=path+str(files) allpaths.append(p) img, path, filename = pcv.readimage(allpaths[0]) n=len(allpaths) if len(np.shape(img))==3: ix,iy,iz=np.shape(img) arr=np.zeros((ix,iy,iz),np.float) else: ix,iy=np.shape(img) arr=np.zeros((ix,iy,iz),np.float) # Build up average pixel intensities, casting each image as an array of floats for i,paths in enumerate(allpaths): img,path,filename=pcv.readimage(allpaths[i]) imarr=np.array(img,dtype=np.float) arr=arr+imarr/n #Round values in array and cast as 8-bit integer arr=np.array(np.round(arr),dtype=np.uint8) pcv.print_image(arr, (str(outdir)+\\"average_\\"+str(allfiles[0]))) # Main pipeline def main(): # Get options args = options() average_all_img(args.directory, args.outdir) if __name__ == '__main__': main()"},{"instruction":"Develop a Python program to calculate the largest sum of a consecutive sequence of n numbers given in an array. array = [1, 2, 5, 4, 5, 7, 8]","output":"def max_consecutive_sum(array): max_val = 0 cur_man = 0 for x in array: cur_man = max(cur_man + x, 0) max_val = max(cur_man, max_val) return max_val"},{"instruction":"Create a function in Python that takes an input string and returns whether it is a palindrome. txt = madam","output":"def isPalindrome(txt): i = 0 j = len(txt) - 1 while i < j: if txt[i] != txt[j]: return False i += 1 j -= 1 return True print(isPalindrome(txt)) // True"},{"instruction":"Create a Python program that prints the sum of all integers that are divisible by 3 and 5 from 0 to a given number. Max number: 10","output":"def sum_divisible_by_3_and_5(n): s = 0 for i in range(n + 1): if i % 3 == 0 or i % 5 == 0: s += i return s print(sum_divisible_by_3_and_5(10)) # 33"},{"instruction":"Create a python script to generate a set of random numbers between 1 and 10, and print out the largest number in the set.","output":"import random random_numbers = [random.randint(1, 10) for _ in range(20)] max_number = max(random_numbers) print(random_numbers) print(f'The largest number is {max_number}')"},{"instruction":"Create a class in Python that will return the sum of two numbers.","output":"class Summator: def __init__(self, num1, num2): self.num1 = num1 self.num2 = num2 def get_sum(self): return self.num1 + self.num2"},{"instruction":"Design a data structure in Python to store information about students.","output":"class Student: def __init__(self, name, age, gender, college): self.name = name self.age = age self.gender = gender self.college = college"},{"instruction":"Write a Python program to take three numbers from the user and check if the sum of any two numbers equals to the third one.","output":"def check_triplet_sum(a, b, c): if a + b == c or b + c == a or a + c == b: return True else: return False a = int(input(\\"Enter the first number: \\")) b = int(input(\\"Enter the second number: \\")) c = int(input(\\"Enter the third number: \\")) if check_triplet_sum(a, b, c): print(\\"Numbers can form a triplet.\\") else: print(\\"Numbers cannot form a triplet.\\")"},{"instruction":"Create an algorithm in Python to rotate an array of numbers by k elements. Array: [1,2,3,4,5], k=2","output":"def rotate_array(arr, k): n = len(arr) for i in range(k): temp = arr[n-1] for i in range(n-1,0,-1): arr[i] = arr[i-1] arr[0] = temp return arr print(rotate_array([1,2,3,4,5],2)) # prints [4,5,1,2,3]"},{"instruction":"Write a function in Python that takes a single argument, an unsigned integer, and returns the binary representation of that argument as a string. number = 5","output":"def IntToBinString(number): if number == 0: return \\"0\\" ret = \\"\\" while number > 0: if number % 2 == 1: ret = \\"1\\" + ret else: ret = \\"0\\" + ret number //= 2 return ret"},{"instruction":"Create a program in Python to capitalize the first letter of a given string. hello world","output":"def capitalize_first_letter(text): return text[0].upper() + text[1:] print(capitalize_first_letter(\\"hello world\\")) # Output: Hello world"},{"instruction":"Develop a user interface in python tkinter to add, modify, and delete items from a list.","output":"# imports import tkinter as tk # window config win = tk.Tk() win.title(\\"list operations\\") # list variable data = [] # functions def add_item(): data.append(txt_input.get()) refresh_list() def delete_item(): data.remove(lst_data.get(tk.ACTIVE)) refresh_list() def modify_item(): data[lst_data.curselection()[0]] = txt_input.get() refresh_list() def refresh_list(): lst_data.delete(0, tk.END) for item in data: lst_data.insert(tk.END, item) # frame frm_list = tk.Frame(win) lbl_input = tk.Label(frm_list, text=\\"Input\\") txt_input = tk.Entry(frm_list, width=15) lbl_input.grid(row=0, column=0) txt_input.grid(row=0, column=1) # listbox config lst_data = tk.Listbox(frm_list, height=5) lst_data.grid(row=1, column=0, columnspan=2) # button config btn_add = tk.Button(frm_list, text=\\"add\\", command=add_item) btn_delete = tk.Button(frm_list, text=\\"delete\\", command=delete_item) btn_modify = tk.Button(frm_list, text=\\"modify\\", command=modify_item) btn_add.grid(row=2, column=0) btn_delete.grid(row=2, column=1) btn_modify.grid(row=2, column=2) # frame grid frm_list.grid(row=0, column=0) win.mainloop()"},{"instruction":"Write a Python program to create a dictionary from two lists where the first list contains keys and the second list contains values. keys = ['a', 'b', 'c', 'd'] values = [1, 2, 3, 4]","output":"def create_dictionary(keys, values): dictionary = dict(zip(keys, values)) return dictionary dictionary = create_dictionary(keys, values) print(dictionary)"},{"instruction":"Provide a Python script that returns the number of words in a given sentence This is a test sentence","output":"def word_count(sentence): words = sentence.split() return len(words)"},{"instruction":"Create a program in Python to calculate the total marks of 5 students taking 5 different exams. The marks should be in the range 0100. Not applicable","output":"def total_marks(marks): total = 0 for student in marks: total += sum(student) return total marks = [[75, 75, 76, 78, 80], [90, 88, 87, 85, 83], [68, 70, 79, 82, 76], [80, 79, 66, 77, 85], [90, 85, 83, 75, 73]] total = total_marks(marks) print(total)"},{"instruction":"Create a hierarchical clustering algorithm in Python to group data points into clusters. data_points=[1,2,3,4,5]","output":"import numpy as np from scipy.cluster.hierarchy import dendrogram, linkage # define the data points data_points = np.array([1,2,3,4,5]) # create the linkage matrix linkage_matrix = linkage(data_points, 'ward') # generate the dendrogram dendrogram(linkage_matrix)"},{"instruction":"Generate a Python code to generate a random integer between 1 and 10.","output":"import random rand_int = random.randint(1, 10)"},{"instruction":"Create a function in Python that takes a list of strings and returns a list of dictionaries containing the frequency of each character in each string. ['hello', 'world']","output":"def character_frequency(strings): result = [] for string in strings: freq = {} for char in string: if char in freq: freq[char] += 1 else: freq[char] = 1 result.append(freq) return result print(character_frequency(['hello', 'world'])) # Output: [{'h': 1, 'e': 1, 'l': 2, 'o': 1}, {'w': 1, 'o': 1, 'r': 1, 'l': 1, 'd': 1}]"},{"instruction":"Create a Django project that allows users to register and log in.","output":"# To create a Django project, run the following command: django-admin startproject projectname # To create an app inside the project (e.g. accounts app): python manage.py startapp accounts \`\`\` # In accounts/views.py from django.shortcuts import render from django.contrib.auth import authenticate, login from .forms import RegisterForm def register_view(request): if request.method == 'POST': forms = RegisterForm(request.POST) if forms.is_valid(): user = forms.save() user.refresh_from_db() # load the profile instance created by the signal user.save() raw_password = forms.cleaned_data.get('password1') user = authenticate(username=user.username, password=raw_password) login(request, user) return redirect('index') else: forms = RegisterForm() return render(request, 'accounts/register.html', {'forms': forms}) \`\`\`"},{"instruction":"Write a function in Python to find the sum of all elements of a given list. inputList = [1, 2, 3, 4, 5]","output":"def sum_list(inputList): sum_list = 0 for num in inputList: sum_list += num return sum_list"},{"instruction":"Write a script in Python to find roots of a quadratic equation (ax2 + bx +c = 0). a = 4 b = 5 c = 6","output":"import math def findRoots(a, b, c): discriminant = (b * b) - (4 * a * c) if discriminant > 0: root1 = (-b + math.sqrt(discriminant) / (2 * a)) root2 = (-b - math.sqrt(discriminant) / (2 * a)) return (root1, root2) elif discriminant == 0: root1 = root2 = -b / (2 * a) return (root1, root2) else: return (None, None) findRoots(4, 5, 6)"},{"instruction":"Create an algorithm in Python to solve the classic 15 puzzle game. Not applicable","output":"def solver(board): zero_position = find_zero(board) # find the zero tile of the board if not zero_position: # no zero tile found return False # try each possible move for move in possible_moves(board): board_copy = board.copy() #copy board in order not to change it board_copy = make_move(board_copy, zero_position, move) if board_copy == goal: # goal found return True else: if (solver(board_copy)): return True # call itself again if the move brings us closer to the goal return False # no goal found"},{"instruction":"Write a Python program to calculate the roots of a quadratic equation with given coefficients. Coefficients: a = 2, b = 5, c = 3","output":"def calculate_roots(a, b, c): # calculate the discriminant d = (b**2) - (4*a*c) # find two solutions sol1 = (-b-cmath.sqrt(d))/(2*a) sol2 = (-b+cmath.sqrt(d))/(2*a) return sol1, sol2"},{"instruction":"Write a function in Python to predict a label for a given input. [5, 2, 4]","output":"def predict(x): if x[0] > 0: return 'positive' if x[1] < 0: return 'negative' if x[2] > 0: return 'positive' return 'neutral'"},{"instruction":"Write a Python program to print food items along with their prices from a given dictionary of food items and prices. food_items = { 'Burger': 3.99, 'Fries': 1.99, 'Pizza': 12.99 }","output":"for item, price in food_items.items(): print(f'{item}: {price}')"},{"instruction":"Write a Python program which takes an input string, removes all nonalphanumeric characters, and prints all of the words used in the string along with the number of times each word appears? This is some text with many words in it.","output":"words = [] # remove all non-alphanumeric characters for char in string: if char.isalnum(): words.append(char) # count number of times each word is used word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 for k,v in word_count.items(): print('{} : {}'.format(k,v))"},{"instruction":"Write a Python program that prints out the longest word in a sentence. The quick brown fox jumped over the lazy dog","output":"sentence = \\"The quick brown fox jumped over the lazy dog\\" words = sentence.split() longest_word = '' for word in words: if len(word) > len(longest_word): longest_word = word print(longest_word)"},{"instruction":"Rewrite this Python code in Java. nums = [1, 5, 7, 10] for i in nums: print(i)","output":"int[] nums = {1, 5, 7, 10}; for (int i : nums) { System.out.println(i); }"},{"instruction":"Compile a Python program to retrieve the nth Fibonacci number in the series. 5","output":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) num = 5 print(Fibonacci(num))"},{"instruction":"Write a code snippet in Python to print the date after 30 days from the current date.","output":"from datetime import date, timedelta d = date.today() print(d + timedelta(days = 30))"},{"instruction":"Compile a given python code that uses a specific library or package into an executable.","output":"import py_compile py_compile.compile(\\"<python_code_file>\\", cfile=\\"<executable_name>\\", doraise=True)"},{"instruction":"Generate a Python script to sort a given list of numbers without using the builtin function \`\`sort()\`\` list = [3,2,7,5,4,1,8]","output":"def sort_list(list): '''This function will sort a given list of numbers without using the built-in function sort()''' for i in range(len(list)): for j in range(i+1, len(list)): if list[i] > list[j]: list[i], list[j] = list[j], list[i] return list"},{"instruction":"Write a python class to read an xml document and display the results.","output":"class XmlReader: def __init__(self, file_name): self.file_name = file_name def get_document(self): with open(self.file_name, 'r') as f: doc = f.read() return doc def get_xml_data(self): doc = self.get_document() tree = ElementTree.fromstring(doc) root = tree.getroot() # iterate all elements and attributes return root"},{"instruction":"Create a web crawler in Python to scrape the latest news headlines from CNN. Not applicable","output":"import requests from bs4 import BeautifulSoup def scrap_cnn(): #make a request to CNN's homepage response = requests.get('https://cnn.com') # parse the html content soup = BeautifulSoup(response.text,'html.parser') # extract all the headline elements headlines = soup.find_all('h3', class_ = 'cd__headline') # scrape the text from the elements news_headlines = [headline.text for headline in headlines] # return the list of headlines return news_headlines if __name__ == \\"__main__\\": headlines = scrap_cnn() for headline in headlines: print(headline)"},{"instruction":"Create a program in Python that prints Greetings for any name that is passed as an argument. Andrew","output":"import sys name = sys.argv[1] print(\\"Greetings, \\"+name+\\"!\\")"},{"instruction":"Generate a function in Python that takes an array of numbers and returns an array of the squares of the numbers. [1,2,3]","output":"\\"\\"\\" A function to return the squares of an array in Python \\"\\"\\" def square_array(input_array): squared_array = [] for i in input_array: squared_array.append(i*i) return squared_array"},{"instruction":"Create an algorithm in Python to sort an array of integers. The array to be sorted: [2, 1, 6, 5, 8]","output":"def quicksort(array): if len(array) <= 1: return array pivot = array[len(array) // 2] left = [x for x in array if x < pivot] middle = [x for x in array if x == pivot] right = [x for x in array if x > pivot] return quicksort(left) + middle + quicksort(right) # test array = [2, 1, 6, 5, 8] print(quicksort(array))"},{"instruction":"Create code to search for a specific word in an array of strings. mywords = [Hello, World, Python, Programming] search_word = Python","output":"\\"\\"\\" Create code to search for a specific word in an array of strings \\"\\"\\" mywords = [\\"Hello\\", \\"World\\", \\"Python\\", \\"Programming\\"] search_word = \\"Python\\" #Set a boolean flag to track the search found = False #Loop through the array of strings for word in mywords: #Compare the current word with the search word if word == search_word: #Print out the word if found print(\\"Found the word: \\" + word) #Set the flag to True found = True #Check the flag after the loop is complete if not found: print(\\"Cannot find the word: \\" + search_word)"},{"instruction":"Create a Python program to classify an email as spam or not spam. This email body contains some overly spammy words.","output":"import re def classify(text): spam_words = [\\"free\\", \\"prize\\", \\"win\\", \\"offer\\"] is_spam = False for w in spam_words: if re.search(w, text): is_spam = True if is_spam: return \\"This is a spam email.\\" else: return \\"This is not a spam email\\" print(classify(\\"This email body contains some overly spammy words.\\"))"},{"instruction":"Generate a python program that calculates the total cost of all items in a given list [(apple, 5, 50),(mango,6,70)]","output":"def total_cost(items): total_cost = 0 for item in items: quantity = item[1] unit_price = item[2] total_cost += quantity * unit_price return total_cost"},{"instruction":"Generate a program in Python to print all prime numbers between 1 and 50.","output":"# print all prime numbers between 1 and 50 for num in range(1,51): # prime numbers are greater than 1 if num > 1: for i in range(2,num): if (num % i) == 0: break else: print(num)"},{"instruction":"Develop a Python class which allows users to access and control additional hardware components which are connected to the computer.","output":"# Import necessary libraries import sys, serial class HardwareController: \\"\\"\\" This class allows users to access and control additional hardware components which are connected to the computer via USB. \\"\\"\\" def __init__(self): self.serial_port = None self.baud_rate = None # Establish connection between computer and hardware component def connect(self, serial_port, baud_rate): try: self.serial_port = serial.Serial(serial_port, baud_rate) self.baud_rate = baud_rate return True except: # Return false and print error if connection fails print(\\"Error: Failed to connect to the device. Check baud rate and serial port.\\") return False # Write data to the hardware component def write(self, data): if self.serial_port.isOpen(): self.serial_port.write(data) else: print(\\"Error: Device is not connected. Connect to the device first and try again.\\") # Read data from the hardware component def read(self): if self.serial_port.isOpen(): return self.serial_port.readline() else: print(\\"Error: Device is not connected. Connect to the device first and try again.\\") # Disconnect from the hardware component def disconnect(self): self.serial_port.close() self.serial_port = None"},{"instruction":"Create a python program to calculate the Mertens function over a given range.","output":"# Function to calculate the Mertens function def mertens_function(m): # Initialize the result res = 0 # Iterate over all numbers from 1 to m for j in range(1, m+1): res += moebius_function(j) return res # Function to calculate the Moebius function def moebius_function(n): # Initialize result res = 1 # Iterate over all factors for i in range(2, n + 1): cnt = 0 while n % i == 0: n = int(n / i) cnt += 1 if cnt > 1: res = 0 break if cnt == 1: res = -res return res # Main Program m = int(input(\\"Enter the range: \\")) res = mertens_function(m) print(\\"The Mertens function of\\", m, \\"is\\", res)"},{"instruction":"mplement a solution in Python using loops, to determine the maximum number of consecutive 1's in a binary number. 1011101101","output":"def max_consecutive_ones(n): max_ones = 0 count = 0 while n > 0: if n %2 == 1: count+=1 max_ones = max(max_ones, count) else: count = 0 n>>=1 return max_ones"},{"instruction":"Create a python function that takes in a list of strings and returns a dictionary mapping each string to its length in the list. Input: [Hello, World, I, am, here]","output":"def string_length_dictionary(lst): \\"\\"\\" Creates a dictionary mapping each string to its length in a list Parameters ---------- lst : list of strings a list of strings Returns ------- dict a dictionary mapping string to its length \\"\\"\\" length_dict = {} for word in lst: length_dict[word] = len(word) return length_dict if __name__ == '__main__': print(string_length_dictionary([\\"Hello\\", \\"World\\", \\"I\\", \\"am\\", \\"here\\"]))"},{"instruction":"Develop a function in Python which takes a sentence as input and prints out the number of times each character appears in the sentence. Hello World!","output":"def characterCount(string): # Create a dictionary to store the count of characters charCount = {} # Iterate through the characters of the string for character in string: # Initialize the count of characters in the dictionary if character in charCount.keys(): charCount[character] += 1 else: charCount[character] = 1 # Print the output print(charCount) characterCount(\\"Hello World!\\") // Outputs: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}"},{"instruction":"Write a Python program to convert a given temperature from Celsius to Fahrenheit using a given formula. Temperature in Celsius: 30","output":"def celsius_to_fahrenheit(celsius): fahrenheit = (celsius * 9/5) + 32 return fahrenheit celsius_to_fahrenheit(30) # returns 86.0"},{"instruction":"Create a class 'Person' in Python, which has attributes name, age, gender and blood group.","output":"class Person: def __init__(self, name, age, gender, blood_group): self.name = name self.age = age self.gender = gender self.blood_group = blood_group"},{"instruction":"Train a supervised learning model in Python to predict the outcome of a horse race.","output":"# Imports import numpy as np from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score from sklearn.tree import DecisionTreeClassifier # Load the dataset data = np.loadtxt('horse_race_data.txt') X_data = data[:, :-1] y_data = data[:, -1] # Split into training set and test set X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.2) # Train the model clf = DecisionTreeClassifier() clf.fit(X_train, y_train) # Make predictions predictions = clf.predict(X_test) # Evaluate the model accuracy = accuracy_score(y_test, predictions) print('Model accuracy: ' + str(accuracy))"},{"instruction":"Generate a Python function that takes a list and a target number as input and returns a list of the indices of all elements in the given list that are smaller than the given target number. [2, 3, 4, 5, 6], 4","output":"def find_smaller_elements(nums, target): indices = [] for i, num in enumerate(nums): if num < target: indices.append(i) return indices result = find_smaller_elements([2, 3, 4, 5, 6], 4) print(result) # [0, 1]"},{"instruction":"Analyze the following code and explain how it works. def generate_random_string(n): # String of alphabets, numbers, and special characters alphabets = ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#&* # Initialize a string res = # Generate random string for i in range(n): res += alphabets[random.randint(0,len(alphabets)1)] return re","output":"This function accepts a parameter n which denotes the length of the random string to generate. It creates a string containing all the alphabets, numbers, and special characters. It initializes a result string to store the random string generated and then uses the Python random() method to generate a random index in the range of the length of the alphabets string. It then assigns the character at the random index to the result string and then loops until it generates a string of the given length. Finally, it returns the randomly generated string."},{"instruction":"Design an objectoriented Python class for a Car object which contains private fields for Milage, TopSpeed, and Manufacturer. Not applicable","output":"class Car: def __init__(self, milage, top_speed, manufacturer): self.__milage = milage self.__top_speed = top_speed self.__manufacturer = manufacturer @property def milage(self): return self.__milage @property def top_speed(self): return self.__top_speed @property def manufacturer(self): return self.__manufacturer"},{"instruction":"Create a Python script that when executed, prints out the sum of the first 10 even numbers.","output":"sum = 0 for i in range(2,21,2): #Range(start,stop-1,step size) sum += i print(sum)"},{"instruction":"Write a Python program to check if the given matris is a symmetric matrix. A = [[1,2,3], [2,0,4], [3,4,5]]","output":"def is_symmetric(a): n = len(a) for i in range(n): for j in range(n): if a[i][j] != a[j][i]: return False return True A = [[1,2,3], [-2,0,4], [3,-4,5]] print(is_symmetric(A))"},{"instruction":"Create a Python program to automate the process of filing receipts and invoices.","output":"import os import shutil # define a function to move file to designated folder def move_file (src_path, dest_path): shutil.move(src_path, dest_path) print(\\"File moved from\\", src_path, \\"to\\", dest_path) # define source and destination src_dir = \\"./Unfiled_Documents/\\" dest_dir = \\"./Invoices_and_Receipts/\\" # iterate through the files for root, dirs, files in os.walk(src_dir): for file in files: # check the file type filename, file_extension = os.path.splitext(file) if file_extension in ['.pdf', '.odt', '.docx']: # move the file src = os.path.join(root, file) dest = dest_dir + 'invoice_or_receipt' + file_extension move_file(src, dest)"},{"instruction":"Create a Python script that sorts a list of dictionaries in ascending order based on a specific key value. list_of_dicts = [{'name':'John','age':32}, {'name':'Doe','age':22}, {'name': 'Jane','age':44}]","output":"def sort_list_of_dicts_asc(list_of_dicts, key): return sorted(list_of_dicts, key=lambda dict: dict[key]) sorted_list_of_dicts = sort_list_of_dicts_asc(list_of_dicts, 'age') print(sorted_list_of_dicts) # prints [{'name': 'Doe', 'age': 22}, {'name': 'John', 'age': 32}, {'name': 'Jane', 'age': 44}]"},{"instruction":"mplement a python script to generate a random string of length 10 containing only alphabets.","output":"import string import random # generate a random string of length 10 def generateRandomString(length): letters = string.ascii_letters return ''.join(random.choice(letters) for i in range(length)) rand_string = generateRandomString(10) print(rand_string)"},{"instruction":"Develop a Python program to compute the nth Fibonacci number with recursion.","output":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program print(Fibonacci(9))"},{"instruction":"Construct a Python program to check whether a given number is prime or not. 13","output":"def check_prime(num): if num == 1: return False for i in range(2,num): if not num % i: return False return True result = check_prime(13) print(result)"},{"instruction":"Create a Python Program to print the Fibonacci sequence up to n terms Print the Fibonacci sequence up to the 5th term","output":"def Fibonacci(n): # First and second number in the sequence Fib_list = [0, 1] # Generate the Fibonacci sequence up to n terms for i in range(2,n): Fib_list.append(Fib_list[i-2] + Fib_list[i-1]) return Fib_list # Driver code n = 5 print(Fibonacci(n))"},{"instruction":"Create a function in Python to check if a list contains duplicates. [1, 3, 2, 4, 5, 3]","output":"def contains_duplicates(list): seen = set() for item in list: if item in seen: return True seen.add(item) return False list = [1, 3, 2, 4, 5, 3] print(contains_duplicates(list))"},{"instruction":"Create an algorithm in Python to check if two words are a sudoku valid pair. word1 = “ready”, word2 = “steady”","output":"def is_sudoku_valid_pair(word1, word2): is_valid = True for i in range(len (word1)): if word1[i] == word2[i]: is_valid = False break for i in range (len(word1)): for j in range(len(word2)): if word1[i] == word2[j]: is_valid = False break return is_valid word1 = “ready” word2 = “steady” print(is_sudoku_valid_pair(word1, word2))"},{"instruction":"Design an automation system using Python that can receive sensor data and respond with different actions. The sensor data should involve temperature and humidity readings.","output":"import time import random def check_sensors(): # Get temperature and humidity from sensors temperature = random.randint(20,30) humidity = random.randint(40,60) # Decide if the temperature/humidity is within range if (temperature <= 30 and humidity <= 60): # Temperature is ok, but humidity is high if temperature <= 25: # Low temperature, adjust heater adjust_heater() else: # High humidity, adjust dehumidifier adjust_dehumidifier() else: # Temperature or humidity is out of range, shut down the system shut_down_system() def adjust_heater(): print(\\"Heater is being adjusted.\\") def adjust_dehumidifier(): print(\\"Dehumidifier is being adjusted.\\") def shut_down_system(): print(\\"System is shutting down.\\") while True: # Check sensors every 10 seconds check_sensors() time.sleep(10)"},{"instruction":"Create a script to set up a development environment for python.","output":"# install python sudo apt-get install python # install pip sudo apt-get install python-pip # install virtualenv pip install virtualenv # create a virtual environment virtualenv myenv # activate the virtual environment source myenv/bin/activate # install the dependencies pip install -r requirements.txt # deactivate the virtual environment deactivate"},{"instruction":"Design a python program to extract the most frequently occuring words from the text. This is a sample text containing some words for the purpose of demostrating the task.","output":"def extract_frequent_words(text): words = text.split() freq_words = {} for word in words: if word not in freq_words: freq_words[word] = 1 else: freq_words[word] += 1 sorted_words = sorted(freq_words.items(), key=lambda x: x[1], reverse=True) return sorted_words[0][0]"},{"instruction":"Optimize a machine learning algorithm in Python to make predictions with a higher accuracy. A Python script containing the machine learning algorithm.","output":"# Import necessary modules import numpy as np from sklearn.model_selection import GridSearchCV # Define the parameters to optimize parameters = { 'kernel':('linear', 'rbf'), 'C':[1, 10] } # Create a GridSearchCV object clf = GridSearchCV(svc, param_grid=parameters) # Fit the model clf.fit(X_train, y_train) # Print the best parameters print('Best parameters: {}'.format(clf.best_params_)) # Use the best parameters to make predictions y_pred = clf.predict(X_test)"},{"instruction":"Build a class in Python that implements a singly linked list.","output":"# Define a Node class class Node(object): # Constructor def __init__(self, data): self.data = data self.next = None # Define a Linkedlist class class LinkedList(object): # Defines the head def __init__(self): self.head = None # Add a new node at the beginning of the list def prepend(self, new_data): new_node = Node(new_data) new_node.next = self.head self.head = new_node # Add a new node at the end of the list def append(self, new_data): new_node = Node(new_data) if self.head is None: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node"},{"instruction":"Generate an objectoriented program in Python to handle the deskbooking process. dataset.csv: room,date,time,bookedBy RoomA,10/10/20,9AM10AM,Alice@gmail RoomB,10/10/20,11AM12PM,Bob@gmail","output":"import csv class Room: def __init__(self, room_name): self.room_name = room_name self.bookings = [] def book_room(self, date, time, bookedBy): booking_info = { 'date': date, 'time': time, 'bookedBy': bookedBy } self.bookings.append(booking_info) def retrieve_room_bookings(self): return self.bookings rooms = {} with open('dataset.csv', 'r') as csv_file: csv_reader = csv.DictReader(csv_file) for row in csv_reader: room_name = row['room'] date = row['date'] time = row['time'] bookedBy = row['bookedBy'] if room_name not in rooms: rooms[room_name] = Room(room_name) rooms[room_name].book_room(date, time, bookedBy)"},{"instruction":"Create a function that computes an array of odd numbers within a given range an integer","output":"# Python3 program to find odd numbers in a range def odd_numbers(n): odd_numbers = [] # looping through each number for i in range(1, n + 1): if i % 2 != 0: odd_numbers.append(i) return odd_numbers"},{"instruction":"Optimize an existing sorting algorithm to be as efficient as possible using Python. def sort(arr): n = len(arr) for i in range(n): min_index = i for j in range(i+1, n): if arr[min_index] > arr[j]: min_index = j arr[i], arr[min_index] = arr[min_index], arr[i]","output":"def sort(arr): n = len(arr) for i in range(n): min_index = i for j in range(min(i+1, n)): if arr[min_index] > arr[j]: arr[i], arr[min_index] = arr[j], arr[i] min_index = j"},{"instruction":"Python, create an algorithm for efficiently sorting a list of numbers in ascending order. [4,7,2,1,11,0,29]","output":"def sort_list(numbers): for i in range(len(numbers)-1): for j in range(i+1, len(numbers)): if numbers[i] > numbers[j]: numbers[i], numbers[j] = numbers[j], numbers[i] return numbers"},{"instruction":"Generate a Python script that prints out the first n Fibonacci numbers.","output":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n+1, 1): c = a + b a = b b = c return b"},{"instruction":"Build a Python code to convert a list to a dictionary using the list values as the keys. my_list = [This, is, a, list]","output":"my_dict = {} for item in my_list: my_dict[item] = None print(my_dict)"},{"instruction":"Write a singleline Python code to delete a keyvalue pair from a dictionary. my_dictionary = {'name': 'John', 'age': 20, 'job': 'Software Engineer', 'city': 'Berlin'}","output":"my_dictionary.pop('city')"},{"instruction":"Optimize the following Python function. The function calculates the sum of squares of two given numbers. def SumOfSquares(x,y): result = x**2 + y**2 return resul","output":"def SumOfSquares(x, y): return x * (x + y) + y * y"},{"instruction":"Generate a Python algorithm to convert an integer to a given base.","output":"def conv_to_base(number, base): # Base case if number == 0: return \\"\\" # Convert the given number remainder = number % base return conv_to_base(number // base, base) + str(remainder)"},{"instruction":"Generate a code snippet to convert the given JSON string to a dictionary in Python. json_str = '{ name : John, age : 20, city : New York }'","output":"import json json_dict = json.loads(json_str)"},{"instruction":"Generate a Python program to solve the Tower of Hanoi puzzle.","output":"def hanoi(n, source, helper, target): if n > 0: # move tower of size n - 1 to helper: hanoi(n - 1, source, target, helper) # move disk from source peg to target peg if source: target.append(source.pop()) # move tower of size n-1 from helper to target hanoi(n - 1, helper, source, target)"},{"instruction":"Create an algorithm in Python that given a number, returns whether the number is prime or not. 11","output":"def is_prime(n): if n == 1: return False for i in range(2,n): if n % i == 0: return False return True n = 11 print(is_prime(n)) # Output: True"},{"instruction":"Design a Python program to search for a specific word in a given sentence","output":"def search_word(sentence, word): words = sentence.split(\\" \\") if word in words: return True else: return False"},{"instruction":"Suggest a completion for the following python code to randomly select an element from a given list. import random def random_element(lst)","output":"import random def random_element(lst): return random.choice(lst)"},{"instruction":"Design a python program that returns the third smallest element from a given list. x = [4,5,6,7,2,9]","output":"def thirdSmallest(x): y = sorted(x)[2] return y"},{"instruction":"Write a python program to use an API and process the results.","output":"import requests url = 'https://api.example.com/xyz' # Make a request to the API resp = requests.get(url) # Process the response data = resp.json() # Do stuff with the response for item in data: print(item)"},{"instruction":"Python, define a function that takes two arguments and returns the maximum of the two. 6, 8","output":"def max_value(a, b): # Return the maximum of two numbers if a > b: return a else: return b # Example usage a = 6 b = 8 print(max_value(a, b)) # 8"},{"instruction":"Write Python code to select values greater than 2 in a given list. [1, 2, 3, 4, 5]","output":"list = [1, 2, 3, 4, 5] result = [value for value in list if value > 2] print(result)"},{"instruction":"Write a Python function that calculates the sum of all even numbers within a given range","output":"def sum_even_in_range(start, end): # Initialise the result result = 0 # Loop over the Range for i in range(start, end+1): # Check if number is even if i % 2 == 0: result += i return result"},{"instruction":"Rewrite this python function to make it more concise. def calculate_average(scores): total = 0 for score in scores: total += score return total/len(scores)","output":"def calculate_average(scores): return sum(scores)/len(scores)"},{"instruction":"Generate a script in python to save the given information into an excel sheet. information = [['John', 'Doe', 28], ['Jane', 'Doe', 25]]","output":"import xlwt # Create workbook, worksheet and set the default font wb = xlwt.Workbook() ws = wb.add_sheet('People Information') style = xlwt.XFStyle() font = xlwt.Font() font.bold = True style.font = font # Define the header row and write it ws.write(0, 0, 'Name', style) ws.write(0, 1, 'Surname', style) ws.write(0, 2, 'Age', style) # Write the content in each row for row_index in range(1, len(information)+1): row = information[row_index-1] ws.write(row_index, 0, row[0]) ws.write(row_index, 1, row[1]) ws.write(row_index, 2, row[2]) # Save the workbook wb.save('PeopleInfo.xls')"},{"instruction":"Create an algorithm in Python to calculate the tax payable, given yearly income and tax rates. Yearly income: 70000 Tax rates: 0.2","output":"def calculatetax(yearly_income, rate): tax = yearly_income * rate return tax income = 70000 rate = 0.2 tax_payable = calculatetax(income, rate) print(\\"Tax payable: \\" + str(tax_payable))"},{"instruction":"Write a Python program to take the input of two numbers and output the larger one.","output":"def max_num(a, b): if a > b: return a else: return b a = int(input(\\"Enter a number: \\")) b = int(input(\\"Enter another number: \\")) print(max_num(a, b))"},{"instruction":"Analyze the given Python code and correct any errors so that the code runs correctly. def main(): nums = range[0,10) for num in nums print(The square of, num,is, num * num) main()","output":"def main(): nums = range(0,10) for num in nums: print(\\"The square of\\", num,\\"is\\", num * num) main()"},{"instruction":"Create a program in Python that collects the user input and creates a histogram to display the frequency of each letter in the string. The quick brown fox jumps over the lazy dog.","output":"def histogram(string): string = string.lower() dic = {} for char in string: if char.isalpha(): if char in dic: dic[char] += 1 else: dic[char] = 1 for char in dic: print(char + ' : ' + str(dic[char])) histogram('The quick brown fox jumps over the lazy dog.')"},{"instruction":"mprove the Python method provided so that it checks whether the given array is a palindrome or not. arr = [1, 2, 3, 2, 1]","output":"def is_palindrome(arr): mid = len(arr) // 2 for i in range(mid): if arr[i] != arr[len(arr) - 1 - i]: return False return True arr = [1, 2, 3, 2, 1] print(is_palindrome(arr))"},{"instruction":"Create a geometric figure that uses Python Turtle graphics.","output":"import turtle def draw_square(some_turtle): for i in range(1,5): some_turtle.forward(100) some_turtle.right(90) # Create a turtle object my_turtle = turtle.Turtle() # Draw a figure draw_square(my_turtle)"},{"instruction":"Write an algorithm in Python to arrange items in ascending order. [2, 3, 5, 4, 1]","output":"def sortAscending(arr): # Traverse through all array elements for i in range(len(arr)): # Find the minimum element in remaining # unsorted array min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j # Swap the found minimum element with # the first element arr[i], arr[min_idx] = arr[min_idx], arr[i] # Driver code to test above arr = [2, 3, 5, 4, 1] sortAscending(arr) print (\\"Sorted array:\\") for i in range(len(arr)): print(arr[i]),"},{"instruction":"Write a Python script to filter a list of text strings by removing all strings that contain a certain substring. word_list = ['hello', 'apple', 'this', 'is', 'a', 'word'] keyword = 'a'","output":"filtered_list = [x for x in word_list if keyword not in x] # filtered_list = ['hello', 'this', 'word']"},{"instruction":"Write a python program to check if two sequences are identical. [1,2,3], [1,2,3]","output":"def check_seq(seq1, seq2): if len (seq1) != len (seq2): return False else: for i in range(len (seq1)): if seq1[i] != seq2[i]: return False return True"},{"instruction":"Create a machine learning systems in Python to detect patterns in a list of integers. [3, 6, 9, 12, 15, 18, 21]","output":"# import libraries import numpy as np import pandas as pd # create dataset data = [3, 6, 9, 12, 15, 18, 21] # detect patterns patterns = [] for n in range(1, len(data)): prev_num = data[n-1] curr_num = data[n] if curr_num - prev_num == 3: patterns.append(1) else: patterns.append(0) # format data df = pd.DataFrame(data) df[\\"Patterns\\"] = patterns print(df)"},{"instruction":"Design an algorithm in Python to sort the given list using merge sort. [4, 2, 1, 6, 7, 8, 5]","output":"def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2 left = arr[:mid] right = arr[mid:] merge_sort(left) merge_sort(right) i = j = k = 0 while i < len(left) and j < len(right): if left[i] < right[j]: arr[k] = left[i] i += 1 else: arr[k] = right[j] j += 1 k += 1 while i < len(left): arr[k] = left[i] i += 1 k += 1 while j < len(right): arr[k] = right[j] j += 1 k += 1 return arr arr = [4, 2, 1, 6, 7, 8, 5] merge_sort(arr) print(arr) # Output [1, 2, 4, 5, 6, 7, 8]"},{"instruction":"Edit the following Python code to reverse the list. list1 = [1,2,3,4,5,6]","output":"list1 = [1,2,3,4,5,6] # Reversing the list list1 = list1[::-1] # Output: [6, 5, 4, 3, 2, 1]"},{"instruction":"Use the following data and create a python program to find the minimum value in the list. nums = [7, 8, 5, 1, 9, 4]","output":"# find the minimum value using the min function min_value = min(nums) # print the minimum value print(\\"The minimum value is: \\",min_value)"},{"instruction":"Create a function to print the even numbers in a given range using Python.","output":"def printEvenNumbers(start, end): for i in range(start, end + 1): if (i % 2 == 0): print(i, end=\\" \\")"},{"instruction":"Write an algorithm in Python to find the maximum value in a list. [1, 9, 3, 20, 11]","output":"def find_max(input_list): # Initialize max value to be the first element of the list max = input_list[0] # Compare each value in the list to the max value for val in input_list: if val > max: max = val # Return the max value return max # Main function list = [1, 9, -3, 20, 11] max_val = find_max(list) print(\\"The maximum value in the list is:\\", max_val)"},{"instruction":"Create a Python program to convert user entered infix expression to postfix expression. A * B + C","output":"class Conversion: def __init__(self, capacity): self.top = -1 self.capacity = capacity self.array = [] self.output = [] self.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3} def isEmpty(self): return True if self.top == -1 else False def peek(self): return self.array[-1] def pop(self): if not self.isEmpty(): self.top -= 1 return self.array.pop() elsE: return \\"\\" def push(self, op): self.top += 1 self.array.append(op) def infixToPostfix(self, exp): for i in exp: if i.isalpha(): self.output.append(i) elif i == '(': self.push(i) elif i == ')': while( (not self.isEmpty()) and self.peek() != '('): a = self.pop() self.output.append(a) if (not self.isEmpty() and self.peek() != '('): return -1 else: self.pop() else: while(not self.isEmpty() and self.precedence[i] <= self.precedence[self.peek()]): self.output.append(self.pop()) self.push(i) while not self.isEmpty(): self.output.append(self.pop()) return \\"\\".join(self.output) exp = \\"A * B + C\\" conversion = Conversion(len(exp)) result = conversion.infixToPostfix(exp) print(result)"},{"instruction":"Using Python, create a program that classifies users into three groups based on their age. age_list = [20, 21, 32, 37, 48, 59]","output":"group_list = [\\"young\\", \\"middle-aged\\", \\"elderly\\"] for age in age_list: if age < 30: print(\\"This user is \\" + group_list[0] + \\".\\") elif age > 30 and age < 50: print(\\"This user is \\" + group_list[1] + \\".\\") else: print(\\"This user is \\" + group_list[2] + \\".\\")"},{"instruction":"Create a shell script to run a Python program.","output":"#! /bin/bash python my_program.py"},{"instruction":"Create a Python program that takes a list as input and sorts it using bubblesort algorithm. [3,2,5,6,1,4]","output":"def bubble_sort(lst): for i in range(len(lst)): for j in range(0, len(lst)-i-1): if lst[j] > lst[j+1] : lst[j], lst[j+1] = lst[j+1], lst[j] list = [3,2,5,6,1,4] bubble_sort(list) print('Sorted list is: ', list)"},{"instruction":"mplement a symmetric encryption method for a given user using AES encryption in Python. Not applicable","output":"def aes_enc(user): # generate an initialization vector (change it depending on number of users) iv = \\"abcdefghijklmnop\\" # generate a 16-byte key key = user.encode('utf-8') + len(key).to_bytes(4, byteorder='big') key = SHA256.new(key).digest() # create Cipher object cipher = AES.new(key, AES.MODE_CFB, iv) # encrypt the plaintext and return the ciphertext with iv ciphertext = cipher.encrypt(plain_text) return iv+ciphertext"},{"instruction":"Write a Python program to generate descriptive statistics of a given list of numbers. numbers = [2.3, 4.7, 5.2, 3.7]","output":"import statistics def descriptice_stats(numbers): print(\\"Mean:\\", statistics.mean(numbers)) print(\\"Median:\\", statistics.median(numbers)) print(\\"Mode:\\", statistics.mode(numbers)) print(\\"Standard Deviation:\\", statistics.stdev(numbers)) print(\\"Variance:\\", statistics.variance(numbers)) if __name__ == '__main__': numbers = [2.3, 4.7, 5.2, 3.7] descriptice_stats(numbers)"},{"instruction":"Create a python program that categorizes a given list of numbers into odd and even numbers. list N = [1, 2, 3, 4, 5, 6]","output":"even = [] odd = [] for num in N: if num % 2 == 0: even.append(num) else: odd.append(num)"},{"instruction":"The given code is a Python script that flattens out a folderbased DocBook manual into a DocBot friendly flat structure and updates links in files accordingly. To use the script, provide two arguments: the path to the root of the documentation and the output path. For example, docbotmasseur.py ./something ./output.","output":"#!/usr/bin/python # # This script will flatten out a folder based docbook manual into a docbot friendly \\"flat\\" structure # (and update links in files accordingly) # Author: Michael Neale # import os, sys, shutil def flatten(root, output) : if not os.path.isdir(output): os.mkdir(output) if not os.path.isdir(os.path.join(output, \\"images\\")): os.mkdir(os.path.join(output, \\"images\\")) sections = {} top_files = [] names = os.listdir(root) for name in names: if os.path.isdir(os.path.join(root, name)) : if not name == \\".svn\\": flattenDir(root, name, output, sections) else: if name.endswith(\\".xml\\") : top_files.append(name) elif name != \\".svn\\": shutil.copyfile(os.path.join(root, name), os.path.join(output, name)) for file in top_files: contents = open(os.path.join(root, file), \\"r\\").read() for section in sections: contents = contents.replace(section, sections[section]) outfile = open(os.path.join(output, file), \\"w\\") outfile.write(contents) def flattenDir(root, dir, output, sections): docs = [] images = [] names = os.listdir(os.path.join(root, dir)) for name in names: if name.endswith(\\".xml\\"): docs.append(name) else: if name != \\".svn\\": images.append(name) shutil.copyfile(os.path.join(root, dir, name), os.path.join(output, \\"images\\", dir + \\"_\\" + name)) for doc in docs: new_name = dir + \\"_\\" + doc sections[dir + \\"/\\" + doc] = new_name file = open(os.path.join(root, dir, doc), \\"r\\").read() outfile = open(os.path.join(output, new_name), \\"w\\") for img in images: file = file.replace(img, \\"images/\\" + dir + \\"_\\" + img) outfile.write(file) if len(sys.argv) < 2: print \\"2 arguments required: <path to root of documentation> <output path>. eg: docbot-masseur.py ./something ./output\\" else: flatten(sys.argv[1], sys.argv[2])"},{"instruction":"Design an algorithm in Python to generate all permutations of a given list.","output":"def permute(nums): res = [] backtrack(nums, res, []) return res def backtrack(nums, res, temp): if(len(temp) == len(nums)): res.append(temp[:]) else: for num in nums: if num not in temp: temp.append(num) backtrack(nums, res, temp) temp.pop() #print the result nums = [1, 2, 3] perms = permute(nums) print(perms)"},{"instruction":"Create a Python web application that implements a simple version of the game of Battleship. Not applicable","output":"import random # A fundamental class for the game class Board: def __init__(self, rows, cols): self.rows = rows self.cols = cols self.grid = [['_' for x in range(cols)] for y in range(rows)] def print_board(self): for row in self.grid: print(' '.join(row)) def place_ship(ship, board): while True: row = random.randint(0, board.rows-1) col = random.randint(0, board.cols-1) if board.grid[row][col] == '_': board.grid[row][col] = ship break else: continue def battle(player, board): while True: row = input('Enter a row: ') col = input('Enter a column: ') if board.grid[int(row)][int(col)] == '_': board.grid[int(row)][int(col)] = '<miss>' player.miss += 1 print('Miss!') elif board.grid[int(row)][int(col)] == 'BB': board.grid[int(row)][int(col)] = '<hit>' print('Hit!') else: break class Player: def __init__(self, ship, miss): self.ship = ship self.miss = miss # Create a board board = Board(5, 5) # Place ships on the board place_ship('BB', board) # Create a player object player = Player('BB', 0) # Start the game battle(player, board) # Print the board board.print_board()"},{"instruction":"Develop an algorithm in Python for reversing a given linked list. Linked List: 3 > 5 > 7 > 8","output":"def reverseLinkedList(head): curr = head prev = None while (curr != None): temp = curr.next curr.next = prev prev = curr curr = temp head = prev return head class Node: def __init__(self, data): self.data = data self.next = None # Create a Linked list head1 = Node(3) head1.next = Node(5) head1.next.next = Node(7) head1.next.next.next = Node(8) head1 = reverseLinkedList(head1) temp = head1 while(temp != None): print temp.data, temp = temp.next"},{"instruction":"Optimize a given Python program to shorten its running time. def add_list(list_a, list_b): res = [] for a, b in zip(list_a, list_b): res.append(a + b) return re","output":"def add_list(list_a, list_b): return [a + b for a, b in zip(list_a, list_b)]"},{"instruction":"Parse a Ruby file and create a gtk.TreeModel with the class elements of the document. The parser uses the ctags command from the shell to create a ctags file, then parses the file, and finally populates a treemodel.","output":"# -*- coding: utf-8 -*- # Copyright (C) 2006 Frederic Back (fredericback@gmail.com) # Copyright (C) 2007 Kristoffer Lundén (kristoffer.lunden@gmail.com) # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 59 Temple Place, Suite 330, # Boston, MA 02111-1307, USA. import gtk import gobject import pango import os import re import options from parserinterface import ClassParserInterface import imagelibrary #=============================================================================== def tokenFromString(string): \\"\\"\\" Parse a string containing a function or class definition and return a tuple containing information about the function, or None if the parsing failed. Example: \\"#def foo(bar):\\" would return : {'comment':True,'type':\\"def\\",'name':\\"foo\\",'params':\\"bar\\" } \\"\\"\\" try: e = r\\"([# ]*?)([a-zA-Z0-9_]+)( +)([a-zA-Z0-9_?!<>+=.]+)(.*)\\" r = re.match(e,string).groups() token = Token() token.comment = '#' in r[0] token.type = r[1] token.name = r[3] token.params = r[4] token.original = string return token except: return None # return None to skip if unable to parse def test(): pass #=============================================================================== class Token: def __init__(self): self.type = None self.original = None # the line in the file, unparsed self.indent = 0 self.name = None self.comment = False # if true, the token is commented, ie. inactive self.params = None # string containing additional info self.expanded = False self.access = \\"public\\" # start and end points self.start = 0 self.end = 0 self.rubyfile = None self.path = None # save the position in the browser self.parent = None self.children = [] def get_endline(self): \\"\\"\\" Get the line number where this token's declaration, including all its children, finishes. Use it for copy operations.\\"\\"\\" if len(self.children) > 0: return self.children[-1].get_endline() return self.end def test_nested(): pass def get_toplevel_class(self): \\"\\"\\" Try to get the class a token is in. \\"\\"\\" if self.type == \\"class\\": return self if self.parent is not None: tc = self.parent.get_toplevel_class() if tc is None or tc.type == \\"file\\": return self #hack else: return tc return None def printout(self): for r in range(self.indent): print \\"\\", print self.name, if self.parent: print \\" (parent: \\",self.parent.name else: print for tok in self.children: tok.printout() #=============================================================================== class RubyFile(Token): \\"\\"\\" A class that represents a ruby file. Manages \\"tokens\\", ie. classes and functions.\\"\\"\\" def __init__(self, doc): Token.__init__(self) self.doc = doc self.uri = doc.get_uri() self.linestotal = 0 # total line count self.type = \\"file\\" self.name = os.path.basename(self.uri) self.tokens = [] def getTokenAtLine(self, line): \\"\\"\\" get the token at the specified line number \\"\\"\\" for token in self.tokens: if token.start <= line and token.end > line: return self.__findInnermostTokenAtLine(token, line) return None def __findInnermostTokenAtLine(self, token, line): \\"\\"\\"\\" ruby is parsed as nested, unlike python \\"\\"\\" for child in token.children: if child.start <= line and child.end > line: return self.__findInnermostTokenAtLine(child, line) return token def parse(self, verbose=True): #if verbose: print \\"parse ----------------------------------------------\\" newtokenlist = [] self.children = [] currentParent = self self.linestotal = self.doc.get_line_count() text = self.doc.get_text(*self.doc.get_bounds()) linecount = -1 ends_to_skip = 0 access = \\"public\\" for line in text.splitlines(): linecount += 1 lstrip = line.lstrip() ln = lstrip.split() if len(ln) == 0: continue if ln[0] == '#': continue if ln[0] in (\\"class\\",\\"module\\",\\"def\\"): token = tokenFromString(lstrip) if token is None: continue token.rubyfile = self token.start = linecount if token.type == \\"def\\": token.access = access #print \\"line\\",linecount #print \\"name\\", token.name #print \\"type\\",token.type #print \\"access\\",token.access #print \\"to\\",currentParent.name currentParent.children.append(token) token.parent = currentParent currentParent = token newtokenlist.append(token) idx = len(newtokenlist) - 1 if idx < len(self.tokens): if newtokenlist[idx].original == self.tokens[idx].original: newtokenlist[idx].expanded = self.tokens[idx].expanded elif ln[0] in(\\"begin\\",\\"while\\",\\"until\\",\\"case\\",\\"if\\",\\"unless\\",\\"for\\"): ends_to_skip += 1 elif ln[0] in (\\"attr_reader\\",\\"attr_writer\\",\\"attr_accessor\\"): for attr in ln: m = re.match(r\\":(w+)\\",attr) if m: token = Token() token.rubyfile = self token.type = 'def' token.name = m.group(1) token.start = linecount token.end = linecount token.original = lstrip currentParent.children.append(token) token.parent = currentParent newtokenlist.append(token) elif re.search(r\\"sdo(s+|.*?|)?s*(#|)\\", line): #print \\"do\\",line # Support for new style RSpec if re.match(r\\"^(describe|it|before|after)b\\", ln[0]): token = Token() token.rubyfile = self token.start = linecount if currentParent.type == \\"describe\\": if ln[0] == \\"it\\": token.name = \\" \\".join(ln[1:-1]) else: token.name = ln[0] token.type = \\"def\\" elif ln[0] == \\"describe\\": token.type = \\"describe\\" token.name = \\" \\".join(ln[1:-1]) else: continue currentParent.children.append(token) token.parent = currentParent currentParent = token newtokenlist.append(token) # Deprectated support for old style RSpec, will be removed later elif ln[0] in (\\"context\\",\\"specify\\",\\"setup\\",\\"teardown\\",\\"context_setup\\",\\"context_teardown\\"): token = Token() token.rubyfile = self token.start = linecount if currentParent.type == \\"context\\": if ln[0] == \\"specify\\": token.name = \\" \\".join(ln[1:-1]) else: token.name = ln[0] token.type = \\"def\\" elif ln[0] == \\"context\\": token.type = \\"context\\" token.name = \\" \\".join(ln[1:-1]) else: continue currentParent.children.append(token) token.parent = currentParent currentParent = token newtokenlist.append(token) else: ends_to_skip += 1 elif ln[0] in (\\"public\\",\\"private\\",\\"protected\\"): if len(ln) == 1: access = ln[0] if re.search(r\\";?s*end(?:s*|s+(?:while|until))\\", line): if ends_to_skip > 0: ends_to_skip -= 1 else: token = currentParent #print \\"end\\",currentParent.name token.end = linecount currentParent = token.parent # set new token list self.tokens = newtokenlist return True #=============================================================================== class RubyParser( ClassParserInterface ): def __init__(self): self.rubyfile = None def appendTokenToBrowser(self, token, parentit ): it = self.__browsermodel.append(parentit,(token,)) token.path = self.__browsermodel.get_path(it) #print token.path #if token.parent: # if token.parent.expanded: # self.browser.expand_row(token.parent.path,False) # pass for child in token.children: self.appendTokenToBrowser(child, it) def parse(self, doc): \\"\\"\\" Create a gtk.TreeModel with the class elements of the document The parser uses the ctags command from the shell to create a ctags file, then parses the file, and finally populates a treemodel. \\"\\"\\" self.rubyfile = RubyFile(doc) self.rubyfile.parse(options.singleton().verbose) self.__browsermodel = gtk.TreeStore(gobject.TYPE_PYOBJECT) for child in self.rubyfile.children: self.appendTokenToBrowser(child,None) return self.__browsermodel def __private_test_method(self): pass def get_tag_position(self, model, path): tok = model.get_value( model.get_iter(path), 0 ) try: return tok.rubyfile.uri, tok.start+1 except: return None def current_line_changed(self, model, doc, line): # parse again if line count changed if abs(self.rubyfile.linestotal - doc.get_line_count()) > 0: if abs(self.rubyfile.linestotal - doc.get_line_count()) > 5: if options.singleton().verbose: print \\"RubyParser: refresh because line dif > 5\\" self.rubyfile.parse() else: it = doc.get_iter_at_line(line) a = it.copy(); b = it.copy() a.backward_line(); a.backward_line() b.forward_line(); b.forward_line() t = doc.get_text(a,b) if t.find(\\"class\\") >= 0 or t.find(\\"def\\") >= 0: if options.singleton().verbose: print \\"RubyParser: refresh because line cound changed near keyword\\" self.rubyfile.parse() def get_tag_at_line(self, model, doc, linenumber): t = self.rubyfile.getTokenAtLine(linenumber) #print linenumber,t if t: return t.path def cellrenderer(self, column, ctr, model, it): \\"\\"\\" Render the browser cell according to the token it represents. \\"\\"\\" tok = model.get_value(it,0) weight = 400 style = pango.STYLE_NORMAL name = tok.name#+tok.params colour = options.singleton().colours[ \\"function\\" ] # set label and colour if tok.type == \\"class\\": name = \\"class \\"+name colour = options.singleton().colours[ \\"class\\" ] weight = 600 elif tok.type == \\"module\\": name = \\"module \\"+name colour = options.singleton().colours[ \\"namespace\\" ] weight = 600 # new style RSpec elif tok.type == \\"describe\\": name = \\"describe \\"+name colour = options.singleton().colours[ \\"namespace\\" ] weight = 600 # Old style RSpec, deprecated elif tok.type == \\"context\\": name = \\"context \\"+name colour = options.singleton().colours[ \\"namespace\\" ] weight = 600 elif tok.type == \\"def\\": colour = options.singleton().colours[ \\"member\\" ] if tok.comment: name = \\"#\\"+name # assing properties ctr.set_property(\\"text\\", name) ctr.set_property(\\"style\\", style) ctr.set_property(\\"foreground-gdk\\", colour) def pixbufrenderer(self, column, crp, model, it): tok = model.get_value(it,0) icon = \\"default\\" if tok.type == \\"class\\": icon = \\"class\\" elif tok.type == \\"module\\": icon = \\"namespace\\" elif tok.type == \\"describe\\": icon = \\"namespace\\" elif tok.type == \\"context\\": icon = \\"namespace\\" elif tok.type == \\"def\\": if tok.access == \\"public\\": icon = \\"method\\" elif tok.access == \\"protected\\": icon = \\"method_prot\\" elif tok.access == \\"private\\": icon = \\"method_priv\\" crp.set_property(\\"pixbuf\\",imagelibrary.pixbufs[icon])"},{"instruction":"Create a simple Python script that logs the current date and time when run. Not applicable","output":"import datetime print(f'Current Date and Time: {datetime.datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\")}')"},{"instruction":"Write a Python code snippet to calculate the average of the given numbers. [5, 10, 15, 20, 25]","output":"def calc_avg(nums): total = 0 for n in nums: total += n return total/len(nums) avg = calc_avg([5, 10, 15, 20, 25]) print(avg)"},{"instruction":"Generate a python program that inputs a temperature in celsius and outputs the temperature in Fahrenheit","output":"def celsius_to_fahrenheit(temp): return temp * (9/5) + 32"},{"instruction":"Using the given input data, create a Python program which processes, sorts, and filters it to produce a dictionary with the inputs and their ranking according to some criterion. { ‘a’: 1, ‘b’: 2, ‘c’: 3, ‘d’: 4, ‘e’: 5 }","output":"def process_data(input): data_dict = {} keys = list(input.keys()) values = list(input.values()) sorted_keys = sorted(keys, key=lambda i: input[i]) sorted_values = sorted(values, reverse=True) for i in range(len(sorted_keys)): data_dict[sorted_keys[i]] = sorted_values[i] return data_dict data = { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 } print(process_data(data)) # Output: {'a': 5, 'b': 4, 'c': 3, 'd': 2, 'e': 1}"},{"instruction":"Create a python code to identify the most frequent item in a given list. given_list = [1, 2, 3, 4, 4, 1, 2, 3, 3]","output":"from collections import Counter def most_frequent_item(given_list): # Use Counter to count the occurrences of each item item_counter = Counter(given_list) # Get the most frequent item and its frequency most_freq_item, freq = item_counter.most_common(1)[0] return most_freq_item # Test given_list = [1, 2, 3, 4, 4, 1, 2, 3, 3] result = most_frequent_item(given_list) print(f\\"The most frequent item in {given_list} is {result}\\")"},{"instruction":"Optimize a given Python code snippet such that the running time is reduced. for x in range(1, 1000): for y in range(1, 1000): if x*y == 10: print(x,y)","output":"for x in range(1, 11): y = 10//x if x*y == 10: print(x, y)"},{"instruction":"Design a Python script that takes two dates as input and returns the number of days between them.","output":"from datetime import date def days_between_dates(date1, date2): d0 = date(date1[0], date1[1], date1[2]) d1 = date(date2[0], date2[1], date2[2]) return abs((d1 - d0).days) date1 = [2020, 8, 1] date2 = [2020, 8, 11] print(days_between_dates(date1, date2))"},{"instruction":"Create a Python class that validates a given IP address IP address: 8.8.8.8","output":"class validateIP: def __init__(self, ip_address): self.ip_address = ip_address def validate(self): ip_segments = self.ip_address.split(\\".\\") if len(ip_segments) != 4: return False for segment in ip_segments: number = int(segment) if number < 0 or number > 255: return False return True"},{"instruction":"Write a python program for validating a string for a certain set of rules. Input String: Better than ever Rules: String should contain only lower case characters and dig","output":"# Check if the string is valid according to the rules: def check_string_validity(input_string, rules): valid = True for char in input_string: if char.islower() or char.isdigit(): continue else: valid = False break return valid # Get the result: validity = check_string_validity(\\"Better than ever\\", \\"String should contain only lower case characters and digits\\") print(validity) # Output: False"},{"instruction":"mprove the performance of a given Python program by at least 2x (relative performance improvement). #This program reads a 2D array of numbers from a text file and computes the sum of each row in the array with open('arr.txt') as f: for line in f: arr = [float(x) for x in line.split()] # read numbers from a line in a file print(Sum of the row: , sum(arr))","output":"#This program reads a 2D array of numbers from a text file and computes the sum of each row in the array from collections import deque with open('arr.txt') as f: arr = deque([float(x) for x in next(f).split()]) # read numbers from a line in a file result = 0 while arr: result += arr.popleft() print(\\"Sum of the row: \\", result)"},{"instruction":"Design a class for a Binomial Tree in Python.","output":"class BinomialTree: def __init__(self, data): self.data = data self.left = None self.right = None def add_left_child(self, data): self.left = BinomialTree(data) def add_right_child(self, data): self.right = BinomialTree(data)"},{"instruction":"Develop an algorithm in Python to find the number of combinations for selecting a team of 8 members out of 20 people.","output":"def combination_of_team(n, k): return math.factorial(n)//(math.factorial(k)*math.factorial(n-k)) team_members = 8 total_members = 20 print(combination_of_team(total_members, team_members))"},{"instruction":"Create a REST API endpoint in Python that fetches data from a database and returns it as JSON. The table Users has the following columns: Id (primary key), Name, Email, Gender.","output":"@app.route('/users', methods=['GET']) def get_users(): users = User.query.all() return jsonify([{'Id': user.id, 'Name': user.name, 'Email': user.email, 'Gender': user.gender} for user in users])"},{"instruction":"Generate a Python function for counting the number of digits in a given number","output":"def count_digits(num): \\"\\"\\" Counts the number of digits in a given number. \\"\\"\\" count = 0 while num > 0: num //= 10 count += 1 return count if __name__ == '__main__': num = int(input('Enter number: ')) print(count_digits(num))"},{"instruction":"Create a class in Python to represent a car and its properties such as make, model, color, number of wheels etc. Not applicable","output":"class Car(): #initialize car def __init__(self, make, model, color, wheels): self.make = make self.model = model self.color = color self.wheels = wheels #string representation def __str__(self): return '{}, {}, {}, {}'.format(self.make, self.model, self.color, self.wheels)"},{"instruction":"Write Python code to remove all the vowels from a given string. string = 'Hello World!'","output":"def remove_vowels(string): # Replace all the vowels with empty string without_vowels = string.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '') return without_vowels if __name__ == '__main__': print(remove_vowels('Hello World!'))"},{"instruction":"Generate a correct python program to output the number of seconds in the future and in the past 60 minute","output":"def calculate_seconds(minutes): return minutes * 60 future_seconds = calculate_seconds(60) print(\\"The number of seconds in the future is \\" + str(future_seconds)) past_seconds = calculate_seconds(-60) print(\\"The number of seconds in the past is \\" + str(past_seconds))"},{"instruction":"Develop a Python program that takes in a date as an input and prints out the following day in a humanreadable format. Not applicable","output":"from datetime import date, timedelta def next_day(old_date): d = date.fromisoformat(old_date) new_date = d + timedelta(1) return new_date.isoformat() next_day(\\"2020-06-20\\")"},{"instruction":"mplement a data structure in Python for a binary search tree. Not applicable","output":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None class BinarySearchTree: def __init__(self): self.root = None def insert(self, data): newNode = Node(data) if self.root is None: self.root = newNode else: current = self.root while True: if data < current.data: if current.left is None: current.left = newNode return else: current = current.left else: if current.right is None: current.right = newNode return else: current = current.right"},{"instruction":"Create a method in Python that receives a list of strings and prints out the longest string. strings = [“ABC”, “AAA”, “AB”, “ABCDE”]","output":"def longest_string(strings): longest = \\"\\" for s in strings: if len(s) > len(longest): longest = s print(longest) longest_string(strings) # Output: ABCDE"},{"instruction":"You are asked to create an encryption program that produces an output which should be different from its original one when decrypted. <noinput>","output":"# Python 3 program for the implementation of the Encryption Algorithm # Method to encrypt the given string def encrypt_string(str): cipher = \\"\\" for s in str: # Shift each character by 2 ascii value s = chr(ord(s) + 2) cipher += s return cipher # Driver code str = \\"python\\" print (\\"Encrypted String: \\" + encrypt_string(str))"},{"instruction":"Construct a python GUI to display the following information Current temperature in Manh","output":"import tkinter as tk # Create the main window root = tk.Tk() # Set the window title root.title(\\"Temperature in Manhattan\\") # Get the current temperature in Manhattan temp_in_manhattan = get_temperature_in_manhattan() # Add the temperature to the main window tk.Label(root, text=f\\"Current temperature in Manhattan is: {temp_in_manhattan}°C\\").pack() # Run the main loop root.mainloop()"},{"instruction":"Fix the code It is a Python code for creating a web server. import socket HOST, PORT = '', 8888 listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) listen_socket.bind((HOST, PORT)) listen_socket.listen(1) print 'Serving HTTP on port %s ...' % PORT","output":"import socket HOST, PORT = '', 8888 listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) listen_socket.bind((HOST, PORT)) listen_socket.listen(1) print('Serving HTTP on port %s ...' % PORT) while True: client_connection, client_address = listen_socket.accept() request = client_connection.recv(1024) print(request) http_response = \\"\\"\\" HTTP/1.1 200 OK Hello, World! \\"\\"\\" client_connection.sendall(http_response) client_connection.close()"},{"instruction":"Create an interactive bot in Python for a restaurant menu. The bot should ask for the customer’s order, showcase the items on the menu, and calculate the total bill after the customer finishes ordering. Not applicable","output":"# Define the menu menu = { \\"Fried Noodles\\": 30, \\"Tofu Soup\\": 20, \\"Fried Rice\\": 25, \\"Fruit Salad\\": 15 } # Print the menu for item, price in menu.items(): print(f\\"{item}..........{price}\\") # Ask for customer order order = [] while True: order_item = input(\\"What would you like to order? (Type 'done' when you are finished ordering) \\") if order_item.lower() == 'done': break else: order.append(order_item) # Calculate the total total = 0 for item in order: total += menu[item] print(f\\"Total bill is {total}\\")"},{"instruction":"Optimize the following Python code for adding two numbers a = 3 b = 4 c = a + b","output":"def addTwoNum(a, b): return a + b c = addTwoNum(3, 4)"},{"instruction":"Write a Python program to edit an existing array without creating a new array. arr = [1,2,3,4,5]","output":"def edit_array(arr): for i in range(len(arr)): arr[i] += 10 return arr if __name__ == '__main__': arr = [1,2,3,4,5] print(\\"Edited array:\\", edit_array(arr))"},{"instruction":"Generate a neural network model in Python to predict the outcome of a basketball match given the players' stats. Player 1: Height: 185cm; Weight: 80kg, Number of Points scored: 20 Player 2: Height: 202cm; Weight: 100kg, Number of Points scored: 30","output":"model = Sequental() model.add(Dense(units=64, input_shape=(3,))) model.add(Activation('relu')) model.add(Dropout(.2)) model.add(Dense(32)) model.add(Activation('relu')) model.add(Dropout(.2)) model.add(Dense(1)) model.add(Activation('sigmoid')) model.compile(loss='binary_crossentropy', optimizer='Adam', metrics=['accuracy'])"},{"instruction":"mplement an algorithm in Python to insert a specified element into a sorted array. [1, 2, 6, 8], element = 3","output":"def insert_element(arr, element): # Find insertion index i = 0 while i < len(arr) and element > arr[i]: i += 1 # Shift array elements j = len(arr) - 1 while j >= i: arr[j + 1] = arr[j] j -= 1 # Insert element arr[i] = element return arr arr = [1, 2, 6, 8] element = 3 insert_element(arr, element) # Output: [1, 2, 3, 6, 8]"},{"instruction":"Write a Python program to Reverse the word sequence of a given sentence This is a te","output":"def reverse_sentence(sent): words = sent.split(\\" \\") reversed_words = words[::-1] result = \\" \\".join(reversed_words) return result sentence = \\"This is a test\\" print(reverse_sentence(sentence)) # Output test a is This"},{"instruction":"Write a Python function to print the times tables from 1 to 10.","output":"def print_times_tables(): for i in range(1, 11): print(f'{i:>2} times table:') for j in range(1, 11): res = i*j print(f'{i} * {j} = {res}') print('n') print_times_tables()"},{"instruction":"Create a program in Python to process the following data and generate a report of the average salary of the employees. John Doe, 3000 Jane Doe, 4000 Mary Doe, 4500","output":"def processSalaryData(name, salary): salaries = [] nameList = [] salaries.append(salary) nameList.append(name) averageSalary = sum(salaries) / len(salaries) print(\\"Average salary of the following employees:\\") for name in nameList: print(name) print(\\"Average Salary: \\" + str(averageSalary))"},{"instruction":"Create a Python program for managing a basic movie library. The program should be able to add and delete movies from the library and list all the movies in the library. Not applicable","output":"import os # Create a Movie class to store movie details class Movie(object): def __init__(self, title, year): self.title = title self.year = year # Create a MovieLibrary class to store the list of movies class MovieLibrary(object): def __init__(self, name): self.name = name self.movies = [] # Method to add a movie to the library def add_movie(self, movie): self.movies.append(movie) # Method to delete a movie from the library def delete_movie(self, movie): self.movies.remove(movie) # Method to list all the movies in the library def list_movies(self): for movie in self.movies: print('{} ({})'.format(movie.title, movie.year)) # Create a new movie library instance lib = MovieLibrary('My Movie Library') # Add some movies to our library lib.add_movie(Movie('The Dark Knight', 2008)) lib.add_movie(Movie('Back to the Future', 1985)) lib.add_movie(Movie('Avengers: Endgame', 2019)) # List all the movies in the library lib.list_movies() # Delete a movie from the library lib.delete_movie(Movie('Back to the Future', 1985)) # List the movies again to verify that the movie was deleted lib.list_movies()"},{"instruction":"Generate a Python class to compare two strings.","output":"class StrComparer: def __init__(self, str1, str2): self.str1 = str1 self.str2 = str2 def is_same(self): if self.str1 == self.str2: return True else: return False"},{"instruction":"Design a program in Python which can generate unique alphanumeric IDs. Not applicable","output":"import string import random def generate_alphanumeric_id(stringLength=8): \\"\\"\\"Generate a random string of letters and digits \\"\\"\\" lettersAndDigits = string.ascii_letters + string.digits return ''.join(random.choice(lettersAndDigits) for i in range(stringLength)) print (\\"Random ID is: \\", generate_alphanumeric_id() )"},{"instruction":"Create an algorithm in Python to generate a random string of length n using only alphanumeric symbols. String length of 8","output":"import random # Function to generate random string def get_random_string(length): # Create an empty string letters = \\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\" random_string = \\"\\" # Generate the random string of required length for x in range(length): random_string += random.choice(letters) return random_string # Usage example random_string = get_random_string(8) print(\\"Random String: \\" + random_string)"},{"instruction":"Create a program in Python to find the minimum value in a list. [30, 10, 40, 20]","output":"def findMinValue(list): minValue = list[0] for i in range(1, len(list)): if list[i] < minValue: minValue = list[i] return minValue list1 = [30, 10, 40, 20] minValue = findMinValue(list1) print(minValue)"},{"instruction":"Generate a function in Python that adds two input numbers.","output":"def add(x, y): return x + y"},{"instruction":"Write a Python script that creates a data frame from the given dictionary. data_dict = {Country:[India, Germany, USA, Indonesia], Capital:[Delhi, Berlin, Washington DC, Jakarta], Currency:[Rupee, Euro, US Dollar, Rupiah]}","output":"import pandas aspd data_dict = {\\"Country\\":[\\"India\\", \\"Germany\\", \\"USA\\", \\"Indonesia\\"], \\"Capital\\":[\\"Delhi\\", \\"Berlin\\", \\"Washington DC\\", \\"Jakarta\\"], \\"Currency\\":[\\"Rupee\\", \\"Euro\\", \\"US Dollar\\", \\"Rupiah\\"]} # Creating a dataframe from given dict df = pd.DataFrame(data_dict) # Print dataframe print(df)"},{"instruction":"Write a Python program to generate a Fibonacci sequence of given length. length = 8","output":"def getFibonacciSequence(length): a = 0 b = 1 result = [a, b] if (length < 2): return result else: for i in range(2, length): c = a + b a = b b = c result.append(c) return result print(getFibonacciSequence(8))"},{"instruction":"Write a Python program that takes in a list containing 100 integers and finds the number of occurrences of each number in the list. [1, 2, 3, 4, 4, 2, 3, 2, 1, 3, 4, 2, 1]","output":"from collections import Counter def findOccurrences(arr): counter = Counter(arr) for i in counter: print('Number', i, 'occurs', counter[i], 'time(s).') arr = [1, 2, 3, 4, 4, 2, 3, 2, 1, 3, 4, 2, 1] findOccurrences(arr)"},{"instruction":"Create a Python program to fetch data from an HTTPS resource. url = https://example.com/data","output":"import requests url = \\"https://example.com/data\\" # Send a GET request to the URL r = requests.get(url) # Check the status of the request if r.status_code == 200: data = r.json() # Process the fetched data else: print('Error: status code {}'.format(r.status_code))"},{"instruction":"Using Python, optimize the following code and explain the optimizations you applied. def count_words(text): ''' Counts the number of words in a text ''' word_count = 0 for word in text.split(' '): word_count += 1 return word_cou","output":"def count_words(text): ''' Counts the number of words in a text ''' # Optimization #1: Replacing the loop and using Python's count method word_count = len(text.split(' ')) return word_count"},{"instruction":"mprove the following Python program def get_product_listing(product_category): listings = [] for product in product_category: listings.append(product.get_listing()) return listing","output":"def get_product_listing(product_category): return [product.get_listing() for product in product_category]"},{"instruction":"mplement a function in Python to calculate the highest perfect number which is less than or equal to a given number. Number: 1000","output":"def computeHighestPerfectNumber(n): perfect_nums = [] for num in range(2, n + 1): sum = 1 for i in range(2, num): if num % i == 0: sum = sum + i if sum == num: perfect_nums.append(num) if len(perfect_nums) == 0: return -1 else: return perfect_nums[-1] num = 1000 print(\\"The highest perfect number less than or equal to\\", num, \\"is\\", computeHighestPerfectNumber(num))"},{"instruction":"Develop a Python script that can convert a given sentence into Pig Latin. Not applicable","output":"#function to convert word to pig latin def pig_latin_word(word): vowels = [\\"a\\",\\"e\\",\\"i\\",\\"o\\",\\"u\\"] #checks if the first letter of the word is a vowel if word[0].lower() in vowels: return word + \\"way\\" else: #finds the index of the first vowel in the word for i in range(len(word)): if word[i].lower() in vowels: break return word[i:] + word[:i] + \\"ay\\" #function to convert sentence to pig latin def pig_latin_sentence(sentence): #splits sentence into words words = sentence.split() #converts each word to pig latin new_words = [pig_latin_word(word) for word in words] #joins changed words into a sentence new_sentence = \\" \\".join(new_words) return new_sentence #example sentence sentence = \\"I went to the store.\\" #convert sentence new_sentence = pig_latin_sentence(sentence) #output print(new_sentence) # Output: Iway entway otay ethay orestay."},{"instruction":"Formulate a heuristic search algorithm in python to find a solution in the 8puzzle problem.","output":"def heuristicSearch(initialState, goalState): # Initialize visited states set to empty set visitedStates = set() # Initialize fringe (or open list) to the initial state fringe = [] fringe.append(initialState) # Initialize cost to 0 cost = 0 while len(fringe) > 0: currentState = fringe.pop() # Check if goal state is reached if currentState == goalState: return cost # Add current node to visited set visitedStates.add(currentState) # Generate all possible neighbors from the current node neighbors = generateNeighbors(currentState) # Iterate through all neighbors for neighbor in neighbors: # Calculate heuristic (number of misplaced tiles) heuristicValue = numberOfMisplacedTiles(neighbor, goalState) # Add the neighbor to fringe (open list) if it is not visited if neighbor not in visitedStates: fringe.append(neighbor) cost += heuristicValue return None"},{"instruction":"Develop an algorithm in Python to classify a given set of features. Features: height, weight, body mass index Labels : default, not defaul","output":"import numpy as np def classify(dataset): #We seperate the input features and labels X = dataset[:, 0:3] y = dataset[:, 3] #The height, weight and body mass index are normalized X = X/np.amax(X, axis = 0) #The labels are converted in the form of 0 and 1 y = np.where(y == 'default', 0, 1) # Create an instance of the DecisionTreeClassifier from sklearn.tree import DecisionTreeClassifier classifier = DecisionTreeClassifier() # Fit the classifier to the data classifier = classifier.fit(X, y) return classifier"},{"instruction":"Generate a code snippet in Python to handle HTTP requests from a given URL. URL = 'https://example.com/test'","output":"import requests url = 'https://example.com/test' # Make the request response = requests.get(url) # Check the response if response.status_code == 200: # Success content = response.text else: # Failure print(f'Request failed with status code: {response.status_code}')"},{"instruction":"Create a Django application in Python to display a news feed.","output":"# Create a Django project with a newsfeed app django-admin startproject django_newsfeed python manage.py startapp newsfeed # Add the app to the installed apps list INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'newsfeed', ] # Create models from django.db import models from django.utils import timezone class NewsFeedEntry(models.Model): title = models.CharField(max_length=200) content = models.TextField() created_at = models.DateTimeField(default=timezone.now) published_at = models.DateTimeField(null=True, blank=True) def __str__(self): return self.title # Migrate the database python manage.py makemigrations python manage.py migrate # Create a view for the list of NewsFeed entries from django.shortcuts import render from .models import NewsFeedEntry def index(request): entries = NewsFeedEntry.objects.all() context = { 'entries': entries } return render(request, 'newsfeed/index.html', context) # Create a template for the newsfeed entries <h1>NewsFeed</h1> <ul> {% for entry in entries %} <li><a href=\\"#\\">{{ entry.title }}</a></li> {% endfor %} </ul>"},{"instruction":"Create a Python function to check whether or not a string is palindrome or not.","output":"def is_palindrome(string): i = 0 j = len(string)-1 while j > i: if string[i] != string[j]: return False i += 1 j -= 1 return True # Driver code string = \\"malayalam\\" print(is_palindrome(string))"},{"instruction":"Write a Python program to validate the given password according to the given criteria. The given criteria are: minimum 8 characters, should contain one uppercase letter, should contain one numeric dig","output":"def validate_password(password): if len(password) < 8: return False if not any(c.isupper() for c in password): return False if not any(c.isdigit() for c in password): return False return True"},{"instruction":"Convert the following JSON string into a Python dictionary. {a:1, b: Hello, c: {d: [34, 56]}}","output":"import json json_string = '{\\"a\\":1, \\"b\\": \\"Hello\\", \\"c\\": {\\"d\\": [34, 56]}}' parsed_json = json.loads(json_string) print(parsed_json) # Output: {'a': 1, 'b': 'Hello', 'c': {'d': [34, 56]}}"},{"instruction":"Create a python program to delete all items from a dictionary. d = {'a':1, 'b':2, 'c':3}","output":"d = {'a':1, 'b':2, 'c':3} # Using the clear() method d.clear() print(d) # Prints an empty dictionary"},{"instruction":"Design a program in Python that takes a string as an input and checks whether all the vowels are present in the string or not. This is a te","output":"def check_vowels(string): vowels = ['a','e','i','o','u'] for vowel in vowels: if vowel not in string: return False return True print(check_vowels('This is a test'))"},{"instruction":"Create a class in Python to represent a 3D vector. The class should contain properties for the x, y, and z coordinates and methods for calculating the magnitude. Not applicable","output":"class Vector3D: def __init__(self, x, y, z): self.x = x self.y = y self.z = z def magnitude(self): return (self.x**2 + self.y**2 + self.z**2)**(1/2)"},{"instruction":"Design a class for a generic linked list in Python.","output":"class LinkedList: def __init__(self): self.head = None self.tail = None def append(self, data): node = Node(data) if self.tail is not None: self.tail.next = node self.tail = node else: self.head = node self.tail = node def sort(self): if self.head is None: return current_node = self.head while current_node.next is not None: next_node = current_node.next if next_node.data < current_node.data: temp = current_node.data current_node.data = next_node.data next_node.data = temp current_node = next_node"},{"instruction":"Create a Python program that takes a list of numbers as input and sorts them by their greatest occurring number. [4, 7, 3, 5, 3, 4, 5, 3, 7]","output":"[3, 3, 3, 4, 4, 5, 5, 7, 7] Python Code: def sort_by_greatest_occurrence(nums): num_freq = {} for num in nums: num_freq[num] = num_freq.get(num, 0) + 1 sorted_freq = sorted(num_freq.items(), key=lambda x: x[1], reverse=True) sorted_nums = [] for num, _ in sorted_freq: sorted_nums += [num] * num_freq[num] return sorted_nums nums = [4, 7, 3, 5, 3, 4, 5, 3, 7] print(sort_by_greatest_occurrence(nums))"},{"instruction":"Design an algorithm in Python for finding and printing all prime numbers between 1 and a given number. 100","output":"def find_all_primes(n): for num in range(2,n + 1): for i in range(2,num): if (num % i) == 0: break else: print(num) find_all_primes(100)"},{"instruction":"Write a python script to generate a square matrix 4x4 filled with values from 1 to 4.","output":"matrix = [[1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4]]"},{"instruction":"Suggest a solution that writes a Python program to print the following pattern.","output":"for i in range(1, 7): print(\\"*\\" * i)"},{"instruction":"Write a Python script to input a numeric value and generate the output in a formatted table structure. The table should have 5 rows and 3 columns.","output":"for x in range(5): for y in range(3): col = input(\\"Enter Value: \\") print(col, end=\\"tt\\") print()"},{"instruction":"Write a method in Python to display the contents of a dictionary.","output":"def display_dict(dictionary): for key, value in dictionary.items(): print(f'{key}: {value}')"},{"instruction":"Unify the style of a code snippet in Python. Make sure to keep the original structure, including indentation, comments, and whitespace. Example code snippet: #This function takes two arguments and adds them def add (x, y): return x + y","output":"\\"\\"\\"This function takes two arguments and adds them\\"\\"\\" def add(x, y): return x + y"},{"instruction":"Write a Python program to provide a login interface.","output":"def login(): username = input(\\"Username:\\") password = input(\\"Password:\\") if username == \\"admin\\" and password == \\"admin\\": return True else: return False"},{"instruction":"mplement a Python function that takes an array of strings as the input and returns a list of distinct strings sorted lexicographically. ['hello', 'world', 'hello', 'again']","output":"def distinct_strings_sort(arr): result = [] for s in arr: if s not in result: result.append(s) return sorted(result) # Example: arr = ['hello', 'world', 'hello', 'again'] distinct_sorted = distinct_strings_sort(arr) print(distinct_sorted) # Prints: ['again', 'hello', 'world']"},{"instruction":"Write a Python program to find the longest increasing subsequence of a given array of integers arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]","output":"def longest_increasing_subsequence(arr): n = len(arr) # An array to store increasing subsequences dp = [1]*n # Compute optimal values in bottom up manner for i in range (1 , n): for j in range(0 , i): if arr[i] > arr[j] and dp[i]< dp[j] + 1 : dp[i] = dp[j]+1 # Pick maximum of dp[i] # Initialize result maximum = 0 # Pick maximum of all dp[i] for i in range(n): maximum = max(maximum , dp[i]) return maximum"},{"instruction":"Write a Python function to calculate the sum of the digits in a given string of numbers and letters.","output":"def sum_string(s): sum = 0 for ch in s: if ch.isdigit(): sum += int(ch) return sum"},{"instruction":"Modify the Python program provided above to store the extracted data into a database (e.g. PostgreSQL). <root> <person> <name>John Doe</name> <age>30</age> <address> <street>123 Easy St</street> <city>Boston</city> <state>MA</state> </address> </person> </root>","output":"import xml.etree.ElementTree as ET import psycopg2 # install psycopg2 # parse an XML file tree = ET.parse('data.xml') # get root element root = tree.getroot() # create a database connection conn = psycopg2.connect(\\"dbname=my_database user=postgres\\") cursor = conn.cursor() # iterate person elements for person in root.findall('person'): # get name name = person.find('name').text # get age age = person.find('age').text # get address address = person.find('address') street = address.find('street').text city = address.find('city').text state = address.find('state').text # insert into database cursor.execute( \\"\\"\\" INSERT INTO people (name, age, street, city, state) VALUES (%s,%s,%s,%s,%s) \\"\\"\\" % (name, age, street, city, state)) # commit conn.commit() # close connection conn.close()"},{"instruction":"Create a Python program to classify a given set of data using a knearest neighbors algorithm. data = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]","output":"import numpy as np from sklearn.neighbors import KNeighborsClassifier data = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]) # Create the model model = KNeighborsClassifier() # Train the model model.fit(data[:, 0].reshape(-1, 1), data[:, 1].reshape(-1, 1)) # Output the result print(model.predict([[2]])) # [[3]]"},{"instruction":"Write a Python class to store a student's name and age.","output":"class Student: def __init__(self, name, age): self.name = name self.age = age"},{"instruction":"Create a Python program to convert a given time in 24hour format to 12hour format. 23:15","output":"def convert_time(time): # Get the hours and minutes hours = int(time.split(':')[0]) minutes = int(time.split(':')[1]) # Convert hours to 12-hour format conv_hours = (hours - 12) if (hours > 12) else hours # Check for minute values if (minutes < 10): minutes = \\"0\\" + str(minutes); else: minutes = str(minutes); # return the converted value return str(conv_hours) + \\":\\" + minutes # Driver code time = \\"23:15\\" print(convert_time(time)) # Output: 11:15"},{"instruction":"Embed a mathematical expression in Python and print the expression. x**3 + 2*x**2 + 3","output":"expression = 'x**3 + 2*x**2 + 3' print(eval(expression))"},{"instruction":"Write a Python script to classify a sentence as positive or negative.","output":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def classify_sentiment(sentence): sid = SentimentIntensityAnalyzer() score = sid.polarity_scores(sentence) if score['compound'] >= 0.05: return 'positive' elif score['compound'] <= -0.05: return 'negative' else: return 'neutral'"},{"instruction":"Create a Python method to get the index of the largest element in an array. [1,2,3,4,5]","output":"def find_largest_index(arr): largest = float('-inf') largest_index = 0 for i in range(len(arr)): num = arr[i] if num > largest: largest = num largest_index = i return largest_index print(find_largest_index([1,2,3,4,5])) # 4"},{"instruction":"Create a program that sorts a list of strings in alphabetical order. ['python', 'javascript', 'java', 'go']","output":"\\"\\"\\" Create a program that sorts a list of strings in alphabetical order. \\"\\"\\" def sort_list(lst): \\"\\"\\" This function sorts a list of strings in alphabetical order. \\"\\"\\" lst.sort() return lst if __name__ == '__main__': lst = ['python', 'javascript', 'java', 'go'] print(sort_list(lst))"},{"instruction":"Generate a function in Python that combines two string variables and returns the combined string? string1 = Hello string2 = World","output":"def combine_strings(string1, string2): return string1 + ' ' + string2 string1 = \\"Hello\\" string2 = \\"World\\" result = combine_strings(string1, string2) print(result)"},{"instruction":"Write a Python program to print out the next day's date given today's date","output":"import datetime def get_next_day_date(): today_date = datetime.datetime.now().date() next_day_date = today_date + datetime.timedelta(days=1) return next_day_date"},{"instruction":"mplement a basic linear search algorithm in Python that searches a list of numbers for a given target value and returns the index of the target value if it is present, otherwise it returns 1. arr = [1, 3, 5, 6, 9, 17], target = 6","output":"def linear_search(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 print(linear_search(arr, target)) # 3 (index of 6)"},{"instruction":"Create a program in Python to print all numbers that are divisible by 4 but not by 4.","output":"for i in range(1, 101): if (i % 4 == 0) and (i % 2 != 0): print(i)"},{"instruction":"Construct an algorithm in Python that sorts an array using quick sort. myList = [3, 8, 10, 2, 4]","output":"def quick_sort(input_list): if len(input_list) <= 1: return input_list pivot = input_list[0] left = [x for x in input_list[1:] if x < pivot] right = [x for x in input_list[1:] if x >= pivot] return quick_sort(left) + [pivot] + quick_sort(right) myList = [3, 8, 10, 2, 4] sortedList = quick_sort(myList) print(sortedList)"},{"instruction":"Create a class in Python that can encode and decode a string using a Caesar cipher. Not applicable","output":"class CaesarCipher: def __init__(self, shift): encoder = [None] * 26 decoder = [None] * 26 for k in range(26): encoder[k] = chr((k + shift) % 26 + ord('A')) decoder[k] = chr((k - shift) % 26 + ord('A')) self._forward = ''.join(encoder) self._backward = ''.join(decoder) def encrypt(self, message): return self._transform(message, self._forward) def decrypt(self, secret): return self._transform(secret, self._backward) def _transform(self, original, code): msg = list(original) for k in range(len(msg)): if msg[k].isupper(): j = ord(msg[k]) - ord('A') msg[k] = code[j] return ''.join(msg)"},{"instruction":"Create a python function to take a list of numbers as an argument, and return the sum of the odd numbers in the list [2, 3, 4, 5, 6, 7]","output":"def odd_numbers(numbers): result = 0 for num in numbers: if num % 2 != 0: result += num return result"},{"instruction":"Provide a Python function to filter out a list of strings that does not contain any substring from a given set. List = [apple, banana, pie, candy] Set = [banana, pie]","output":"def filter_list(input_list, ref_set): # Initialize result_list = [] # Iterate through the list for item in input_list: # Set a flag flag = True # Check if the item contains any substring in ref_set for substring in ref_set: if substring in item: # If so, set the flag to False flag = False break # If the flag is still True if flag: # Add the item to the result list result_list.append(item) return result_list # Test filtered_list = filter_list([\\"apple\\", \\"banana\\", \\"pie\\", \\"candy\\"], [\\"banana\\", \\"pie\\"]) assert(filtere_list == [\\"apple\\", \\"candy\\"])"},{"instruction":"Write a function in Python to check if an integer is prime or not. 37","output":"def is_prime(number): if number < 2: return False else: for x in range(2, number): if number % x == 0: return False return True n = 37 print (is_prime(n)) # Output: True"},{"instruction":"Build a web scraping script in Python to get information about a given topic from a website. bike shops in Berl","output":"import requests from bs4 import BeautifulSoup url = \\"https://example.org/search?q=bike+shops+in+Berlin\\" page = requests.get(url) soup = BeautifulSoup(page.text, \\"lxml\\") # Get all shop information from the page. shops = soup.find_all(\\"div\\", class_=\\"shop-info\\") # Print each shop's name, address, and phone number. for shop in shops: name = shop.find(\\"h3\\", class_=\\"shop-name\\").text address = shop.find(\\"div\\", class_=\\"shop-address\\").text phone = shop.find(\\"div\\", class_=\\"shop-phone\\").text print(name, address, phone)"},{"instruction":"Generate a python program to search input string s for a given substring t. s= This is a string, t=ring","output":"def find(s, t): if t in s: return s.index(t) else: return -1"},{"instruction":"Write a Python function that takes a list of numbers as input, sorts them in ascending order, and returns a new list that includes the number of times each number occurred in the original list. [2, 5, 2, 2, 1, 3, 5, 7, 2]","output":"def sort_and_count(numbers): sorted_list = sorted(numbers) new_list = [] length = len(sorted_list) current_index = 0 while current_index < length: current_number = sorted_list[current_index] current_count = sorted_list.count(current_number) new_list.append((current_number, current_count)) for i in range(current_count): sorted_list.remove(current_number) current_index += 1 return new_list # Usage: print(sort_and_count([2, 5, 2, 2, 1, 3, 5, 7, 2])) # Output: [(1, 1), (2, 4), (3, 1), (5, 2), (7, 1)]"},{"instruction":"Rewrite the following if/else statement in one line of Python code if condition: do_this() else: do_that()","output":"do_this() if condition else do_that()"},{"instruction":"Develop a program in Python which takes two inputs and returns the sum of their squares. 5, 9","output":"def sum_of_squares(num1, num2): return num1**2 + num2**2 x = 5 y = 9 print(sum_of_squares(x, y)) # output: 106"},{"instruction":"Write a Python function that takes a list of names as an input and generates a dictionary of people’s names as keys and their scores as values. names = [John, Mary, Jack, Sarah]","output":"def names_scores(names): scores = {} for name in names: scores[name] = random.randint(1, 10) return scores"},{"instruction":"Generate a Python program that uses the requests library to make a GET request to an API endpoint. https://jsonplaceholder.typicode.com/user","output":"import requests # Make a get request to get the latest users response = requests.get('https://jsonplaceholder.typicode.com/users') # Get the response data as a JSON data = response.json() # Print the data print(data)"},{"instruction":"Create three classes 'ClassA', 'Cars', and 'Sports' in Python and define a method 'print_info' in each class.","output":"class ClassA: def print_info(self): print(\\"This class is ClassA\\") class Cars: def print_info(self): print(\\"This class is for Cars\\") class Sports: def print_info(self): print(\\"This class is for Sports\\")"},{"instruction":"Create a Python script that converts temperatures from Celsius to Fahrenheit. 23","output":"def celsius_to_fahrenheit(celsius): return ((celsius * 9/5 ) + 32) temperature = 23 fahrenheit = celsius_to_fahrenheit(temperature) print('The temperature in Fahrenheit is: ' + str(fahrenheit))"},{"instruction":"Using the input provided, write a Python program to display the average age of people in the data. data = [ {name: Smith, age: 30}, {name: John, age: 40}, {name: Lee, age: 50} ]","output":"data = [ {\\"name\\": \\"Smith\\", \\"age\\": 30}, {\\"name\\": \\"John\\", \\"age\\": 40}, {\\"name\\": \\"Lee\\", \\"age\\": 50} ] #Calculate the average age total_age = 0 for person in data: total_age += person[\\"age\\"] average_age = total_age/len(data) #Display the average age print(\\"The average age of people in this data is {}\\".format(average_age)) # Output: The average age of people in this data is 40.0"},{"instruction":"Create a Python api to authenticate users using JWT. Not applicable","output":"import jwt import bcrypt class AuthenticationApi: def __init__(self, user_repo): self.user_repo = user_repo def authenticate(self, username: str, password: str) -> str: user = self.user_repo.find_by_username(username) if user is None: raise ValueError('Invalid username or password') if not bcrypt.checkpw(password.encode('utf-8'), user.password): raise ValueError('Invalid username or password') token = jwt.encode({'sub': user.id}, 'secret', algorithm='HS256') return token.decode('utf-8')"},{"instruction":"Write a Python program to generate a random password with a minimum length of 8 characters, containing at least one lowercase letter, one uppercase letter and one numeric character.","output":"import random import string def generate_password(): lowercase = string.ascii_lowercase uppercase = string.ascii_uppercase digits = string.digits # Generate a random 8 character string password = list(random.sample(lowercase + uppercase + digits, 8)) # Shuffle the characters of the string random.shuffle(password) # Check if the password contains at least one of each if not any(letter in password for letter in lowercase): password[0] = random.choice(lowercase) if not any(letter in password for letter in uppercase): password[1] = random.choice(uppercase) if not any(letter in password for letter in digits): password[2] = random.choice(digits) # Return the password return ''.join(password) # Generate random password password = generate_password() print(password) # Output dZk5EGe1"},{"instruction":"Write a REST API with Python and Flask to query a Postgres database of customers. The API should accept a search term and return all customer records matching the search term. search_term: Joh","output":"from flask import Flask, jsonify import psycopg2 app = Flask(__name__) conn = psycopg2.connect( host=\\"localhost\\", dbname=\\"postgres\\", user=\\"postgres\\", password=\\"password\\") cursor = conn.cursor() @app.route('/api/customers/<string:search_term>', methods=['GET']) def get_customers(search_term): query = \\"SELECT * FROM customers WHERE name like %s\\" cursor.execute(query, (f'%{search_term}%', )) records = cursor.fetchall() customers = [] for record in records: customers.append({ 'id': record[0], 'name': record[1], 'email': record[2], }) return jsonify({'customers': customers}) if __name__ == \\"__main__\\": app.run(debug=True)"},{"instruction":"Given an integer n, write a Python program to convert n to roman numeral. n = 35","output":"def int_to_Roman(num): val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num print(int_to_Roman(num))"},{"instruction":"Create a Python program to find the deepest node in a tree.","output":"def deepest_node(root): if not root: return 0 elif not root.left and not root.right: return 1 else: left_depth = deepest_node(root.left) right_depth = deepest_node(root.right) if left_depth > right_depth: return 1 + left_depth else: return 1 + right_depth"},{"instruction":"Create a web scraping program in Python for scraping content from a website. Not applicable","output":"import requests from bs4 import BeautifulSoup # The url of the website to be scraped url = 'https://www.example.com' # Make a GET request to fetch the raw HTML content html_content = requests.get(url).text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Scrape the content from the paragraph tag scraped_text = soup.find(\\"p\\").text # Print scraped text print(scraped_text)"},{"instruction":"Write a function in Python which takes in a list of numbers and returns the most common element in the list. mylist = [3, 8, 8, 2, 4]","output":"def most_common(mylist): return max(set(mylist), key = mylist.count)"},{"instruction":"Create a program in Python to sort a given unsorted list. [5, 4, 1, 8, 9, 2]","output":"def sortList(lst): lst.sort() return lst ar_list = [5, 4, 1, 8, 9, 2] result = sortList(ar_list) print(result)"},{"instruction":"Write a code snippet for a search algorithm in Python with linear time complexity. Not applicable","output":"def linear_search(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -1"},{"instruction":"Write an efficient Python program to remove all the duplicate items from a list. [1,1,2,2,3,4,5,5]","output":"def removeDuplicates(arr): output = [] for ele in arr: if ele not in output: output.append(ele) return output output = removeDuplicates([1,1,2,2,3,4,5,5]); print(output) // outputs: [1, 2, 3, 4, 5]"},{"instruction":"Create a function to generate all permutations of a given list in Python. [1, 2, 3]","output":"# Solution # First, let's define our list of numbers my_list = [1, 2, 3] # Now, let's define a function to generate all permutations def allPermutations(my_list): if len(my_list) == 0: return [] if len(my_list) == 1: return [my_list] permutations = [] for i in range(len(my_list)): m = my_list[i] remaining_list = my_list[:i] + my_list[i+1:] for p in allPermutations(remaining_list): permutations.append([m] + p) return permutations # Finally, we can call the function and print out the result print(allPermutations(my_list))"},{"instruction":"Develop a Python program to find the maximum dot product between two arrays. Calculate the maximum dot product between two arrays: [1, 2, 3] and [4, 5, 6]","output":"def max_dot_product(arr1, arr2): # Initialize result result = 0 # Iterate both arrays and multiply them together for i, j in zip(arr1, arr2): result += i * j return result # Driver code arr1 = [1, 2, 3] arr2 = [4, 5, 6] result = max_dot_product(arr1, arr2) print(result)"},{"instruction":"Evaluate the following line of code written in Python and explain what it does. not any(map(lambda k,v: k in d or v in d, x))","output":"This line of code is written in Python and is using the built-in \\"any\\" and \\"map\\" functions. The code is checking if none of the key-value pairs in the map \\"x\\" are in the dictionary \\"d\\". It does so using a lambda function to check if either the key or the value is present in the dictionary. If none are present, it will return True, otherwise it will return False."},{"instruction":"Create a Python script to scrape the title and the release date of all movies shown on IMDB in a given year. Year: 2020","output":"import requests from bs4 import BeautifulSoup # Enter the year you want to scrape year = 2020 #Creating the IMDb URL for the movies of that year url = f\\"https://www.imdb.com/search/title/?release_date={year}-01-01,{year+1}-12-31\\" response = requests.get(url) soup = BeautifulSoup(response.text,\\"html.parser\\") # List to store the data movie_list = [] # Extracting the movie title and release date movie_div = soup.find_all(\\"div\\", class_ = \\"lister-item mode-advanced\\") for movie in movie_div: # extracting the movie title movie_title = movie.h3.a.text # extracting the movie's release date movie_year = movie.h3.find(\\"span\\", class_ = \\"lister-item-year text-muted unbold\\").text year = int(movie_year.replace(\\"(\\", \\"\\").replace(\\")\\", \\"\\")) movie_list.append((movie_title, year)) # printing the movie_list print(movie_list)"},{"instruction":"Create a python program to calculate the average of the numbers in a list (not including null values). An example list of integers: [30, 28, 40, 10, 0, null, 33, null]","output":"# Calculate the average def avg(lst): sum = 0 count = 0 for num in lst: if num is not None: sum += num count += 1 return sum / count # Create list of numbers lst = [30, 28, 40, 10, 0, None, 33, None] # Print average print(avg(lst)) # Output: 25.5"},{"instruction":"Perform unit testing in an existing Python code to ensure code reliability. UDF.py def check_string(a): return (type(a)==str)","output":"import unittest class TestCheckString(unittest.TestCase): def test_check_string_Integer(self): a = 1 result = check_string(a) self.assertFalse(result) def test_check_string_String(self): a = 'Hello' result = check_string(a) self.assertTrue(result) if __name__ == '__main__': unittest.main()"},{"instruction":"Create a Python program that helps to sort the elements of an array of length n. arr = [3, 5, 1, 2, 7, 4]","output":"def sortArray(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Find the minimum element in remaining # unsorted array min_idx = i for j in range(i+1, n): if arr[min_idx] > arr[j]: min_idx = j # Swap the found minimum element with # the first element arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"instruction":"Write a function in Python that takes 2 numbers and returns their GCD. 48, 18","output":"def findGCD(a,b): if (a == 0) return b if (b == 0) return a if (a == b): return a # If a is greater if (a > b): return findGCD(a-b, b) return findGCD(a, b-a) if __name__ == '__main__': a = 48 b = 18 print(\\"GCD of\\", a , b, \\"is:\\", findGCD(a, b))"},{"instruction":"Create a Python program to search a list for a particular value and return its index. list = [2, 3, 5, 9], value = 5","output":"def search_list(list, value): i = 0 while(i < len(list)): if list[i] == value: return i i = i + 1 return -1 list = [2, 3, 5, 9] value = 5 result = search_list(list, value) if result != -1: print(\\"Element is present at index\\", result) else: print(\\"Element is not present in list\\")"},{"instruction":"Create a class in Python that can generate a new instance of itself given a list of arguments list = [name, age, gender]","output":"class Student(): def __init__(self, name, age, gender): self.name=name self.age=age self.gender=gender def generate(self, args): return Student(*args)"},{"instruction":"Using Python, create a web scraper to collect stock prices from a given website. List of stock symbols: MSFT, AAPL, GOOGL","output":"import requests from bs4 import BeautifulSoup #create a list to store the stock prices stock_prices = [] #loop through each stock symbol for symbol in [\\"MSFT\\", \\"AAPL\\", \\"GOOGL\\"]: url = \\"https://example.com/stocks/\\" + symbol page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') # find the price in the page and add it to the list of stock prices price = soup.find('span', attrs={'id':'stock_price'}).text stock_prices.append(price) print(stock_prices)"},{"instruction":"Given a list of integers, write a Python program to calculate the average of all the numbers. [2, 4, 6, 8, 10]","output":"def average(lst): sum = 0 for num in lst: sum += num return sum/len(lst) nums = [2, 4, 6, 8, 10] result = average(nums) print(result) # 6.0"},{"instruction":"Create a Python program to check if a given sentence is a pangram or not. A pangram is a sentence that contains all the letters of the alphabet at least once.","output":"import string def is_pangram(sentence): sentence = sentence.lower() alphabet = string.ascii_lowercase for letter in alphabet: if letter not in sentence: return False return True"},{"instruction":"Design a program in Python and select features from list A and list B, given the following constraints: List A: [a, b, c, d] List B: [1, 2, 3, 4] Constraints: Select 2 features from list A, and select 1 feature from list B","output":"features = [a, c, 2] # Selecting a, c from list A and 2 from list B."},{"instruction":"Create a function to implement linear search in Python.","output":"def linear_search(list, item): # Traverse through all elements in the list for i in range(len(list)): if list[i] == item: return i # Return the index of the element return -1 # Return -1 if the item is not found"},{"instruction":"Create a web page that lists out the top five programming languages by market share and their respective features.","output":"<!DOCTYPE html> <html> <head> <title>Programming Languages by Market Share</title> <style type=\\"text/css\\"> table { font-family: verdana, arial, sans-serif; border-collapse: collapse; width: 100%; } td, th { border: 1px solid #dddddd; text-align: left; padding: 8px; } </style> </head> <body> <table> <caption>Programming Languages by Market Share</caption> <tr> <th>Programming Language</th> <th>Market Share</th> <th>Features</th> </tr> <tr> <td>Java</td> <td>27.2%</td> <td>Platform independence, wide support from the development community, good scalability</td> </tr> <tr> <td>C</td> <td>15.2%</td> <td>Widely used among developers, efficiency, well-used in embedded systems</td> </tr> <tr> <td>C++</td> <td>9.2%</td> <td>Object-oriented features, used in various industries, platform independent</td> </tr> <tr> <td>Python</td> <td>8.2%</td> <td>Easy to learn and use, dynamic programming language, good scalability</td> </tr> <tr> <td>C#</td> <td>7.4%</td> <td>Object-oriented, popular for enterprise development, reliable memory management</td> </tr> </table> </body> </html>"},{"instruction":"Create a web crawler in Python that can traverse a website and detect certain words or links. Website URL: https://example.com Words to be detected: green, blue","output":"import requests from bs4 import BeautifulSoup # List of words to detect words_to_detect = ['green', 'blue'] # Set the URL url = 'https://example.com' # Get the content page = requests.get(url).text # Create a BeautifulSoup object from the content soup = BeautifulSoup(page, 'html.parser') # Get all a tags (links) links = soup.find_all('a') for link in links: # Loop through the words to detect for word in words_to_detect: # Check if the link text contains any of the words if word in link.text: # Print the link print(link['href'])"},{"instruction":"Write a Python program to build a chatbot using natural language processing and machine learning. No input.","output":"import random import re import nltk from nltk.stem.wordnet import WordNetLemmatizer from nltk.corpus import twitter_samples, stopwords from nltk.tag import pos_tag from nltk.tokenize import word_tokenize def create_chatbot(): \\"\\"\\"Write a Python program to build a chatbot using natural language processing and machine learning.\\"\\"\\" # Build a corpus of words words = [] for word in twitter_samples.strings('tweets.20150430-223406.json'): words.extend(word_tokenize(word)) words = set(words) # Lemmatize the words lemmatizer = WordNetLemmatizer() words = [lemmatizer.lemmatize(word) for word in words] # Remove the stopwords words = [word for word in words if word not in stopwords.words(\\"english\\")] # Compute pairs of words and their frequencies pairs = {} for word in words: pairs[word] = [word] # Build the chatbot chatbot = {} for word, similar_words in pairs.items(): chatbot[word] = random.choice(similar_words) return chatbot chatbot = create_chatbot()"},{"instruction":"Create an algorithm in Python that takes an integer as input and returns a boolean output of whether the number is prime or not. 17","output":"def is_prime(num): if num <= 1: return False for i in range(2, num): if num % i == 0: return False return True print(is_prime(17))"},{"instruction":"Write a Python code to convert a given list of strings to all lowercase. ['CoDE', 'OF', 'LinK']","output":"def to_lowercase(strings): return [string.lower() for string in strings] result = to_lowercase(['CoDE', 'OF', 'LinK']) print(result)"},{"instruction":"Write a Python program that calculates the monthly payments of a loan given its amount, interest rate, and term. Amount = 2000, interest rate = 10%, term = 3 year","output":"def calculate_monthly_payment(amount, interest, term): monthly_interest_rate = interest / 12 number_of_payments = term * 12 monthly_payment = (amount * monthly_interest_rate) / (1 - pow((1 + monthly_interest_rate), (-number_of_payments))) return monthly_payment amount = 2000 interest_rate = 10 term = 3 payment = calculate_monthly_payment(amount, interest_rate, term) print(f'The monthly payment is {payment:.2f}')"},{"instruction":"Write a Python program to check if the first character of a given string is in uppercase.","output":"def is_uppercase(text): if text[0].isupper(): print(\\"True\\") else: print(\\"False\\")"},{"instruction":"Compose a python program that can search a text document for a given word. text_file=text.txt query_word=apple","output":"def search_for_word(text_file, query_word): words = [] with open(text_file, \\"r\\") as file: for line in file: words.extend(line.split()) if query_word in words: return True else: return False"},{"instruction":"Create a basic Python Flask application that reads data from a MySQL database and displays a list of users on an HTML page. Not applicable","output":"from flask import Flask, render_template import pymysql app = Flask(__name__) @app.route('/') def index(): # Create connection to database connection = pymysql.connect(host='localhost', port=3306, user='user', password='P@ssw0rd', db='db') # Get all users from database with connection.cursor() as cursor: query = 'SELECT * FROM users' cursor.execute(query) result = cursor.fetchall() # Close connection connection.close() return render_template('index.html', users=result) if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Design a python program to create a new pair of integers from a given pair Given a pair (1, 2), create a new pair (2, 3)","output":"def create_pair(a,b): c = a+1 d = b+1 return (c, d)"},{"instruction":"To run a server that simulates Fronius inverters and responds to API requests, run the given Python code using a Python interpreter. The server listens on port 8080 and accepts connections from all sources. The server responds to API requests for getting the API version, inverter information, and inverter realtime data. The server simulates multiple Fronius inverters with different device types, unique IDs, custom names, and 3phase support. The server also simulates an SMA inverter with modbus enabled. The server uses the Twisted framework and the Bottle web framework.","output":"#!/usr/bin/python -u import datetime import modbus_tcp_sim import os import sys from twisted.internet import reactor from fronius_sim import FroniusSim app_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) bottle_dir = os.path.normpath(os.path.join(app_dir, '..', '..', 'software', 'ext', 'bottle')) sys.path.extend([bottle_dir, app_dir]) import bottle application = bottle.default_app() inverters = [ FroniusSim(id='1', device_type=232, unique_id='1234', custom_name='SouthWest', has_3phases=True, modbus_enabled=False), FroniusSim(id='2', device_type=224, unique_id='4321', custom_name='', has_3phases=False, modbus_enabled=False), FroniusSim(id='3', device_type=208, unique_id='1111', custom_name='Tmp', has_3phases=False, modbus_enabled=True) ] sma_inverter = FroniusSim(id='126', device_type=None, unique_id='10988912', custom_name='SMA', has_3phases=False, modbus_enabled=True) @bottle.route('/solar_api/GetAPIVersion.cgi') def get_api_version(): return dict(APIVersion=1, BaseUrl='solar_api/v1/') @bottle.route('/solar_api/v1/GetInverterInfo.cgi') def get_inverter_info(): return { 'Head': create_head({}), 'Body': { 'Data': dict((x.id, { 'DT': x.device_type, 'PVPower': 5000, 'Show': 1, 'UniqueID': x.unique_id, 'ErrorCode': 0, 'StatusCode': 7, 'CustomName': x.custom_name }) for x in inverters)}} @bottle.route('/solar_api/v1/GetInverterRealtimeData.cgi') def get_inverter_realtime_data(): scope = bottle.request.query.Scope device_id = bottle.request.query.DeviceId data_collection = bottle.request.query.DataCollection if scope == 'Device': try: inverter = next((i for i in inverters if i.id == device_id)) except StopIteration: return { 'Head': create_head({ 'Scope': scope, 'DeviceId': device_id, 'DataCollection': data_collection}, error_code=1, error_message='device not found')} if data_collection == 'CumulationInverterData': return { 'Head': create_head({ 'Scope': scope, 'DeviceId': device_id, 'DataCollection': data_collection}), 'Body': { 'Data': { 'PAC': {'Value': 3373, 'Unit': 'W'}, 'DAY_ENERGY': {'Value': 8000, 'Unit': 'Wh'}, 'YEAR_ENERGY': {'Value': 44000, 'Unit': 'Wh'}, 'TOTAL_ENERGY': {'Value': 45000, 'Unit': 'Wh'}, 'DeviceStatus': { 'StatusCode': 7, 'MgmtTimerRemainingTime': -1, 'ErrorCode': 0, 'LEDCode': 0, 'LEDColor': 2, 'LEDState': 0, 'StateToReset': False}}}} if data_collection == 'CommonInverterData': return { 'Head': create_head({ 'Scope': scope, 'DeviceId': device_id, 'DataCollection': data_collection}), 'Body': { 'Data': { 'PAC': {'Value': inverter.main.power, 'Unit': 'W'}, 'SAC': {'Value': 3413, 'Unit': 'VA'}, 'IAC': {'Value': inverter.main.current, 'Unit': 'Hz'}, 'UAC': {'Value': inverter.main.voltage, 'Unit': 'V'}, 'FAC': {'Value': 50, 'Unit': 'Hz'}, 'IDC': {'Value': 8.2, 'Unit': 'A'}, 'UDC': {'Value': 426, 'Unit': 'V'}, 'DAY_ENERGY': {'Value': 8000, 'Unit': 'Wh'}, 'YEAR_ENERGY': {'Value': 44000, 'Unit': 'Wh'}, 'TOTAL_ENERGY': {'Value': inverter.main.energy, 'Unit': 'Wh'}, 'DeviceStatus': { 'StatusCode': 7, 'MgmtTimerRemainingTime': -1, 'ErrorCode': 0, 'LEDCode': 0, 'LEDColor': 2, 'LEDState': 0, 'StateToReset': False}}}} if data_collection == '3PInverterData': if not inverter.has_3phases: return { 'Head': create_head({ 'Scope': scope, 'DeviceId': device_id, 'DataCollection': data_collection}, error_code=2, error_message='not supported')} return { 'Head': create_head({ 'Scope': scope, 'DeviceId': device_id, 'DataCollection': data_collection}), 'Body': { 'Data': { 'IAC_L1': {'Value': inverter.l1.current, 'Unit': 'A'}, 'IAC_L2': {'Value': inverter.l2.current, 'Unit': 'A'}, 'IAC_L3': {'Value': inverter.l3.current, 'Unit': 'A'}, 'UAC_L1': {'Value': inverter.l1.voltage, 'Unit': 'V'}, 'UAC_L2': {'Value': inverter.l2.voltage, 'Unit': 'V'}, 'UAC_L3': {'Value': inverter.l3.voltage, 'Unit': 'V'}, 'T_AMBIENT': {'Value': 27, 'Unit': 'V'}, 'ROTATION_SPEED_FAN_FL': {'Value': 83, 'Unit': 'RPM'}, 'ROTATION_SPEED_FAN_FR': {'Value': 83, 'Unit': 'RPM'}, 'ROTATION_SPEED_FAN_BL': {'Value': 83, 'Unit': 'RPM'}, 'ROTATION_SPEED_FAN_BR': {'Value': 83, 'Unit': 'RPM'}}}} elif scope == 'System': return { 'Head': create_head({'Scope': scope}), 'Body': { 'Data': { 'PAC': {'Value': 3373, 'Unit': 'W'}, 'DAY_ENERGY': {'Value': 8000, 'Unit': 'Wh'}, 'YEAR_ENERGY': {'Value': 44000, 'Unit': 'Wh'}, 'TOTAL_ENERGY': {'Value': 45000, 'Unit': 'Wh'}}}} else: raise Exception('Unknown scope') def create_head(args, error_code=0, error_message=''): return { 'RequestArguments': args, 'Status': { \\"Code\\": error_code, \\"Reason\\": error_message, \\"UserMessage\\": \\"\\"}, 'Timestamp': datetime.datetime.now().isoformat()} class TwistedServer(bottle.ServerAdapter): def start(self, handler): from twisted.web import server, wsgi from twisted.python.threadpool import ThreadPool from twisted.internet import reactor thread_pool = ThreadPool(minthreads=0, maxthreads=1) thread_pool.start() reactor.addSystemEventTrigger('after', 'shutdown', thread_pool.stop) factory = server.Site(wsgi.WSGIResource(reactor, thread_pool, handler)) reactor.listenTCP(self.port, factory, interface=self.host) # reactor.run() if __name__ == '__main__': # host='0.0.0.0': accept connections from all sources server = TwistedServer(host='0.0.0.0', port=8080, debug=True) server.start(application) modbus_tcp_sim.start_server(inverters + [sma_inverter]) reactor.run()"},{"instruction":"Create a machine learning program in Python that classifies a person's age by using facial recognition. Example dataset of 20 photos, with the age of each person labeled.","output":"import tensorflow as tf from tensorflow import keras from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D from tensorflow.keras.preprocessing.image import ImageDataGenerator # Initializing training data # Images should be in the same folder image_generator = ImageDataGenerator(rescale=1./255) data_gen = image_generator.flow_from_directory( directory='data/', target_size=(150, 150), batch_size=32, class_mode='binary' ) # Building the model model = Sequential([ Conv2D(16, 3, padding='same', activation='relu', input_shape=(150, 150 ,3)), MaxPooling2D(), Dropout(0.2), Conv2D(32, 3, padding='same', activation='relu'), MaxPooling2D(), Dropout(0.2), Conv2D(64, 3, padding='same', activation='relu'), MaxPooling2D(), Dropout(0.2), Flatten(), Dense(512, activation='relu'), Dense(1) ]) # Compiling the model model.compile(optimizer='adam', loss=tf.keras.losses.BinaryCrossentropy(from_logits=True), metrics=['accuracy']) # Training the model model.fit( data_gen, steps_per_epoch=20, epochs=10 ) # Testing the model test_loss, test_acc = model.evaluate(data_gen, steps=20) print('Test accuracy:', test_acc)"},{"instruction":"Write a Python code snippet to print the sum of all even numbers between 1 to 10","output":"sum = 0 for i in range (1,11): if i % 2 == 0: sum += i print(sum)"},{"instruction":"Generate a correct python program to format a given string s so that the output pattern is as follows Given String: Helloworldsomeone The output pattern is: Hello world someone.","output":"def format_string(s): string_arr = s.split(\\"--\\") return ' '.join(string_arr)"},{"instruction":"Can you generate a Python program that takes a string as input and returns a dictionary with the count of each letter in the string? hello world","output":"def letter_count(s): count = {} for c in s: if c not in count: count[c] = 1 else: count[c] += 1 return count s = \\"hello world\\" count = letter_count(s) print(count) # {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}"},{"instruction":"Create a Python script to parse a sentence and check if it is grammatically correct. Not applicable","output":"import nltk def check_grammar(sentence): # tokenize the sentence into words tokens = nltk.word_tokenize(sentence) # tag each token with part-of-speech tagged = nltk.pos_tag(tokens) grammar = \\"NP: {<DT>?<JJ>*<NN>}\\" # create a parser cp = nltk.RegexpParser(grammar) result = cp.parse(tagged) if len(result) == len(tokens): return True else: return False"},{"instruction":"Create a Python program that takes in a list of email addresses as argument and stores them in a CSV.","output":"\\"\\"\\" Create a Python program that takes in a list of email addresses and stores them in a CSV. \\"\\"\\" import csv def store_emails(emails): with open('emails.csv', 'w', newline='') as csvfile: writer = csv.writer(csvfile) for email in emails: writer.writerow([email]) if __name__ == '__main__': emails = [\\"example@gmail.com\\",\\"example2@gmail.com\\",\\"example3@gmail.com\\"] store_emails(emails)"},{"instruction":"Create a chatbot in Python that will serve as an assistant to students for university admission process. Not applicable","output":"import requests import json def ask_question(query): #make a get request r = requests.get(\\"<URL>/query?q=\\"+query) #process the response resp_json = json.loads(r.text) answer = resp_json['results'][0]['fulfillment']['speech'] return answer if __name__ == \\"__main__\\": #Accept a question from the user query = input(\\"You: \\") answer = ask_question(query) print(\\"Chatbot: %s\\" % answer)"},{"instruction":"Create a function to take a numerical input and return a list of its prime factors in python.","output":"\\"\\"\\" Function to take an input and return a list of its prime factors \\"\\"\\" def prime_factorize(n): prime_factors = [] d = 2 while d*d <= n: while (n % d) == 0: prime_factors.append(d) n /= d d += 1 if n > 1: prime_factors.append(n) return prime_factors if __name__ == '__main__': print(prime_factorize(81))"},{"instruction":"Write a Python program to align the text in columns. text = This is a test text to be aligned in columns","output":"def align_columns(text): words = text.split(\\" \\") max_len = 0 for w in words: if len(w) > max_len: max_len = len(w) for i, w in enumerate(words): words[i] = w.ljust(max_len) return \\" \\".join(words) if __name__ == '__main__': text = \\"This is a test text to be aligned in columns\\" print(\\"Aligned in columns:\\", align_columns(text))"},{"instruction":"Write a Python program to extract particular attributes from a given XML document. <bookstore> <book> <title>The Autobiography of Benjamin Franklin</title> <author> <firstname>Benjamin</firstname> <lastname>Franklin</lastname> </author> <price>8.99</price> </book> </bookstore>","output":"import xml.etree.ElementTree as ET def extract_attribute(xml_str): root = ET.fromstring(xml_str) attribs = [] for element in root.iter(): attribs.append(element.tag + \\": \\" + element.attrib.get('title','')) return attribs if __name__ == '__main__': xml_str = \\"\\"\\" <bookstore> <book> <title>The Autobiography of Benjamin Franklin</title> <author> <first-name>Benjamin</first-name> <last-name>Franklin</last-name> </author> <price>8.99</price> </book> </bookstore> \\"\\"\\" print(\\"Attributes:\\", extract_attribute(xml_str))"},{"instruction":"Create a Python script to check if an array contains contiguous numbers. arr = [20, 21, 22, 23, 24]","output":"def is_contiguous(arr): if (len(arr) == 0): return True arr.sort() for i in range(len(arr) - 1): if (arr[i] + 1 != arr[i+1]): return False return True"},{"instruction":"Create a python program that outputs a given number of random numbers within a given range max_num = 100 num_of_nums = 10","output":"import random def get_n_random_numbers(max_num, num_of_nums): random_numbers = [] for _ in range(num_of_nums): random_numbers.append(random.randrange(max_num)) return random_numbers"},{"instruction":"Generate a class in Python for entering user’s biodata.","output":"class Biodata: def __init__(self, name, age, gender, height, weight, date_of_birth): self.name = name self.age = age self.gender = gender self.height = height self.weight = weight self.date_of_birth = date_of_birth"},{"instruction":"Develop a python script that takes in 2 strings and outputs the longest common subsequence. string1 = 'GeeksforGeeks' string2 = 'GeeksQuiz'","output":"def longest_common_subsequence(string1, string2): \\"\\"\\" Find the longest common subsequence of two strings. Args: string1 (str): first string string2 (str): second string Returns: str: longest common subsequence \\"\\"\\" m = len(string1) n = len(string2) dp = [[None]*(n+1) for i in range(m+1)] for i in range(m+1): for j in range(n+1): if i == 0 or j == 0: dp[i][j] = 0 elif string1[i-1] == string2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) lcs = '' i, j = m, n while i > 0 and j > 0: if string1[i-1] == string2[j-1]: lcs += string1[i-1] i -= 1 j -= 1 elif dp[i-1][j] > dp[i][j-1]: i -= 1 else: j -= 1 return lcs[::-1]"},{"instruction":"Create a for loop in Python to print out all numbers from 0 to 10 (inclusive).","output":"for i in range(11): print(i)"},{"instruction":"Design a Python program to create a set of unique elements from a given list [1, 5, 1, 8, 6, 5]","output":"def unique_list(nums): return list(set(nums))"},{"instruction":"Write a code in Python to automate filling out web forms.","output":"\\"\\"\\" Automating web form filling \\"\\"\\" import requests def fill_form(url, data): \\"\\"\\" Takes in a url and a data dictionary and fills out an online form \\"\\"\\" # Make a POST request to the url with data response = requests.post(url, data=data) # Check if the request was successful if response.status_code == 200: return True else: return False if __name__ == '__main__': # Provide the url and data to be used URL = 'http://www.example.com' DATA = { 'name': 'John', 'email': 'john@example.com' } # Call the fill_form function result = fill_form(URL, DATA) if result: print('Form filled successfully!') else: print('Form fill failed!')"},{"instruction":"Develop a python program to add two arrays of the same size. a = [2, 3, 4] b = [5, 6, 7]","output":"def add_arrays(a, b): c = [] n = len(a) for i in range(n): c.append(a[i] + b[i]) return c a = [2, 3, 4] b = [5, 6, 7] result = add_arrays(a, b) print(result) # prints [7, 9, 11]"},{"instruction":"Write a Python program to remove all elements of a given list except largest and smallest element. numbers = [3, 4, 6, 2, 8, 9, 1]","output":"def get_min_max(numbers): max_num = max(numbers) min_num = min(numbers) new_list = [] for i in numbers: if i == max_num or i == min_num: new_list.append(i) return new_list"},{"instruction":"Generate a Python script that checks a list for duplicate elements. Not applicable","output":"def contains_duplicates(lst): seen = set() for x in lst: if x in seen: return True seen.add(x) return False"},{"instruction":"Develop an algorithm for a Linear Search of an unordered array in Python. [4, 8, 15, 23]","output":"def linear_search(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1"},{"instruction":"Create a program to encode a text message using a substitution cipher in Python. message = 'IT IS A SECRET'","output":"# define substitution cipher key key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' def encode(message): encoded_message = \\"\\" # iterate through the message for char in message: # check if character is a letter if char.isalpha(): # convert character to uppercase char = char.upper() # find the index of the encryption key where the letter is located index = key.index(char) # replace the character with the next letter in the encryption key char = key[(index + 1) % len(key)] # add the character to form the encoded message encoded_message += char return encoded_message # test msg = 'It is a secret' encoded = encode(msg) print(encoded) # JUJVBTBTFDSFUJFT"},{"instruction":"Write a Python program to remove the duplicates in a list and print the list in ascending order. [10,7,9,12,11,7,9,10]","output":"\\"\\"\\" Write a Python program to remove the duplicates in a list and print the list in ascending order \\"\\"\\" def remove_duplicates_ascending(l): return sorted(list(set(l))) if __name__ == \\"__main__\\": l = [10,7,9,12,11,7,9,10] res = remove_duplicates_ascending(l) print(res) # [7, 9, 10, 11, 12]"},{"instruction":"Create a Python script to sort the following list in ABC order list = [3, 6, 9, 1, 4, 8]","output":"list = [3, 6, 9, 1, 4, 8] list.sort() print(list)"},{"instruction":"Write a Python program to check whether an element exists within a given list. list_a = [1, 2, 3, 4] target = 3","output":"def is_element_in_list(list_a, target): return target in list_a is_element_in_list(list_a, target)"},{"instruction":"Create a function that demonstrates the concept of decorators in python.","output":"def my_decorator(func): def wrapper(): print(\\"Something is happening before the function is called.\\") func() print(\\"Something is happening after the function is called.\\") return wrapper @my_decorator def say_hello(): print(\\"Hello!\\") say_hello() # Output # Something is happening before the function is called. # Hello! # Something is happening after the function is called."},{"instruction":"Create a set of classes in Python to represent a school database.","output":"class Student: def __init__(self, name, grade): self.name = name self.grade = grade class Course: def __init__(self, name, teachers): self.name = name self.teachers = teachers class School: def __init__(self, name): self.name = name self.students = [] self.courses = []"},{"instruction":"Create a Python program that processes a text document it should delete all the lines that contain a certain word. A text document including the following lines: Line 1 This is a sample text document. Line 2 It has some words and some sentences. Line 3 This line should be deleted. A keyword deleted","output":"import re input_file = open('text.txt', 'r') output_file = open('output.txt', 'w') for line in input_file: if not re.search(r'deleted', line): output_file.write(line) input_file.close() output_file.close()"},{"instruction":"Optimize the following function in Python to make it run faster def gcd(x, y): while(y): x, y = y, x % y return x","output":"def gcd(x, y): if x == 0: return y if y == 0: return x if x == y: return x if x > y: small = y else: small = x for i in range(1, small+1): if((x % i == 0) and (y % i == 0)): gcd = i return gcd"},{"instruction":"Write a Python program that takes a dataset as input and calculates the sum, mean and median of the data. DataSet = [1, 5, 8, 9, 12, 17, 20]","output":"s=73 mean=10.428571 median=9 # Program to calculate the sum,mean,median of the data dataset = [1,5,8,9,12,17,20] # calculate the sum s = 0 for items in dataset: s = s + items # calculate mean mean = s/len(dataset) # calculate median dataset_sorted = sorted(dataset) m_m = len(dataset_sorted) if m_m%2 == 0: # n is even m1 = dataset_sorted[int(m_m/2) - 1] m2 = dataset_sorted[int((m_m/2))] median = (m1 + m2)/2 else: # n is odd median = dataset_sorted[int((m_m+1)/2 - 1)] # display the results print(\\"sum:\\", s) print(\\"mean:\\", mean) print(\\"median:\\", median)"},{"instruction":"Design a python program to detect anagrams from a given list of words. words=['dog','bar','home','god','act','chair']","output":"\\"\\"\\" Design a python program to detect anagrams from a given list of words. \\"\\"\\" words=['dog','bar','home','god','act','chair'] # Create a dictionary to store the sorted words sortedWords = {} # Sort all the words and store in the dictionary, with the key being the sorted words for word in words: sortedWord = ''.join(sorted(word)) if sortedWord not in sortedWords: sortedWords[sortedWord] = [] sortedWords[sortedWord].append(word) # Look for anagrams in the dictionary anagrams = [] for key, value in sortedWords.items(): if len(value) > 1: anagrams.append(value) print(anagrams)"},{"instruction":"Create a class in Python which can be used to store data about books.","output":"class Book: def __init__(self, title, author, pages): self.title = title self.author = author self.pages = pages def __str__(self): return '{} by {} ({} pages)'.format(self.title, self.author, self.pages)"},{"instruction":"Create a class in Python to represent a circle in a Euclidean plane.","output":"class Circle: def __init__(self, radius, x=0, y=0): self.x = x self.y = y self.radius = radius def area(self): return (self.radius ** 2) * math.pi def circumference(self): return 2 * math.pi * self.radius def __str__(self): return f'Circle at ({self.x}, {self.y}) with radius {self.radius}'"},{"instruction":"Generate a Python program for creating a tiered dictionary with nested keys and values. Not applicable","output":"def generate_dict(keys, values): n = len(keys) if n != len(values): return None dct = {} for i in range(n): dct[keys[i]] = values[i] if i == (n-1) else generate_dict(keys[:i+1], values[i]) return dct keys = [‘a’, ‘b’, ‘c’, ‘d’] values = [1, 2, 3, 4] result = generate_dict(keys, values) print(result)"},{"instruction":"Write a script in Python that downloads data from a website. The script should be flexible and be able to download data in different formats from different websites. https://example.com/d","output":"import requests def download_data(url): r = requests.get(url) # determine the file format content_type = r.headers.get('content-type') # depending on file format, set appropriate encoding if content_type == \\"image/jpeg\\": encoding = 'binary' elif content_type == \\"application/pdf\\": encoding = 'utf-8' else: encoding = 'utf-8' # decode data and store it in file with open(url.split('/')[-1], 'wb') as f: f.write(r.content) url = \\"https://example.com/data\\" download_data(url)"},{"instruction":"Create a web scraper program in Python that can scrape a given website. The website to be scraped is https://www.example.com/.","output":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com/' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') # scrape the website using soup"},{"instruction":"Write a Python program to scrape data from website www.example.com and store the data in a pandas data frame. Not applicable","output":"import requests import pandas as pd # Get website content url = 'http://www.example.com' content = requests.get(url).content # Create pandas data frame df = pd.read_html(content)[0]"},{"instruction":"Write a Python script to search a given dictionary for a given word. dictionary = {hello: Str","output":"def search_word(word, dictionary): if word in dictionary.keys(): return dictionary[word] else: return None dictionary = {'hello': 'string', 'goodbye': 'bye'} word = 'hello' result = search_word(word, dictionary) if result: print('Word found in dictionary: ' + result) else: print('Word not found in dictionary.')"},{"instruction":"Write a Python program to simulate a coin toss and count the number of heads.","output":"import random # Function to simulate coin toss def coin_toss(num_tosses): head_count = 0 tail_count = 0 for _ in range(num_tosses): random_choice = random.choice([1, 0]) if random_choice == 1: head_count += 1 print(\\"Heads\\") else: tail_count += 1 print(\\"Tails\\") return head_count # Driver code num_tosses = int(input(\\"Enter the number of coin tosses: \\")) head_count = coin_toss(num_tosses) print(\\"Number of heads:\\", head_count)"},{"instruction":"Design an AI algorithm in Python to solve Sudoku puzzles. board = [[3, 0, 6, 5, 0, 8, 4, 0, 0], [5, 2, 0, 0, 0, 0, 0, 0, 0], [0, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]]","output":"import numpy as np def find_empty_location(arr, l): for row in range(9): for col in range(9): if(arr[row][col]==0): l[0]=row l[1]=col return True return False def used_in_row(arr, row, num): for i in range(9): if(arr[row][i] == num): return True return False def used_in_col(arr, col, num): for i in range(9): if(arr[i][col] == num): return True return False def used_in_box(arr, row, col, num): for i in range(3): for j in range(3): if(arr[i + row][j + col] == num): return True return False def check_location_is_safe(arr, row, col, num): return not used_in_row(arr, row, num) and not used_in_col(arr, col, num) and not used_in_box(arr, row - row % 3, col - col % 3, num) def solve_sudoku(arr): l=[0,0] if(not find_empty_location(arr,l)): return True row=l[0] col=l[1] for num in range(1,10): if(check_location_is_safe(arr,row,col,num)): arr[row][col]=num if(solve_sudoku(arr)): return True arr[row][col] = 0 return False # Driver main function to solve Sudoku problem solve_sudoku(board) print(np.matrix(board))"},{"instruction":"Create a Python program to categorize a list of sentences into four categories: positive, negative, neutral, and unknown. sentences = [ I am feeling great today!, The weather is terrible!, I am not sure what to think., I don't know what that means. ]","output":"categories = [] for sentence in sentences: if \\"great\\" in sentence or \\"happy\\" in sentence: categories.append(\\"positive\\") elif \\"terrible\\" in sentence or \\"sad\\" in sentence: categories.append(\\"negative\\") elif \\"not sure\\" in sentence or \\"don't know\\" in sentence: categories.append(\\"unknown\\") else: categories.append(\\"neutral\\") print(categories) # Output: [\\"positive\\", \\"negative\\", \\"unknown\\", \\"unknown\\"]"},{"instruction":"Generate code to implement a game of Connect Four in Python. Not applicable","output":"import sys class ConnectFour: # Variables C4_COLUMNS = 7 C4_ROWS = 6 def __init__(self): self.field = [[0 for i in range(self.C4_COLUMNS)] for i in range(self.C4_ROWS)] def print_field(self): for r in range(self.C4_ROWS): for c in range(self.C4_COLUMNS): print(self.field[r][c], end = \\" \\") print() # Create the game def populate_field(self): # The field needs to be populated # with pieces of two players: # 1 - player 1, 2 - player 2 player = 1 print(\\"Player {} is at turn\\".format(player)) while True: # Take column from the player column = int(input(\\"Choose a column (0-6): \\")) if 0 <= column < self.C4_COLUMNS: # Check if there is room in the column if self.field[0][column] == 0: # Place the piece in the lowest # empty space in the column for r in reversed(range(self.C4_ROWS)): if self.field[r][column] == 0: self.field[r][column] = player break # Check conditions for victory if self.check_victory(player, r, column): print(\\"Player {} won!\\".format(player)) sys.exit() # Change player player = 1 if player == 2 else 2 else: # Column number is not correct print(\\"Column number is not correct\\") else: print(\\"Column is full!\\") # Print the field self.print_field() print(\\"Player {} is at turn\\".format(player)) # Check victory condition def check_victory(self, player, r, column): # Check the same pieces # in horizontal direction cnt_horizontal = 0 for c in range(self.C4_COLUMNS): if self.field[r][c] == player: cnt_horizontal += 1 if cnt_horizontal == 4: return True # Check the same pieces # in vertical direction cnt_vertical = 0 for rr in range(self.C4_ROWS): if self.field[rr][column] == player: cnt_vertical += 1 if cnt_vertical == 4: return True # Check the same pieces # in diagonal direction cnt_diagonal1 = 0 rrr = r ccc = column # Go up-left while rrr >= 0 and ccc >= 0: if self.field[rrr][ccc] == player: cnt_diagonal1 += 1 rrr -= 1 ccc -= 1 # Go down-right rrr = r ccc = column while rrr < self.C4_ROWS and ccc < self.C4_COLUMNS: if self.field[rrr][ccc] == player: cnt_diagonal1 += 1 rrr += 1 ccc += 1 if cnt_diagonal1 == 4: return True # Check for another diagonal cnt_diagonal2 = 0 rrr = r ccc = column # Go up-right while rrr >= 0 and ccc < self.C4_COLUMNS: if self.field[rrr][ccc] == player: cnt_diagonal2 += 1 rrr -= 1 ccc += 1 # Go down-left rrr = r ccc = column while rrr < self.C4_ROWS and ccc >= 0: if self.field[rrr][ccc] == player: cnt_diagonal2 += 1 rrr += 1 ccc -= 1 if cnt_diagonal2 == 4: return True return False # Create the game if __name__ == '__main__': game = ConnectFour() game.populate_field()"},{"instruction":"Write a python program to calculate the standard deviation for a list of numbers inputted by the user. [1, 2, 3, 4, 5]","output":"nums = [1, 2, 3, 4, 5] # Function to calculate the standard deviation def standardDeviation(nums): # Compute mean (average of elements) mean = sum(nums) / len(nums) # Compute sum squared distances to the mean sum_sq_dist = 0 for num in nums: sum_sq_dist += (num - mean) ** 2 # Compute standard deviation and return result return (sum_sq_dist / len(nums) - - - 1)** 0.5 # Print the standard deviation print(standardDeviation(nums))"},{"instruction":"Create a Python script to check if a given word or phrase is a palindrome. madam","output":"def is_palindrome(word): word_list = list(word) if word_list == word_list[::-1]: return True else: return False result = is_palindrome('madam') print(result)"},{"instruction":"Generate a Python loop with a number of iterations equal to the number of given numbers. numbers = [1, 2, 3]","output":"for i in range(len(numbers)): print(numbers[i])"},{"instruction":"Build a Python program to fetch 10 top trending articles from \`medium.com\` every 5 minutes.","output":"import requests import os import time while True: response = requests.get(\\"https://medium.com/top-stories\\") if response.status_code == 200: with open(\\"trending-articles.html\\", \\"w\\") as f: f.write(response.text) time.sleep(300) else: print(\\"Error fetching webpage.\\")"},{"instruction":"Create a class in Python that defines a student information data structure.","output":"class Student: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender"},{"instruction":"Write a function in Python to convert a Celsius temperature to Fahrenheit degree. Temperature in Celsius: 20","output":"def celsius_to_fahrenheit(cel): return cel * 1.8 + 32 temp_in_fahrenheit = celsius_to_fahrenheit(20) print(\\"Temperature in Fahrenheit:\\", temp_in_fahrenheit)"},{"instruction":"This code provides a Python class called Provider that generates user agent strings for various web browsers. To use this code, import the Provider class from this module and call its methods to generate user agent strings for specific browsers.","output":"from __future__ import unicode_literals from . import BaseProvider from . import date_time from datetime import datetime import random class Provider(BaseProvider): user_agents = ('firefox', 'chrome', 'internet_explorer', 'opera', 'safari') windows_platform_tokens = ( 'Windows NT 6.2', 'Windows NT 6.1', 'Windows NT 6.0', 'Windows NT 5.2', 'Windows NT 5.1', 'Windows NT 5.01', 'Windows NT 5.0', 'Windows NT 4.0', 'Windows 98; Win 9x 4.90', 'Windows 98', 'Windows 95', 'Windows CE' ) linux_processors = ('i686', 'x86_64',) mac_processors = ('Intel', 'PPC', 'U; Intel', 'U; PPC') langs = ('en-US', 'sl-SI', 'it-IT') @classmethod def mac_processor(cls): return cls.random_element(cls.mac_processors) @classmethod def linux_processor(cls): return cls.random_element(cls.linux_processors) @classmethod def user_agent(cls): name = cls.random_element(cls.user_agents) return getattr(cls, name)() @classmethod def chrome(cls): saf = str(random.randint(531, 536)) + str(random.randint(0, 2)) platforms = ( \\"({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}\\".format( cls.linux_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf), \\"({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}\\".format( cls.windows_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf), \\"({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}\\".format( cls.mac_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf), ) return 'Mozilla/5.0 ' + cls.random_element(platforms) @classmethod def firefox(cls): ver = ( 'Gecko/{0} Firefox/{1}.0'.format( date_time.Provider.date_time_between(datetime(2011, 1, 1)), random.randint(4, 15)), 'Gecko/{0} Firefox/3.6.{1}'.format( date_time.Provider.date_time_between(datetime(2010, 1, 1)), random.randint(1, 20)), 'Gecko/{0} Firefox/3.8'.format(date_time.Provider.date_time_between(datetime(2010, 1, 1)), ), ) platforms = ( \\"({0}; {1}; rv:1.9.{2}.20) {3}\\".format( cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(0, 2), random.choice(ver)), \\"({0}; rv:1.9.{1}.20) {2}\\".format(cls.linux_platform_token(), random.randint(5, 7), random.choice(ver)), \\"({0}; rv:1.9.{1}.20) {2}\\".format(cls.mac_platform_token(), random.randint(2, 6), random.choice(ver)), ) return 'Mozilla/5.0 ' + cls.random_element(platforms) @classmethod def safari(cls): saf = \\"{0}.{1}.{2}\\".format(random.randint(531, 535), random.randint(1, 50), random.randint(1, 7)) if random.randint(0, 1) == 0: ver = \\"{0}.{1}\\".format(random.randint(4, 5), random.randint(0, 1)) else: ver = \\"{0}.0.{1}\\".format(random.randint(4, 5), random.randint(1, 5)) platforms = ( '(Windows; U; {0}) AppleWebKit/{1} (KHTML, like Gecko) Version/{2} Safari/{3}'.format( cls.windows_platform_token(), saf, ver, saf), '({0} rv:{1}.0; {2}) AppleWebKit/{3} (KHTML, like Gecko) Version/{4} Safari/{5}'.format( cls.mac_platform_token(), random.randint(2, 6), cls.random_element(cls.langs), saf, ver, saf), '(iPod; U; CPU iPhone OS {0}_{1} like Mac OS X; {2}) AppleWebKit/{3} (KHTML, like Gecko) Version/{4}.0.5 Mobile/8B{5} Safari/6{6}'.format( random.randint(3, 4), random.randint(0, 3), cls.random_element(cls.langs), saf, random.randint(3, 4), random.randint(111, 119), saf ) ) return 'Mozilla/5.0 ' + cls.random_element(platforms) @classmethod def opera(cls): platforms = ( '({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format( cls.linux_platform_token(), cls.random_element(cls.langs), random.randint(160, 190), random.randint(10, 12)), '({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format( cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(160, 190), random.randint(10, 12)), ) return 'Opera/{0}.{1}.{2}'.format(random.randint(8, 9), random.randint(10, 99), cls.random_element(platforms)) @classmethod def internet_explorer(cls): return 'Mozilla/5.0 (compatible; MSIE {0}.0; {1}; Trident/{2}.{3})'.format( random.randint(5, 9), cls.windows_platform_token(), random.randint(3, 5), random.randint(0, 1) ) @classmethod def windows_platform_token(cls): return cls.random_element(cls.windows_platform_tokens) @classmethod def linux_platform_token(cls): return 'X11; Linux {0}'.format(cls.random_element(cls.linux_processors)) @classmethod def mac_platform_token(cls): return 'Macintosh; {0} Mac OS X 10_{1}_{2}'.format( cls.random_element(cls.mac_processors), random.randint(5, 8), random.randint(0, 9))"},{"instruction":"Create a Python algorithm to demonstrate a most efficient way to find the minimum index of a given number in an array. arr = [3,4,1,5,2] num = 5","output":"arr = [3,4,1,5,2] # Function to find the minimum index def minIndex(arr, num): minIndex = -1 min_val = float('inf') # Find the minimum index for j in range(0, len(arr)): if num == arr[j] and min_val > j: min_val = j minIndex = min_val return minIndex # Driver Code num = 5 print(minIndex(arr, num)) # Output: 3 (i.e. minimum index of 5 is 3 in array)"},{"instruction":"Generate a program which accepts a sentence as an input and returns the total number of characters in it? <noinput>","output":"# Python program to find number of characters in a sentence # Function to calculate number of characters def find_char(s): return(len(s)) # Taking the sentence from the user str = input(\\"Enter a sentence: \\") # Calling the function count = find_char(str) # Printing the result print(\\"Number of characters:\\", count)"},{"instruction":"Compose a Python program that takes a list of strings and checks if each string length is 2 or more. ['dog', 'cat', 'mouse', 'snake', 'python', 'go']","output":"def isStringLengthMoreThanTwo(list): new_list = [] for string in list: if len(string) >= 2: new_list.append(string) return new_list # Driver Code list = ['dog', 'cat', 'mouse', 'snake', 'python', 'go'] print(isStringLengthMoreThanTwo(list))"},{"instruction":"Generate a python code to find the size of an object.","output":"import sys def size_of_object(obj): return (sys.getsizeof(obj)) object1 = 10 print(size_of_object(object1))"},{"instruction":"Create a Python program to download a website from the Internet and save it locally. Website to download: https://www.example.com","output":"import urllib.request url = 'https://www.example.com' try: response = urllib.request.urlopen(url) content = response.read() filename = url.split('/')[-1] with open(filename, 'w') as file: file.write(content) except Exception as e: print(e)"},{"instruction":"Create a class in Python which can convert any given Fahrenheit temperature to degree Celsius.","output":"class FahrenheitToCelsius: def __init__(self, temp_fahrenheit): self.temp_fahrenheit = temp_fahrenheit def fahrenheit_to_celsius(self): temp_celsius = (self.temp_fahrenheit - 32) * 5 / 9 return temp_celsius"},{"instruction":"Create a neural network with two layers using Keras, a Python library for deep learning.","output":"import keras from keras.models import Sequential from keras.layers import Dense # Define the model model = Sequential() model.add(Dense(8, input_dim=6, activation='relu')) model.add(Dense(4, activation='softmax')) model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"},{"instruction":"Compute the Fibonacci sequence of numbers up to 10 terms using a recursive function in Python.","output":"Function in Python to compute the Fibonacci sequence of numbers up to 10 terms using a recursive method."},{"instruction":"Create a web scraper application in Python to retrieve the title, author and publication date of books from Amazon. Not applicable","output":"import requests from bs4 import BeautifulSoup # the URL of the page to scrape url = 'https://www.amazon.com/books-used-books-textbooks/b/ref=sv_b_5?ie=UTF8&node=283155' # download the HTML of the page r = requests.get(url) html = r.text # create a BeautifulSoup object soup = BeautifulSoup(html, 'html.parser') # find all elements with the desired info books = soup.find_all('div', {'class': 'a-row a-spacing-mini'}) # create an output file outfile = open('output.txt', 'w', encoding='utf-8') # loop through each book for book in books: # get the title title = book.find('a', {'class': 'a-link-normal a-text-normal'}).text # get the author author = book.find('span', {'class': 'a-size-small a-color-secondary'}).text # get the publication date date_string = book.find('span', {'class': 'a-size-small a-color-secondary a-text-normal'}).text date = date_string.split('on')[1] # write the info to the file outfile.write(title + ',' + author + ',' + date + 'n') # close the output file outfile.close()"},{"instruction":"Generate all permutations of a string in Python.","output":"\\"\\"\\" Generate all permutations of a string in Python. \\"\\"\\" def permutations(string): if len(string) == 1: return string perm_list = [] # resulting list for perm in permutations(string[1:]): for i in range(len(string)): perm_list.append(perm[:i] + string[0:1] + perm[i:]) return perm_list string = \\"ABC\\" permutations = permutations(string) print(permutations) # Output: # ['ABC', 'ACB', 'BAC', 'BCA', 'CAB', 'CBA']"},{"instruction":"Create a function in Python to solve the following constraint problem. Given two arrays of integers, find the number of elements in the intersection of the two sets.","output":"def intersection(arr1,arr2): result = 0 resultSet = set(arr1) & set(arr2) result = len(resultSet) return result"},{"instruction":"Write a function in Python that takes two parameters, an integer and a list of strings, and returns a modified list of strings. int: 2 list: [Hello, World]","output":"def modified_list(num, lst): modified_list = [] for item in lst: modified_list.append(str(num) + item) return modified_list print(modified_list(2, [\\"Hello\\", \\"World\\"])) # Output: [\\"2Hello\\", \\"2World\\"]"},{"instruction":"Create a Python program to remove any items from a given list that are less than 5. [1, 4, 6, 8, 10, 15, 20]","output":"my_list = [1, 4, 6, 8, 10, 15, 20] filtered_list = [item for item in my_list if item >= 5] print(filtered_list) # Output: [6, 8, 10, 15, 20]"},{"instruction":"Python, create a function to identify whether a given number is even or odd. Number: 21","output":"def is_odd(n): if(n % 2 == 0): return \\"Even\\" else: return \\"Odd\\" print(is_odd(21)) # Outputs: \\"Odd\\""},{"instruction":"mplement a function in Python to take a string of comma separated numbers and return the average of the numbers. 3, 4, 5, 6, 7","output":"def calculate_average(nums): nums_list = nums.split(\\",\\") total = 0 for num in nums_list: total += float(num) return total / len(nums_list) # test code print(calculate_average(\\"3, 4, 5, 6, 7\\")) # should print 5.0"},{"instruction":"Generate a Python function that takes two threedimensional vectors as parameters and computes the magnitude of the cross product. Not applicable","output":"def cross_product_magnitude(vector_a, vector_b): \\"\\"\\" Calculate the magnitude of the cross product of two 3D vectors \\"\\"\\" vector_a_x, vector_a_y, vector_a_z = vector_a vector_b_x, vector_b_y, vector_b_z = vector_b # Calculate the cross product cross_x = vector_a_y * vector_b_z - vector_a_z * vector_b_y cross_y = vector_a_z * vector_b_x - vector_a_x * vector_b_z cross_z = vector_a_x * vector_b_y - vector_a_y * vector_b_x # Calculate the magnitude magnitude = math.sqrt(cross_x ** 2 + cross_y ** 2 + cross_z ** 2) return magnitude"},{"instruction":"Develop a Python program to check if a list contains any duplicates nums = [1, 4, 5, 1]","output":"def contains_duplicates(nums): seen = set() for num in nums: if num in seen: return True seen.add(num) return False if __name__ == '__main__': nums = [1, 4, 5, 1] contains = contains_duplicates(nums) if contains: print('The list contains duplicates.') else: print('The list doesn't contain duplicates.')"},{"instruction":"Write a Python algorithm to calculate which three numbers in a given list add up to a given sum. A list of integers: [1, 3, 5, 7, 10, 2, 4, 8] A sum: 15","output":"def three_sum(list_of_integers, target): results = [] for i in range(len(list_of_integers)): for j in range(i+1, len(list_of_integers)): for k in range(j+1, len(list_of_integers)): if list_of_integers[i] + list_of_integers[j] + list_of_integers[k] == target: results.append([list_of_integers[i], list_of_integers[j], list_of_integers[k]]) return results list_of_integers = [1, 3, 5, 7, 10, 2, 4, 8] target = 15 print(three_sum(list_of_integers, target)) # Output: [[5, 7, 3], [8, 4, 3]]"},{"instruction":"Given two lists of integers, write a python function that returns a list of all common elements shared between them.","output":"def common_elements(list1, list2): return list(set(list1) & set(list2))"},{"instruction":"Develop a Python function to classify place names. place_name = New York City","output":"def get_place_type(place_name): # Split the place name into its constituent parts parts = place_name.split() # Initialize a variable for the type of place place_type = None # Check for certain keywords to indicate the place type if 'City' in parts: place_type = 'City' elif 'Town' in parts: place_type = 'Town' elif 'Village' in parts: place_type = 'Village' elif 'River' in parts: place_type = 'River' elif 'Mountain' in parts: place_type = 'Mountain' elif 'Island' in parts: place_type = 'Island' # Return the detected place type return place_type"},{"instruction":"Create a chatbot in Python that can answer questions about information stored in a database. Example database with tables for categories, products, and orders.","output":"# import necessary modules import sqlite3 import random # establish connection to database conn = sqlite3.connect('database.db') cursor = conn.cursor() # specify initial message # and list of greetings message = 'Hello, how can I help you?' greetings = ['hi', 'hello', 'hey', 'hi there'] # define a function to get # appropriate response def getResponse(user_input): # if user input is in greetings if user_input.lower() in greetings: response = random.choice(greetings) # if user input is a question elif user_input.endswith('?'): # execute query to database query = 'SELECT * FROM products' cursor.execute(query) record = cursor.fetchall() products = [record[i][1] for i in range(len(record))] # provide appropriate response if user_input in products: response = 'Yes, we have this product in stock!' else: response = 'Sorry, we do not have this product.' # if user input is any statement else: response = 'I can answer questions about our products, try asking me something!' # return the response return response # main loop to continuously prompt user while True: # display initial message print('BOT:', message) # get user input user_input = input('USER: ').lower() # display bot response message = getResponse(user_input) print('BOT:', message)"},{"instruction":"Create an algorithm in Python to merge multiple dictionaries d1 = {'a': 1, 'b': 2} d2 = {'c': 3, 'd': 4}","output":"def merge_dicts(dicts): results = {} for d in dicts: results.update(d) return results"},{"instruction":"Create a program in Python to accept user input and sort the user input in ascending order. 2, 7, 4, 5","output":"user_list = [2, 7, 4, 5] sorted_list = sorted(user_list) print(sorted_list) # Output: [2, 4, 5, 7]"},{"instruction":"Generate a forloop in Python that prints out the numbers from 1 to 10","output":"for i in range(1, 11): print(i)"},{"instruction":"Given a list of integers, write a Python program to print the latest 3 largest numbers. [5, 1, 10, 25, 74, 17, 2]","output":"def print_largest_three_numbers(numbers): numbers.sort(reverse=True) print(*numbers[:3], sep = \\", \\") print_largest_three_numbers([5, 1, 10, 25, 74, 17, 2]) Output: 74, 25, 17"},{"instruction":"Rewrite the following Python script as an SQL query. a = 1 while a < 6: print(a) a = a + 1","output":"SELECT * FROM (SELECT @curRow := @curRow + 1 AS row_number FROM (SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 ) AS t1 CROSS JOIN (SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 ) AS t2 CROSS JOIN (SELECT @curRow := 0) AS t3 ) AS numbers WHERE row_number < 6;"},{"instruction":"Write a Python program to separate the given string into a list of words. string=This is a test string","output":"# Split the string into words words = string.split(' ') # Print the list of words print(words) # Output: ['This', 'is', 'a', 'test', 'string']"},{"instruction":"Generate a Python function for computing a factorial.","output":"def factorial(n): if n == 0: return 1 return n * factorial(n-1)"},{"instruction":"Create a basic webscraper using Python and Scrapy. The scraper should be able to parse the HTML, extract and store titles from a news website. Not applicable","output":"import scrapy class NewsSpider(scrapy.Spider): name = 'news' start_urls = [ 'http://www.example.com/news/', ] def parse(self, response): for article in response.css('article'): yield { 'title': article.css('h2::text').get(), }"},{"instruction":"Write a Python program to find the maximum sum of a contiguous subarray in a given array of integers. [2,1,3,4,1,2,1,5,4].","output":"def max_sum_contiguous_subarray(arr): max_sum = 0 curr_sum = 0 for i in range(len(arr)): curr_sum = max(curr_sum + arr[i], arr[i]) max_sum = max(max_sum, curr_sum) return max_sum"},{"instruction":"Write an objectoriented program in python to represent a booking system.","output":"#Class to represent a booking system class Booking: def __init__(self, name, date, time): self.name = name self.date = date self.time = time def view_details(self): print(\\"Name: \\", self.name) print(\\"Date: \\", self.date) print(\\"Time: \\", self.time) def edit_details(self): self.name = input(\\"Enter new name: \\") self.date = input(\\"Enter new date: \\") self.time = input(\\"Enter new time: \\") def cancel_booking(self): self.name = None self.date = None self.time = None print(\\"Booking cancelled successfully.\\")"},{"instruction":"Create a program to print the following ASCII art using python. ( _ _ ) | o o | | ^ | | _/ |","output":"print(' ( _ _ )') print(' | o o |') print(' | ^ |') print(' | _/ |')"},{"instruction":"Write a Python program to validate a US phone number.","output":"def is_valid_phone_number(phone): if len(phone) != 12: return False if phone[3] != '-' or phone[7] != '-': return False for i in range(0, 12): if i != 3 and i != 7: if not phone[i].isdecimal(): return False return True result = is_valid_phone_number(\\"123-456-7890\\") print(result)"},{"instruction":"Create a Python script for a webbased chatbot which takes the user's name and responds with a greeting Not applicable","output":"name = input(\\"What is your name? \\") # greeting the user print(f\\"Hello {name}, nice to meet you!\\")"},{"instruction":"Design a serverless function to send an email using a specified SMTP in Python. To address: recipient@example.com Subject: Test Email Body: Hi, this is a test email.","output":"import smtplib from email.message import EmailMessage def send_email(to_address, subject, body): # Set SMTP server server = smtplib.SMTP('smtp.example.com') # Create the message message = EmailMessage() message['Subject'] = subject message['From'] = from_address message['To'] = to_address message.set_content(body) # Send the message server.send_message(message) server.quit()"},{"instruction":"Design and implement a Python class that stores words and their meanings as a dictionary.","output":"class Dictionary (object): def __init__(self): self.data = {} #initialize empty dictionary def add(self, word, definition): self.data[word] = definition #add a new word, definition pair def remove(self, word): if word in self.data: del self.data[word] #removes a word, definition pair def print_all(self): for word in self.data.keys(): print(word + ':', self.data[word]) #prints all words, definitions stored"},{"instruction":"Create an algorithm in Python for the selection sort algorithm.","output":"def selection_sort(arr): # Iterate through array indices for i in range(len(arr) - 1): smallest_index = i # Iterate through unsorted elements for j in range(i + 1, len(arr)): if arr[j] < arr[smallest_index]: smallest_index = j # Swaps elements arr[i], arr[smallest_index] = arr[smallest_index], arr[i]"},{"instruction":"Create a Python script for calculating the top 10 most frequent words in a document. The quick brown fox jumped over the lazy dog.","output":"from collections import Counter document = 'The quick brown fox jumped over the lazy dog.' # Split the string into words words = document.split(' ') # Count word frequency word_freq = Counter(words) # Print the top 10 words and their frequencies for word, count in word_freq.most_common(10): print('{}: {}'.format(word, count)) Output: the: 2 quick: 1 brown: 1 fox: 1 jumped: 1 over: 1 lazy: 1 dog.: 1"},{"instruction":"Write a python program to detect whether a given string is a palindrome or not.","output":"def isPalindrome(string): left, right = 0, len(string)-1 while right >= left: if not string[left] == string[right]: return False left += 1 right -= 1 return True"},{"instruction":"Develop an algorithm in Python to compute the intersection of two lists. list_a = [3, 5, 6, 9] list_b = [4, 5, 8, 9]","output":"def findIntersection(list_a, list_b): intersection_list = [] for element in list_a: if element in list_b: intersection_list.append(element) return intersection_list # Main list_a = [3, 5, 6, 9] list_b = [4, 5, 8, 9] intersection_list = findIntersection(list_a, list_b) print('Intersection of list_a and list_b:', intersection_list)"},{"instruction":"Create a Python function that takes in a string and an integer and returns a string with the input string repeated the number of times indicated by the input integer. string = ‘Hello’ int = 3","output":"def repeat_string(s, n): return s*n print(repeat_string('Hello', 3)) # Output: 'HelloHelloHello'"},{"instruction":"Create a simple calculator application in Python 3.","output":"def calculator(): while True: print(\\"Options:\\") print(\\"Enter 'add' to add two numbers\\") print(\\"Enter 'subtract' to subtract two numbers\\") print(\\"Enter 'quit' to end the program\\") user_input = input(\\": \\") if user_input == \\"quit\\": break elif user_input == \\"add\\": num1 = float(input(\\"Enter a number: \\")) num2 = float(input(\\"Enter another number: \\")) result = str(num1 + num2) print(\\"The answer is \\" + result) elif user_input == \\"subtract\\": num1 = float(input(\\"Enter a number: \\")) num2 = float(input(\\"Enter another number: \\")) result = str(num1 - num2) print(\\"The answer is \\" + result) else: print(\\"Unknown input\\") calculator()"},{"instruction":"Develop a Python program to find out all the perfect numbers between 1 and n. n = 30","output":"def perfect_numbers(n): perfect_nums = [] for num in range(1, n+1): sum = 0 for i in range(1, num): if num % i == 0: sum += i if sum == num: perfect_nums.append(num) return perfect_nums n = 30 print(perfect_numbers(n))"},{"instruction":"Generate a Python class to represent a person's medical information. The class should have fields for name, age, weight, height, and medical conditions. Not applicable","output":"class Patient: def __init__(self, name, age, weight, height, medical_conditions): self.name = name self.age = age self.weight = weight self.height = height self.medical_conditions = medical_conditions def get_bmi(self): return self.weight / (self.height * self.height) patient = Patient(\\"John Doe\\", 30, 180, 1.80, [\\"diabetes\\", \\"hypertension\\"]) print(patient.get_bmi()) # 22.5"},{"instruction":"Create a python program to print the square root of an integer.","output":"def square_root(n): \\"\\"\\"This function takes an integer n and prints its square root. Args: n (int): The integer to calculate the square root of. Returns: None \\"\\"\\" import math print(math.sqrt(n))"},{"instruction":"Write code in Python to find the frequency of words in a given string. String: The apple is red and the banana is yellow.","output":"str = \\"The apple is red and the banana is yellow.\\" wordfreq = {} for rawword in str.lower().split(): word = rawword.replace(\\".\\",\\"\\") if word not in wordfreq: wordfreq[word] = 0 wordfreq[word] += 1 print(\\"Frequency of the words:\\") for key, value in wordfreq.items(): print(key, value)"},{"instruction":"Create a function in Python which can take in a string and capitalize the first character of the string. mystring = hello world","output":"def capitalize_first_character(mystring): return mystring[0].upper() + mystring[1:]"},{"instruction":"Create a Python script to extract data from HTML tags. <div class='datacontainer'> <span>John Smith</span> <span>45 years old</span> <span>Communications Engineer</span> </div>","output":"from bs4 import BeautifulSoup html_code = ''' <div class='data-container'> <span>John Smith</span> <span>45 years old</span> <span>Communications Engineer</span> </div> ''' soup = BeautifulSoup(html_code, 'html.parser') name = soup.find('span', text='John Smith').text age = soup.find('span', text='45 years old').text job_title = soup.find('span', text='Communications Engineer').text print(f'Name: {name}, Age: {age}, Job Title: {job_title}')"},{"instruction":"Create a Python code to do text classification based on a provided dataset.","output":"import pandas as pd import numpy as np def TextClassifier(x_train, y_train, x_test, y_test): from sklearn.naive_bayes import MultinomialNB model = MultinomialNB() model.fit(x_train, y_train) y_pred = model.predict(x_test) accuracy = np.mean(y_test == y_pred) return accuracy"},{"instruction":"Create a Python program that encodes a given passage using the Caesar Cipher algorithm. plaintext = This is a secret message. caesar_key = 0","output":"def caesar_cipher(plaintext, caesar_key): ciphertext = \\"\\" for char in plaintext: if char.isalpha(): ascii_char = ord(char) - caesar_key if ascii_char < 97: ascii_char += 26 ciphertext += chr(ascii_char) else: ciphertext += char return ciphertext plaintext = \\"This is a secret message.\\" caesar_key = 0 encoded_message = caesar_cipher(plaintext, caesar_key) print(encoded_message)"},{"instruction":"Write an algorithm in Python to determine the largest number in an array. arr = [10, 8, 12, 4, 6]","output":"def find_max(arr): max_val = arr[0] for i in range(1, len(arr)): if arr[i] > max_val: max_val = arr[i] return max_val # Driver code arr = [10, 8, 12, 4, 6] result = find_max(arr) print(result) # Output: 12"},{"instruction":"Create a Python script to calculate the monthly mortgage payment. loan_amount = 120000 annual_interest_rate = 3.25 loan_duration_in_years = 30","output":"def monthly_mortgage_payment(loan_amount, annual_interest_rate, loan_duration_in_years): monthly_interest_rate = annual_interest_rate / 12 number_of_payments = loan_duration_in_years * 12 monthly_payment = loan_amount * (monthly_interest_rate / (1 - (1 + monthly_interest_rate)**(-number_of_payments))) return monthly_payment print(monthly_mortgage_payment(loan_amount, annual_interest_rate, loan_duration_in_years)) # Output -> 585.89"},{"instruction":"Generate a correctly formatted python program that sorts an array of integers","output":"def sort_arr(arr): for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] > arr[j]: arr[i], arr[j] = arr[j], arr[i] return arr"},{"instruction":"Write a Python code for sorting a list of integers in ascending order. [5,2,7,3,1]","output":"list=[5,2,7,3,1] list.sort() print(list)"},{"instruction":"Generate a Python program that accepts an integer, n, and prints a right triangle made of asterisks with the base of n.","output":"n = int(input(\\"Enter an integer: \\")) for i in range(n): for j in range(i + 1): print(\\"*\\", end=\\"\\") print(\\"\\")"},{"instruction":"Create a Python script to evaluate a given polynomial equation. 2x2 + 3x + 4","output":"def evaluate_polynomial(eqn): x = int(input(\\"Enter the value of x: \\")) result = 0 for i in range(len(eqn)): elem = eqn[i] if elem[-1] == 'x': coefficient = int(elem[:-1]) if i == 0: result += coefficient * (x ** 2) elif i == 1: result += coefficient * x else: result += coefficient else: result += int(elem) return result print(evaluate_polynomial(\\"2x2 + 3x + 4\\"))"},{"instruction":"Optimize a recursive Fibonacci sequence program written in Python. def Fibonacci(n): if n <= 0: return 0 elif n == 1: return 1 else: return Fibonacci(n1)+Fibonacci(n2)","output":"def Fibonacci(n): if n <= 0: return 0 elif n == 1: return 1 else: a = 0 b = 1 for i in range(2,n+1): c = a + b a = b b = c return b"},{"instruction":"Create a Python program to generate a random password string. This password string should include uppercase letters, lowercase letters, digits and symbols. Not applicable","output":"import random import string def generate_password(): # Generate a password of length 8 # with random uppercase, lowercase, digits and symbols length = 8 # Create a set of characters to choose from characters = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation password = \\"\\".join(random.choice(characters) for x in range(length)) return password print(generate_password())"},{"instruction":"Provide a Python program that takes a number as input, and calculates the factorial of that number. 5","output":"def factorial(num): if num == 0: return 1 else: return num * factorial(num-1) num = int(input(\\"Enter a number:\\")) print(factorial(num))"},{"instruction":"Write a python program that implements the following function: Given two sorted lists, return a merged sorted list.","output":"def merge_sorted_lists(list1, list2): merged_list = [] while list1 and list2: if list1[0] < list2[0]: merged_list.append(list1.pop(0)) else: merged_list.append(list2.pop(0)) merged_list += list1 + list2 return merged_list"},{"instruction":"Write a Python script to implement a linear search algorithm. Data: [5, 4, 2, 8, 7] Key: 7","output":"def linear_search(data, key): for i in range(len(data)): if data[i] == key: return i return -1 data = [5, 4, 2, 8, 7] key = 7 result = linear_search(data, key) if result != -1: print(\\"Element found at \\" + str(result)) else: print(\\"Element not found\\")"},{"instruction":"Categorize the following code snippets into their respective languages: def childName(name): print('The child will be called', name)","output":"Python"},{"instruction":"To install djangotwilio, follow these steps: 1. Ensure that you have the required dependencies installed: setuptools>=36.2, twilio>=6.3.0,<7, djangophonenumberfield>=0.6, and phonenumbers>=8.10.22. 2. Determine which version of Django you are using and add the appropriate version to the INSTALL_PYTHON_REQUIRES list. 3. Run the setup.py file to install djangotwilio. 4. Verify that djangotwilio has been installed by checking the list of installed packages.","output":"# -*- coding: utf-8 -*- from __future__ import unicode_literals, absolute_import from os.path import abspath, dirname, join, normpath from setuptools import find_packages, setup import sys INSTALL_PYTHON_REQUIRES = [] # We are intending to keep up to date with the supported Django versions. # For the official support, please visit: # https://docs.djangoproject.com/en/3.0/faq/install/#what-python-version-can-i-use-with-django and you may change the version in the URL to suit your needs, and we will try to update that here too as we upgrade with django. if sys.version_info[1] == 5: # py3.5 can run 1.11 < 2.2 django_python_version_install = 'Django>=2.2,<3.0', INSTALL_PYTHON_REQUIRES.append(django_python_version_install) elif sys.version_info[1] == 6: # py3.6 can run 1.11 < 3.1 (likely will be <4.0) django_python_version_install = 'Django>=2.2,<3.2', INSTALL_PYTHON_REQUIRES.append(django_python_version_install) elif sys.version_info[1] == 7: # py3.7 is 1.11.17 < 3.1 (likely will be <4.0) django_python_version_install = 'Django>=2.2,<3.2' INSTALL_PYTHON_REQUIRES.append(django_python_version_install) elif sys.version_info[1] == 8: # py3.8 is 2.2.8 < 3.1 (likely will be <4.0) django_python_version_install = 'Django>=2.2.8,<3.2' INSTALL_PYTHON_REQUIRES.append(django_python_version_install) setup( # Basic package information: name='django-twilio', version='0.13.1.post0', packages=find_packages(), # Packaging options: zip_safe=False, include_package_data=True, # Package dependencies: install_requires=[ 'setuptools>=36.2', 'twilio>=6.3.0,<7', 'django-phonenumber-field>=0.6', 'phonenumbers>=8.10.22', ] + INSTALL_PYTHON_REQUIRES, # Metadata for PyPI: author='Randall Degges', author_email='rdegges@gmail.com', maintainer=\\"Jason Held\\", maintainer_email=\\"jasonsheld@gmail.com\\", license='UNLICENSE', url='https://github.com/rdegges/django-twilio', keywords='twilio telephony call phone voip sms django django-twilio', description='Build Twilio functionality into your Django apps.', long_description=open( normpath(join(dirname(abspath(__file__)), 'README.rst')) ).read(), project_urls={ \\"Documentation\\": \\"https://django-twilio.readthedocs.io/en/latest/\\", \\"Code\\": \\"https://github.com/rdegges/django-twilio\\", \\"Tracker\\": \\"https://github.com/rdegges/django-twilio/issues\\", }, classifiers=[ 'Framework :: Django', 'Framework :: Django :: 2.2', 'Framework :: Django :: 3.0', 'Intended Audience :: Developers', 'License :: Public Domain', 'Operating System :: OS Independent', 'Programming Language :: Python', 'Programming Language :: Python :: 3', 'Programming Language :: Python :: 3 :: Only', 'Programming Language :: Python :: 3.5', 'Programming Language :: Python :: 3.6', 'Programming Language :: Python :: 3.7', 'Programming Language :: Python :: 3.8', 'Programming Language :: Python :: Implementation :: CPython', 'Programming Language :: Python :: Implementation :: PyPy', 'Topic :: Internet :: WWW/HTTP', ] )"},{"instruction":"Build a function to sort an array of words by their length in Python.","output":"def sort_by_length(words): return sorted(words, key=len)"},{"instruction":"Generate a Python code to compute the area of a triangle given its three sides. s1 = 3 s2 = 4 s3 = 5","output":"def calculate_area(s1, s2, s3): # calculate the semi-perimeter s = (s1 + s2 + s3) / 2 # calculate area using Heron's formula area = (s*(s-s1)*(s-s2)*(s-s3)) ** 0.5 return area if __name__==\\"__main__\\": s1 = 3 s2 = 4 s3 = 5 area = calculate_area(s1, s2, s3) print(\\"Area of triangle is: {:.2f}\\".format(area))"},{"instruction":"Create a Python script which takes in a sentence and prints the 2nd and 5th words. The quick brown fox jumped over the lazy dog","output":"sentence = \\"The quick brown fox jumped over the lazy dog\\" words = sentence.split(' ') # 2nd and 5th words print(words[1] + \\" \\" + words[4])"},{"instruction":"Generate a Python function to generate an equation with given coefficients and variables. coefficients: [2, 3, 1], variables: [x, y, z]","output":"def generate_equation(coefficients, variables): equation = \\"\\" for i, coeff in enumerate(coefficients): equation += str(coeff) + variables[i] + \\" + \\" equation = equation[:-3] return equation"},{"instruction":"mplement a cost function with two parameters in Python.","output":"def cost_function(x, y): return (x**2 + y**2)"},{"instruction":"Create a Python program to generate a Shamir's Secret Sharing Scheme implementation with a minimum of 8 shares. Not applicable","output":"import sys import secrets from typing import List def split_secret(secret: bytes, nb_shares: int, min_required: int) -> List[int]: # Generate random prime r = secrets.randbelow(sys.maxsize) while not is_prime(r): r = secrets.randbelow(sys.maxsize) # Generate random coefficients coefficients = [secret] + [ secrets.randbelow(r) for i in range(min_required-1) ] # Compute the shares shares = [] for i in range(1, nb_shares + 1): val = coefficients[0] for e, c in enumerate(coefficients[1:]): val += c * pow(i, e+1, r) shares.append(val) return shares def is_prime(x): return pow(2, x-1, x) == 1 # Split secret secret = b'ABCDEFGH' shares = split_secret(secret, 8, 5) print(shares)"},{"instruction":"Create a Python application to predict wine quality. The application should use the Wine Quality dataset from UC Irvine and build a predictive model using the kNN algorithm. URL of the dataset: https://archive.ics.uci.edu/ml/machinelearningdatabases/winequality/winequality.d","output":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier # read in data wine_data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality.data') X = wine_data.drop(columns=['quality']) y = wine_data['quality'] # split into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42) # initialize model and fit to training data knn = KNeighborsClassifier() knn.fit(X_train, y_train) # predict on test set y_pred = knn.predict(X_test) # score the model score = knn.score(X_test, y_test) print(score)"},{"instruction":"Debug the following Python program to print the given output. a = [3,4,6,2,1] for x in a: print(x) Expected Output: 1 2 3 4 6","output":"a = [3,4,6,2,1] for x in a: print(x) a.sort() for x in a: print(x) Output: 1 2 3 4 6"},{"instruction":"Propose a Pythonic solution to the following code # List of nonempty strings items = ['apple', 'banana', 'cat', 'dog', 'elephant'] for i in range(len(items)): print('item ' + str(i) + ' is ' + items[i])","output":"# List of non-empty strings items = ['apple', 'banana', 'cat', 'dog', 'elephant'] for i, item in enumerate(items): print('item ' + str(i) + ' is ' + item)"},{"instruction":"Write a classbased calculator in Python and implement basic operations such as addition, subtraction, multiplication, and division.","output":"class Calculator: def __init__(self): self.result = 0 def add(self, num): self.result += num return self.result def subtract(self, num): self.result -= num return self.result def multiply(self, num): self.result *= num return self.result def divide(self, num): self.result /= num return self.result"},{"instruction":"Given a pandas dataframe of salaries, write a python program that takes the dataframe and filters out employees whose salary is below mean salary of the whole dataset. import pandas as pd salaries = pd.DataFrame({ 'name': ['John','Cathy','Michael','Steve', 'Tina','Paul','Brunette'], 'salary': [25000, 74000 , 80000, 150000, 71000, 59000, 64000] }, columns=['name', 'salary'])","output":"import pandas as pd # calculate the mean salary mean_salary = salaries['salary'].mean() # filter out employees whose salary is below the mean filtered_salaries = salaries[salaries['salary'] >= mean_salary] # print the filtered data print(filtered_salaries)"},{"instruction":"Program a function in Python that creates all substrings of a given string. The string is create.","output":"def createSubstrings(string): length = len(string) subString = [] # Loops through the string # and the length of substring to be formed for i in range(length): for j in range(i + 1, length + 1): subString.append(string[i:j]) return subString"},{"instruction":"Design a genetic algorithm in Python to maximize a given objective function.","output":"import random def genetic_algorithm(objective_func, pop_size, max_iters, elitism_ratio): population = [random.randint(0, 100) for _ in range(pop_size)] # Iterate through the generations for _ in range(max_iters): # Score the current population population_scores = [objective_func(num) for num in population] # Select the best individuals and breed them elite_length = int(elitism_ratio * pop_size) elite_indices = sorted(range(len(population_scores)), key=lambda k: population_scores[k], reverse=True)[:elite_length] elite_population = [population[i] for i in elite_indices] parent_pool = [population_scores.index(score) for score in population_scores if population_scores.index(score) not in elite_indices] breed_length = pop_size - len(elite_indices) breed_children = [gene_crossover(population[i], population[j]) for i, j in zip(random.sample(parent_pool, breed_length // 2), random.sample(parent_pool, breed_length // 2))] + elite_population # Apply mutation for i in range(len(breed_children)): child = gene_mutation(breed_children[i]) breed_children[i] = child population = breed_children return max(population_scores)"},{"instruction":"Design a function in Python that checks whether a number is an Armstrong number or not. n = 1634","output":"def isArmstrongNumber(x): sum = 0 order = len(str(x)) temp = x while temp > 0: digit = temp % 10 sum += digit ** order temp //= 10 # If n is equal to the sum # of its digits raised to the power # of the number of digits if x == sum: return True else: return False # Driver Program n = 1634 if isArmstrongNumber(n): print(\\"Yes\\") else: print(\\"No\\") # Output:Yes"},{"instruction":"Create a Python script to generate an XML sitemap of a website. Example of a website URL","output":"import requests from bs4 import BeautifulSoup from xml.dom import minidom # Get the website content url = \\"http://example.com\\" response = requests.get(url) soup = BeautifulSoup(response.text, \\"html.parser\\") # Create the XML document doc = minidom.Document() root = doc.createElement('urlset') root.setAttribute(\\"xmlns\\", \\"http://www.sitemaps.org/schemas/sitemap/0.9\\") # Parse the website pages for link in soup.find_all('a'): page = doc.createElement('url') page.appendChild(doc.createElement('loc')).appendChild(doc.createTextNode(link.get('href'))) root.appendChild(page) # Generate the file doc.appendChild(root) filename = \\"sitemap.xml\\" f = open(filename,\\"w\\") doc.writexml(f, indent=\\" \\", addindent=\\" \\", newl='n') f.close()"},{"instruction":"Develop a Python AI model that can predict the stock prices of a company.","output":"import pandas as pd import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression from sklearn.svm import SVR from sklearn.preprocessing import MinMaxScaler #import the data data = pd.read_csv('stock-data.csv') #split the data X = data[['open', 'high', 'low', 'close']] y = data['Adj Close'] #scaling the data scaler = MinMaxScaler() X_scaled = scaler.fit_transform(X) #fitting the model model = SVR(kernel='rbf', gamma='scale') model.fit(X_scaled, y) #make prediction prediction = model.predict(X_scaled) #plotting the results plt.scatter(prediction, y) plt.xlabel('Predicted Stock Prices') plt.ylabel('Actual Stock Prices') plt.show()"},{"instruction":"Write a function in Python that takes three string arguments and returns a list where the elements are the concatenation of each pair of strings. str1 = This str2 = is str3 = fun","output":"def strJoin(str1, str2, str3): return [str1 + str2, str2 + str3, str1 + str3]"},{"instruction":"Create a Python Flask application for a simple todo list. The application should include models for a TodoItem (with fields for title, description, and priority) and a RESTful API which includes endpoints for creating, retrieving, updating, and deleting TodoItems. Not applicable","output":"from flask import Flask from flask_restful import Resource, Api, reqparse app = Flask(__name__) api = Api(app) parser = reqparse.RequestParser() parser.add_argument('title') parser.add_argument('description') parser.add_argument('priority', type=int) todoItems = [] class TodoItemList(Resource): def get(self): return todoItems def post(self): args = parser.parse_args() todoItem = {'title': args['title'], 'description': args['description'], 'priority': args['priority']} todoItems.append(todoItem) return todoItem, 201 class TodoItem(Resource): def get(self, todoItemId): return todoItems[todoItemId] def put(self, todoItemId): args = parser.parse_args() todoItem = {'title': args['title'], 'description': args['description'], 'priority': args['priority']} todoItems[todoItemId] = todoItem return todoItem def delete(self, todoItemId): del todoItems[todoItemId] return '', 204 api.add_resource(TodoItemList, '/todoitems') api.add_resource(TodoItem, '/todoitems/<int:todoItemId>') if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Generate a function in Python to edit a given string and capitalize a given character at a specific position. Hello World! and 5","output":"def capitalizeCharacter(s, pos): # Grab single characters from the string # starting from the given index result = s[:pos] + s[pos].upper() + s[pos + 1:] return result"},{"instruction":"Describe a data structure for efficient retrieval of data in Python.","output":"In Python, a dictionary is an ideal data structure for efficient retrieval of data as it provides constant time complexity for lookup operations. This is because a dictionary is a data structure which creates a mapping between a key and its associated value, allowing access to its value by simply providing the key. Moreover, Python dictionary allows the user to add, modify, delete and retrieve data entries in constant time and thus provides an efficient retrieval of data."},{"instruction":"Create a code that runs an orbital dynamics simulation in Python.","output":"import numpy as np import matplotlib.pyplot as plt # Define some constants G = 1 # Define some parameters m1 = 1 m2 = 1 # Initial conditions x1_0 = 0 # initial position of the first mass y1_0 = 0 vx1_0 = 1 # initial velocity of the first mass (along the x-axis) vy1_0 = 0 x2_0 = 3 # initial position of the second mass y2_0 = 0 vx2_0 = 0 # initial velocity of the second mass (along the x-axis) vy2_0 = 0.5 # Simulation parameters N = 1000 # number of steps dt = 1e-3 # time step # Create arrays to hold the x,y positions of the masses x1 = np.zeros(N) y1 = np.zeros(N) x2 = np.zeros(N) y2 = np.zeros(N) # Initial conditions x1[0] = x1_0 y1[0] = y1_0 x2[0] = x2_0 y2[0] = y2_0 # Simulation loop for i in range(N-1): # Calculate the force for the first mass dx = x2[i] - x1[i] dy = y2[i] - y1[i] r = np.sqrt(dx**2 + dy**2) Fx1 = G*m2/r**3 * dx Fy1 = G*m2/r**3 * dy # Calculate the force for the second mass dx = x1[i] - x2[i] dy = y1[i] - y2[i] r = np.sqrt(dx**2 + dy**2) Fx2 = G*m1/r**3 * dx Fy2 = G*m1/r**3 * dy # Update the positions x1[i+1] = x1[i] + vx1_0 * dt + Fx1 * dt**2 / 2 y1[i+1] = y1[i] + vy1_0 * dt + Fy1 * dt**2 / 2 x2[i+1] = x2[i] + vx2_0 * dt + Fx2 * dt**2 / 2 y2[i+1] = y2[i] + vy2_0 * dt + Fy2 * dt**2 / 2 # Plot the results plt.plot(x1, y1, label=\\"Mass 1\\") plt.plot(x2, y2, label=\\"Mass 2\\") plt.xlabel(\\"x-position\\") plt.ylabel(\\"y-position\\") plt.legend(loc=\\"lower right\\") plt.show()"},{"instruction":"Generate code to perform principal component analysis in Python.","output":"import numpy as np from sklearn.decomposition import PCA # Input array X = np.array([[1,2,3],[4,5,6],[7,8,9]]) # Create and fit the PCA pca = PCA(n_components=2) pca.fit(X) # Transform data into principal components X_pca = pca.transform(X) # Output the first principal component print(X_pca[:,0])"},{"instruction":"Design a program in Python to separate a list of numbers into even and odd numbers. [2, 3, 5, 6, 8, 9, 10]","output":"def separate_numbers(list): even_numbers = [] odd_numbers = [] for num in list: if num % 2 == 0: even_numbers.append(num) else: odd_numbers.append(num) return even_numbers, odd_numbers list = [2, 3, 5, 6, 8, 9, 10] even_numbers, odd_numbers = separate_numbers(list) print(\\"Even numbers in the list:\\", even_numbers) print(\\"Odd numbers in the list:\\", odd_numbers)"},{"instruction":"Python, generate a list of numbers from 0 to 30 with a step size of 5.","output":"my_list = list(range(0, 30, 5)) print(my_list)"},{"instruction":"Create a Python script to read in a list of numbers and find the maximum. [3, 4, 5, 7, 10]","output":"\\"\\"\\" Create a python script to read in a list of numbers and find the maximum \\"\\"\\" # define list of numbers numbers = [3, 4, 5, 7, 10] # define function to get maximum value in list def get_max(numbers): max_value = numbers[0] for i in numbers: if i > max_value: max_value = i return max_value # call the function max_value = get_max(numbers) # print the result print(\\"The maximum value is: {}\\".format(max_value))"},{"instruction":"Create a function in Python that takes an integer and prints all its factors. 60","output":"def find_factors(num): factors = [] for i in range(2, num): if (num % i == 0): factors.append(i) print(f\\"Factors of {num}: {factors}\\") find_factors(60)"},{"instruction":"Create an ML model for opinion mining in Python. Not applicable","output":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.linear_model import LogisticRegression # Load the data data = pd.read_csv('data.csv') # Define X and y X = data['text'] y = data['sentiment'] # Split into training and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 101) # Create a CountVectorizer vect = CountVectorizer(stop_words='english') # Fit and transform the training data X_train_vect = vect.fit_transform(X_train) # Transform the test data X_test_vect = vect.transform(X_test) # Fit a LogisticRegression model lr = LogisticRegression() lr.fit(X_train_vect, y_train) # Predict on the test set lr_pred = lr.predict(X_test_vect)"},{"instruction":"Develop a Python function to find the average of a list of positive numbers in the given range. [1, 2, 3, 4]","output":"def find_average(nums): sum = 0 count = 0 for num in nums: if num > 0: sum += num count += 1 return sum/count print (find_average([1, 2, 3, 4]))"},{"instruction":"Rewrite a Python script in Swift to generate random string of length n. Length: 8","output":"import Foundation func randomString(length: Int) -> String { let letters = \\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\" return String((0..<length).map { _ in letters.randomElement()! }) } let str = randomString(length: 8) print(str)"},{"instruction":"Develop a program to track the stock price using the Yahoo Finance API in Python Yahoo API token: abc123","output":"import yfinance as yf # Get the data of the stocks for the given ticker ticker = \\"AAPL\\" data = yf.Ticker(ticker) # The Yahoo API token token = \\"abc123\\" # Get historical data for the ticker data.history(period=\\"1mo\\", token=token) # Print the price print(data.history(token=token)[\\"Close\\"].iloc[-1})"},{"instruction":"Create a forloop in Python to iterate over a list and print each element. words = [these, are, some, words]","output":"words = [\\"these\\", \\"are\\", \\"some\\", \\"words\\"] for word in words: print(word)"},{"instruction":"Design a program in Python that takes two integers as inputs and outputs the greatest common divisor of the two integers.","output":"def gcd(a,b): # base case if (a == 0): return b if (b == 0): return a if (a == b): return a if (a > b): return gcd(a-b, b) return gcd(a, b-a)"},{"instruction":"Optimize your code in Python so that it runs faster.","output":"import time def slow_function(): # some code that takes a long time to run time.sleep(5) start_time = time.time() slow_function() elapsed_time = time.time() - start_time print(f\\"Function took {elapsed_time} seconds.\\") # Rewritten with optimisation import time from functools import lru_cache @lru_cache() def fast_function(): # some code that takes a long time to run time.sleep(5) start_time = time.time() fast_function() elapsed_time = time.time() - start_time print(f\\"Function took {elapsed_time} seconds.\\")"},{"instruction":"Create a functions to implement a linear search algorithm in Python.","output":"def linear_search(arr, key): pos = 0 while pos < len(arr): if arr[pos] == key: return pos pos += 1 return -1"},{"instruction":"Generate a RandomForest classifier in Python that predicts a binary outcome from three numerical input features. Not applicable","output":"import pandas as pd from sklearn.ensemble import RandomForestClassifier # Load the data data = pd.read_csv('data.csv') # Split the data into features and target X = data[['feature1','feature2','feature3']] y = data['outcome'] # Train the model clf = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42) clf.fit(X, y)"},{"instruction":"Create a Python program which takes in a string of text and returns all the unique words in the string. Hello, my name is John","output":"def find_unique_words(string): return set(string.split())"},{"instruction":"This code provides several utility functions. To use them, import the \`re\` module and this \`util\` module. The functions provided are: \`camelcase_to_slash(name)\`: converts a CamelCase string to a camel/case string. \`strip_charset(content_type)\`: strips the charset information from a ContentType string. \`extract_charset(content_type)\`: extracts the charset information from a ContentType string. \`get_charset(request)\`: extracts the charset information from the ContentType header of a request. \`parse_accept_header(accept)\`: parses the Accept header of a request and returns a list of media types and their q values, ordered by q values.","output":"# -*- coding: utf-8 -*- # util.py --- # # Created: Fri Dec 30 23:27:52 2011 (+0200) # Author: Janne Kuuskeri # import re charset_pattern = re.compile('.*;s*charset=(.*)') def camelcase_to_slash(name): \\"\\"\\" Converts CamelCase to camel/case code ripped from http://stackoverflow.com/questions/1175208/does-the-python-standard-library-have-function-to-convert-camelcase-to-camel-cas \\"\\"\\" s1 = re.sub('(.)([A-Z][a-z]+)', r'1/2', name) return re.sub('([a-z0-9])([A-Z])', r'1/2', s1).lower() def strip_charset(content_type): \\"\\"\\" Strip charset from the content type string. :param content_type: The Content-Type string (possibly with charset info) :returns: The Content-Type string without the charset information \\"\\"\\" return content_type.split(';')[0] def extract_charset(content_type): \\"\\"\\" Extract charset info from content type. E.g. application/json;charset=utf-8 -> utf-8 :param content_type: The Content-Type string (possibly with charset info) :returns: The charset or \`\`None\`\` if not found. \\"\\"\\" match = charset_pattern.match(content_type) return match.group(1) if match else None def get_charset(request): \\"\\"\\" Extract charset from the content type \\"\\"\\" content_type = request.META.get('CONTENT_TYPE', None) if content_type: return extract_charset(content_type) if content_type else None else: return None def parse_accept_header(accept): \\"\\"\\" Parse the Accept header todo: memoize :returns: list with pairs of (media_type, q_value), ordered by q values. \\"\\"\\" def parse_media_range(accept_item): \\"\\"\\" Parse media range and subtype \\"\\"\\" return accept_item.split('/', 1) def comparator(a, b): \\"\\"\\" Compare accept items a and b \\"\\"\\" # first compare q values result = -cmp(a[2], b[2]) if result is not 0: # q values differ, no need to compare media types return result # parse media types and compare them (asterisks are lower in precedence) mtype_a, subtype_a = parse_media_range(a[0]) mtype_b, subtype_b = parse_media_range(b[0]) if mtype_a == '*' and subtype_a == '*': return 1 if mtype_b == '*' and subtype_b == '*': return -1 if subtype_a == '*': return 1 if subtype_b == '*': return -1 return 0 if not accept: return [] result = [] for media_range in accept.split(\\",\\"): parts = media_range.split(\\";\\") media_type = parts.pop(0).strip() media_params = [] q = 1.0 for part in parts: (key, value) = part.lstrip().split(\\"=\\", 1) if key == \\"q\\": q = float(value) else: media_params.append((key, value)) result.append((media_type, tuple(media_params), q)) result.sort(comparator) return result # # util.py ends here"},{"instruction":"Classify programming language. Create a program to identify the programming language of a given code snippet. var x = 10; int y = 20;","output":"def classify_programming_language(code_snippet): # create a dictionary to store the keywords for each language language_keywords = { 'python': ['def', 'print'], 'java': ['public', 'static'], 'javascript': ['var', 'function'], 'c': ['int', 'printf'] } # go through each language in the dictionary and check if any of the language keywords exist in the code snippet for language, keywords in language_keywords.items(): if any(keyword in code_snippet for keyword in keywords): return language # if no language is identified, return None return None"},{"instruction":"Create an AI assistant in Python to detect whether a sentence is a question or not. Is this a question?","output":"import nltk sentence = \\"Is this a question?\\" words = nltk.word_tokenize(sentence) # Check if the sentence ends with a question mark if words[-1] == '?': print(\\"This is a question.\\") else: print(\\"This is not a question.\\")"},{"instruction":"Create a function in Python to take two numerical values and return true if one is divisible by the other. number1 = 10 number2 = 3","output":"def isDivisible(a, b): return a % b == 0 print(isDivisible(number1, number2)) #True"},{"instruction":"Find the most efficient Python code to print all the divisors of an input number. input = 28","output":"# Python Program to find the factors of a number # define a function def print_divisors(input): # find all factors of the input number for i in range(1, input + 1): if input % i == 0: print (i) # take input from the user input = 28 # print the divisors print_divisors(input)"},{"instruction":"Generate a Python script to convert cents to dollars.","output":"def convert_cents_to_dollars(cents): return cents / 100"},{"instruction":"Write a python function to print an array in reverse order","output":"def print_reverse(arr): for i in range(len(arr)-1, -1, -1): print(arr[i], end=\\" \\")"},{"instruction":"dentify the complexity of the following python sorting algorithms. numbers = [10, 5, 8, 7, 2, 9, 1]","output":"[Selection Sort]: O(n^2) [Insertion Sort] : O(n^2) [Merge Sort]: O(nlogn) [Quick Sort]: O(nlogn) [Heap Sort]: O(nlogn)"},{"instruction":"Create a python program to verify if two strings are an anagram. string1: silent string2: listen","output":"def isAnagram(str1, str2): str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # edge case if len(str1) != len(str2): return False count = {} for char in str1: if char in count: count[char] += 1 else: count[char] = 1 for char in str2: if char in count: count[char] -= 1 else: count[char] = 1 for val in count.values(): if val != 0: return False return True str1 = \\"silent\\" str2 = \\"listen\\" if isAnagram(str1, str2): print(\\"The two strings are anagrams\\") else: print(\\"The two strings are not anagrams\\")"},{"instruction":"Write a Python program to create a new list that contains all the elements of the given list multiplied by each other. nums = [1, 2, 3, 4]","output":"def multiply(nums): result = [] for i in range(len(nums)): for j in range(i+1, len(nums)): result.append(nums[i] * nums[j]) return result"},{"instruction":"Write a Python code to find the longest palindrome in the given string. abcbaacj","output":"def is_palindrome(string): left_pos = 0 right_pos = len(string) - 1 while right_pos >= left_pos: if not string[left_pos] == string[right_pos]: return False left_pos += 1 right_pos -= 1 return True def longest_palindrome(string): if len(string) <= 1: return string longest = \\"\\" for i in range(len(string)): for j in range(i+1, len(string)+1): substring = string[i:j] if is_palindrome(substring) and len(substring) > len(longest): longest = substring return longest string = \\"abcbaacj\\" print(\\"Original Strings:\\", string) long_palindrome = longest_palindrome(string) print(\\"Longest Palindrome is:\\", long_palindrome)"},{"instruction":"Write a function in Python that takes a list of integers and returns the sum of the even numbers in the list. [1, 2, 3, 4, 5, 6]","output":"def sum_even_integers(lst): total = 0 for num in lst: if num % 2 == 0: total += num return total print(sum_even_integers([1, 2, 3, 4, 5, 6])) # 12"},{"instruction":"Create a list expression and a set expression in Python that converts the given list to a set. list = [1, 2, 2, 3, 4, 4, 5]","output":"list_expression = set([x for x in list]) set_expression = set(list)"},{"instruction":"Generate a hashmap implementation in Python. The implementation should store keys and values, and be able to retrieve the value stored under the given key. Not applicable","output":"class HashMap: def __init__(self): self.map = {} def put(self, key, value): self.map[key] = value def get(self, key): return self.map.get(key)"},{"instruction":"Generate Python code for generating a random password of length 8.","output":"import random, string def randomPassword(length): # Generate a list of random characters gen_pass = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length)) return gen_pass random_password = randomPassword(8) print(random_password)"},{"instruction":"Develop an algorithm in Python for sorting the following array in ascending order. [9, 8, 11, 5]","output":"def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] array = [9, 8, 11, 5] bubble_sort(array) print(array)"},{"instruction":"Write a python code to get the maximum element from a given list. [7, 10, 5, 112, 0]","output":"def get_max_elem(nums): max_elem = nums[0] for num in nums: if num > max_elem: max_elem = num return max_elem"},{"instruction":"Develop a program in Python to merge multiple data sets from different sources into one single data set. Not applicable","output":"import pandas as pd # Load data sets data1 = pd.read_csv('data1.csv') data2 = pd.read_csv('data2.csv') data3 = pd.read_csv('data3.csv') # Merge data sets merged_data = pd.merge(data1, data2, on='ID') merged_data = pd.merge(merged_data, data3, on='ID') # Print data print(merged_data)"},{"instruction":"Write a Python program to create a dictionary with keys a, b, c and their respective values as 1, 2, 3.","output":"mydict = { 'a': 1, 'b': 2, 'c': 3 }"},{"instruction":"Generate code to analyze sentiment of a given text using the TextBlob Python library. Not applicable","output":"from textblob import TextBlob print('Enter your text:') text = input() blob = TextBlob(text) sentiment = blob.sentiment if sentiment.polarity > 0: print('Positive sentiment') elif sentiment.polarity == 0: print('Neutral sentiment') else: print('Negative sentiment')"},{"instruction":"Create a Python GTK+3 TreeView CellRenderText snippet that displays a list of countries with their population and continent. The snippet should include a ListStore model, a treeview with three columns (Country, Population, Continent), and a scrolled window. The Population column should be resizable and expand to use all the available space. The Population and Continent columns should use ellipsize. The scrolled window should have a shadow type of IN and a vertical scrollbar that is always visible.","output":"#!/usr/bin/env python3 # -*- coding: utf-8 -*- # Copyright (c) 2015 Jérémie DECOCK (http://www.jdhp.org) \\"\\"\\" This is a simple Python GTK+3 TreeView CellRenderText snippet. See: http://python-gtk-3-tutorial.readthedocs.org/en/latest/cellrenderers.html#cellrenderertext \\"\\"\\" from gi.repository import Gtk as gtk from gi.repository import Pango as pango # Countries, population (as in 2015) and continent. DATA_LIST = [(\\"China\\", 1370130000, \\"Asia\\"), (\\"India\\", 1271980000, \\"Asia\\"), (\\"United States\\", 321107000, \\"North America\\"), (\\"Indonesia\\", 255461700, \\"Asia\\"), (\\"Brazil\\", 204388000, \\"South America\\"), (\\"Pakistan\\", 189936000, \\"Asia\\"), (\\"Nigeria\\", 183523000, \\"Africa\\"), (\\"Bangladesh\\", 158425000, \\"Asia\\"), (\\"Russia\\", 146267288, \\"Eurasia\\"), (\\"Japan\\", 126880000, \\"Asia\\")] def main(): window = gtk.Window() window.set_default_size(300, 450) window.set_border_width(18) # Creating the ListStore model liststore = gtk.ListStore(str, int, str) for item in DATA_LIST: liststore.append(list(item)) # Creating the treeview and add the columns treeview = gtk.TreeView(liststore) for column_index, column_title in enumerate([\\"Country\\", \\"Population\\", \\"Continent\\"]): renderer = gtk.CellRendererText() column = gtk.TreeViewColumn(column_title, renderer, text=column_index) column.set_resizable(True) # Let the column be resizable # Use ellipsize for the \\"Population\\" and \\"Continent\\" columns if column_title in (\\"Population\\", \\"Continent\\"): renderer.set_property(\\"ellipsize\\", pango.EllipsizeMode.END) renderer.set_property(\\"ellipsize-set\\", True) if column_title == \\"Population\\": column.set_expand(True) # This column will use all the space left treeview.append_column(column) # Scrolled window scrolled_window = gtk.ScrolledWindow() scrolled_window.set_border_width(0) scrolled_window.set_shadow_type(gtk.ShadowType.IN) # should be gtk.ShadowType.IN, gtk.ShadowType.OUT, gtk.ShadowType.ETCHED_IN or gtk.ShadowType.ETCHED_OUT scrolled_window.set_policy(gtk.PolicyType.AUTOMATIC, gtk.PolicyType.ALWAYS) # should be gtk.PolicyType.AUTOMATIC, gtk.PolicyType.ALWAYS or gtk.PolicyType.NEVER scrolled_window.add(treeview) window.add(scrolled_window) window.connect(\\"delete-event\\", gtk.main_quit) # ask to quit the application when the close button is clicked window.show_all() # display the window gtk.main() # GTK+ main loop if __name__ == '__main__': main()"},{"instruction":"Create a Python dictionary of 10 words and their corresponding definitions.","output":"words = { 'algorithm': 'a set of steps used to solve a specific problem', 'function': 'a set of instructions that when followed produces the desired output', 'string': 'a sequence of characters', 'variable': 'a named value that will store data', 'integer': 'a whole number', 'float': 'a number with a decimal point', 'boolean': 'true or false', 'array': 'a data structure containing multiple values', 'dictionary': 'a data structure containing key-value pairs', 'loop': 'a construct used to iterate over a set of items' }"},{"instruction":"Create and edit a SQLite3 table in Python.","output":"import sqlite3 # create connection conn = sqlite3.connect(\\"example.db\\") c = conn.cursor() # create table c.execute(\\"\\"\\" CREATE TABLE IF NOT EXISTS example ( id INTEGER PRIMARY KEY, title TEXT, content TEXT ) \\"\\"\\") # insert row c.execute(\\"INSERT INTO example(title, content) VALUES (?,?)\\", (title, content)) # edit row c.execute(\\"UPDATE example SET content=? WHERE id=?\\", (new_content, id)) # commit changes conn.commit() # close connection conn.close()"},{"instruction":"Create a web scraping program in Python that can extract job listings from popular employment websites. URLs of popular employment websites.","output":"import requests import bs4 # Get the source code for the websites urls = ['https://www.indeed.com/', 'https://www.monster.com/'] sources = [requests.get(url).text for url in urls] # Parse the source code for job listings jobs = [] for source in sources: soup = bs4.BeautifulSoup(source, 'html.parser') jobs_tags = soup.find_all('div', {'class': 'job'}) for job_tag in jobs_tags: job = {} job['title'] = job_tag.find('h2').text.strip() job['location'] = job_tag.find('dd', {'class': 'location ft_location'}).text.strip() job['description'] = job_tag.find('p').text.strip() jobs.append(job) print(jobs)"},{"instruction":"Convert the following Python function into C++ def test_func(A, B): return A + B","output":"#include <iostream> int test_func(int A, int B) { return A + B; } int main() { int A = 10; int B = 20; std::cout << \\"The value of A + B = \\" << test_func(A, B) << std::endl; return 0; }"},{"instruction":"Write a Python program to count the number of vowels within a string.","output":"def count_vowels(string): count = 0 for char in string: if char in \\"aeiouAEIOU\\": count += 1 return count string = 'This is a test string for counting vowels.' vowel_count = count_vowels(string) print('Number of vowels in the string :', vowel_count)"},{"instruction":"Create a Python algorithm that classifies the Iris flowers dataset into three categories.","output":"from sklearn.datasets import load_iris from sklearn import tree import pandas as pd # Import dataset data = load_iris() # Split dataset into features and labels X = data.data y = data.target # Train decision tree model clf = tree.DecisionTreeClassifier() clf.fit(X, y) # Make predictions prediction = clf.predict(X) # Print accuracy and confusion matrix print(f'Accuracy: {clf.score(X, y)}') pd.crosstab(data.target, prediction, rownames=['Actual'], colnames=['Predicted'])"},{"instruction":"Approximate pi to 4 decimal places using Monte Carlo simulation in Python. Not applicable","output":"import random def approx_pi(n): circle_points = 0 square_points = 0 for _ in range(n): x = random.uniform(0, 1) y = random.uniform(0, 1) dist = x**2 + y**2 if dist <= 1: circle_points += 1 square_points +=1 pi = 4 * (circle_points/square_points) return round(pi, 4) print(approx_pi(1000))"},{"instruction":"Using the skeleton code provided, finish the code and make it a valid python script. #!/usr/bin/env python # skeleton.py # TODO: Write code here... if __name__ == __main__: p","output":"#!/usr/bin/env python # skeleton.py def functionA(): pass def functionB(): pass def main(): functionA() functionB() if __name__ == \\"__main__\\": main()"},{"instruction":"Design a Python method to find the largest number in an array of integers. [10, 10, 1, 100]","output":"def find_largest_number(nums): biggest = nums[0] for num in nums: if num > biggest: biggest = num return biggest nums = [-10, 10, 1, -100] print(find_largest_number(nums))"},{"instruction":"Create a Python script that makes an API call to Twitter and prints the last 10 tweets from a given account. The Twitter account should be @twitter","output":"import tweepy # enter your authentication details consumer_key = 'YOUR CONSUMER KEY' consumer_secret = 'YOUR CONSUMER SECRET' access_token = 'YOUR ACCESS TOKEN' access_token_secret = 'YOUR ACCESS TOKEN SECRET' auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) tweets = api.user_timeline(screen_name = 'twitter', count = 10, tweet_mode=\\"extended\\", include_rts=False) for tweet in tweets: print(tweet.full_text) print(\\"-------------------------------\\")"},{"instruction":"Write a function to calculate the total number of days between two dates in Python.","output":"from datetime import datetime def calculate_days_between(start_date, end_date): start_date = datetime.strptime(start_date, '%Y-%m-%d') end_date = datetime.strptime(end_date, '%Y-%m-%d') delta = end_date - start_date return delta.days"},{"instruction":"Write a script in Python for shuffling elements in an array. arr = [1, 2, 3, 4, 5]","output":"import random def shuffle(arr): random.shuffle(arr) return arr"},{"instruction":"Create a global alignment algorithm in Python using the NeedlemanWunsch method. GCCTGAGC, GCCGGAGC","output":"def NeedlemanWunschAligner(string1, string2): # Initializing the alignment matrix num_rows, num_cols = len(string1) + 1, len(string2) + 1 alignment_matrix = [[0]*num_cols for _ in range(num_rows)] # Initial conditions for row in range(1, num_rows): alignment_matrix[row][0] = alignment_matrix[row - 1][0] - 1 for col in range(1, num_cols): alignment_matrix[0][col] = alignment_matrix[0][col - 1] - 1 # Dynamic programming for row in range(1, num_rows): for col in range(1, num_cols): diagonal_score = alignment_matrix[row - 1][col - 1] + (1 if string1[row - 1] == string2[col - 1] else -1) left_score = alignment_matrix[row][col - 1] - 1 up_score = alignment_matrix[row - 1][col] - 1 alignment_matrix[row][col] = max(diagonal_score, left_score, up_score) # Alignment result row, col = len(string1), len(string2) al1, al2 = \\"\\", \\"\\" while row > 0 or col > 0: score = alignment_matrix[row][col] if row > 0 and col > 0: score_diag = alignment_matrix[row - 1][col - 1] score_left = alignment_matrix[row][col - 1] score_up = alignment_matrix[row - 1][col] if score == score_diag + (1 if string1[row - 1] == string2[col - 1] else -1): al1 += string1[row - 1] al2 += string2[col - 1] row -= 1 col -= 1 elif score == score_left - 1: al1 += \\"-\\" al2 += string2[col - 1] col -= 1 elif score == score_up - 1: al1 += string1[row - 1] al2 += \\"-\\" row -= 1 elif row > 0: al1 += string1[row - 1] al2 += \\"-\\" row -= 1 elif col > 0: al1 += \\"-\\" al2 += string2[col - 1] col -= 1 return al1[::-1], al2[::-1] # Driver Code string1 = \\"GCCTGAGC\\" string2 = \\"GCCGGAGC\\" alignment_result = NeedlemanWunschAligner(string1, string2) print(alignment_result) # ('GCCTGAGC', 'GCC-GGAGC')"},{"instruction":"Write a Python program to do a brute force search for a pair of elements which sum to a given target value. [1, 3, 4, 5, 6, 7], 8","output":"# brute force search algorithm def brute_force_search(arr, target): for i in range(len(arr)): for j in range(len(arr)): if arr[i] + arr[j] == target: return arr[i], arr[j] return None # test the algorithm target = 8 lst = [1, 3, 4, 5, 6, 7] print(brute_force_search(lst, target)) Output: pair = (3, 5)"},{"instruction":"Write an algorithm in Python to optimize a given linear programming problem.","output":"def optimize_lp(c, A, b): result = scipy.optimize.linprog( c, A_ub=A, b_ub=b, options={\\"disp\\": False} ) if result.status != 0: raise Exception(\\"Linear programming failed.\\") x = result.x z = result.fun return (x, z)"},{"instruction":"Create a Python program that predicts the next value from a given list of integer numbers. [7, 3, 5, 9, 4]","output":"def predict_next_value(nums): # calculate average avg = sum(nums) / len(nums) # predict next value return avg # test print(predict_next_value([7, 3, 5, 9, 4])) # prints 6.0"},{"instruction":"Generate a list of prime numbers from 1 to 1000 using a Python program","output":"def getPrimeList(n): primeList = [] for num in range (2,n + 1): prime = True for index in range(2, num): if num % index == 0: prime = False if prime: primeList.append(num) return primeList print(getPrimeList(1000))"},{"instruction":"Make a linear regression model with Python to predict the stock prices of Apple Inc.","output":"import pandas as pd from sklearn.linear_model import LinearRegression # Load the training set data = pd.read_csv(\\"apple_data.csv\\") # Separate the features and target X = data.iloc[:, :-1].values y = data.iloc[:, -1].values # Train the model model = LinearRegression().fit(X, y)"},{"instruction":"Generate a python code to print out all prime numbers between 1 to 100.","output":"for num in range(2, 101): for i in range(2,num): if (num % i) == 0: break else: print(num, end=' ') # Output : 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97"},{"instruction":"Create a python program to convert a given number into its binary form. Number: 7","output":"def convert_num_to_bin(num): '''This function will convert a given number into its binary form.''' bin_arr = [] while num > 0: bin_arr.append(num%2) num //= 2 bin_arr.reverse() return bin_arr"},{"instruction":"Make a program that finds the reverse of a string in Python. Hello World","output":"def reverse(s): return s[::-1] reverse(\\"Hello World\\")"},{"instruction":"Create a Monte Carlo simulation in Python for estimating the value of pi by randomly drawing points within a square bounded by four unit circles at the edges. Not applicable","output":"import random # defines the point generator def generate_point(): return (random.random(), random.random()) # defines the circle function def in_circle(point): return point[0]*point[0] + point[1]*point[1] < 1 # define the range of iterations to take RANGE = 100000 # create the array of points points = [generate_point() for i in range(RANGE)] # count the points in the circle and print the estimation in_circle_count = 0 for point in points: if in_circle(point): in_circle_count += 1 print(\\"Pi: {}\\".format(4.0 * in_circle_count / RANGE))"},{"instruction":"Write an algorithm to detect a cycle linked list in Python.","output":"def detect_cycle(head): \\"\\"\\"Detects whether a linked list contains a cycle. Args: head (ListNode): The head node of the linked list. Returns: bool: True if there is a cycle, and False if there isn't. \\"\\"\\" slow = head fast = head while fast and fast.next: # move slow and fast by one step slow = slow.next fast = fast.next.next # fast will catch up slow if a cycle exists if slow == fast: return True # fast has reached the end and no cycle return False"},{"instruction":"Try to come up with a classifier, in Python, that differentiates between questions and statements.","output":"import string def is_question(text): if text.endswith(\\"?\\"): return True elif text.startswith(tuple(string.punctuation)): return False else: words = text.strip().split() if any(word.endswith(\\"?\\") for word in words): return True return False"},{"instruction":"Produce a data structure in Python to model a simple grocery store.","output":"class GroceryStore: def __init__(self): self.items = {} def add_item(self, item, price): self.items[item] = price def get_price(self, item): return self.items.get(item)"},{"instruction":"This code defines a Python class called VirtualMachineScaleSetInstanceView that inherits from the Model class in the msrest.serialization module. The class has three instance variables: virtual_machine, extensions, and statuses. The virtual_machine and extensions variables are readonly and will be populated by the server. The statuses variable is a list of InstanceViewStatus objects. To use this class, create an instance of it and pass in the statuses parameter if desired.","output":"# coding=utf-8 # -------------------------------------------------------------------------- # Copyright (c) Microsoft Corporation. All rights reserved. # Licensed under the MIT License. See License.txt in the project root for # license information. # # Code generated by Microsoft (R) AutoRest Code Generator. # Changes may cause incorrect behavior and will be lost if the code is # regenerated. # -------------------------------------------------------------------------- from msrest.serialization import Model class VirtualMachineScaleSetInstanceView(Model): \\"\\"\\"The instance view of a virtual machine scale set. Variables are only populated by the server, and will be ignored when sending a request. :ivar virtual_machine: The instance view status summary for the virtual machine scale set. :vartype virtual_machine: ~azure.mgmt.compute.v2015_06_15.models.VirtualMachineScaleSetInstanceViewStatusesSummary :ivar extensions: The extensions information. :vartype extensions: list[~azure.mgmt.compute.v2015_06_15.models.VirtualMachineScaleSetVMExtensionsSummary] :param statuses: The resource status information. :type statuses: list[~azure.mgmt.compute.v2015_06_15.models.InstanceViewStatus] \\"\\"\\" _validation = { 'virtual_machine': {'readonly': True}, 'extensions': {'readonly': True}, } _attribute_map = { 'virtual_machine': {'key': 'virtualMachine', 'type': 'VirtualMachineScaleSetInstanceViewStatusesSummary'}, 'extensions': {'key': 'extensions', 'type': '[VirtualMachineScaleSetVMExtensionsSummary]'}, 'statuses': {'key': 'statuses', 'type': '[InstanceViewStatus]'}, } def __init__(self, *, statuses=None, **kwargs) -> None: super(VirtualMachineScaleSetInstanceView, self).__init__(**kwargs) self.virtual_machine = None self.extensions = None self.statuses = statuses"},{"instruction":"Design a graphical user interface (GUI) in Python with the Tkinter library that displays the current time in digital format.","output":"import tkinter as tk from time import strftime # Create the main root window root = tk.Tk() # Create the time label and add it to the root window time_label = tk.Label(root, font=(\\"times\\", 20, \\"bold\\"), bg=\\"white\\") time_label.pack(side=\\"top\\", fill=\\"both\\", expand=True) # Create a function to update the label with the current time def update_label(): time_string = strftime(\\"%H:%M:%S\\") time_label.configure(text=time_string) time_label.after(1000, update_label) # Update the root window every 1000 milliseconds (1 second) update_label() # Start the root window event loop root.mainloop()"},{"instruction":"Construct a maximum priority queue in Python given the list of numbers [25,2,105,62,12].","output":"class MaxPQ: def __init__(self, arr = []): self.heap = [0] for item in arr: self.add(item) def add(self, key): self.heap.append(key) self._swim(len(self.heap)-1) def delMax(self): root = self.heap[1] self.heap[1] = self.heap[-1] self.heap.pop() self._sink(1) return root def _swim(self, k): while k > 1 and self.heap[k] > self.heap[k//2]: temp = self.heap[k] self.heap[k] = self.heap[k//2] self.heap[k//2] = temp k = k//2 def _sink(self, k): while 2*k <= len(self.heap)-1: j = 2*k if j < len(self.heap)-1 and self.heap[j] < self.heap[j+1]: j += 1 if self.heap[j] > self.heap[k]: temp = self.heap[j] self.heap[j] = self.heap[k] self.heap[k] = temp k = j else: break pq = MaxPQ([25,2,105,62,12])"},{"instruction":"Write a Python program to download a web page and extract its title, keywords, description, and URLs. URL: www.example.com","output":"import requests from bs4 import BeautifulSoup url = 'www.example.com' headers = {'User-Agent':'Mozilla/5.0'} page = requests.get(url, headers=headers) soup = BeautifulSoup(page.content, 'html.parser') # Extract Title title = soup.find('title') print(title.string) # Extract keywords keywords = [keyword.get('content') for keyword in soup.find_all('meta', attrs={'name': 'keywords'})] print(keywords) # Extract description description = [desc.get('content') for desc in soup.find_all('meta', attrs={'name': 'description'})] print(description) # Extract URLs urls = [] for link in soup.find_all('a'): url = link.get('href') urls.append(url) print(urls)"},{"instruction":"Can you develop a program in Python that prints out the number of words and characters in a given string?","output":"def word_and_character_count(string): num_words = len(string.split()) num_characters = len(string) print(\\"Number of words:\\", num_words) print(\\"Number of characters:\\", num_characters)"},{"instruction":"Create a Python program that takes two numbers as input and prints out the greatest common divisor (GCD) of the two numbers. num1 = 8 num2 = 20","output":"def gcd(num1, num2): if num2 == 0: return num1 return gcd(num2, num1 % num2) print(gcd(num1, num2))"},{"instruction":"Design a program in Python that takes a text input and identifies and displays the most used words. User input string: This is a test string to use for testing our program. This is the second test with different words.","output":"import collections def most_used_words(input_string): # split the string into words words = input_string.split() # counts the occurrence of each word counter = collections.Counter(words) # most_common() produces k frequently encountered # input values and their respective counts. most_occur = counter.most_common(5) print(\\"The most used words are:\\") for word, count in most_occur : print(word, \\":\\", count) input_string = \\"This is a test string to use for testing our program. This is the second test with different words.\\" most_used_words(input_string) Output: The most used words are: This : 2 is : 2 a : 1 test : 2 string : 1"},{"instruction":"Write a Python program to find the top 3 highest scores in a given tennis game. game_scores = [20, 24, 27, 30, 18, 28, 15, 25, 30, 22, 28]","output":"# find the top 3 highest scores game_scores = [20, 24, 27, 30, 18, 28, 15, 25, 30, 22, 28] top_scores = sorted(game_scores, reverse=True)[:3] print(\\"The top 3 highest scores are:\\", top_scores)"},{"instruction":"Classify the following Python statement as a type of loop. for i in range(10): print(i)","output":"for loop."},{"instruction":"Write a test suite for a Python class that calculates the area of a triangle given the length of its sides.","output":"import unittest class TriangleTestCase(unittest.TestCase): def setUp(self): self.triangle1 = Triangle(2,3,4) self.triangle2 = Triangle(3,4,5) def test_area_triangle1(self): self.assertEqual(self.triangle1.area(), 2.9047) def test_area_triangle2(self): self.assertEqual(self.triangle2.area(), 6.0000)"},{"instruction":"Create an animation in Python that displays your favorite animal.","output":"# import necessary libraries import pygame import sys # initialize pygame pygame.init() # display width and height display_height = 500 display_width = 500 # define the colors black = (0, 0, 0) white = (255, 255, 255) # Create the screen game_display = pygame.display.set_mode((display_width, display_height)) pygame.display.set_caption('My Favorite Animal') # set the clock clock = pygame.time.Clock() # load the images of the cat cat_list = [pygame.image.load('cat1.png'),pygame.image.load('cat2.png'),pygame.image.load('cat3.png'), pygame.image.load('cat4.png'),pygame.image.load('cat5.png')] x = 0 # x position of the cat y = 0 # y position of the cat change_x = 0 # change in x position of the cat change_y = 5 # change in y position of the cat frame = 0 # current frame of the cat # run the game loop while True: # change the background color game_display.fill(white) # draw the cat game_display.blit(cat_list[frame], (x, y)) # update the x and y positions of the cat x += change_x y += change_y # update the next frame frame += 1 # reset the frame if it is out of bounds if frame == 5: frame = 0 # update the window pygame.display.flip() # set the frames per second clock.tick(30)"},{"instruction":"Create a REST API endpoint in Python with a GET route to query a database. The route should accept a 'name' as a query parameter and return a list of results from the query. name= 'John'","output":"@app.route('/api/search', methods=['GET']) def search(): name = request.args.get('name') query = _db.execute(\\"SELECT * FROM users WHERE name=?\\", [name]).fetchall() return jsonify(query)"},{"instruction":"Write a Python program that performs sentiment analysis on a given sentence and labels it as positive, negative or neutral. Sample sentence Life is beautiful","output":"def sentiment_analysis(sentence): # Use sentiment analyzer API here sentiment = sentiment_analyzer.polarity_scores(sentence) if sentiment['compound'] > 0: return 'positive' elif sentiment['compound'] < 0: return 'negative' else: return 'neutral'"},{"instruction":"Create a simple algorithm in Python to find the mode of a given array of numbers. [1, 2, 2, 3, 5, 6, 7]","output":"def mode(arr): dict = {} for item in arr: if item in dict: dict[item] += 1 else: dict[item] = 1 max_val = 0 max_key = 0 for key, value in dict.items(): if value > max_val: max_val = value max_key = key return max_key arr = [1, 2, 2, 3, 5, 6, 7] print(mode(arr))"},{"instruction":"Create an AWS Lambda function in Python that handles GET requests to the URL /hello and responds with a welcome message. Not applicable","output":"import json def lambda_handler(event, context): if event['httpMethod'] == 'GET': response = { 'statusCode': 200, 'headers': {'Content-Type': 'application/json'}, 'body': json.dumps({'message': 'Welcome!'}) } return response"},{"instruction":"Compose a Python script to find the longest word in a given string. Str = Hello World!","output":"def longest_word(str): words = str.split() longest_word = \\"\\" max_length = 0 for word in words: if len(word) > max_length: max_length = len(word) longest_word = word return longest_word str = \\"Hello World!\\" print(longest_word(str))"},{"instruction":"Come up with a python program to find the longest common prefix in a list of strings. [hello, hey, hi, have]","output":"def longest_common_prefix(strings): if len(strings) == 0: return '' prefix = strings[0] for s in strings: i = 0 while i < len(prefix) and i < len(s) and s[i] == prefix[i]: i += 1 prefix = prefix[:i] return prefix print(longest_common_prefix([\\"hello\\", \\"hey\\", \\"hi\\", \\"have\\"])) # Output: h"},{"instruction":"Develop a Python algorithm to calculate the minimum number of coins needed to make change for a given amount of money.","output":"def min_coins(amount): # list of coins coins = [25, 10, 5, 1] # contains minimum number of coins needed for a given amount coins_needed = [0] * (amount + 1) # fill the minimum number of coins needed # for a given amount of cents for j in range(1, amount + 1): # initialize coins_needed array with max int coins_needed[j] = float('inf') for i in range(0, 4): if j >= coins[i]: sub_res = coins_needed[j - coins[i]] if sub_res != float('inf') and sub_res + 1 < coins_needed[j]: coins_needed[j] = sub_res + 1 return coins_needed[amount]"},{"instruction":"Write a code to check for a cycle in a linked list.","output":"# Python program to detect loop in a linked list # Node class class Node: # Constructor to initialize the node object def __init__(self, data): self.data = data self.next = None class LinkedList: # Function to initialize head def __init__(self): self.head = None # Function to insert a new node at the beginning def push(self, new_data): new_node = Node(new_data) new_node.next = self.head self.head = new_node # Utility function to print it the linked LinkedList def printList(self): temp = self.head while(temp): print temp.data, temp = temp.next def detect_loop(self): slow_p = self.head fast_p = self.head while(slow_p and fast_p and fast_p.next): slow_p = slow_p.next fast_p = fast_p.next.next if slow_p == fast_p: print \\"Found Loop\\" return # Driver program for testing llist = LinkedList() llist.push(20) llist.push(4) llist.push(15) llist.push(10) # Create a loop for testing llist.head.next.next.next.next = llist.head llist.detect_loop()"},{"instruction":"Develop a static analysis program in Python code to detect programming errors.","output":"import ast class StaticAnalysis: def detect_errors(self, code): tree = ast.parse(code) errors = [] for node in ast.walk(tree): if isinstance(node, ast.FunctionDef): errors.extend(self.check_function_def(node)) elif isinstance(node, ast.Call): errors.extend(self.check_function_call(node)) return errors def check_function_def(self, function): errors = [] if not function.args.args: errors.append(('No parameters passed to function', function.lineno)) return errors def check_function_call(self, call): errors = [] if not call.args: errors.append(('No arguments passed to function call', call.lineno)) return errors"},{"instruction":"Write a Python program to calculate the price of a stock after a certain number of days given the current price, the stock's daily volatility, and a random daily price variation. Current Price: 100 Daily Volatility: 10% Number of Days: 5","output":"import random def calculate_price(current_price, volatility, days): price_list = [current_price] for i in range(days): price_variation = random.uniform(-volatility/2, volatility/2) current_price += price_variation price_list.append(current_price) return price_list[-1] current_price = 100 volatility = 10 days = 5 print(calculate_price(current_price, volatility, days))"},{"instruction":"Describe the algorithm to find the height of a binary tree in Python, using recursion. Tree: 5 / 2 8 / / 1 4 6 10","output":"def getHeight(root): if not root: return 0 else: # Compute using recurssion leftHeight = getHeight(root.left) rightHeight = getHeight(root.right) # Return the overall height return max(leftHeight, rightHeight) + 1"},{"instruction":"Write a Python program to generate a random password, using a given list of characters and a minimum character length. character_list = ['a', 'b', 'c', 'd', 'e','1','2','3','4','5'] min_length = 8","output":"import random def generate_password(character_list, min_length): password = '' for i in range(min_length): password += random.choice(character_list) return password if __name__ == '__main__': character_list = ['a', 'b', 'c', 'd', 'e','1','2','3','4','5'] min_length = 8 password = generate_password(character_list, min_length) print(password)"},{"instruction":"Translate this Java program into Python. public class Solution { public static void main(String[] args) { int[] A = { 1, 5, 8, 9, 10, 17, 17, 20 }; int result = solve(A); System.out.println(result); } public static int solve (int[] A) { int n = A.length; int maxValue = Integer.MIN_VALUE; for (int i = 0; i < n; i++) { for (int j = i; j < n; j++) { int value = A[j] A[i]; maxValue = Math.max(maxValue, value); } } return maxValue; } }","output":"def solve(A): n = len(A) maxValue = float(\\"-inf\\") for i in range(n): for j in range(i, n): value = A[j] - A[i] maxValue = max(maxValue, value) return maxValue"},{"instruction":"Create a Python program that takes an input of numbers and returns the maximum number. nums = [3, 6, 9, 3]","output":"def find_max(nums): max_num = nums[0] for num in nums[1:]: if num > max_num: max_num = num return max_num max_num = find_max(nums) print(max_num) # 9"},{"instruction":"Generate a Python program to generate an HTML table from a list of dictionaries.","output":"def html_from_dict(data): ''' This function creates an HTML table from list of dictionaries. Each dictionary represents one row in the table. ''' html = '<table>' html += '<tr>' # table headings data_keys = list(data[0].keys()) for key in data_keys: html += '<th>' + str(key) + '</th>' html += '</tr>' # table content for row in data: html += '<tr>' for key in data_keys: html += '<td>' + str(row[key]) + '</td>' html += '</tr>' html += '</table>' return html"},{"instruction":"Create a class in Python to represent a job offer. Not applicable","output":"class JobOffer: def __init__(self, title, salary): self.title = title self.salary = salary def get_title(self): return self.title def get_salary(self): return self.salary"},{"instruction":"Generate a short Python program to swap two items in a given list.","output":"def swap_items(lst, item1, item2): idx1 = lst.index(item1) idx2 = lst.index(item2) lst[idx1], lst[idx2] = lst[idx2], lst[idx1] return lst"},{"instruction":"ptimize a given python code by using correct data structures and algorithms. def someFunction(someList): outputList = [] for item in someList: if item not in outputList: outputList.append(item) return outputL","output":"def someFunction(someList): seen = set() outputList = [] for item in someList: if item not in seen: outputList.append(item) seen.add(item) return outputList"},{"instruction":"it possible to create a neural network in Python?","output":"Yes, it is possible to create a neural network in Python. In fact, Python has many machine learning libraries such as Keras, TensorFlow, and PyTorch which allow the user to create neural networks. These libraries provide various layers, optimizers, and activation functions used to create neural networks with Python."},{"instruction":"Create a Python program to convert an RGB color value into an HSL color value. RGB Value: (0, 10, 240)","output":"def rgb2hsl(r, g, b): r /= 255 g /= 255 b /= 255 max_num = max(r, g, b) min_num = min(r, g, b) h = s = l = (max_num + min_num) / 2 if max_num == min_num: h = 0 s = 0 else: diff = max_num - min_num if l > 0.5: s = diff / (2 - max_num - min_num) else: s = diff / (max_num + min_num) if max_num == r: h = (g - b) / diff elif max_num == g: h = (2 + (b - r) / diff) else: h = (4 + (r - g) / diff) h *= 60 if h < 0: h += 360 return (h, s, l) hsl_val = rgb2hsl(0, 10, 240) print(hsl_val) # (240.0, 1.0, 0.47058823529411764)"},{"instruction":"Create a python program to convert a decimal to its binary representation","output":"def decimal_to_binary(num): if num == 0: return 0 binary = '' while num > 0: binary = str(num%2) + binary num //= 2 return binary"},{"instruction":"Write an algorithm for differentiating an equation containing x in Python. Not applicable","output":"def differentiate(equation): # Get the coefficient and exponent of all terms terms = equation.split(\\"+\\") coefficient = [] exponents = [] for term in terms: coef, exp = term.split(\\"x\\") coef = int(coef) if exp == \\"\\": exp = 1 else: exp = int(exp) coefficient.append(coef) exponents.append(exp) # Calculate the differentiated equation for i in range (len(coefficient)): coefficient[i] = coefficient[i] * exponents[i] exponents[i] -= 1 # Format the new equation result = \\"\\" for i in range(len(coefficient)): if coefficient[i] == 0: continue else: if coefficient[i] > 0: result += \\"+\\" result += str(coefficient[i]) if exponents[i] != 0: result += \\"x\\" if exponents[i] != 1: result += \\"^\\" + str(exponents[i]) return result"},{"instruction":"Generate a Python code snippet to combine two dictionaries.","output":"dict3 = {**dict1, **dict2}"},{"instruction":"Edit the following Python program so that it prints out a list of numbers from 50 to 100, exclusive. lst = [1,2,3,4] for n in lst: print(n)","output":"lst = list(range(50, 100)) for n in lst: print(n)"},{"instruction":"mplement the Singleton Design Pattern in a Python class. Not applicable","output":"class Singleton: _instance = None def __new__(cls, *args, **kwargs): if not cls._instance: cls._instance = super().__new__(cls, *args, **kwargs) return cls._instance s = Singleton() print(s)"},{"instruction":"Create a Python program to perform currency conversion. Exchange rate of USD/EUR = 0.86","output":"def currency_converter(amount, rate): return amount * rate # US Dollars to Euro print(currency_converter(10, 0.86)) # Output: 8.6 # Euro to US Dollars print(currency_converter(10, 1.16)) # Output: 11.6"},{"instruction":"Create a Python function that takes in two sets and returns a set containing the items that are in the first set but not in the second. set_A = {1, 2, 3, 4}, set_B = {2, 3, 5}","output":"def diff(set_A, set_B): res= set_A.difference(set_B) return res set_A={1, 2, 3, 4} set_B={2, 3, 5} result = diff(set_A, set_B) print(result)"},{"instruction":"Create a Python program to detect outliers in a given dataset and replace them with the mean of the remaining nonoutlier values. [1.2, 3.4, 4.5, 3.1, 2.2, 4.9, 4.2, 2.1, 1.1, 5.1, 5.2]","output":"import pandas as pd def detect_outliers(data): # Calculate the mean mean = data.mean() # Calculate the standard deviation std_dev = data.std() # Set outliers limit outliers_limit = mean + 3*std_dev # For every data point compute the z-score and check if it's an outlier for data_point in data: z_score = (data_point - mean)/std_dev if z_score > outliers_limit: # if it is an outlier replace it with the mean data_point = mean return data data = [1.2, 3.4, 4.5, 3.1, 2.2, 4.9, 4.2, 2.1, 1.1, 5.1, 5.2] data = pd.Series(data) print(detect_outliers(data))"},{"instruction":"Generate a unique random number in the range given. Range: 0 100","output":"A unique random number in the given range can be generated using programming languages such as Python, JavaScript, etc. It will contain code to generate a random number in the given range, and then check if it has already been generated by maintaining a list of all generated numbers."},{"instruction":"Convert the given string into a standard format in Python. String: My name is John Doe","output":"string = \\"My name is John Doe\\" standard_string = string.title() print(standard_string) #My Name Is John Doe"},{"instruction":"Write a Python program to create a dictionary with numbers from 0 to 4 as keys and corresponding values as given below. [1, 2, 3, 4]","output":"d = {0:1, 1:2, 2:3, 3:4, 4:4}"},{"instruction":"Write a Python program to optimize a given linear equation using the leastsquares method. 2x + 5y = 10","output":"import numpy as np # The linear equation x, y = np.symbols('x y') eq_1 = 2*x + 5*y - 10 # The system of equations eq_2 = x + 2*y - 8 # Create a matrix of the coefficients A = np.matrix([[2, 5], [1, 2]]) b = np.matrix([[10], [8]]) # Solve for x and y using the least-squares method solution = np.linalg.inv(A.T.dot(A)).dot(A.T).dot(b) x_solution, y_solution = solution.item(0), solution.item(1) print(f'x = {x_solution}') print(f'y = {y_solution}') # Output x = 6.0, y = 1.0"},{"instruction":"Write an SQL query that will find all books whose titles contain the word Python. Not applicable","output":"SELECT * FROM books WHERE title LIKE '%Python%'"},{"instruction":"Build a python program that reads in two strings and combines them into a single string.","output":"def combine_strings(string1, string2): combined_string = string1 + string2 return combined_string"},{"instruction":"Construct a polynomial regression model in Python that models a given data set.","output":"# import packages from sklearn.preprocessing import PolynomialFeatures from sklearn.linear_model import LinearRegression # create linear regression object reg = LinearRegression() # create polynomial features poly = PolynomialFeatures(degree = 2) x_poly = poly.fit_transform(X_train) # fit the linear regression model with the polynomial features reg.fit(x_poly, y_train) # predict the y-values using the regression model y_pred = reg.predict(poly.fit_transform(X_test))"},{"instruction":"Create a program in Python that prints out the first 100 Fibonacci numbers.","output":"a, b = 0, 1 # print the first 100 Fibonacci numbers for i in range(100): print(a, end=' ') a, b = b, a + b"},{"instruction":"Convert a given JSON data into a Python dictionary object. { name: John, age: 32, address: 123 Main Street }","output":"import json data = { \\"name\\": \\"John\\", \\"age\\": 32, \\"address\\": \\"123 Main Street\\" } py_dict = json.loads(data)"},{"instruction":"Write a Python code to calculate the root mean square error (RMSE) between two given lists of numbers. A = [2.2, 3.07, 3.68, 1.33] B = [1.17, 2.47, 2.57, 0.0]","output":"def rmse(A, B): \\"\\"\\" Calculates the root mean square error between two given lists of numbers. \\"\\"\\" RMSE = 0 for i,j in zip(A,B): RMSE += (i-j)**2 return (RMSE/len(A))**(1/2) if __name__ == '__main__': A = [2.2, 3.07, 3.68, 1.33] B = [1.17, 2.47, 2.57, 0.0] print(rmse(A, B))"},{"instruction":"Write a Python program that calculates the nth Fibonacci number where n is a positive integer given by the user. 8","output":"# Fibonacci Sequence def Fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) n = int(input(\\"Enter the value of n: \\")) print(Fibonacci(n))"},{"instruction":"Design a python program which takes a positive integer and returns the prime factorization of that number.","output":"def prime_factorization(n): prime_numbers = [] i = 2 while i * i <= n: if n % i == 0: prime_numbers.append(i) n = n / i else: i += 1 if n > 1: prime_numbers.append(n) return prime_numbers"},{"instruction":"Using Python, write a program to merge the elements of two arrays into one. arr1=[1, 2, 6, 9, 11] arr2=[2, 3, 4, 7, 8]","output":"merged_arr = arr1 + arr2 print ( merged_arr ) # [1, 2, 6, 9, 11, 2, 3, 4, 7, 8]"},{"instruction":"Optimize the following code and provide an algorithm to solve it in Python. def fibonacci(n): if n <= 1: return n return fibonacci(n1) + fibonacci(n2)","output":"def fibonacci(n): # Store the Fibonacci numbers in an array a = [0] * (n + 1) # Base cases a[1] = 1 for i in range(2, n + 1): a[i] = a[i - 1] + a[i - 2] return a[n]"},{"instruction":"Store the provided data into a keyvalue object in Python. first_name: John last_name: Doe age: 28","output":"person_data = { \\"first_name\\": \\"John\\", \\"last_name\\": \\"Doe\\", \\"age\\": 28 }"},{"instruction":"Develop an algorithm in Python to check if a given string is anagram of another given string.","output":"def is_anagram(str1, str2): # Get length of both strings n1 = len(str1) n2 = len(str2) # If both strings have different length, then they # are not anagrams if n1 != n2: return 0 # Sort both strings str1 = sorted(str1) str2 = sorted(str2) # Compare sorted strings for i in range(0, n1): if str1[i] != str2[i]: return 0 return 1"},{"instruction":"Create and display a multiplication table of 7 using a Python program.","output":"#Create and display a multiplication table of 7 #print table header print(' 7 x Table') #print table column header print(' 7 | 14 | 21 | 28 | 35 | 42 | 49 | 56 |') #print table row for num in range(1,10): row_num = 7 * num print(f'{row_num:4} |', end=' ') print()"},{"instruction":"Using Machine Learning algorithms, build a Python program that will classify a given set of handwritten digits. Not applicable","output":"import numpy as np import matplotlib.pyplot as plt from sklearn import svm, datasets #import data digits = datasets.load_digits() #split data into training and testing sets X_train = digits.data[:-10] y_train = digits.target[:-10] X_test = digits.data[-10:] y_test = digits.target[-10:] #train model clf = svm.SVC(gamma = 0.001, C = 100) clf.fit(X_train, y_train) #evaluate model score = clf.score(X_test, y_test) #predict classes y_pred = clf.predict(X_test) #visualize results plt.imsave(\\"prediction.png\\", digits.images[-10]) print(score) print(y_pred)"},{"instruction":"Optimise a bubble sort algorithm written in Python def bubble_sort(arr): is_sorted = False while not is_sorted: is_sorted = True for i in range(len(arr)1): if arr[i] > arr[i+1]: arr[i],arr[i+1] = arr[i+1],arr[i] is_sorted = False return arr","output":"def bubble_sort(arr): is_sorted = False n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"instruction":"Define a class in Python to represent a person with first name, last name, age, and a method to greet them.","output":"class Person: def __init__(self, first_name, last_name, age): self.first_name = first_name self.last_name = last_name self.age = age def greet(self): return f\\"Hello, my name is {self.first_name} {self.last_name} and I am {self.age} years old.\\""},{"instruction":"Define a function in Python that takes three numbers as input and return the largest number","output":"def largestNumber(x, y, z): if x > y and x > z: return x elif y > x and y > z: return y else: return z"},{"instruction":"Write a Python program to sort a dictionary by its keys. d = {'a': 24, 'g': 52, 'c': 13}","output":"def sort_dict_keys(d): sorted_keys = sorted(d.keys()) sorted_dict = {key: d[key] for key in sorted_keys} return sorted_dict"},{"instruction":"Create a basic search engine using Elasticsearch and Python. The search engine should allow users to enter a query and return a list of relevant documents. Not applicable","output":"from elasticsearch import Elasticsearch # create the client es = Elasticsearch() # define the query query = { \\"query\\": { \\"match\\": { \\"text\\": \\"query_term\\" } } } # search the index response = es.search(index=\\"index_name\\", body=query) # print the results for hit in response[\\"hits\\"][\\"hits\\"]: print(hit[\\"_source\\"])"},{"instruction":"Create a function in Python that takes a string and a dictionary, and returns a list of all the words in the string that match keys in the dictionary. string = 'This is a string' dictionary = {'This': 'that', 'is': 'not'}","output":"def get_words(string, dict): words = string.split() output = [] for word in words: if word in dict: output.append(dict[word]) return output output = get_words(string, dictionary) print(output) # ['that', 'not']"},{"instruction":"Create a Python program to encrypt and decrypt strings using a key. Not applicable","output":"import string def encrypt(plain_text, key): alphabet = list(string.ascii_lowercase) encrypted = \\"\\" for character in plain_text: if character in alphabet: index = alphabet.index(character) + int(key) if index > 25: index -= 26 encrypted += alphabet[index] else: encrypted += character return encrypted def decrypt(encrypted_text, key): alphabet = list(string.ascii_lowercase) decrypted = \\"\\" for character in encrypted_text: if character in alphabet: index = alphabet.index(character) - int(key) if index < 0: index += 26 decrypted += alphabet[index] else: decrypted += character return decrypted # Test print(encrypt(\\"hello world\\", 3)) #khoor zruog print(decrypt(\\"khoor zruog\\", 3)) #hello world"},{"instruction":"Generate a Django project named myproject with the following structure:","output":"django-admin startproject myproject cd myproject python manage.py startapp main"},{"instruction":"Create a function in Python that receives a word as input, searches for synonyms in a dictionary and returns a list of synonyms. word = happy","output":"import json def get_synonyms(word): synonyms = [] with open('dictionary.json') as dictionary_file: dictionary = json.load(dictionary_file) if word in dictionary.keys(): for syn in dictionary[word]: synonyms.append(syn) return synonyms print(get_synonyms('happy'))"},{"instruction":"Optimize this Python code to count the number of occurrences of an element in an array. [2, 3, 3, 10, 12]","output":"def countOccurrences(arr, x): count = 0 n = len(arr) for i in range(0, n): if (x == arr[i]): count = count + 1 return count # Driver code arr = [2, 3, 3, 10, 12] x = 3 assert countOccurrences(arr, x) == 2"},{"instruction":"Compare and contrast the features of the two languages, JavaScript and Python.","output":"There are several key differences between JavaScript and Python. JavaScript is primarily a client-side scripting language, while Python is predominantly a server-side scripting language. JavaScript is an interpreted language which means that it does not need to be compiled before running, whereas Python needs to be compiled before it can run. JavaScript is a loosely typed language and allows for variables to have different data types, whereas Python is a strongly typed language and variables have to be given a specific data type. JavaScript can be used to create dynamic webpages with interactive content, while Python is optimized to work with packages and modules, making it a better choice for complex tasks and data analysis."},{"instruction":"Consider a way to detect malicious HTTP requests using Python.","output":"\\"\\"\\" Detect malicious HTTP requests using Python \\"\\"\\" import requests from urllib.parse import urlparse import re def detect_malicious_requests(url): # Parse the URL parsed_url = urlparse(url) # Check for malicious URL patterns malicious_patterns = [ r\\".exe\\", r\\".js\\", r\\".gz\\", r\\".bat\\", r\\".zip\\", r\\".php\\", r\\".sh\\", r\\".json\\" ] for pattern in malicious_patterns: if re.search(pattern, parsed_url.path): return \\"MALICIOUS\\" # Check for suspicious file extensions suspicious_file_extensions = [ \\".xml\\", \\".config\\", \\".log\\", \\".ini\\" ] for extension in suspicious_file_extensions: if parsed_url.path.endswith(extension): return \\"SUSPICIOUS\\" # Check for HTTP status codes response = requests.get(url) if response.status_code == 401: return \\"MALICIOUS\\" return \\"SAFE\\" if __name__ == '__main__': url = \\"http://example.com/index.php\\" print(detect_malicious_requests(url))"},{"instruction":"Write a Python program to identify if the number provided is an Armstrong number or not. Number: 1634","output":"def isArmstrongNumber(num): order = len(str(num)) result = 0 # calculate the sum of nth power of every digit temp = num while(temp > 0): digit = temp % 10 result += digit ** order temp //= 10 # check if sum is equal to the given num if (result == num): return True else: return False num = int(input(\\"Enter a number: \\")) if (isArmstrongNumber(num)): print(num, \\"is an Armstrong number\\") else: print(num, \\"is not an Armstrong number\\")"},{"instruction":"Create a Python function that takes a string as an input and returns the substring between the first and the last character. thequickbrownfox","output":"def get_substring(string): return string[1:-1]"},{"instruction":"Create a Python module that can encrypt and decrypt strings. Not applicable","output":"from cryptography.fernet import Fernet def encrpyt_string(text): key = Fernet.generate_key() cipher_suite = Fernet(key) token = cipher_suite.encrypt(text.encode()) return token def decrpyt_string(token): key = Fernet.generate_key() cipher_suite = Fernet(key) plain_text = cipher_suite.decrypt(token) return plain_text"},{"instruction":"Generate a python program to determine if two objects are mutually exclusive or not. Input objects are ([1,2,3], [4,5,6]).","output":"def mutually_exclusive(object1, object2): if len(object1.intersection(object2)) > 0: return False else: return True object1 = set([1, 2, 3]) object2 = set([4, 5, 6]) result = mutually_exclusive(object1, object2) print(result) # Outputs True as objects don't share elements."},{"instruction":"Write a Python class to implement the Binary Search Tree structure.","output":"class Node: def __init__ (self, data): self.data = data self.left = None self.right = None class BinarySearchTree: def __init__ (self): self.root = None def insert (self, data): if self.root == None: self.root = Node(data) else: self._insert(data, self.root) def _insert(self, data, cur_node): if data < cur_node.data: if cur_node.left == None: cur_node.left = Node(data) else: self._insert(data, cur_node.left) elif data > cur_node.data: if cur_node.right == None: cur_node.right = Node(data) else: self._insert(data, cur_node.right) else: print(\\"Value already in tree\\")"},{"instruction":"Create a method in Python to flatten a 2Dimentional array. array = [[1, 2], [3, 4], [5, 6]]","output":"def flatten(arr): flat_list = [] for sublist in arr: for item in sublist: flat_list.append(item) return flat_list flatten(array)"},{"instruction":"You are given a list of data that you need to analyze and come up with visual output. Create a python code that clean the data and generate a visual representation. data = [10, 20, 30, 40, 50]","output":"import pandas as pd import matplotlib.pyplot as plt # Clean data data_df = pd.DataFrame(data) # Visual representation plt.figure(figsize=(5,5)) plt.bar(data_df.index, data_df[0]) plt.xticks(data_df.index) plt.xlabel('Index') plt.ylabel('Value') plt.title('Visual Representation of Data') plt.show()"},{"instruction":"python, write a function that takes in two numbers and returns the sum of their digits.","output":"def sum_digits(a,b): #convert each number to string a = str(a) b = str(b) #initialize sum sum = 0 for i in range(len(a)): sum += int(a[i]) for i in range(len(b)): sum += int(b[i]) #return sum return sum"},{"instruction":"Write a Python function that given a list of strings and an integer n, returns the strings that have a length greater than n. ['Cat', 'Dog', 'Rabbit', 'Elephant'], n = 5","output":"def filter_strings(strings, n): return [s for s in strings if len(s) > n]"},{"instruction":"Develop a textbased game in Python where you explore a cave and collect coins. Not applicable","output":"import random # constants CELLS = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)] def get_locations(): # monster = random location monster = random.choice(CELLS) # player = random location player = random.choice(CELLS) # if monster and player are in the same location, regenerate if monster == player: return get_locations() # door = random location door = random.choice(CELLS) # if monster, player or door are in the same location, regenerate if monster == door or player == door: return get_locations() return monster, player, door def move_player(player, move): # get the player's current location x, y = player # if move is LEFT, y - 1 if move == 'LEFT': y -= 1 # if move is RIGHT, y + 1 elif move == 'RIGHT': y += 1 # if move is UP, x - 1 elif move == 'UP': x -= 1 # if move is DOWN, x + 1 elif move == 'DOWN': x += 1 # if the player moves beyond a boundary, they stay in the same place if x < 0: x = 0 elif x > 2: x = 2 elif y < 0: y = 0 elif y > 2: y = 2 return x, y def get_moves(player): moves = [\\"LEFT\\", \\"RIGHT\\", \\"UP\\", \\"DOWN\\"] x, y = player # if monster is one the left side, they can't move left if x == 0: moves.remove(\\"LEFT\\") # if monster is one the right side, they can't move right if x == 2: moves.remove(\\"RIGHT\\") # if monster is one the top side, they can't move up if y == 0: moves.remove(\\"UP\\") # if monster is one the bottom side, they can't move down if y == 2: moves.remove(\\"DOWN\\") return moves def draw_map(player): print(\\" _ _ _\\") tile = \\"|{}\\" for idx, cell in enumerate(CELLS): if idx in [0, 1, 3, 4, 6, 7]: if cell == player: print(tile.format(\\"X\\"), end=\\"\\") else: print(tile.format(\\"_\\"), end=\\"\\") else: if cell == player: print(tile.format(\\"X|\\")) else: print(tile.format(\\"_|\\")) monster, player, door = get_locations() print(\\"Welcome to the dungeon!\\") while True: moves = get_moves(player) print(\\"You're currently in room {}\\".format(player)) draw_map(player) print(\\"you can move {}\\".format(moves)) # Fill in with available moves print(\\"Enter QUIT to quit\\") # GET PLAYER'S MOVE move = input(\\"> \\").upper() # if move is a valid, move player if move in moves: player = move_player(player, move) # if move isquit, quit if move == 'QUIT': break # if monster is player's location, end game if player == monster: print(\\"nOH NO! The monster got you...n\\") break # if player is at the door, they win if player == door: print(\\"nYou escaped! Congratulations!n\\") break"},{"instruction":"Construct a linear regression model in Python to predict the output of a dataset.","output":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression # Load the dataset df = pd.read_csv('dataset.csv') # Extract input and output features X = df[df.columns[:-1]].values y = df[df.columns[-1]].values # Create and fit the model model = LinearRegression().fit(X, y) # Output the model coefficients print('Intercept:', model.intercept_) for i, col in enumerate(df.columns[:-1]): print(f'Coefficient of {col} : {model.coef_[i]}')"},{"instruction":"Develop a software system to automate an law office workflow.","output":"# Create Python scripts to automate law office workflow # Import libraries import pandas as pd import datetime # Create dataframe to hold initial project details df = pd.DataFrame(columns=[\\"Task Name\\", \\"Due Date\\", \\"Assigned To\\"]) # Create functions to store and retrieve workflow data def store_data(name, due_date, assigned_to): df.loc[len(df)] = ([name, due_date, assigned_to]) # Store data in a CSV file df.to_csv(\\"law_office_workflow.csv\\") def retrieve_data(): data = pd.read_csv(\\"law_office_workflow.csv\\") return data # Set variables to store user input input_name = input(\\"What is the task name? \\") input_duedate = input(\\"What is the due date? \\") input_assignee = input(\\"Who is the assignee? \\") # Store user input data store_data(input_name, input_duedate, input_assignee) # Use the retrieve_data() function to get the stored data my_data = retrieve_data() # Print the stored data print(my_data)"},{"instruction":"Create a Python Class to handle JSON formatted data","output":"import json class JSONHandler(): '''A class to handle JSON-formatted data''' def __init__(self, json_string): self.json_string = json_string self.data = self.__parse_json_data() def __parse_json_data(self): parsed_data = json.loads(self.json_string) return parsed_data def get_data(self): return self.data def set_data(self, new_data): self.data = new_data self.__update_json_data() def __update_json_data(self): self.json_string = json.dumps(self.data)"},{"instruction":"Create a Python script that performs sentiment analysis on a given text. The script should receive text as an input, and return a score (between 0 and 1) that indicates the sentiment of the text. The food here is terrible and the service is even worse.","output":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sentiment_analyzer = SentimentIntensityAnalyzer() sentence = \\"The food here is terrible and the service is even worse.\\" scores = sentiment_analyzer.polarity_scores(sentence) print(\\"Sentiment Score: %s\\" % scores['compound']) # output: -0.8345"},{"instruction":"Generate a function in Python for finding the maximum value in a list of numbers with time complexity O(n). num_list = [3, 7, 4, 2, 8, 16, 1, 9, 10]","output":"def max_val(num_list): if len(num_list) == 0: return None max_num = num_list[0] for num in num_list: if num > max_num: max_num = num return max_num"},{"instruction":"Write a Python program to divide a list of numbers into two equal lists. [1,2,3,4,5,6,7,8,9,10]","output":"list_a = [1,2,3,4,5] list_b = [6,7,8,9,10]"},{"instruction":"Write a Python program to remove the characters which have odd index values of a given string. Hello World","output":"def remove_odd_index_characters(string): result = \\"\\" for i in range(len(string)): if i % 2 == 0: result += string[i] return result print(remove_odd_index_characters(\\"Hello World\\"))"},{"instruction":"Create a Python program to encode a string with a Caesar cipher. plaintext = Caesar Cipher shift = 3","output":"def caesar_cipher(plaintext,shift): ciphertext = \\"\\" for char in plaintext: if char == ' ': ciphertext += char elif char.isupper(): ciphertext += chr((ord(char) + shift - 65) % 26 + 65) else: ciphertext += chr((ord(char) + shift - 97) % 26 + 97) return ciphertext plaintext = \\"Caesar Cipher\\" shift = 3 ciphertext = caesar_cipher(plaintext,shift) print(\\"Plain Text : {}\\".format(plaintext)) print(\\"Cipher Text : {}\\".format(ciphertext))"},{"instruction":"Translate the following Java code to Python for (int i = 0; i < n; i++) System.out.println(Hello World);","output":"for i in range(n): print(\\"Hello World\\")"},{"instruction":"Write a Python program to retrieve the name of the user from a given input. User ID: uchefu","output":"ID = input('User ID: ') user_name = ID.split('che')[0] print('User Name: ' + user_name)"},{"instruction":"Create a Python program to format a string of text using basic punctuation rules. This is a string of tex","output":"def punctuate(text): text = text.strip() if not text.endswith('.'): text += '.' if not text.startswith(tuple('ABCDEFGHIJKLMNOPQRSTUVWXYZ')): text = text[0].upper() + text[1:] for char in ['!', '?', ':', ';', ',', '\\"']: if char in text: text = text[:-1] + char + ' ' return text punctuate('this is a string of text') # Output: 'This is a string of text.'"},{"instruction":"Generate a function to return the all the vowels from a string in Python. Not applicable","output":"def get_vowels(string): vowels = 'aeiou' return [char for char in string if char in vowels]"},{"instruction":"Develop a Python script to print all possible words with a given set of letters. letters = ('a', 'c', 'd', 'e', 'm')","output":"import itertools letters = ('a', 'c', 'd', 'e', 'm') for words in itertools.permutations(letters): print(''.join(words))"},{"instruction":"Write a procedure in Python to rectify misspelled words in a paragraph. My favarite flowers are rose and tulples","output":"import re def fix_spelling(paragraph): words = paragraph.split() corrected_words = [] for word in words: corrected_words.append(re.sub(r'[aeiou]',r'[aeiou]', word)) return \\" \\".join(corrected_words) print(fix_spelling(\\"My favarite flowers are rose and tulples\\"))"},{"instruction":"Compose a function in Python to take two numbers as input and return the greatest number. 5 and 8","output":"def getGreatestNumber(a, b): if a > b: return a return b greatest_num = getGreatestNumber(5, 8) print(\\"Greatest number is\\", greatest_num)"},{"instruction":"Create a method in Python that accepts two strings and returns a boolean if the two strings are anagrams. “listen” and “silent”","output":"def is_anagram(string1, string2): return (sorted(string1) == sorted(string2)) print(is_anagram(\\"listen\\", \\"silent\\")) # prints True"},{"instruction":"Create a Python program for visualizing a given dataset using matplotlib. x = [1, 2, 3, 4, 5] y = [1, 4, 9, 16, 25]","output":"import matplotlib.pyplot as plt x = [1, 2, 3, 4, 5] y = [1, 4, 9, 16, 25] # plotting the points plt.plot(x, y) # naming the x axis plt.xlabel('x - axis') # naming the y axis plt.ylabel('y - axis') # giving a title to my graph plt.title('My first graph!') # function to show the plot plt.show()"},{"instruction":"Design a graphical user interface using Python's tkinter library.","output":"# Imports import tkinter as tk # Setting up the window window = tk.Tk() window.title(\\"My GUI\\") # Adding components label1 = tk.Label(window, text=\\"Hello World\\") label1.pack() # Running the program window.mainloop()"},{"instruction":"Create a webhook in Python to handle incoming HTTP POST requests. This webhook should process the JSON payload in the POST request and log the output to console. { name: John Doe, email: john@example.com }","output":"import json from flask import Flask, request app = Flask(name) @app.route('/webhook', methods=['POST']) def webhook(): payload = json.loads(request.data) print(payload) return \\"OK\\" if name == 'main': app.run(debug=True)"},{"instruction":"Generate a Python program to print out all possible permutation of a given list of elements. [1, 2, 3]","output":"def permutations(input_list): if len(input_list) == 1: return input_list output_list = [] for value in input_list: temp_list = input_list[:] temp_list.remove(value) permutations_list = permutations(temp_list) for sub_list in permutations_list: output_list.append([value] + sub_list) return output_list"},{"instruction":"Create a Python program that uses recursive functions to search through a list of integers and find pairs whose sum equals a given number. List of integers: [2, 4, 3, 5, 7, 8] Given number: 7","output":"def search(nums, target): foundPairs = set() def helper(i, j): if i >= j: return s = nums[i] + nums[j] if s == target: foundPairs.add((nums[i], nums[j])) if s >= target: helper(i, j-1) else: helper(i+1, j) helper(0, len(nums)-1) return foundPairs lst = [2, 4, 3, 5, 7, 8] target = 7 print(search(lst, target)) # Output: {(3,4), (2,5)}"},{"instruction":"Write a Python function for computing the Fibonacci numbers of n.","output":"def fibonacci(n): if n < 2: return n return fibonacci(n - 1) + fibonacci(n - 2)"},{"instruction":"Create a function in Python that takes in a list and sorts it in ascending order. [3, 5, 1, 2, 9]","output":"def sortList(list): list.sort() return list print(sortList([3, 5, 1, 2, 9])) # Output: [1, 2, 3, 5, 9]"},{"instruction":"Create a Python program to calculate the sum of natural numbers below a certain number. n=100","output":"def sumNaturalNumbers(n): sum = 0 for i in range(1, n+1): sum+=i return sum print(sumNaturalNumbers(100))"},{"instruction":"Write a Python program that will determine the maximum number of unique paths a person can take from one point to another in a twodimensional grid. grid = [ [0,1], [1,1] ]","output":"def unique_paths(grid): rows = len(grid) cols = len(grid[0]) dp = [[0 for i in range(cols)] for j in range(rows)] for i in range(rows): for j in range(cols): if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = dp[i][j-1] + dp[i-1][j] return dp[-1][-1] print(unique_paths(grid)) # Output: 2"},{"instruction":"Create a web service to automatically summarize text using the TextRank algorithm. Not Applicable","output":"# Importing the necessary libraries import nltk import summarizer # Function to automatically summarize text using the TextRank algorithm def summarize_text(text): # Tokenizing the text sentences = nltk.sent_tokenize(text) # Generating the summary summary = summarizer.summarize(sentences, ratio=0.2) # Returning the summary return summary # Testing the summarize_text function text = \\"Python is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python is today used by millions of people all over the world. Python was designed to be highly readable and accessible. Its syntax makes it easy to learn and use.\\" summary = summarize_text(text) print(summary)"},{"instruction":"Design a class in Python that takes two numbers as parameters and returns a multiplication of them.","output":"class Multiplication: def __init__(self, num1, num2): self.num1 = num1 self.num2 = num2 def multiply(self): return self.num1 * self.num2"},{"instruction":"Generate a program in Python to print the union of two given sets. [1, 2, 3], [2, 3, 4, 5]","output":"def union_sets(set1, set2): return list(set(set1) | set(set2)) set1 = [1, 2, 3] set2 = [2, 3, 4, 5] print(union_sets(set1, set2)"},{"instruction":"Create a Python program to print out the lyrics of the song Happy Birthday. Not applicable","output":"print(\\"Happy birthday to you\\") print(\\"Happy birthday to you\\") print(\\"Happy birthday dear ____\\") print(\\"Happy birthday to you\\")"},{"instruction":"Write a Python program to generate a unique random password with at least one lowercase letter, one uppercase letter, one digit and one special character.","output":"import random lower_chars = \\"abcdefghijklmnopqrstuvwxyz\\" upper_chars = lower_chars.upper() digits = \\"0123456789\\" special_chars = \\"!@#%^&*()\\" def generate_password(length): password = \\"\\" password += random.choice(lower_chars) password += random.choice(upper_chars) password += random.choice(digits) password += random.choice(special_chars) for i in range(length - 4): password += random.choice(lower_chars + upper_chars + digits + special_chars) return password if __name__ == '__main__': print(generate_password(10)) # Output V1!sQUn4f4"},{"instruction":"Create a web scraper in Python that can extract product names and prices from an ecommerce website. Not applicable","output":"import requests from bs4 import BeautifulSoup url = \\"example.com\\" # Make a GET request to fetch the raw HTML content html_content = requests.get(url).text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # print(soup.prettify()) # print the parsed data of html # Get Product Name products = soup.find_all(\\"div\\", attrs={\\"class\\": \\"product-name\\"}) for product in products: product_name = product.find('a').text print(\\"Product Name:\\", product_name) # Get Product Price prices = soup.find_all(\\"span\\", attrs={\\"class\\": \\"price\\"}) for price in prices: product_price = price.text print(\\"Product Price:\\", product_price)"},{"instruction":"Refactor the following Python code to improve its readability and make it easier to maintain: images = list() for item in allitems: if item.endswith('.jpg'): images.append(item)","output":"images = [item for item in allitems if item.endswith('.jpg')]"},{"instruction":"Create a Python lambda expression that prints out the square of each item in an input list. [1, 2, 3]","output":"square = lambda nums: [x*x for x in nums] squares = square([1,2,3]) print(squares)"},{"instruction":"Create a web scraper in Python which finds the maximum and minimum temperatures in the US.","output":"# import libraries import requests from bs4 import BeautifulSoup import pandas as pd # set the url to scrape url = \\"https://www.weather.gov/source/crh/stateMaxMinTemps.php\\" # make a request to the url and create the beautiful soup object response = requests.get(url) soup = BeautifulSoup(response.text, \\"html.parser\\") # parse the table table = soup.find(id=\\"main\\") # read the table in to a DataFrame df = pd.read_html(str(table))[0] # rename the columns df.columns=['state', 'max_temp', 'min_temp'] # find the maximum and minimum temperatures max_temp = df['max_temp'].max() min_temp = df['min_temp'].min() # print the maximum and minimum temperatures print('The maximum temperature in the US is: %s' % max_temp) print('The minimum temperature in the US is: %s' % min_temp)"},{"instruction":"Generate a Python code that can parse a JSON string and convert it to a Python dictionary. json_string = {'name': 'John', 'age': 25, 'hobbies': ['soccer', 'running']}","output":"import json def parse_json_string(json_string): \\"\\"\\" Parses a JSON string and converts it to a Python dictionary. :param json_string: The JSON string to parse :type json_string: str :return: A Python dictionary parsed from the JSON string :rtype: dict \\"\\"\\" return json.loads(json_string)"},{"instruction":"Develop an API in Python to convert between different units of measurement. Not applicable","output":"# Dictionary with conversion factors FACTORS = { 'in': 2.54, 'cm': 0.39, 'ft': 30.48, 'm': 1 } def convert(from_unit, to_unit, value): \\"\\"\\" Convert between measurement units. \\"\\"\\" factor = FACTORS[from_unit]/FACTORS[to_unit] return factor * value # Test the function print(convert('in', 'cm', 10)) # Output: 25.4 print(convert('ft', 'm', 15)) # Output: 4.572"},{"instruction":"Write a Python program to edit a given string and remove all occurances of the. string = the quick brown fox jumped over the lazy dog","output":"def remove_the(string): edited_string = string.replace(\\"the\\", \\"\\") return edited_string result = remove_the(\\"the quick brown fox jumped over the lazy dog\\") print(result)"},{"instruction":"Create a Python program to identify whether a number is prime or not. 15","output":"def is_prime(num): if num > 1: for n in range(2, num): if (num % n) == 0: return False return True else: return False num = int(input(\\"Enter a number: \\")) if is_prime(num): print(num, \\"is a Prime number\\") else: print(num, \\"is not a Prime number\\")"},{"instruction":"Write a Python function that takes two input strings and returns TRUE if the second string is a rotation of the first one (e.g., 'hello' and 'lohel' should return true). hello, lohel","output":"def is_rotation(str1, str2): return len(str1) == len(str2) and str2 in str1 + str1 # testing print(is_rotation('hello', 'lohel')) # prints True"},{"instruction":"Provide a function in Python for squaring all elements of a given array. list = [1, 2, 3, 4]","output":"def square_elements(arr): return [num**2 for num in arr]"},{"instruction":"Design a program in Python to reverse the words of a given string. String s = This is an example sentence.","output":"def reverseWords(s): # split the string words = s.split(' ') # reverse the words words = words[::-1] # join the words reverseString = ' '.join(words) return reverseString s = \\"This is an example sentence.\\" print(reverseWords(s)) # Output: sentence. example an is This"},{"instruction":"Create a program to encrypt a string using matrix transposition in Python. string = AESTHETICISMISTHEFINESTART","output":"def encryptMatrixTranspose(string): matrix = [list(string[i:i+6]) for i in range(0, len(string), 6)] for row in matrix: if(len(row) != 6): for i in range(len(row), 6): row.append(\\"_\\") new_matrix = [] for i in range(6): new_row = [] for row in matrix: new_row.append(row[i]) new_matrix.append(new_row) return ''.join([''.join(row) for row in new_matrix]) string = \\"AESTHETICISMISTHEFINESTART\\" encrypted = encryptMatrixTranspose(string) print(encrypted)"},{"instruction":"Create a Python script that automates the process of filling out a web form. Not applicable","output":"import requests url = 'https://example.com' # Set the form data data = { 'field1': 'value1', 'field2': 'value2', 'field3': 'value3', 'field4': 'value4' } # Send a POST request to the URL with the form data r = requests.post(url, data=data) # Check the response code if r.status_code == 200: print('Form submitted successfully.') else: print('Error submitting form.')"},{"instruction":"Create a basic sentence classifer in Python using NLP. The classifier should be able to classify whether a sentence is about science, technology, or sports. science and technology has revolutionized how we live","output":"import nltk from nltk import word_tokenize from nltk.corpus import stopwords import sklearn from sklearn.svm import SVC # Pre-process input for the classifier def pre_process(sentence): stopwords_list = stopwords.words('english') tokens = word_tokenize(sentence) lower_tokens = [token.lower() for token in tokens if token not in stopwords_list] return lower_tokens # Create feature set using bag of words def create_feature_set(sentence_list): feature_set = [] for item in sentence_list: feature_set.extend([pre_process(item['sentence'])]) return feature_set # Train the classifier def train_classifier(sentence_list): feature_set = create_feature_set(sentence_list) targets = [item['category'] for item in sentence_list] svc = SVC(kernel='linear').fit(feature_set, targets) return svc # Test the classifier def test_classifier(classifier, sentence): feature_set = pre_process(sentence) prediction = classifier.predict([feature_set]) return prediction[0] # Train the classifier sentence_list = [ {'sentence': 'I like playing football', 'category': 'sports'}, {'sentence': 'I like reading books', 'category': 'science'}, {'sentence': 'Data science is an interesting field', 'category': 'technology'} ] classifier = train_classifier(sentence_list) # Predict the sentence sentence = 'science and technology has revolutionized how we live' prediction = test_classifier(classifier, sentence) print('Prediction:', prediction) #technology"},{"instruction":"Create a Python machine learning model that takes data points of the form (x, y), where x is an integer in the range [1,10] and y is an integer in the range [1,100]. The model should predict whether the value of y given x is even or odd. Not applicable","output":"import numpy as np from sklearn.linear_model import LogisticRegression # Generate data points X = [] y = [] for i in range(1, 11): for j in range(1, 101): X.append([i, j]) if j % 2 == 0: y.append(1) else: y.append(0) # Train the model X_data = np.array(X) y_data = np.array(y) model = LogisticRegression() model.fit(X_data, y_data)"},{"instruction":"Write a Python program to optimize a bank’s loan portfolio. The program should include a function that updates a portfolio’s weights according to a given risk/return ratio. portfolio_weights = {'Equities': 0.40, 'Bonds': 0.30, 'Real Estate': 0.20, 'Cash': 0.10} target_ratio = {'Equities': 0.35, 'Bonds': 0.30, 'Real Estate': 0.30, 'Cash': 0.05}","output":"def optimize_portfolio_weights(portfolio_weights, target_ratio): # Create a dictionary to store optimized weights optimized_weights = {} # Iterate over portfolio weights and update them according to the target ratio for asset, weight in portfolio_weights.items(): optimized_weights[asset] = target_ratio.get(asset, weight) return optimized_weights portfolio_weights = {'Equities': 0.40, 'Bonds': 0.30, 'Real Estate': 0.20, 'Cash': 0.10} target_ratio = {'Equities': 0.35, 'Bonds': 0.30, 'Real Estate': 0.30, 'Cash': 0.05} weights = optimize_portfolio_weights(portfolio_weights, target_ratio) print(weights)"},{"instruction":"Create a Python dictionary where the keys are the cities and the values are corresponding population densities. Lahore: 3,883 Karachi: 8,130 Islamabad: 2,572","output":"cities_populations = { \\"Lahore\\": 3,883, \\"Karachi\\": 8,130, \\"Islamabad\\": 2,572 }"},{"instruction":"This code handles alternate character sets for character strings. To use it, call the \`decode\` function with a \`DataElement\` instance containing a value to convert and the value of Specific Character Set (0008,0005), which may be a single value, a multiple value (code extension), or may also be '' or None. If blank or None, ISO_IR 6 is used. The function will apply the DICOM character encoding to the data element. If the data element is of VR PN, it will handle the special case where it may have 3 components with different character sets. If the data element is of VR in text_VRs, it will remove the first encoding if this is a multibyte encoding and decode the string value to unicode.","output":"# charset.py \\"\\"\\"Handle alternate character sets for character strings.\\"\\"\\" # # Copyright (c) 2008-2012 Darcy Mason # This file is part of pydicom, released under a modified MIT license. # See the file license.txt included with this distribution, also # available at https://github.com/darcymason/pydicom # from pydicom import compat from pydicom.config import logger from pydicom.valuerep import PersonNameUnicode, text_VRs from pydicom.compat import in_py2 # Map DICOM Specific Character Set to python equivalent python_encoding = { '': 'iso8859', # default character set for DICOM 'ISO_IR 6': 'iso8859', # alias for latin_1 too 'ISO_IR 100': 'latin_1', 'ISO_IR 101': 'iso8859_2', 'ISO_IR 109': 'iso8859_3', 'ISO_IR 110': 'iso8859_4', 'ISO_IR 126': 'iso_ir_126', # Greek 'ISO_IR 127': 'iso_ir_127', # Arab 'ISO_IR 138': 'iso_ir_138', # Hebrew 'ISO_IR 144': 'iso_ir_144', # Russian 'ISO_IR 148': 'iso8859_5', # Thai 'ISO_IR 166': 'XXXXX', No idea what this maps too 'ISO 2022 IR 6': 'iso8859', # alias for latin_1 too 'ISO 2022 IR 13': 'shift_jis', 'ISO 2022 IR 87': 'iso2022_jp', 'ISO 2022 IR 100': 'latin_1', 'ISO 2022 IR 101': 'iso8859_2', 'ISO 2022 IR 109': 'iso8859_3', 'ISO 2022 IR 110': 'iso8859_4', 'ISO 2022 IR 126': 'iso_ir_126', 'ISO 2022 IR 127': 'iso_ir_127', # Arab 'ISO 2022 IR 138': 'iso_ir_138', 'ISO 2022 IR 144': 'iso_ir_144', 'ISO 2022 IR 148': 'iso8859_5', 'ISO 2022 IR 149': 'euc_kr', # needs cleanup via clean_escseq() # Japanesse 'ISO 2022 IR 159': 'XXXX', 'ISO_IR 192': 'UTF8', # from Chinese example, 2008 PS3.5 Annex J p1-4 'GB18030': 'GB18030', } default_encoding = \\"iso8859\\" def clean_escseq(element, encodings): \\"\\"\\"Remove escape sequences that Python does not remove from Korean encoding ISO 2022 IR 149 due to the G1 code element. \\"\\"\\" if 'euc_kr' in encodings: return element.replace( \\"x1bx24x29x43\\", \\"\\").replace(\\"x1bx28x42\\", \\"\\") else: return element # DICOM PS3.5-2008 6.1.1 (p 18) says: # default is ISO-IR 6 G0, equiv to common chr set of ISO 8859 (PS3.5 6.1.2.1) # (0008,0005) value 1 can *replace* the default encoding... # for VRs of SH, LO, ST, LT, PN and UT (PS3.5 6.1.2.3)... # with a single-byte character encoding # if (0008,0005) is multi-valued, then value 1 (or default if blank)... # is used until code extension escape sequence is hit, # which can be at start of string, or after CR/LF, FF, or # in Person Name PN, after ^ or = # NOTE also that 7.5.3 SEQUENCE INHERITANCE states that if (0008,0005) # is not present in a sequence item then it is inherited from its parent. def convert_encodings(encodings): \\"\\"\\"Converts DICOM encodings into corresponding python encodings\\"\\"\\" # If a list if passed, we don't want to modify the list in place so copy it encodings = encodings[:] if isinstance(encodings, compat.string_types): encodings = [encodings] elif not encodings[0]: encodings[0] = 'ISO_IR 6' try: encodings = [python_encoding[x] for x in encodings] except KeyError: # Assume that it is already the python encoding (is there a way to check this?) pass if len(encodings) == 1: encodings = [encodings[0]] * 3 elif len(encodings) == 2: encodings.append(encodings[1]) return encodings def decode(data_element, dicom_character_set): \\"\\"\\"Apply the DICOM character encoding to the data element data_element -- DataElement instance containing a value to convert dicom_character_set -- the value of Specific Character Set (0008,0005), which may be a single value, a multiple value (code extension), or may also be '' or None. If blank or None, ISO_IR 6 is used. \\"\\"\\" if not dicom_character_set: dicom_character_set = ['ISO_IR 6'] encodings = convert_encodings(dicom_character_set) # decode the string value to unicode # PN is special case as may have 3 components with differenct chr sets if data_element.VR == \\"PN\\": # logger.warn(\\"%s ... type: %s\\" %(str(data_element), type(data_element.VR))) if not in_py2: if data_element.VM == 1: data_element.value = data_element.value.decode(encodings) else: data_element.value = [val.decode(encodings) for val in data_element.value] else: if data_element.VM == 1: data_element.value = PersonNameUnicode(data_element.value, encodings) else: data_element.value = [PersonNameUnicode(value, encodings) for value in data_element.value] if data_element.VR in text_VRs: # Remove the first encoding if this is a multi-byte encoding if len(encodings) > 1: del encodings[0] # You can't re-decode unicode (string literals in py3) if data_element.VM == 1: if isinstance(data_element.value, compat.text_type): return data_element.value = clean_escseq( data_element.value.decode(encodings[0]), encodings) else: output = list() for value in data_element.value: if isinstance(value, compat.text_type): output.append(value) else: output.append(clean_escseq(value.decode(encodings[0]), encodings)) data_element.value = output"},{"instruction":"Write a Python program to specify the order of element when given an array and a number. arr=[1,2,3,4], k=3","output":"def order_elements(arr, k): k_arr = [] j_arr = [] for i in arr: if i <= k: k_arr.append(i) else: j_arr.append(i) k_arr.extend(j_arr) return k_arr"},{"instruction":"Create a Python program to sort a list of dictionaries by the value of the keyvalue pair. data = [{ 'name': 'Sam', 'age': 30 }, { 'name': 'Alex', 'age': 25 }, { 'name': 'John', 'age': 28 }]","output":"data = [{ 'name': 'Sam', 'age': 30 }, { 'name': 'Alex', 'age': 25 }, { 'name': 'John', 'age': 28 }] def sort_list_dictionaries(data): return sorted(data, key=lambda k: k['age']) print(sort_list_dictionaries(data)) # Outputs: [{'name': 'Alex', 'age': 25}, {'name': 'John', 'age': 28}, {'name': 'Sam', 'age': 30}]"},{"instruction":"Construct a Python list comprehension to generate a 3x3 matrix filled with integers from 1 to 9.","output":"matrix = [[i+(3*j) for i in range(1,4)] for j in range(3)]"},{"instruction":"Create a webscraping program to extract data from twitter.","output":"\\"\\"\\" Create a web scraping program to extract data from twitter. \\"\\"\\" from bs4 import BeautifulSoup import requests def scrape_data(): url = 'https://twitter.com/search?q=%23python' response = requests.get(url) html = response.text soup = BeautifulSoup(html, 'html.parser') tweets = soup.find_all('p', {'class': 'TweetTextSize'}) for tweet in tweets: print(tweet.text) if __name__ == \\"__main__\\": scrape_data()"},{"instruction":"Write a machine learning model in Python for predicting if a customer will buy a product based on customer data. The dataset contains 15000 records of a customer's purchase history with features such as age gender, purchase frequency, product type, and product category.","output":"import pandas as pd import numpy as np # Load data data = pd.read_csv('customer_data.csv') # Create input features X = np.array(data[['age', 'gender', 'purchase_freq', 'product_type', 'product_category']]) # Create output labels y = np.array(data['bought']) # Split into Train/Test Sets from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) # Create and fit model from sklearn.tree import DecisionTreeClassifier classif = DecisionTreeClassifier() classif.fit(X_train, y_train) # Evaluate model y_pred = classif.predict(X_test) score = classif.score(X_test, y_test) print(\\"Accuracy: \\", score)"},{"instruction":"Generate a Python program to implement a MinHeap data structure.","output":"class MinHeap: def __init__(self): self.heap_array = [] def parent(self, i): return (i - 1) // 2 def insert(self, key): self.heap_array.append(key) # Fix the min heap property if it is violated self.heapify_up(len(self.heap_array) - 1) def heapify_up(self, index): # If current node is greater than parent, then swap if index > 0 and self.heap_array[self.parent(index)] > self.heap_array[index]: # Swap the current node with its parent self.heap_array[index], self.heap_array[self.parent(index)] = ( self.heap_array[self.parent(index)], self.heap_array[index], ) # Heapify the parent node self.heapify_up(self.parent(index)) def delete_min(self): if self.heap_array: deletemin = self.heap_array[0] # Replace the root with the last node self.heap_array[0] = self.heap_array[-1] del self.heap_array[-1] # Heapify the root node self.heapify_down(0) return deletemin def heapify_down(self, index): index_left = 2 * index + 1 index_right = 2 * index + 2 index_smallest = index # If left child is smaller than root if ( index_left < len(self.heap_array) and self.heap_array[index_left] < self.heap_array[index] ): index_smallest = index_left # If right child is smaller than smallest so far if ( index_right < len(self.heap_array) and self.heap_array[index_right] < self.heap_array[index_smallest] ): index_smallest = index_right # If index is not the smallest if index != index_smallest: # Swap with the smallest self.heap_array[index], self.heap_array[index_smallest] = ( self.heap_array[index_smallest], self.heap_array[index], ) # Heapify the index that was swapped self.heapify_down(index_smallest)"},{"instruction":"Write a function in Python to convert following input into a dictionary [(a, 1), (b, 2), (c, 3)]","output":"def list_to_dict(input_list): output_dict = {} for key, value in input_list: output_dict[key] = value return output_dict"},{"instruction":"Write a Python program that takes a string and counts the number of occurrences of each letter, and then prints the results. Hello World!","output":"str = \\"Hello World!\\" chars = list(str) # initialize counts as empty dictionary char_counts = {} for char in chars: if char in char_counts: char_counts[char] += 1 else: char_counts[char] = 1 # printing result for char, count in char_counts.items(): print(\\"{} : {}\\".format(char, count))"},{"instruction":"Create a Python program to convert a list of values from Celsius to Fahrenheit. [0, 10, 20]","output":"\\"\\"\\" Create a Python program to convert a list of values from Celsius to Fahrenheit \\"\\"\\" def celsiusToFahrenheit(celsius_list): fahrenheit_list = [] for celsius in celsius_list: fahrenheit = celsius * 9/5 + 32 fahrenheit_list.append(fahrenheit) return fahrenheit_list if __name__ == '__main__': celsius_list = [0, 10, 20] fahrenheit_list = celsiusToFahrenheit(celsius_list) print(fahrenheit_list)"},{"instruction":"Generate a function in Python that checks if an entered number is even or odd and returns a string with the type.","output":"def check_type(num): if num % 2 == 0: return 'even' else: return 'odd'"},{"instruction":"Create a Python program to find the sum of all the multiples of 3 and 5 below 1000.","output":"total = 0 for i in range(1000): if i % 3 == 0 or i % 5 == 0: total += i print(total)"},{"instruction":"Create a Python class that implements a Linked List structure.","output":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def insert(self, new_node): temp = self.head if temp is None: self.head = new_node return while temp.next is not None: temp = temp.next temp.next = new_node # 5. Instruction: Given a list of integers, write a Python program to find the longest increasing sub-sequence from the given list. 5. Input: [2, 3, 4, 5, 6, 1, 7, 8] 5. Output: def longestIncreasingSubsequence(arr): n = len(arr) lis = [1]*n for i in range (1 , n): for j in range(0 , i): if arr[i] > arr[j] and lis[i]< lis[j] + 1 : lis[i] = lis[j]+1 maximum = 0 for i in range(n): maximum = max(maximum , lis[i]) return maximum arr = [2, 3, 4, 5, 6, 1, 7, 8] print(\\"Length of Longest Increasing Subsequence is\\", longestIncreasingSubsequence(arr))"},{"instruction":"Using a Python program, generate a random password of 8 characters, where at least one character is a uppercase letter and one character is a number.","output":"import string import random def generate_password(): chars = string.ascii_lowercase + string.ascii_uppercase + string.digits size = 8 while True: password = ''.join(random.choice(chars) for _ in range(size)) if any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password): break return password print(generate_password())"},{"instruction":"Create a class Fraction in Python which performs basic mathematical operations on two fractions provided as input.","output":"class Fraction: def __init__(self, numerator, denominator): self.numerator = numerator self.denominator = denominator def __add__(self, obj2): n = self.numerator * obj2.denominator + obj2.numerator * self.denominator d = self.denominator * obj2.denominator return Fraction(n, d) def __sub__(self, obj2): n = self.numerator * obj2.denominator - obj2.numerator * self.denominator d = self.denominator * obj2.denominator return Fraction(n, d) def __mul__(self, obj2): n = self.numerator * obj2.numerator d = self.denominator * obj2.denominator return Fraction(n, d) def __truediv__(self, obj2): n = self.numerator * obj2.denominator d = self.denominator * obj2.numerator return Fraction(n, d) def simplify_fraction(self): i = 2 while i <= self.numerator: if self.numerator % i == 0 and self.denominator % i == 0: self.numerator = self.numerator / i self.denominator = self.denominator / i else: i += 1"},{"instruction":"Given a list of names, write a program in Python to create a new list with the first letter in each name capitalized. names = [kevin, david, james, george]","output":"def capitalized_list(names): new_list = [] for name in names: new_list.append(name.capitalize()) return new_list print(capitalized_list(names)) # Output ['Kevin', 'David', 'James', 'George']"},{"instruction":"Design a Python script to generate a report containing summaries of the data in a table. Table name: order","output":"import pandas as pd # Load data from the orders table orders = pd.read_csv('orders.csv') # Generate summary statistics for the orders table summary_stats = orders.describe() # Generate a report containing summary statistics report = open('report.html', 'w') report.write(summary_stats.to_html()) report.close()"},{"instruction":"Write a python class to represent a circle","output":"class Circle: def __init__(self, radius): self.radius = radius def area(self): return 3.14 * (self.radius ** 2) def circumference(self): return 2 * 3.14 * self.radius circle1 = Circle(10) print(circle1.area()) print(circle1.circumference())"},{"instruction":"Create a web scraper in Python to scrape the top 10 products from a bike parts website.","output":"#import libraries import requests from bs4 import BeautifulSoup #specify the url and fetch the data from the server url = 'https://examplewebsite.com/' page = requests.get(url) #parse the html content soup = BeautifulSoup(page.content, 'html.parser') #get all the product listings listings = soup.find_all('div', class_='listing') #iterate over each of the product listings for listing in listings[:10]: title = listing.find('h2').text price = listing.find('span', class_='price').text print('{} - {}'.format(title, price))"},{"instruction":"Write a Python code snippet to filter out elements from a given list lst where the element is not greater than 5. [3, 7, 2, 4, 6, 8]","output":"filtered_lst = [x for x in lst if x <= 5]"},{"instruction":"Write a Python script to check if the given string is a palindrome. string_to_test = racecar","output":"def is_palindrome(string_to_test): reverse = reversed(string_to_test) if list(string_to_test) == list(reverse): return True return False"},{"instruction":"Create a Python program to generate all the possible permutations of a given array. [1, 2, 3]","output":"def permutations(arr): if len(arr) == 0: return [] if len(arr) == 1: return [arr] l = [] for i in range(len(arr)): m = arr[i] remLst = arr[:i] + arr[i+1:] for p in permutations(remLst): l.append([m] + p) return l"},{"instruction":"Python Script to normalize a list of numbers. [1, 0.2, 5.66, 2.344, 0]","output":"def normalize(numbers): min_num = min(numbers) max_num = max(numbers) for i in range(0, len(numbers)): numbers[i] = (numbers[i] - min_num) / (max_num - min_num) return numbers print(normalize([-1, 0.2, 5.66, -2.344, 0]))"},{"instruction":"You need to optimise a given Python code, which takes a 3x3 matrix as input and outputs the inverse. import numpy as np def inverse_matrix(matrix): return np.linalg.inv(matrix)","output":"import numpy as np def inverse_matrix(matrix): det = np.linalg.det(matrix) if det == 0: return None return np.dot(np.linalg.inv(matrix), 1/det)"},{"instruction":"Optimize a Python code for extracting a string pattern from a list of strings. Not applicable","output":"import re strings = ['abc123', '456def', '7890ghi'] pattern = 'd+' matches = [] for string in strings: match = re.search(pattern, string) matches.append(match.group(0)) print(matches) # ['123', '456', '7890'] # Optimized version import re strings = ['abc123', '456def', '7890ghi'] matches = [re.search(r'd+', string).group(0) for string in strings] print(matches) # ['123', '456', '7890']"},{"instruction":"Generate a Python program to predict how long a customer will stay with a company. Predict the customer retention after 6 months of joining.","output":"from sklearn import linear_model import pandas as pd # Define the model model = linear_model.LinearRegression() # Load the data data = pd.read_csv('customer_data.csv') # Fit the data X = data[['age', 'location', 'membership']] y = data['retention'] model.fit(X, y) # Predict the customer retention after 6 months predict = model.predict([[6, 'London', 'Premium']]) print(predict)"},{"instruction":"mplement a genetic algorithm in Python for optimizing a given function that returns a numeric value. Not applicable","output":"import random def function(x): # replace this with your function return x + 2 def genetic_algorithm(population, pop_size, fit_threshold, max_generations): # initialize population current_gen = init_population(population, pop_size) # evaluate population fitness_scores = get_fitness_scores(current_gen) # loop until termination condition is met for generation in range(max_generations): # select parents parents = tournament_selection(current_gen, fitness_scores) # crossover children = crossover(parents) # mutate mutated_children = mutate(children) # evaluate new population fitness_scores = get_fitness_scores(mutated_children) # select survivors current_gen = select_survivors(mutated_children, fitness_scores) # check fitness threshold if max(fitness_scores) > fit_threshold: break best_individual = current_gen[fitness_scores.index(max(fitness_scores))] return best_individual, max(fitness_scores) def init_population(population, pop_size): # initialize population with random individuals # population should contain individuals that are valid solutions of function return [population[random.randint(0, len(population)-1)] for _ in range(pop_size)] def get_fitness_scores(population): # evaluate each individual and return their fitness scores return [function(individual) for individual in population] def tournament_selection(population, fitness_scores): # select parents through tournament selection # tournament size should be half of population # winners are selected based on the greatest fitness score return [population[fitness_scores.index(max(random.sample(fitness_scores, len(population) // 2)))] for _ in range(len(population) // 2)] def crossover(parents): # crossover parents to generate children return [random.choice(parent1 + parent2) for parent1, parent2 in zip(parents[::2], parents[1::2])] def mutate(children): # mutate each child with a given probability return [child[random.randint(0, len(child)-1) + 1] for child in children] def select_survivors(population, fitness_scores): # select survivors with elitist selection strategy # only the fittest individual survives return [population[fitness_scores.index(max(fitness_scores))]]"},{"instruction":"Write a Python program to separate a specified string into characters and numbers. str = ab12cd3","output":"def separate_charnum(str): chars = [] nums = [] for char in str: if char.isalpha(): chars.append(char) else: nums.append(int(char)) return chars, nums str = \\"ab12cd3\\" chars, nums = separate_charnum(str) print(chars) print(nums)"},{"instruction":"Convert the following java program to python. public class Main { public static void main(String[] args) { int number = 10; int square = number * number; System.out.println(Square of given number is: +square); } }","output":"# Converting from Java to Python number = 10 square = number * number print(\\"Square of given number is: \\"+str(square))"},{"instruction":"Create a Python script to calculate the median of an array of integers. [3, 1, 4, 5, 2]","output":"def median(arr): # Sort the array arr.sort() n = len(arr) # If number of elements is odd, # return the middle element if n % 2 != 0: return arr[n//2] # If number of elements is even, # return the average of the middle # two elements else: return (arr[n//2] + arr[(n//2)-1]) / 2 # Driver code arr = [3, 1, 4, 5, 2] print(median(arr))"},{"instruction":"Generate a random alphanumeric string of 20 characters in length in Python. Not applicable","output":"import string import random def generate_random_string(): chars = string.ascii_letters + string.digits random_string = ''.join(random.choice(chars) for _ in range(20)) return random_string random_string = generate_random_string() print(random_string) // \\"xVUqrHZkXDjzXFVfBmO7\\""},{"instruction":"Design a Python program to check if a given string has balanced parenthesis.","output":"def is_balanced(string): stack = [] for char in string: if char == '(': stack.append(char) elif char == ')': if len(stack)==0: return False stack.pop() if len(stack) == 0: return True else: return False"},{"instruction":"Generate a Python program to generate a random password of length 8 that contains at least one of each type of characters: uppercase alphabets, lowercase alphabets and special symbols.","output":"import random def generate_password(): alphabet = \\"abcdefghijklmnopqrstuvwxyz\\" size = 8 password = \\"\\" for i in range(size): if i%3 == 0: password += chr(random.randint(33,47)) elif i%3 == 1: password += chr(random.randint(65,90)) elif i%3 == 2: password += alphabet[random.randint(0,len(alphabet)-1)] return password"},{"instruction":"Create a RESTful API in Python that exposes a content to be consumed by other applications.","output":"from flask import Flask, jsonify app = Flask(__name__) @app.route('/content', methods=['GET']) def get_content(): content = {'data': 'This is the content that will be exposed.'} return jsonify(content) if __name__ == \\"__main__\\": app.run()"},{"instruction":"Develop an algorithm in Python for merging k sorted arrays. arrays = [ [1, 3, 5], [2, 4, 6], [7, 8, 9] ]","output":"def mergeKArrays(arrays): ''' This function will merge k sorted arrays in to one sorted array. ''' # initialize the resulting array result = [] # loop through all the arrays for array in arrays: # merge this array with existing result result = mergeTwoArrays(result, array) # return the result array return result def mergeTwoArrays(arr1, arr2): # define the resulting array result = [] i, j = 0, 0 # loop through both the arrays while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: result.append(arr1[i]) i += 1 else: result.append(arr2[j]) j += 1 # add the remaining elements from both arrays result.extend(arr1[i:]) result.extend(arr2[j:]) return result arrays = [[1, 3, 5], [2, 4, 6], [7, 8, 9]] print(mergeKArrays(arrays)) # [1, 2, 3, 4, 5, 6, 7, 8, 9]"},{"instruction":"Use a Python function to determine the maximum of three given numbers.","output":"def maxOfThree(a, b, c): return max(a, b, c)"},{"instruction":"Write a Python script that takes two numbers as input and raises the first number to the power of the second number. 2, 5","output":"def power_function(a, b): return a**b a = int(input(\\"Enter the first number: \\")) b = int(input(\\"Enter the second number: \\")) result = power_function(a, b) print(\\"The result is:\\", result)"},{"instruction":"Create a Python program that takes in a list and returns a new list. The program should subtract 10 from every element in the list. list = [1,2,3,4,5]","output":"def subtractFromList(list): return [x - 10 for x in list]"},{"instruction":"Generate a Python program to add new elements to an existing tuple. oldTuple = (1, 2, 3) newElements = (4, 5, 6)","output":"# create a new tuple adding the elements from the old tuple and the new elements newTuple = oldTuple + newElements"},{"instruction":"Using SWIG, create a C++ library that can be used in Python. This library should include a function for calculating the mean of an array of numbers. Not applicable","output":"// File mean.cpp #include <iostream> #include <vector> double mean(std::vector<double> vals) { double result = 0; for (int i = 0; i < vals.size(); i++) result += vals[i]; return result / vals.size(); } // File mean.i %module mean %{ #define SWIG_FILE_WITH_INIT #include \\"mean.cpp\\" %} %include \\"arrays_cw.i\\" %include \\"mean.cpp\\" // File setup.py from distutils.core import setup, Extension example_module = Extension('_mean', sources=['mean_wrap.cxx', 'mean.cpp'],) setup (name = 'mean', version = '0.1', author = \\"SWIG\\", description = \\"\\"\\"Simple swig example from docs\\"\\"\\", ext_modules = [example_module], py_modules = [\\"mean\\"], ) // File mean_wrap.cxx #include \\"mean.h\\" #ifdef __cplusplus extern \\"C\\" { #endif double mean(double *vals, int n) { std::vector<double> v; for (int i=0; i<n; i++) v.push_back(vals[i]); return mean(v); } #ifdef __cplusplus } #endif"},{"instruction":"Create a Python class called Home that has name, location and price parameters. Allow a user to instantiate this class and print the location and price. name = My Home location = New York price = 500,000","output":"class Home: def __init__(self, name, location, price): self.name = name self.location = location self.price = price def print_location_and_price(self): print(\\"Location: \\" + self.location + \\", Price: \\" + self.price) home = Home(\\"My Home\\", \\"New York\\", \\"500,000\\") home.print_location_and_price()"},{"instruction":"Generate a Python script which takes an integer as an argument and prints out the Fibonacci sequence upto the given integer. Integer: 10","output":"def fibonacci(n): a, b = 0, 1 for _ in range(n): a, b = b, a+b return a for i in range(1, 11): fib = fibonacci(i) print(fib)"},{"instruction":"Generate a code that creates a new python class which inherits attributes and methods from the base class. Base class name: Employee Subclass name: Manager","output":"class Manager(Employee): \\"\\"\\"A manager class that inherits from the employee class.\\"\\"\\" def __init__(self, name, age, salary, designation): \\"\\"\\"Initialize the manager class with the inherited attributes from the Employee class\\"\\"\\" super().__init__(name, age, salary) self.designation = designation def give_raise(self, amount): \\"\\"\\"Give the manager a raise equivalent to the amount specified\\"\\"\\" self.salary += amount"},{"instruction":"Optimize the python code below for memory efficiency. my_list = [] for i in range(20): my_list.append(i**2)","output":"my_list = [i**2 for i in range(20)]"},{"instruction":"Create a python program to check if the value entered is a prime number","output":"def is_prime(n): # edge cases if n == 1 or n < 0: return False # check if number is divisible by any number # from 2 to n for i in range(2, n): if (n % i) == 0: return False return True x = 5 if is_prime(x): print(x, \\"is a prime number\\") else: print(x, \\"is not a prime number\\")"},{"instruction":"To measure the successful pings per second using this script, follow these steps: 1. Run the script using the command sudo python ping.py l a 61:8E:9C:CD:03 f 74 t 0 r 0. 2. Enter the address to sniff with the a or address argument, followed by the RF channel with the f or channel argument. 3. The script will put the radio in sniffer mode and set the channel. 4. The script will display the maximum and current rate of successful pings per second on the console. 5. To stop the script, press Ctrl+C.","output":"#!/usr/bin/env python2 ''' Author: xswxm Blog: xswxm.com This script will measure the successful pings per seconds. e.g.: sudo python ping.py -l -a 61:8E:9C:CD:03 -f 74 -t 0 -r 0 ''' import sys, time, threading from lib import common common.init_args('./ping.py') common.parser.add_argument('-a', '--address', type=str, help='Address to sniff, following as it changes channels', required=True) common.parser.add_argument('-f', '--channel', type=int, help='RF channel', default=0) common.parse_and_init() channel = common.args.channel # Total number of payloads sent count = 0 # Parse the prefix address address = common.args.address.replace(':', '').decode('hex')[::-1][:5] # Put the radio in sniffer mode (ESB w/o auto ACKs) common.radio.enter_sniffer_mode(address) # Set channel common.radio.set_channel(channel) stop_event = threading.Event() stop_event.set() # Update per milliseconds def display(): global count, stop_event # To record the number of payloads sent for every 100 milliseconds pings = [0]*10 # Highest rate max_rate = 0 while stop_event.isSet(): pings = pings[1:] + [count] rate = pings[-1] - pings[0] if max_rate < rate: max_rate = rate msg = 'Maximum Rate: {0:>4}pks/s Current Rate: {1:>4}pks/s'.format(max_rate, rate) sys.stdout.write('r'+msg) sys.stdout.flush() time.sleep(0.1) if __name__ == \\"__main__\\": t = threading.Thread(target=display,args=()) t.start() try: while True: if common.radio.transmit_payload(common.ping_payload, common.ack_timeout, common.retries): count += 1 except KeyboardInterrupt: stop_event.clear()"},{"instruction":"Create a program in Python which takes a string and prints out all the words present in the string in alphabetical order. string = This is a test string","output":"def sortString(string): words = string.split(\\" \\") words.sort() return words print(sortString(string))"},{"instruction":"Design a FOR loop algorithm in Python to print all numbers starting from one to the given number. 10","output":"for i in range(1, 11): print(i)"},{"instruction":"Generate a Python function that takes an array of integers as input and returns an array of integers with the positive numbers appearing before the negative numbers. [5, 2, 7, 3, 4, 9]","output":"def sort_positives_negatives(arr): positives = [] negatives = [] for x in arr: if x < 0: negatives.append(x) else: positives.append(x) return positives + negatives result = sort_positives_negatives([-5, 2, 7, -3, 4, 9]) print(result)"},{"instruction":"Write a Python program to create a list that contains the elements of the previous list, but with all duplicates removed. list_with_duplicates = [2, 3, 4, 4, 5, 5, 6, 6]","output":"no_duplicates_list = list(set(list_with_duplicates))"},{"instruction":"mplement a neural network in Python which takes two inputs and produces a single output. Sample input to the neural network: Input 1: [1, 0, 0] Input 2: [1, 0, 0]","output":"import numpy as np import matplotlib.pyplot as plt # Training dataset x = np.array([ [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]) y = np.array([[0],[1],[1],[0]]) # Initialize the weights and bias W1 = np.random.rand(3, 4) W2 = np.random.rand(4, 1) b1 = np.random.rand(4,) b2 = np.random.rand(1,) # Define the sigmoid activation function def sigmoid(x): return 1/(1 + np.exp(-x)) # Define the derivative of the sigmoid function def derivative_sigmoid(x): return sigmoid(x)*(1-sigmoid(x)) # Feedforward h1 = x.dot(W1) + b1 # Hidden layer activation a1 = sigmoid(h1) # Assesment of second layer h2 = a1.dot(W2) + b2 # Final activation output = sigmoid(h2) # Calculate the error error = y - output # Backpropagation d_output = error * derivative_sigmoid(output) error_hidden_layer = d_output.dot(W2.T) d_hidden_layer = error_hidden_layer * derivative_sigmoid(a1) # Update weights and bias W2 += a1.T.dot(d_output) b2 += np.sum(d_output, axis = 0, keepdims=True) W1 += x.T.dot(d_hidden_layer) b1 += np.sum(d_hidden_layer, axis = 0, keepdims=True) # Printed output from our neural network print (output) # Sample input to the neural network Input 1: [1, 0, 0] Input 2: [1, 0, 0] # Printed output [[0.06108959]]"},{"instruction":"Create a function in Python that returns the surface area of a sphere when given the sphere’s radius as input. radius = 6","output":"import math def sphere_surface_area(radius): surface_area = 4 * math.pi * radius * radius return surface_area # Test radius = 6 print(sphere_surface_area(radius)) # 452.38934211"},{"instruction":"Create an artificial neural network in Python to predict the stock price for a given company. Historical stock price data for the company.","output":"import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.preprocessing import MinMaxScaler from keras.models import Sequential from keras.layers import LSTM, Dense df = pd.read_csv(input_data) # feature scaling sc = MinMaxScaler(feature_range= (0,1)) df_scaled = sc.fit_transform(df) # split into training and test sets x_train, y_train = df_scaled[:train_len, 3], df_scaled[:train_len, 3] x_test, y_test = df_scaled[train_len:, 3], df_scaled[train_len:, 3] # reshape the data x_train = np.reshape(x_train, (x_train.shape[0], 1, x_train.shape[1]) x_test = np.reshape(x_test, (x_test.shape[0], 1, x_test.shape[1]) # build model model = Sequential() model.add(LSTM(50, return_sequences=True)) model.add(LSTM(50, return_sequences=False)) model.add(Dense(1)) model.compile(loss='mean_squared_error', optimizer='adam') # fit model model.fit(x_train, y_train, batch_size=1, epochs=1) # make prediction predicted_stock_price = model.predict(x_test) predicted_stock_price = sc.inverse_transform(predicted_stock_price) # visualize the result plt.plot(real_stock_price, color = 'red', label = 'Real Stock Price') plt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Stock Price') plt.title('Stock Price Prediction') plt.xlabel('Time') plt.ylabel('Stock Price') plt.legend() plt.show()"},{"instruction":"Suggest a completion for the following Python code snippet that implements a linear search on an array. def linear_search(arr, target): for i in range(len(arr))","output":"def linear_search(arr, target): for i in range(len(arr)): if (arr[i] == target): return i return -1"},{"instruction":"Write a python program to classify the given sentence as positive or negative This machine learning project is quite difficult.","output":"def classify_sentiment(sentence): words = sentence.split() positive_words = [\\"good\\", \\"great\\", \\"excellent\\", \\"wonderful\\"] negative_words = [\\"bad\\", \\"horrible\\", \\"terrible\\", \\"awful\\"] pos_count, neg_count = 0, 0 for word in words: if word in positive_words: pos_count += 1 if word in negative_words: neg_count += 1 if pos_count > neg_count: sentiment = \\"positive\\" elif neg_count > pos_count: sentiment = \\"negative\\" else: sentiment = \\"neutral\\" return sentiment"},{"instruction":"Generate a Python dictionary where the keys are states and the values are their capitals.","output":"state_capitals = { 'Alabama': 'Montgomery', 'Alaska': 'Juneau', 'Arizona': 'Phoenix', 'Arkansas': 'Little Rock', 'California': 'Sacramento', 'Colorado': 'Denver', 'Connecticut': 'Hartford', 'Delaware': 'Dover', 'Florida': 'Tallahassee', 'Georgia': 'Atlanta', 'Hawaii': 'Honolulu', 'Idaho': 'Boise', 'Illinois': 'Springfield', 'Indiana': 'Indianapolis', 'Iowa': 'Des Moines', 'Kansas': 'Topeka', 'Kentucky': 'Frankfort', 'Louisiana': 'Baton Rouge', 'Maine': 'Augusta', 'Maryland': 'Annapolis', 'Massachusetts': 'Boston', 'Michigan': 'Lansing', 'Minnesota': 'Saint Paul', 'Mississippi': 'Jackson', 'Missouri': 'Jefferson City', 'Montana': 'Helena', 'Nebraska': 'Lincoln', 'Nevada': 'Carson City', 'New Hampshire': 'Concord', 'New Jersey': 'Trenton', 'New Mexico': 'Santa Fe', 'New York': 'Albany', 'North Carolina': 'Raleigh', 'North Dakota': 'Bismarck', 'Ohio': 'Columbus', 'Oklahoma': 'Oklahoma City', 'Oregon': 'Salem', 'Pennsylvania': 'Harrisburg', 'Rhode Island': 'Providence', 'South Carolina': 'Columbia', 'South Dakota': 'Pierre', 'Tennessee': 'Nashville', 'Texas': 'Austin', 'Utah': 'Salt Lake City', 'Vermont': 'Montpelier', 'Virginia': 'Richmond', 'Washington': 'Olympia', 'West Virginia': 'Charleston', 'Wisconsin': 'Madison', 'Wyoming': 'Cheyenne' }"},{"instruction":"Optimize a given Python code to improve the performance. def find_common_elements(lst1, lst2): result = [] for elem1 in lst1: for elem2 in lst2: if elem1 == elem2: result.append(elem1) return result","output":"def find_common_elements(lst1, lst2): result = [] set_2 = set(lst2) for elem1 in lst1: if elem1 in set_2: result.append(elem1) return result"},{"instruction":"Create an output array from the given input so that each element in the output is the product of all the other element in the same row. [ [10, 2, 3], [4, 5, 6], [7, 8, 9] ]","output":"[180, 144, 120] # Python def get_products(arr): result = [] # looping over each row in the array for row in arr: product = 1 # calculating product of all elements except the element at current index for i,element in enumerate(row): product *= row[i] if i != 0 else 1 # append product to result array result.append(product) return result"},{"instruction":"Create a Python program to print out the prime numbers between the given input range. min = 1 max = 10","output":"def print_primes(min, max): for num in range(min, max+1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: print(num) # Driver Code min = 1 max = 10 print_primes(min, max) # Output: # 2 # 3 # 5 # 7"},{"instruction":"Develop a prototype of a geographic information system in Python.","output":"import geopandas import matplotlib.pyplot as plt # Read in the shapefile of nations world = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres')) # Set up the base figure fig, ax = plt.subplots(figsize=(12, 8)) # Set up the title of the map as a subplot ax.set_title(\\"Geographic Information System\\", fontdict={'fontsize': 20}, loc='left') # Display the world map world.plot(ax=ax, color='white', edgecolor='black') # Display a legend ax.legend(loc='upper right') # Show the map plt.show()"},{"instruction":"Create a HTML page that showcases a professional portfolio website.","output":"<!DOCTYPE html> <html> <head> <title>My Professional Portfolio</title> <style> body { font-family: sans-serif; font-size: 1rem; background-image: url(\\"background.png\\"); background-repeat: no-repeat; background-position: center; background-size: cover; } a { color: #006699; } .container { width: 100%; margin: 0 auto; padding: 25px; text-align: center; line-height: 2rem; background-color: rgba(255, 255, 255, 0.8); box-sizing: border-box; border-radius: 3px; } .header { font-family: sans-serif; font-size: 2rem; font-weight: 600; color: #003333; } </style> </head> <body> <div class=\\"container\\"> <div class=\\"header\\">My Professional Portfolio</div> <p>Welcome to my professional portfolio website! Here you can find all the details about my professional skills and experience.</p> <p>I have experience in software development, web development, and data science. I have worked with some of the most popular technologies such as JavaScript, Python, HTML5 and CSS3. I have also worked with databases like MySQL and MongoDB.</p> <p>I have been working in the industry for over ten years now, and my skills and experience make me a valuable asset for any organization.</p> <p>If you would like to know more about me and my work, please don't hesitate to get in touch.</p> </div> </body> </html>"},{"instruction":"Write a Python program to return the day, date and time when the user enters a specific date as an argument.","output":"import datetime def get_day_date_time(date_string): date = datetime.datetime.strptime(date_string, '%Y-%m-%d') return date.strftime('%A, %d %B %Y, %H:%M:%S') date_string = input('Please enter a date in the format YYYY-MM-DD: ') print(get_day_date_time(date_string))"},{"instruction":"Generate a list comprehension in Python that prints the cubes of the first 5 numbers.","output":"[x**3 for x in range(1, 6)]"},{"instruction":"Automate the process of formatting large sets of data with Python. Large sets of data containing irregular formats, inconsistent delimiter","output":"import re def format_data(data): # replace single white space with comma formatted = re.sub(' +', ',', data) # replace multiple white spaces with single white space formatted = re.sub(' ', ' ', formatted) # remove leading and trailing white spaces formatted = re.sub('^s+|s+?', '', formatted) return formatted data = 'a b c d' formatted_data = format_data(data) print(formatted_data) # OUTPUT: # a,b,c,d"},{"instruction":"Design a program in Python which uses the class inheritance concept.","output":"# Parent class class Person: # Initialize the class def __init__(self, name, age): self.name = name self.age = age # Child class class Student(Person): # Initialize the class def __init__(self, name, age, grade): Person.__init__(self, name, age) self.grade = grade # Create an object of the Child class s = Student(\\"John\\", 10, \\"A\\") # Print the object attribute print(s.name) print(s.age) print(s.grade)"},{"instruction":"Create a function in Python that takes in a dictionary and returns a list of all the values. my_dictionary = { a: 1, b: 2, c: 3 }","output":"def get_values(dictionary): \\"\\"\\" Take in a dictionary and return a list of all the values \\"\\"\\" # Create empty list values = [] # Iterate through dictionary for key in dictionary: # Add value to list values.append(dictionary[key]) # Return list return values if __name__ == '__main__': res = get_values(my_dictionary) print(res)"},{"instruction":"Create a Python script to generate specific figures using matplotlib. The following figure: < Insert Image >","output":"import matplotlib.pyplot as plt # data labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August'] sales = [15, 30, 25, 50, 20, 35, 45, 10] # create the figure fig = plt.figure(figsize=(10, 6)) # plotting the chart plt.plot(labels, sales, 'bo-', linewidth=2) # title and labels plt.title('Monthly Sales Results', fontsize=20) plt.xlabel('Months', fontsize=16) plt.ylabel('Sales (Units)', fontsize=16) # tick parameters plt.xticks(ticks=range(len(labels)), labels=labels, rotation=45, fontsize=12) plt.yticks(fontsize=12) # legend plt.legend(['Sales'], loc='upper right') # grid plt.grid(alpha=0.25) # show plt.show()"},{"instruction":"Write a function in Python that takes two integer numbers and returns the maximum of the two.","output":"def maximum_of_two(a,b): if a > b: return a else: return b"},{"instruction":"Build a code in Python to convert any number to its equivalent Roman numeral.","output":"def int_to_roman(num): # Map numbers to Roman numerals. roman_numeral_map = (('M', 1000), ('CM', 900), ('D', 500), ('CD', 400), ('C', 100), ('XC', 90), ('L', 50), ('XL', 40), ('X', 10), ('IX', 9), ('V', 5), ('IV', 4), ('I', 1)) # Input validation. if num <= 0: raise ValueError(\\"Input cannot be less than 1.\\") # Initial output. output = '' # Loop through values, look for the highest matching number # and repeat the loop until num becomes 0. for numeral, integer in roman_numeral_map: while num >= integer: output += numeral num -= integer # Return result. return output if __name__ == '__main__': print(int_to_roman(13))"},{"instruction":"Create a sentiment analysis module in Python that takes a sentence as an input and returns a value indicating the sentiment of the sentence. Not applicable","output":"import nltk nltk.download('vader_lexicon') from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_analyzer(sentence): sid = SentimentIntensityAnalyzer() sentiment = sid.polarity_scores(sentence)['compound'] if sentiment >= 0.05: return 'positive' elif sentiment <= -0.05: return 'negative' else: return 'neutral' sentiment_analyzer('I love this movie!') // Output: 'positive'"},{"instruction":"Generate a new dataset which has both numeric and string columns, in Python.","output":"import pandas as pd data = { 'Name':['Kim','John','Jack','Mark','Jane'], 'Age':[26,25,23,25,24], 'Score':[90,80,70,78, 89] } df = pd.DataFrame(data)"},{"instruction":"Create a code generator that generates the source code for a simple StockTrader application in Python. The application should enable users to buy stocks, check stock prices and sell stocks. Not applicable","output":"class StockTrader(): def __init__(self, username): self.username = username self.balance = 0 self.stocks = {} def check_balance(self): return self.balance def buy_stock(self, symbol, quantity): if self.balance - quantity >= 0: if symbol in self.stocks: self.stocks[symbol] += quantity else: self.stocks[symbol] = quantity self.balance -= quantity def check_prices(self, symbol): price = get_price(symbol) return price def sell_stocks(self, symbol, quantity): if symbol in self.stocks: if quantity <= self.stocks[symbol]: self.stocks[symbol] -= quantity self.balance += quantity else: print(\\"Not enough \\" + symbol + \\" purchased to sell\\") else: print(\\"You do not own any \\" + symbol)"},{"instruction":"Create an HTML table with a two columns using Python.","output":"from lxml import etree # Create the root element root = etree.Element('table') # Create two columns table_elem = etree.SubElement(root, 'column') table_elem.set('name', 'FirstName') table_elem = etree.SubElement(root, 'column') table_elem.set('name', 'LastName') # Print the whole XML print(etree.tostring(root, pretty_print=True).decode())"},{"instruction":"Compute the sum of two matrices in Python. matrix_1 = [[1, 2, 3], [4, 5, 6]] matrix_2 = [[7, 8, 9], [10, 11, 12]]","output":"import numpy as np matrix_1 = np.array(matrix_1) matrix_2 = np.array(matrix_2) result = np.add(matrix_1, matrix_2) Output: [[ 8 10 12], [14 16 18]]"},{"instruction":"Create a stack program in python that can perform the push, pop and size operations.","output":"class Stack(object): def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def size(self): return len(self.items) # testing stack = Stack() stack.push(1) stack.push(5) print(stack.pop()) # 5 print(stack.size()) # 1"},{"instruction":"Debug the following python code def compute_sum(x, y): return x + y","output":"def compute_sum(x, y): return x + y # Added a missing indentation to the return statement."},{"instruction":"Construct a for loop in Python to print all the values from a list of numbers. mylist = [1, 2, 3, 4, 5]","output":"for x in mylist: print(x)"},{"instruction":"Generate a Python class to define a complex number and an operator overloading function to add two complex numbers.","output":"class ComplexNumber: def __init__(self, real, imaginary): self.real = real self.imaginary = imaginary def __add__(self, other): return ComplexNumber(self.real + other.real, self.imaginary + other.imaginary)"},{"instruction":"Generate a Python program to fill missing values in the given table. Table: student_data | id | name | age | |||| | 1 | John | | | 2 | Jane | | | 3 | Jack | 28 |","output":"import pandas as pd # Read the student data data = pd.read_csv('student_data.csv') # Fill the missing values data['age'] = data['age'].fillna(data['age'].mean()) # Print the result print(data)"},{"instruction":"Generate a Python program to classify emails as either spam or not given a list of words emails = [how are you?, buy now!, save 50%]","output":"def classify_emails(emails): result = [] for email in emails: words = email.split(\\" \\") is_spam = False for word in words: if word in ['buy', 'now', 'save']: is_spam = True break result.append(is_spam) return result"},{"instruction":"Create a Python program to sort a given list according to the second element list = [[2,4], [3,2], [4,1], [1,3]]","output":"def sortList(list): list.sort(key=lambda x: x[1]) return list list = [[2,4], [3,2], [4,1], [1,3]] sorted_list = sortList(list) print(sorted_list) # output [[4, 1], [3, 2], [1, 3], [2, 4]]"},{"instruction":"Coding a classifier in Python to classify a given data set into four categories Data set of 20 records with 4 numerical feature","output":"import numpy as np from sklearn.svm import SVC # X represents the 20 records with 4 numerical features X = np.array([[], [], [], ..., []]) # y represents the 4 categories y = np.array([1, 2, 3, 4]) # Create a svm classifier with linear kernel classifier = SVC(kernel='linear', random_state=0) # Fit the data classifier.fit(X, y)"},{"instruction":"Perform an optimization algorithm in Python to find the maximum value of a function given a set of initial conditions. def f(x): return 3*x**2 + 2*x + 7 initial_conditions = [3.2, 1.5, 2.4]","output":"from scipy.optimize import minimize def f(x): return 3*x**2 + 2*x + 7 initial_conditions = [-3.2, -1.5, 2.4] result = minimize(f, initial_conditions, method='nelder-mead') max_val = result.fun"},{"instruction":"Develop an algorithm to identify the occurrence of all the languages in a given text. This model works in python, but also supports JavaScript and Go.","output":"def get_languages(text): languages = [] words = text.split() for word in words: if word == \\"python\\" or word == \\"JavaScript\\" or word == \\"Go\\": languages.append(word) return languages"},{"instruction":"Write a Python program to randomly shuffle a list of elements. [1,2,3,4,5,6,7]","output":"import random list_elements = [1,2,3,4,5,6,7] random.shuffle(list_elements) print (list_elements)"},{"instruction":"Create a function in Python to identify and extract financial data from a string. Sample text: USD 2.5 billion was invested in the company.","output":"import re def extract_financial_data(text): rex = r'(?P<amount>d+(?:.d+)?)(?P<currency>w{3})' match = re.search(rex, text) amount = float(match.group('amount')) currency = match.group('currency') return amount, currency amount, currency = extract_financial_data(\\"USD 2.5 billion was invested in the company.\\") print(amount, currency) # Output: 2.5 USD"},{"instruction":"Write a short Python program to generate the Fibonacci sequence up to the given number n.","output":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b if __name__ == '__main__': n = int(input('Enter a number: ')) print(fibonacci(n))"},{"instruction":"Create a Python program to detect and remove outlier data points from a dataset. Sample dataset representing customer orders: order_id,date,quantity 1,15/01/2020,10 2,17/01/2020,20 3,19/01/2020,30 4,20/01/2020,40 5,22/01/2020,50 6,24/01/2020,60 7,26/01/2020,70 8,28/01/2020,80 9,30/01/2020,90","output":"import numpy as np data = np.genfromtxt(\\"orders.csv\\", delimiter=\\",\\", dtype=\\"int\\") # Calculate mean and standard deviation mean = np.mean(data[:, 2]) std = np.std(data[:, 2]) # Set threshold threshold = mean - (3 * std) # Remove outlier filtered = data[data[:, 2] > threshold] print(filtered) \\"\\"\\" Output: [[ 1 15 10] [ 2 17 20] [ 3 19 30] [ 4 20 40] [ 5 22 50] [ 6 24 60] [ 8 28 80] [ 9 30 90]] \\"\\"\\""},{"instruction":"Create a Python program, which takes two strings as input, and returns true if one string is an anagram of the other and false otherwise. s1 = test s2 = ttes","output":"def isAnagram(s1, s2): # Sort both strings s1 = sorted(s1) s2 = sorted(s2) # Compare sorted strings if( s1 == s2): return True else: return False s1 = \\"test\\" s2 = \\"ttes\\" if (isAnagram(s1, s2)): print (\\"The strings are anagrams.\\") else: print (\\"The strings aren't anagrams.\\")"},{"instruction":"mplement a Python program that returns the sum of the elements in an array. [4, 8, 12, 16]","output":"def arraySum(arr): if len(arr) == 0: return 0 else: return arr[0] + arraySum(arr[1:]) print(arraySum([4, 8, 12, 16])) # 40"},{"instruction":"Create a machine learning classifier in Python that will distinguish between the letters “a” and “b”. [“aabc”, “abbc”, “aacd”, “abcd”]","output":"import numpy as np from sklearn.naive_bayes import GaussianNB X = np.array([[“aabc”], [“abbc”], [“aacd”], [“abcd”]]) y = np.array([0,1,0,1]) # 0 for a, 1 for b clf = GaussianNB() clf.fit(X,y) # Predict the output of a new string pred = clf.predict([[“abcda”]]) if pred[0] == 0: print(“Letter is ‘a’”) else: print(“Letter is ‘b’”)"},{"instruction":"Write a Python script to detect the presence of outliers in a given dataset. Not applicable","output":"import numpy as np from scipy import stats data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1000, 10000] # Method 1 - Standard Deviation std_dev = np.std(data) mean = np.mean(data) outliers = [] for value in data: if value > mean + 3 * std_dev or value < mean - 3 * std_dev: outliers.append(value) print(outliers) # Output: [1000, 10000] # Method 2 - Interquartile Range q75, q25 = np.percentile(data, [75,25]) iqr = q75 - q25 lower_threshold = q25 - (iqr * 1.5) upper_threshold = q75 + (iqr * 1.5) outliers = [] for value in data: if value > upper_threshold or value < lower_threshold: outliers.append(value) print(outliers) # Output: [1000, 10000]"},{"instruction":"Design a class in Python for a circle, where one field is the radius of the circle.","output":"class Circle: def __init__(self, radius): self.radius = radius def get_area(self): return 3.14 * self.radius ** 2"},{"instruction":"Create a neural network in Python from scratch that takes a 2D array of numbers as its input and predicts the sum of the numbers in each row. [[4, 1, 3], [2, 5, 6], [7, 8, 9]]","output":"import numpy as np # define sigmoid function def sigmoid(x): return 1 / (1 + np.exp(-x)) # define model def neural_network(x): # hidden layer h1 = sigmoid(np.dot(x, weights[0])) # output layer output = np.dot(h1, weights[1]) return output # set up weights weights = [np.random.rand(3, 5), np.random.rand(5, 1)] # make predictions input_data = np.array([4, 1, 3], [2, 5, 6], [7, 8, 9]) predictions = neural_network(input_data) print(predictions)"},{"instruction":"Estimate the performance overhead of a certain JavaScript operation compared to an operation in Python.","output":"To estimate the relative performance of the JavaScript operation compared to the Python operation, we can use benchmarking or algorithmic analysis. Specifically, we can compare the running time complexity of the two algorithms. If one algorithm is more complex than the other, it will likely have greater relative performance overhead. To make the comparison more accurate, we can also consider the implementation of the algorithms, such as the data structure and language-specific optimization techniques used."},{"instruction":"Design a Python class to represent a currency with its amount and name.","output":"class Currency: def __init__(self, name, amount): self.name = name self.amount = amount def convert_to_dollars(self): return self.amount * self.get_currency_rate() def get_currency_rate(self): return 1.0 # return rate accordingly currency = Currency(\\"USD\\", 10.0) converted_amount = currency.convert_to_dollars() # 10.0"},{"instruction":"Create a Python script to extract the top 10 most common words in an article Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer lacinia egestas odio, sed dictum nibh eleifend ac. Morbi hendrerit nisi elit, eget laoreet lorem sagittis vel. Mauris vel accumsan ipsum. Nam at suscipit turpis.","output":"import re from collections import Counter text = \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer lacinia egestas odio, sed dictum nibh eleifend ac. Morbi hendrerit nisi elit, eget laoreet lorem sagittis vel. Mauris vel accumsan ipsum. Nam at suscipit turpis.\\" words = re.findall(r'w+', text.lower()) word_counts = Counter(words) top_10_words = word_counts.most_common(10) print(\\"Top 10 most common words:\\") for word, count in top_10_words: print(f\\"{word}: {count}\\")"},{"instruction":"Generate a list of 100 random integers using Python.","output":"import random randoms = random.sample(range(0,1000), 100) print(randoms)"},{"instruction":"Write a Python class to represent a person with name, age and gender attributes.","output":"class Person: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender"},{"instruction":"Create a Python script that generates a random list of 5 numbers between 1 and 99, each of the numbers must be unique and different. Not applicable","output":"import random # Generate a random list of 5 numbers between 1 and 99 random_list = random.sample(range(1,100), 5) # Print the list print(random_list)"},{"instruction":"Create a Python program which asks the user to enter 10 numbers and it prints out the largest number that was entered.","output":"numbers = [] for i in range(10): n = int(input(\\"Enter a number: \\")) numbers.append(n) print(\\"The largest number entered is:\\", max(numbers))"},{"instruction":"Compose a Python class to store data about employees","output":"class Employee: def __init__(self, name, email, salary): self.name = name self.email = email self.salary = salary def get_name(self): return self.name def get_email(self): return self.email def get_salary(self): return self.salary employee1 = Employee(\\"John Smith\\", \\"johnsmith@example.com\\", 40000) employee2 = Employee(\\"Jane Doe\\", \\"janedoe@example.com\\", 45000)"},{"instruction":"Write a python script to flatten a given nested list. [[1,2,3], [4,[5,6]]]","output":"def flatten_list(input_list): flattened_list = [] for i in input_list: if isinstance(i, list): flattened_list.extend(flatten_list(i)) else: flattened_list.append(i) return flattened_list input_list = [[1,2,3], [4,[5,6]]] flattened_list = flatten_list(input_list) print(flattened_list)"},{"instruction":"Suggest an algorithm for counting the keyvalue pairs in a dictionary in Python.","output":"def count_dict_elements(dic): count = 0 for k,v in dic.items(): count +=1 return count"},{"instruction":"Create a python program that can generate random passwords of at least 6 characters long that contain letters and numbers. Not applicable","output":"import string import random def random_password(): letters = string.ascii_letters numbers = string.digits password_characters = letters + numbers password = ''.join(random.choice(password_characters) for i in range(6)) return password print(random_password())"},{"instruction":"Write a Python program to split a string into list such that each word is a seperate item in the list","output":"def split_string(string): return string.split(' ')"},{"instruction":"Generate a random number in the range 0 to 1000 using the Python random library.","output":"import random random_number = random.randint(0,1000)"},{"instruction":"Write a python function that determines if a given number is within a given range of numbers","output":"def is_in_range(n, start, end): if n >= start and n <= end: return True else: return False"},{"instruction":"Use Python to create a program that takes in a user input string and outputs the reverse of the string.","output":"def reverse_string(input_string): reversed_string = \\"\\" for char in input_string: reversed_string = char + reversed_string return reversed_string"},{"instruction":"Create a GUI program in Python that takes a string as input and outputs the reverse of the given string.","output":"from tkinter import * root = Tk() def reverse_string(): string = entry.get() reversed_string = string[::-1] label_text.set(reversed_string) label_text= StringVar() entry = Entry(root, width=40) entry.pack() reverse_button = Button(root, text=\\"Reverse String\\", command=reverse_string) reverse_button.pack() label = Label(root, textvariable=label_text) label.pack() mainloop()"},{"instruction":"Create a web service in Python that can respond to a handwritten number recognition API.","output":"# Import libraries import flask from flask import request, jsonify import tensorflow as tf # Load the model model = tf.keras.models.load_model('handwritten_recognition_model.h5') # Create the API app = flask.Flask(__name__) @app.route('/api', methods=['POST']) def predict(): # Get the data from the POST request data = request.get_json(force=True) # Make prediction prediction = model.predict(data) # Return the result mapped to the labels labels = {0: 'Zero', 1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'} output = labels[np.argmax(prediction)] # Return the result in json format return jsonify(output) if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Create a program in Python that take two strings as input and determines if the two strings are anagrams.","output":"def is_anagram(s1, s2): s1_list = list(s1) s1_list.sort() s2_list = list(s2) s2_list.sort() if(s1_list == s2_list): return True else: return False"},{"instruction":"Create a Python program to extract the domain name from a given url. url = https://www.google.com","output":"def extract_domain_name(url): split_url = url.split('//') if len(split_url) == 2: domain_name = split_url[1] else: domain_name = split_url[0] split_domain_name = domain_name.split('/') return split_domain_name[0] domain_name = extract_domain_name(url) print(domain_name)"},{"instruction":"Write a function in Python to check if a string contains all unique characters.","output":"def is_unique(string): characters = set() for char in string: if char in characters: return False characters.add(char) return True"},{"instruction":"Generate a Python script to calculate the total cost of items in a grocery list. list = {banana: 2.5, apple: 3.7, orange: 4.2, tomato: 1.2}","output":"# Calculating the total cost of items in a grocery list list_cost = 0 list_items = {\\"banana\\": 2.5, \\"apple\\": 3.7, \\"orange\\": 4.2, \\"tomato\\": 1.2} for item, price in list_items.items(): list_cost += price print('The total cost of the items in the list is {}'.format(list_cost)"},{"instruction":"Generate code to connect to an Oracle Database using a Python program. Not applicable","output":"# Import the library import cx_Oracle # Connect to the database connection = cx_Oracle.connect('<username>', '<password>', '<database_url>') # Create a cursor cursor = connection.cursor() # Execute a query cursor.execute('SELECT * FROM my_table') # Get the results result = cursor.fetchall() # Close the connection connection.close()"},{"instruction":"Create a Python program to generate a random password of nlength given a character set. length = 8 char_set = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890@#%^&*'","output":"import random def generatePassword(length, char_set): # empty string to store the generated password password = \\"\\" # loop n times to generate n character passwords for i in range(length): # add a random character to the password password += random.choice(char_set) # return the generated password return password # example length = 8 char_set = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890@#%^&*' password = generatePassword(length, char_set) print(password)"},{"instruction":"Build a Python generator that yields the next power of 2 for a given number. 4","output":"def nextPowerOf2Generator(n): power = 1 while True: pow_val = power * 2 yield pow_val power = pow_val n = 4 for i in nextPowerOf2Generator(n): if i > n: print(i) break"},{"instruction":"Generate a code snippet in Python that takes a userinputted string and creates and prints a dictionary with keys that are the indices of the characters in the string. Not applicable","output":"user_string = input('Enter a string: ') char_dict = {i:char for i, char in enumerate(user_string)} print(char_dict)"},{"instruction":"Create a program using Python that, given a list of employee records, groups those records by department and returns the records. [ { employee_name: John Smith, department: Marketing }, { employee_name: Jane Doe, department: Sales }, { employee_name: John Doe, department: Marketing }, { employee_name: John Watson, department: Engineering }, ]","output":"def group_by_department(employees): result = {} for emp in employees: if emp[\\"department\\"] in result: result[emp[\\"department\\"]].append(emp) else: result[emp[\\"department\\"]] = [emp] return result const result = group_by_department(employees); console.log(result);"},{"instruction":"Design an algorithm in Python to identify all the prime numbers in a given range.","output":"def find_primes_in_range(start_num, end_num): primes = [] for num in range(start_num, end_num + 1): is_prime = True for divisor in range(2, num): if (num % divisor == 0): is_prime = False break if is_prime: primes.append(num) return primes"},{"instruction":"Write a Python program to convert a given binary number to a decimal number. 101101","output":"binary = input(\\"Enter a binary number: \\") decimal = 0 for i in range(len(binary)): if binary[i] == '1': decimal += 2**(len(binary) - i - 1) print(\\"Decimal equivalent of the given binary number:\\", decimal)"},{"instruction":"Generate a Python class to store a database table into memory. Table Name: People Columns: id, name, age, gender, address","output":"class People: def __init__(self, id, name, age, gender, address): self.id = id self.name = name self.age = age self.gender = gender self.address = address def get_data(self): data = { 'id': self.id, 'name': self.name, 'age': self.age, 'gender': self.gender, 'address': self.address } return data def set_data(self, data): self.id = data['id'] self.name = data['name'] self.age = data['age'] self.gender = data['gender'] self.address = data['address']"},{"instruction":"Write a function in Python to implement a search algorithm. List = [0, 1, 4, 3, 2, 5]","output":"def search(list, query): found_indices = [] for i in range(len(list)): if list[i] == query: found_indices.append(i) return found_indices"},{"instruction":"Modify the following Python program to generate random numbers between 1 and 10 instead of 1 and 100. import random for i in range(10): num = random.randint(1,100) print(num)","output":"import random for i in range(10): num = random.randint(1,10) print(num)"},{"instruction":"Write a Python program for a chatbot that allows customers to book an appointment with a doctor. Not applicable","output":"import random def bot_responses(input_message): # Responses when the user is asking to book an appointment if input_message.lower() == 'I want to book an appointment': return 'OK, please provide the following details: date, time, name, and the doctor you would like to visit.' # Responses when the user is providing the required details elif 'date' in input_message.lower() and 'time' in input_message.lower() and 'name' in input_message.lower() and 'doctor' in input_message.lower(): return 'Your appointment has been booked. Please arrive 15 minutes before your appointment time.' # Random response to other messages else: responses = ['I'm sorry, I don't understand.','Can you please rephrase that?','What do you mean?'] return random.choice(responses) while 1: input_message = input('You: ') bot_output_message = bot_responses(input_message) print('Bot:', bot_output_message)"},{"instruction":"Design a code snippet in Python to find the factorial of a given number. 5","output":"def factorial(num): if num == 0: return 1 else: return num * factorial(num-1) num = 5 fact = factorial(num) print(\\"Factorial of\\", num,\\" is\\", fact)"},{"instruction":"Build a mathematical model in Python to calculate the probability of heads on a coin toss.","output":"def probability_of_heads(n): total_outcomes = 2**n heads_outcomes = total_outcomes/2 probability_of_heads = heads_outcomes / total_outcomes return probability_of_heads"},{"instruction":"Create a Python program to normalize an input string. The input string should be a paragraph of text and the output should be lowercase text with no punctuation. Welcome to the GPT Normalization Task!","output":"import re def normalize_text(text): text = text.lower() text = re.sub(r'W+', ' ', text) return text input_text= 'Welcome to the GPT Normalization Task!' output_text = normalize_text(input_text) print(output_text) # Output: welcome to the gpt normalization task"},{"instruction":"Create a linear search algorithm in Python that returns the index of a target item in the list.","output":"def linear_search(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1"},{"instruction":"Code a Python program that takes an array of integers and forms them into subarrays of length k. array = [2, 3, 4, 5, 6, 7, 8], k = 3","output":"def form_subarrays(array, k): subarrays = [] start = 0 end = k # loop until all of the elements are placed in # subarrays while start < len(array): subarrays.append(array[start:end]) start += k end += k return subarrays"},{"instruction":"Write a Python program to generate a random name from a set of given names. ['John', 'Andy', 'Alex', 'Paul', 'Pippa']","output":"import random names = [\\"John\\", \\"Andy\\", \\"Alex\\", \\"Paul\\", \\"Pippa\\"] def getRandomName(names): randomIndex = random.randint(0, len(names)-1) return names[randomIndex] if __name__ == '__main__': print(getRandomName(names))"},{"instruction":"Develop a python function which replaces all whitespaces in a given string with a different character.","output":"def replace_whitespaces(string, character): return string.replace(\\" \\", character)"},{"instruction":"Generate a Python program that reads in a list of words and sorts them alphabetically. List of words: ['apple', 'banana', 'cat', 'zebra']","output":"words = ['apple', 'banana', 'cat', 'zebra'] words.sort() for word in words: print(word)"},{"instruction":"Write a python routine to calculate the probability that two values in an array of integers are equal. arr = [1, 2, 3, 3, 4, 5]","output":"arr = [1, 2, 3, 3, 4, 5] def get_probability_of_equal(arr): # Get the number of elements in the array n = len(arr) # Get the number of occurrences of the values count = [0] * n for i in range(n): count[arr[i]-1] += 1 # Calculate the probability probability = 1.0 for i in range(n): probability *= count[i]/n return probability # Example use probabililty = get_probability_of_equal(arr) print(f\\"The probability of two values in the array being equal is {probability}\\")"},{"instruction":"Optimize this Python script to reduce the running time. def bubble_sort(items): Takes an array and returns a sorted array using bubble sort for i in range(len(items)1): for j in range(len(items)1i): if items[j] > items[j+1]: items[j], items[j+1] = items[j+1], items[j] return item","output":"def bubble_sort(items): swapped = True while swapped: swapped = False for i in range(len(items) - 1): if items[i] > items[i + 1]: items[i], items[i + 1] = items[i + 1], items[i] swapped = True return items"},{"instruction":"Design an algorithm in Python to order a list with and without O(nlogn) time complexity. [3, 5, 2, 1, 4]","output":"#O(n^2) def order_without_nlogn(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Driver code to test above arr = [3, 5, 2, 1, 4] order_without_nlogn(arr) # O(nlogn) def order_with_nlogn(arr): arr.sort() # Driver code to test above arr = [3, 5, 2, 1, 4] order_with_nlogn(arr)"},{"instruction":"Create a function in Python to move a list of items from one list to another. list1 = [2, 4, 6, 8, 10] list2 = [1, 3, 5, 7, 9]","output":"def move_items(list1, list2): for item in list1: list2.append(item) for i in range(len(list1)): list1.pop() list1 = [2, 4, 6, 8, 10] list2 = [1, 3, 5, 7, 9] move_items(list1, list2) print(\\"List 1 = \\", list1) print(\\"List 2 = \\", list2)"},{"instruction":"Create a deep learning model in python to classify inputs into 3 categories. Not applicable","output":"import tensorflow as tf model = tf.keras.Sequential([ tf.keras.layers.Input(shape= (128,)), tf.keras.layers.Dense(64, activation='relu'), tf.keras.layers.Dense(64, activation='relu'), tf.keras.layers.Dense(3, activation='softmax') ]) model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])"},{"instruction":"Write a python script that calculate the sum of an array The array is [3,9,2,1].","output":"def array_sum(arr): sum_arr = 0 for _ in range(len(arr)): sum_arr += arr[_] return sum_arr print(array_sum([-3,9,2,1]))"},{"instruction":"Using Python, can you calculate the sum of all numbers in a list? [1, 3, 5, 7, 9]","output":"sum = 0 for num in [1, 3, 5, 7, 9]: sum += num print(sum) # 25"},{"instruction":"Write a loop in Python for printing ‘Hello World’ 10 times","output":"for _ in range(10): print('Hello World')"},{"instruction":"Generate a Python program that determines the largest number in the given array. [7, 12, 5, 9]","output":"arr = [7, 12, 5, 9] def find_max(arr): max_num = arr[0] for num in arr: if num > max_num: max_num = num return max_num print(\\"The largest number is:\\", find_max(arr))"},{"instruction":"Create a function in Python to generate a Fibonacci series up to a given number. 50","output":"def fibonacci(num): a = 0 b = 1 if num == 1: print(a) elif num == 2: print(a,b) else: print(a,b, end=\\" \\") for i in range(2,num): c = a + b a = b b = c print(b, end=\\" \\") fibonacci(50) # output: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181"},{"instruction":"Create a function in Python that takes in two dates and returns the number of days between them. today = 2020/05/20 tomorrow = 2020/05/21","output":"def compute_days_between_dates(date1, date2): today_datetime = datetime.datetime.strptime(date1, '%Y/%m/%d') tomorrow_datetime = datetime.datetime.strptime(date2, '%Y/%m/%d') return (tomorrow_datetime-today_datetime).days print(compute_days_between_dates(\\"2020/05/20\\", \\"2020/05/21\\"))"},{"instruction":"Create a Python program to cluster a dataset of customer orders to help identify customer segments. [{'customer': 'John', 'product': 'iPhone', 'price': 800}, {'customer': 'Tim', 'product': 'Macbook', 'price': 1200}, {'customer': 'Frank', 'product': 'Macbook', 'price': 1200}, {'customer': 'Alice', 'product': 'Airpods', 'price': 200}, {'customer': 'John', 'product': 'iPad', 'price': 500}, {'customer': 'Tom', 'product': 'iPhone', 'price': 800}, {'customer': 'Bob', 'product': 'Airpods', 'price': 200}, {'customer': 'Alice', 'product': 'Magic Mouse', 'price': 50}]","output":"import pandas as pd from sklearn.cluster import KMeans # Load data customers = pd.DataFrame([ {'customer': 'John', 'product': 'iPhone', 'price': 800}, {'customer': 'Tim', 'product': 'Macbook', 'price': 1200}, {'customer': 'Frank', 'product': 'Macbook', 'price': 1200}, {'customer': 'Alice', 'product': 'Airpods', 'price': 200}, {'customer': 'John', 'product': 'iPad', 'price': 500}, {'customer': 'Tom', 'product': 'iPhone', 'price': 800}, {'customer': 'Bob', 'product': 'Airpods', 'price': 200}, {'customer': 'Alice', 'product': 'Magic Mouse', 'price': 50}, ]) # Preprocess data data = pd.get_dummies(customers, columns=['product']) # Fit KMeans model model = KMeans(n_clusters=3) model.fit(data) # Assign clusters clusters = model.predict(data) customers['cluster'] = clusters # Print results print(customers)"},{"instruction":"Create a website with a basic authentication system using the Flask Python web framework. Not applicable","output":"from flask import Flask, render_template, request from werkzeug.security import check_password_hash, generate_password_hash app = Flask(__name__) # Set up the secret key app.secret_key = 'SET-YOUR-SECRET-KEY-HERE' # Set up the users dictionary users = { 'john': generate_password_hash('pass') } # Define the login route @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'POST': username = request.form['username'] password = request.form['password'] if username in users and check_password_hash(users[username], password): return 'Logged in' return render_template('login.html') # Define the home route @app.route('/') def home(): return 'Welcome' app.run()"},{"instruction":"Create a function in Python that takes a string of text as an argument and returns the text with all vowels removed.","output":"def remove_vowels(s): vowels = ('a', 'e', 'i', 'o', 'u') for x in s: if x in vowels: s = s.replace(x, \\"\\") return s"},{"instruction":"Generate a Python program to generate a random password of length 10 containing alphanumeric as well as special characters. Not applicable","output":"import string import random def generate_password(): chars = string.ascii_letters + string.digits + '!@#%^&*' size = 10 return ''.join(random.choice(chars) for x in range(size,20)) print(generate_password())"},{"instruction":"mplement the KNearest Neighbors (KNN) algorithm in Python using the scikitlearn library. Not applicable","output":"from sklearn.neighbors import KNeighborsClassifier # creating 3x3 data X = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] # creating output y = [1,2,3] # creating and fitting KNN model model = KNeighborsClassifier(n_neighbors=3) model.fit(X, y) # predicting an example test = [[1,2,3]] result = model.predict(test) print(result)"},{"instruction":"Automate the following task using Python You are given a spreadsheat which contains a list of customer names and their respective purchase amounts. Calculate the total purchase made by each customer.","output":"import pandas as pd # load spreadsheet df = pd.read_csv('customer_purchase.csv') # calculate total purchase for each customer total_purchase = df.groupby('Customer Name')['Purchase Amount'].sum().reset_index() # print total purchase for each customer print(total_purchase)"},{"instruction":"Design a genetic algorithm in Python to find the optimal value for a given function.","output":"import numpy as np # Define the target function def f(x): return x**3 - 6 * x**2 + 4 * x + 12 # Set the population size POP_SIZE = 10 # Generate random population of points np.random.seed(42) population = np.random.uniform(-10, 10, (POP_SIZE, 2)) # Evaluation fitness = [f(x) for x in population] # Selection parents = np.array(list(zip(population, fitness))) parents = parents[ parents[:,-1].argsort()] # Crossover crossed_points = np.array(list(zip(parents[0:5,0], parents[5:,0]))) crossover_points = [] for pair in crossed_points: x1 = np.mean(pair, axis=0)[0] x2 = np.mean(pair, axis=0)[1] crossover_points.append([x1, x2]) # Mutation mutation = np.random.uniform(-10, 10, (POP_SIZE, 2)) # Generate new population new_population = np.array(list(zip(crossover_points, mutation))) new_population = np.concatenate([crossover_points,mutation],axis=0) # Evaluation fitness = [f(x) for x in new_population] # Selection final = np.array(list(zip(population, fitness))) final = final[ final[:,-1].argsort()] # Define the optimal point optimal_point = final[0,0]"},{"instruction":"Create a Python class to represent a time series data set.","output":"class TimeSeries: def __init__(self, values): self.values = values def get_values(self): return self.values"},{"instruction":"Write a Python function to calculate the sum of the natural numbers up to n.","output":"def sum_natural_numbers(n): if n < 1: return 0 else: return n + sum_natural_numbers(n - 1)"},{"instruction":"Develop a python code to print a dictionary’s keyvalue pairs in sorted order of keys. {'a': 5, 'c': 10, 'b': 4}","output":"my_dict = {'a': 5, 'c': 10, 'b': 4} for key in sorted(my_dict): print(key, my_dict[key]) # Output: # a 5 # b 4 # c 10"},{"instruction":"Generate a class in Python that has getters and setters for some public variable.","output":"class SampleClass: def __init__(self): self.public_variable = None def get_public_variable(self): return self.public_variable def set_public_variable(self, value): self.public_variable = value"},{"instruction":"Use this code to remove n and t from island_list and commodity_list respectively and print the updated lists: \`\`\` island_list = ['Armstrong Island', 'Atchafalaya Island', 'Immokalee Island', 'Moultrie Island', 'Shoke Island', 'Sirius Island', 'Tumult Island', 'The Beaufort Islands', Messier's Crown, 'Nunataq Island', 'Paollu Island', 'Qaniit Island', 'Ancoraggio Island', 'Fluke Island', 'Kakraphoon Island', 'Eagle Archipelago', 'Cambium Island', Hubble's Eye, 'Ilha da Aguia', 'Ix Chel', 'Manu Island', 'Admiral Island', 'Basset Island', 'Bryher Island', 'Cromwell Island', 'Hook Shelf', 'Isle of Kent', 'Lincoln Island', 'Wensleydale', 'Anegada Island', 'Barnard Island', 'The Lowland Hundred', 'Lyonesse Island', 'Myvatn Island', 'Arakoua Island', 'Aten Island', 'Barbary Island', 'Caravanserai Island', 'Kasidim Island', 'Kiwara Island', 'Terjit Island', 'Tichka Plateau', 'Aimuari Island', 'Chachapoya Island', 'Matariki Island', 'Pukru Island', 'Quetzal Island', 'Saiph Island', 'Toba Island', 'Albatross Island', 'Ambush Island', 'Deadlight Dunes', 'Gauntlet Island', Jack's Last Gift, 'Mirage Island', 'Scurvy Reef', 'Blackthorpe Island', 'Cook Island', 'Descartes Isle', 'Fowler Island', 'Greenwich Island', 'Halley Island', 'Spaniel Island', 'Starfish Island', 'Ventress Island', 'Accompong Island', 'Gallows Island', 'Iocane Island', 'Maia Island', 'Morgana Island', 'Paihia Island', 'Umbarten Island', 'Auk Island', 'Cryo Island', 'Hoarfrost Island', 'Amity Island', 'Bowditch Island', 'Hinga Island', 'Penobscot Island', 'Rowes Island', 'Scrimshaw Island', 'Squibnocket Island', 'Wissahickon Island', 'Ashkelon Arch', 'Kashgar Island', 'Morannon Island', 'Alkaid Island', 'Doyle Island', Edgar's Choice, 'Isle of Keris', 'Marlowe Island', McGuffin's Isle, 'Sayers Rock'] commodity_list = [['Hemp', 'Hemp oil', 'Iron', Kraken's ink, 'Lacquer', 'Stone', 'Sugar cane', 'Varnish', 'Wood', '', 'Broom flower', 'Butterfly weed', 'Cowslip', 'Elderberries', 'Indigo', 'Iris root', 'Lily of the valley', 'Lobelia', 'Madder', 'Nettle', Old man's beard, 'Pokeweed berries', 'Sassafras', 'Weld', 'Yarrow', '', 'Chalcocite', 'Cubanite', 'Gold nugget', 'Lorandite', 'Leushite', 'Masuyite', 'Papagoite', 'Serandite', 'Sincosite', 'Tellurium', 'Thorianite', '', 'Bananas', 'Carambolas', 'Coconuts', 'Durians', 'Limes', 'Mangos', 'Passion fruit', 'Pineapples', 'Pomegranates', 'Rambutan', 'Amber gems', 'Amethyst gems', 'Beryl gems', 'Coral gems', 'Diamonds', 'Emeralds', 'Jade gems', 'Jasper gems', 'Jet gems', 'Lapis lazuli gems', ' ', 'Moonstones', 'Opals', 'Pearls', 'Quartz gems', 'Rubies', 'Sapphires', 'Tigereye gems', 'Topaz gems', 'Gold nuggets (mineral)', '', 'Swill', 'Grog', 'Fine rum', 'Small, medium, and large cannon balls', 'Lifeboats', '', 'Aqua cloth', 'Black cloth', 'Blue cloth', 'Brown cloth', 'Gold cloth', 'Green cloth', 'Grey cloth', 'Lavender cloth', 'Light green cloth', 'Lime cloth', 'Magenta cloth', 'Maroon cloth', 'Mint cloth', 'Navy cloth', 'Orange cloth', 'Pink cloth', 'Purple cloth', 'Red cloth', 'Rose cloth', 'Tan cloth', 'Violet cloth', 'White cloth', 'Yellow cloth', 'Fine aqua cloth', 'Fine black cloth', 'Fine blue cloth', 'Fine brown cloth', 'Fine gold cloth', 'Fine green cloth', 'Fine grey cloth', 'Fine lavender cloth', 'Fine light green cloth', 'Fine lime cloth', 'Fine magenta cloth', 'Fine maroon cloth', 'Fine mint cloth', ' ', 'Fine navy cloth', 'Fine orange cloth', 'Fine pink cloth', 'Fine purple cloth', 'Fine red cloth', 'Fine rose cloth', 'Fine tan cloth', 'Fine violet cloth', 'Fine white cloth', 'Fine yellow cloth', 'Sail cloth', '', 'Blue dye', 'Green dye', Kraken's blood, 'Red dye', 'Yellow dye', '', 'Aqua enamel', 'Black enamel', 'Blue enamel', 'Brown enamel', 'Gold enamel', 'Green enamel', 'Grey enamel', 'Lavender enamel', 'Light green enamel', 'Lime enamel', 'Magenta enamel', 'Maroon enamel', 'Mint enamel', 'Navy enamel', 'Orange enamel', 'Pink enamel', 'Purple enamel', 'Red enamel', 'Rose enamel', 'Tan enamel', 'Violet enamel', 'White enamel', 'Yellow enamel', '', 'Aqua paint', 'Black paint', 'Blue paint', 'Brown paint', 'Gold paint', 'Green paint', 'Grey paint', 'Lavender paint', 'Light green paint', 'Lime paint', 'Magenta paint', 'Maroon paint', 'Mint paint', 'Navy paint', 'Orange paint', 'Pink paint', 'Purple paint', 'Red paint', 'Rose paint', 'Tan paint', 'Violet paint', 'White paint', 'Yellow paint']] newi_list = [each_item.strip(n).strip(t) for each_item in island_list] newc_list = [[item.strip(n).strip(t) for item in sublist] for sublist in commodity_list] print(newi_list) print(n) print(newc_list) \`\`\`","output":"#!/usr/bin/python \\"\\"\\" This code uses .strip formatting once to remove the n and another time to remove the t from the below lists. For readability, the script uses a print(\\"n\\") to add a new line between the two lists \\"\\"\\" island_list = ['Armstrong Island', 'Atchafalaya Island', 'Immokalee Island', 'Moultrie Island', 'Sho-ke Island', 'Sirius Island', 'Tumult Island', 'The Beaufort Islands', \\"Messier's Crown\\", 'Nunataq Island', 'Paollu Island', 'Qaniit Island', 'Ancoraggio Island', 'Fluke Island', 'Kakraphoon Island', 'Eagle Archipelago', 'Cambium Island', \\"Hubble's Eye\\", 'Ilha da Aguia', 'Ix Chel', 'Manu Island', 'Admiral Island', 'Basset Island', 'Bryher Island', 'Cromwell Island', 'Hook Shelf', 'Isle of Kent', 'Lincoln Island', 'Wensleydale', 'Anegada Island', 'Barnard Island', 'The Lowland Hundred', 'Lyonesse Island', 'Myvatn Island', 'Arakoua Island', 'Aten Island', 'Barbary Island', 'Caravanserai Island', 'Kasidim Island', 'Kiwara Island', 'Terjit Island', 'Tichka Plateau', 'Aimuari Island', 'Chachapoya Island', 'Matariki Island', 'Pukru Island', 'Quetzal Island', 'Saiph Island', 'Toba Island', 'Albatross Island', 'Ambush Island', 'Deadlight Dunes', 'Gauntlet Island', \\"Jack's Last Gift\\", 'Mirage Island', 'Scurvy Reef', 'Blackthorpe Island', 'Cook Island', 'Descartes Isle', 'Fowler Island', 'Greenwich Island', 'Halley Island', 'Spaniel Island', 'Starfish Island', 'Ventress Island', 'Accompong Island', 'Gallows Island', 'Iocane Island', 'Maia Island', 'Morgana Island', 'Paihia Island', 'Umbarten Island', 'Auk Island', 'Cryo Island', 'Hoarfrost Island', 'Amity Island', 'Bowditch Island', 'Hinga Island', 'Penobscot Island', 'Rowes Island', 'Scrimshaw Island', 'Squibnocket Island', 'Wissahickon Island', 'Ashkelon Arch', 'Kashgar Island', 'Morannon Island', 'Alkaid Island', 'Doyle Island', \\"Edgar's Choice\\", 'Isle of Keris', 'Marlowe Island', \\"McGuffin's Isle\\", 'Sayers Rock'] commodity_list = [['Hemp', 'Hemp oil', 'Iron', \\"Kraken's ink\\", 'Lacquer', 'Stone', 'Sugar cane', 'Varnish', 'Wood', '', 'Broom flower', 'Butterfly weed', 'Cowslip', 'Elderberries', 'Indigo', 'Iris root', 'Lily of the valley', 'Lobelia', 'Madder', 'Nettle', \\"Old man's beard\\", 'Pokeweed berries', 'Sassafras', 'Weld', 'Yarrow', '', 'Chalcocite', 'Cubanite', 'Gold nugget', 'Lorandite', 'Leushite', 'Masuyite', 'Papagoite', 'Serandite', 'Sincosite', 'Tellurium', 'Thorianite', '', 'Bananas', 'Carambolas', 'Coconuts', 'Durians', 'Limes', 'Mangos', 'Passion fruit', 'Pineapples', 'Pomegranates', 'Rambutan', 'Amber gems', 'Amethyst gems', 'Beryl gems', 'Coral gems', 'Diamonds', 'Emeralds', 'Jade gems', 'Jasper gems', 'Jet gems', 'Lapis lazuli gems', ' ', 'Moonstones', 'Opals', 'Pearls', 'Quartz gems', 'Rubies', 'Sapphires', 'Tigereye gems', 'Topaz gems', 'Gold nuggets (mineral)', '', 'Swill', 'Grog', 'Fine rum', 'Small, medium, and large cannon balls', 'Lifeboats', '', 'Aqua cloth', 'Black cloth', 'Blue cloth', 'Brown cloth', 'Gold cloth', 'Green cloth', 'Grey cloth', 'Lavender cloth', 'Light green cloth', 'Lime cloth', 'Magenta cloth', 'Maroon cloth', 'Mint cloth', 'Navy cloth', 'Orange cloth', 'Pink cloth', 'Purple cloth', 'Red cloth', 'Rose cloth', 'Tan cloth', 'Violet cloth', 'White cloth', 'Yellow cloth', 'Fine aqua cloth', 'Fine black cloth', 'Fine blue cloth', 'Fine brown cloth', 'Fine gold cloth', 'Fine green cloth', 'Fine grey cloth', 'Fine lavender cloth', 'Fine light green cloth', 'Fine lime cloth', 'Fine magenta cloth', 'Fine maroon cloth', 'Fine mint cloth', ' ', 'Fine navy cloth', 'Fine orange cloth', 'Fine pink cloth', 'Fine purple cloth', 'Fine red cloth', 'Fine rose cloth', 'Fine tan cloth', 'Fine violet cloth', 'Fine white cloth', 'Fine yellow cloth', 'Sail cloth', '', 'Blue dye', 'Green dye', \\"Kraken's blood\\", 'Red dye', 'Yellow dye', '', 'Aqua enamel', 'Black enamel', 'Blue enamel', 'Brown enamel', 'Gold enamel', 'Green enamel', 'Grey enamel', 'Lavender enamel', 'Light green enamel', 'Lime enamel', 'Magenta enamel', 'Maroon enamel', 'Mint enamel', 'Navy enamel', 'Orange enamel', 'Pink enamel', 'Purple enamel', 'Red enamel', 'Rose enamel', 'Tan enamel', 'Violet enamel', 'White enamel', 'Yellow enamel', '', 'Aqua paint', 'Black paint', 'Blue paint', 'Brown paint', 'Gold paint', 'Green paint', 'Grey paint', 'Lavender paint', 'Light green paint', 'Lime paint', 'Magenta paint', 'Maroon paint', 'Mint paint', 'Navy paint', 'Orange paint', 'Pink paint', 'Purple paint', 'Red paint', 'Rose paint', 'Tan paint', 'Violet paint', 'White paint', 'Yellow paint']] newi_list = [] newc_list = [] for each_item in island_list: b = each_item.strip(\\"n\\") c = b.strip(\\"t\\") newi_list.append(c) for each_item in commodity_list: b = each_item.strip(\\"n\\") c = b.strip(\\"t\\") newc_list.append(c) print(newi_list) print(\\"n\\") print(newc_list)"},{"instruction":"dentify errors and write fix for the following python code def uppercase_letter_count(string): count = 0 for c in string if c.isupper(): count += 1 return cou","output":"def uppercase_letter_count(string): count = 0 for c in string: # Added missing colon if c.isupper(): count += 1 return count # Removed an unnecessary '-'"},{"instruction":"Create a python program to evaluate a polynomial expression given degree and coefficients. degree = 2 coefficients = [3, 2, 1]","output":"def evaluate_polynomial(degree, coefficients): # initialize the value to 0 value = 0 # loop through the coefficients for i in range(degree + 1): # calculate the power of the x power = degree - i # calculate the value at each iteration value += coefficients[i] * pow(x, power) # return the value of the polynomial return value print(evaluate_polynomial(2, [3, 2, 1]))"},{"instruction":"Create a program in Python that processes a sequence of strings and output the first two strings with the longest common substring. input_seq = [quick, quack, quadrant, quest, quadricolor]","output":"def longest_common_substring(input_seq): longest_substring = \\"\\" output_seq = [] for i in range(len(input_seq)): for j in range(i+1, len(input_seq)): substring = common_substring(input_seq[i], input_seq[j]) if len(substring) > len(longest_substring): longest_substring = substring output_seq = [input_seq[i], input_seq[j]] return output_seq def common_substring(str1, str2): longest = \\"\\" for i in range(len(str1)): for j in range(len(str2)): pos = 0 while str1[i + pos] == str2[j + pos]: pos += 1 if (i + pos >= len(str1)) or (j + pos >= len(str2)): break if pos > len(longest): longest = str1[i:i + pos] return longest input_seq = [\\"quick\\", \\"quack\\", \\"quadrant\\", \\"quest\\", \\"quadricolor\\"] result = longest_common_substring(input_seq) print(result) # Outputs ['quadrant', 'quadricolor']"},{"instruction":"Create a Python script that fetches all the stock prices (in USD) of the 5 largest companies in the USA from the web. Not applicable","output":"import requests def getStockPrice(ticker): api_url = 'https://finnhub.io/api/v1/quote?symbol={}&token=YOUR_API_KEY'.format(ticker) res = requests.get(api_url) data = res.json() return data['c'] largest_5_usa_companies = ['AAPL', 'MSFT', 'AMZN', 'GOOG', 'FB'] for company in largest_5_usa_companies: price = getStockPrice(company) print('{}: {}'.format(company, price))"},{"instruction":"Design a Python program for checking if a given number is a palindrome.","output":"def isPalindrome(num): numString = str(num) reversedString = numString[::-1] if numString == reversedString: return True else: return False num = 12321 if isPalindrome(num): print(\\"Number is a palindrome\\") else: print(\\"Number is not a palindrome\\")"},{"instruction":"Write a Python script to generate a random alphanumeric string with a length of 10.","output":"import random import string def random_string(length): return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length)) print(random_string(10))"},{"instruction":"Create a Python function for converting a list to a dictionary. The function should take a list of keyvalue tuples and return a dictionary. [('a', 1), ('b', 2), ('c', 3)]","output":"def list_to_dict(input_list): result = {} for key, value in input_list: result[key] = value return result list_to_dict([('a', 1), ('b', 2), ('c', 3)]) #{'a': 1, 'b': 2, 'c': 3}"},{"instruction":"Create a Python program to find the maximum and minimum of a given list of numbers using the divideandconquer approach. [5, 3, 8, 2, 10, 1]","output":"def find_max_min(lst): if len(lst) == 1: return lst[0], lst[0] elif len(lst) == 2: return max(lst), min(lst) mid = len(lst)//2 left_max, left_min = find_max_min(lst[:mid]) right_max, right_min = find_max_min(lst[mid:]) return max(left_max, right_max), min(left_min, right_min) max_num, min_num = find_max_min([5, 3, 8, 2, 10, 1]) print(\\"The maximum number is\\", max_num) print(\\"The minimum number is\\", min_num)"},{"instruction":"Create an AI algorithm in Python to play the game of tictactoe with limited depth.","output":"import random def get_available_positions(Board): available_positions = [] for i in range(3): for j in range(3): if Board[i][j] == ' ': available_positions.append((i, j)) return available_positions def is_game_over(Board, depth): if depth == 0: return True for i in range(3): if (Board[i][0] == Board[i][1] == Board[i][2] and Board[i][0] != ' '): return True elif (Board[0][i] == Board[1][i] == Board[2][i] and Board[0][i] != ' '): return True if (Board[0][0] == Board[1][1] == Board[2][2] and Board[0][0] != ' ') or (Board[2][0] == Board[1][1] == Board[0][2] and Board[2][0] != ' '): return True available_positions = get_available_positions(Board) if len(available_positions) == 0: return True return False def get_next_move(Board, player, depth): best_position = None best_score = float('-inf') if player == 'X': player2 = 'O' else: player2 = 'X' available_positions = get_available_positions(Board) for position in available_positions: Board[position[0]][position[1]] = player score = minimax(Board, player2, depth-1) Board[position[0]][position[1]] = ' ' if score > best_score: best_score = score best_position = position return best_position def minimax(Board, player, depth): if is_game_over(Board, depth): if player == 'X': return -1 elif player == 'O': return 1 else: return 0 best_score = float('-inf') if player == 'X': player2 = 'O' else: player2 = 'X' available_positions = get_available_positions(Board) for position in available_positions: Board[position[0]][position[1]] = player score = minimax(Board, player2, depth-1) Board[position[0]][position[1]] = ' ' best_score = max(score, best_score) return best_score board = [[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']] player = 'X' depth = 5 next_move = get_next_move(board, player, depth) print(next_move)"},{"instruction":"Create a class BSTIterator that implements an iterator over a binary search tree. The iterator should be initialized with the root node of the tree. The class should have a method called hasNext() that returns a boolean indicating whether there is a next smallest number in the tree. The class should also have a method called next() that returns the next smallest number in the tree. The methods should run in average O(1) time and use O(h) memory, where h is the height of the tree. Use the TreeNode class from the node_struct module.","output":"#! /usr/bin/python ''' Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST. Calling next() will return the next smallest number in the BST. Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree. ''' from node_struct import TreeNode class BSTIterator: # @param root, a binary search tree's root node def __init__(self, root): self.root = root self.path = list() next_node = root while next_node: self.path.append(next_node) next_node = next_node.left # @return a boolean, whether we have a next smallest number def hasNext(self): return len(self.path) > 0 # @return an integer, the next smallest number def next(self): res = self.path.pop() if res.right: next_node = res.right while next_node: self.path.append(next_node) next_node = next_node.left return res.val # Your BSTIterator will be called like this: # i, v = BSTIterator(root), [] # while i.hasNext(): v.append(i.next())"},{"instruction":"Construct a function in Python which takes in a string and returns the number of vowels it has. string=hello world","output":"def countVowels(string): vowels = 'aeiouAEIOU' count = 0 for char in string: if char in vowels: count += 1 return count"},{"instruction":"Create a python script that returns the most commonly used words in a given text. This is a sentence with some words used more often than others.","output":"def mostCommonWords(text): words = text.split() counts = {word: words.count(word) for word in words} return sorted(counts.items(), key=lambda x: x[1], reverse=True) input = \\"This is a sentence with some words used more often than others.\\" result = mostCommonWords(input) print(result)"},{"instruction":"Generate a main.py python script that will return the maximum of two numbers. a = 3; b = 4","output":"def max(a, b): if a > b: return a else: return b #Driver Code a = 3 b = 4 print(max(a, b))"},{"instruction":"Develop a Python program to output the highest rated movie with its respective score and director. movie_dict = { ‘Movie1’: (9.2, ‘DirectorA’), ‘Movie2’: (8.5, ‘DirectorB’), ‘Movie3’: (7.3, ‘DirectorC’), ‘Movie4’: (9.1, ‘DirectorD’), ‘Movie5’: (8.4, ‘DirectorE’) }","output":"movie_dict = { 'Movie1': (9.2, 'DirectorA'), 'Movie2': (8.5, 'DirectorB'), 'Movie3': (7.3, 'DirectorC'), 'Movie4': (9.1, 'DirectorD'), 'Movie5': (8.4, 'DirectorE') } # Initialize variables max_score = 0 best_movie = \\"\\" director = \\"\\" # Iterate through movies for movie, (score, director) in movie_dict.items(): if score > max_score: max_score = score best_movie = movie director = director # Print results print(f\\"The highest rated movie is '{best_movie}' with a score of {max_score} and directed by {director}.\\")"},{"instruction":"Create a function in Python that will take two strings and merge them together without spaces. string1 = Hello string2 = World","output":"def joinStrings(s1, s2): return s1 + s2 print(joinStrings('Hello', 'World'))"},{"instruction":"Design a Python code to Print the length of the string entered by user. stringInput = Hello World!","output":"stringLength = len(stringInput) print(\\"The length of the string is: \\", stringLength)"},{"instruction":"Write a Python function to convert all strings in a list to lower case. list = ['Hello', 'FRIENDS', 'WorLd']","output":"def to_lower(arr): return [item.lower() for item in arr] result = to_lower(list) print(result) # output ['hello', 'friends', 'world']"},{"instruction":"Write a Python program to detect and remove the duplicates in a list. The list is [1, 20, 4, 6, 20, 4, 1, 6].","output":"def remove_duplicates(lst): return list(dict.fromkeys(lst)) lst = [1, 20, 4, 6, 20, 4, 1, 6] print(remove_duplicates(lst))"},{"instruction":"Serialize a list of dictionaries in Python [{'name':'John', 'age':30}, {'name':'Paul', 'age':22}]","output":"import json data = [{'name':'John', 'age':30}, {'name':'Paul', 'age':22}] serialized_data = json.dumps(data) print(serialized_data)"},{"instruction":"Write a web scraper in Python to extract all the links from a given webpage and print them. https://www.example.com/","output":"from bs4 import BeautifulSoup import requests # Get html of desired webpage url = \\"https://www.example.com/\\" r = requests.get(url) html = r.text # Parse html using BeautifulSoup soup = BeautifulSoup(html, 'html.parser') # Extract all links links = [] for link in soup.find_all('a'): links.append(link.get('href')) # Print all links print(links)"},{"instruction":"Write a Python program to classify the given input according to different categories. salary = 30000","output":"category = \\"medium\\" def classify(salary): if salary <= 10000: return \\"low\\" elif salary <=30000: return \\"medium\\" else: return \\"high\\" result = classify(30000) print(result)"},{"instruction":"Create a Python script to scrape a webpage and extract specific data. The webpage to be scraped is https://www.example.com and the data to extract is the titles and prices of products on the page.","output":"#import necessary modules import requests from bs4 import BeautifulSoup #make the request and get the HTML r = requests.get('https://www.example.com') soup = BeautifulSoup(r.text, 'html.parser') #find the product titles product_titles = soup.find_all('h2', class_='product-title') #initialize a list to store the titles titles = [] #loop through the product titles and store them in the list for title in product_titles: titles.append(title.text) #find the product prices product_prices = soup.find_all('span', class_='product-price') #initialize a list to store the prices prices = [] #loop through the product prices and store them in the list for price in product_prices: prices.append(price.text) #print the titles and prices for i in range(len(titles)): print(f'{titles[i]}: {prices[i]}')"},{"instruction":"Write a Python program for data cleaning and semantic analysis. The program should remove any noisy attributes, identify important topics, and generate textual summaries. A collection of 200 blog posts about the US presidential election.","output":"import re import nltk from nltk.tokenize import word_tokenize # Read in the blog posts posts_raw = open('posts.txt', 'r').read() # Tokenize the posts and remove punctuations posts_tokens = [word_tokenize(post) for post in posts_raw.split('n')] posts_tokens = [[token for token in post if not re.match('[^ws]', token)] for post in posts_tokens] #Remove stopwords and identify topics stopwords = set(nltk.corpus.stopwords.words('english')) posts_filtered = [[token for token in post if token not in stopwords] for post in posts_tokens] topic_counts = nltk.FreqDist( [token for post in posts_filtered for token in post] ) topics = topic_counts.most_common(20) # Generate textual summaries topics_dict = {topic[0]:topic[1] for topic in topics} summaries = [] for post in posts_filtered: summary = [] for token in post: if token in topics_dict.keys(): summary.append(token) summaries.append(' '.join(summary)) print(summaries)"},{"instruction":"Write a Python program to generate documentation in HTML format for a given Python solution. Solution: def add_item(item_list, new_item): item_list.append(new_item) retur","output":"def generate_html_doc(solution): html = \\"<html>n<head>n<title>Python Documentation</title>n</head>n<body>nn<h1>Solution</h1>n <pre>n\\" html += solution + \\"n</pre>nn</body>n</html>\\" return html"},{"instruction":"Write a Python class to model a 2dimensional vector with appropriate methods for addition and subtraction.","output":"class Vector2D: def __init__(self, x, y): self.x = x self.y = y def add(self, other): self.x += other.x self.y += other.y def subtract(self, other): self.x -= other.x self.y -= other.y"},{"instruction":"Write a Python function to find the most frequent element in a list.","output":"def most_frequent(list): counter = 0 num = list[0] for i in list: curr_frequency = list.count(i) if(curr_frequency> counter): counter = curr_frequency num = i return num"},{"instruction":"Using Python, write a program to calculate the hamming distance between two strings. string1 = Hello World! string2 = Goodbye World!","output":"def hammingDistance(string1, string2): if len(string1) != len(string2): raise ValueError('Strings must be of equal length.') distance = 0 for c1, c2 in zip(string1, string2): if c1 != c2: distance += 1 return distance string1 = \\"Hello World!\\" string2 = \\"Goodbye World!\\" distance = hammingDistance(string1, string2) print(distance) # Outputs 5"},{"instruction":"Generate a class that models a car in Python.","output":"class Car: def __init__(self, make, model, year): self.make = make self.model = model self.year = year def get_make(self): return self.make def get_model(self): return self.model def get_year(self): return self.year"},{"instruction":"Given two lists, write a Python program to return a list that contains the elements from both the lists, except for the elements that are duplicated. List1: [1,2,3,4,5] List2: [4,5,6,7,8]","output":"new_list = [1,2,3,6,7,8]"},{"instruction":"Create a function in Python to raise a number to a given power.","output":"def power(num, exponent): result = 1 for _ in range(exponent): result *= num return result print(power(5, 2)) # Output: 25"},{"instruction":"Given a list of numbers, write a Python program to check if any two numbers in the list add up to a given target number. nums = [1, 4, 5, 3] target = 2","output":"def find_two_add_up_to_target(nums, target): for num1 in nums: for num2 in nums: if num1 + num2 == target: return True return False"},{"instruction":"Write a Python program to sort a given list in ascending order of the length of each element. numbers = [4, 8, 1, 16, 9, 7]","output":"def sortList(numbers): numbers.sort(key = len) return numbers numbers = sortList(numbers) print(numbers) # Output: [4, 8, 1, 7, 9, 16]"},{"instruction":"Create a base2 binary addition calculator in Python. A: 010 B: 101","output":"def binary_addition(a, b): a_bin = bin(int(a,2))[2:] b_bin = bin(int(b,2))[2:] c_bin = bin(int(a_bin, 2) + int(b_bin, 2))[2:] c = c_bin.zfill(max(len(a), len(b))) return c result = binary_addition('010', '101') print(result)"},{"instruction":"Create a class in Python to find the top 5 most frequent words in a given sentence. Sentence: The the quick brown fox jumped over the lazy dog","output":"class FindMostFrequentWords: def __init__(self, sentence): self.sentence = sentence def find_most_frequent_words(self): # Split the sentence into words words = self.sentence.split() # Create a list of words and their frequencies frequency_list = [[word, words.count(word)] for word in set(words)] # Sort the list by frequency frequency_list.sort(key=lambda x: x[1], reverse=True) # Return the top 5 most frequent words in the sentence return frequency_list[:5] sentence = 'The the quick brown fox jumped over the lazy dog' fmf_words = FindMostFrequentWords(sentence) top_5_words = fmf_words.find_most_frequent_words() print(top_5_words) # Output: # [['the', 2], ['quick', 1], ['brown', 1], ['fox', 1], ['jumped', 1]]"},{"instruction":"Write a Python program to generate random passwords of length 8.","output":"import random def generate_password(): s = \\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@#0123456789\\" p = \\"\\".join(random.sample(s,8)) return p print(generate_password())"},{"instruction":"Create an API in Python using the Django framework. Not applicable","output":"# File: myproject/urls.py from django.urls import path from myapp.views import api urlpatterns = [ path('api/', api), ] # File: myapp/views.py from django.http import HttpResponse from django.views.decorators.http import require_GET, require_POST @require_GET def api(request): return HttpResponse('GET request received at /api/') @require_POST def api(request): return HttpResponse('POST request received at /api/')"},{"instruction":"Write a python script that computes the sum of all the odd numbers between 1 and 1000.","output":"\\"\\"\\" Write a python script that computes the sum of all the odd numbers between 1 and 1000. \\"\\"\\" #define a function to compute the sum of the odd numbers def sum_odd_numbers(n): result = 0 for i in range(1,n+1): #check if the current number is odd if i%2 != 0: result += i return result #test the function input_n = 1000 print(sum_odd_numbers(input_n))"},{"instruction":"mplement a Python program to calculate the area of a triangle given the length of three sides. 5, 6, 7","output":"def triangle_area(a, b, c): # Semi-perimeter s = (a + b + c) / 2 # calculate the area area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 return area # Driver code a = 5 b = 6 c = 7 print(\\"Area of the triangle is {:.2f}\\".format(triangle_area(a, b, c)))"},{"instruction":"Create an object from a class in Python. class Employee: def __init__ (self, name, age): self.name = name self.age = age","output":"john = Employee(\\"John\\", 25)"},{"instruction":"Create a Python program to aggregate data from multiple sources and store the data in a MongoDB database. Not applicable","output":"import requests import pymongo # Establish connection to MongoDB client = pymongo.MongoClient('mongodb://localhost:27017/') db = client['aggregated_data'] # Make a request to each API and aggregate the data data_points = [] for url in ['url_1', 'url_2', etc.]: req = requests.get(url) data_points.append(req.json()) # Store the data in the MongoDB database db.aggregated_data.insert_many(data_points)"},{"instruction":"Create a Python program to calculate the sum of two numbers, given their positions in a given list. [1, 4, 5, 8, 9], positions = 3, 5","output":"def sum_positions(numbers, pos1, pos2): sum = numbers[pos1] + numbers[pos2] return sum numbers = [1, 4, 5, 8, 9] positions = (3, 5) print(sum_positions(numbers, positions[0], positions[1]))"},{"instruction":"Generate an algorithm in Python to measure the time taken by a function to execute.","output":"import time def measure_time(): start_time = time.time() # run your code end_time = time.time() time_taken = end_time - start_time return time_taken time_taken = measure_time() print (\\"Time taken in seconds: \\",time_taken)"},{"instruction":"Write a code optimization code that reduces the number of lines of code in a given Python script. def count_words(string): counts = { } for w in string.split(): if w in counts: counts[w] += 1 else: counts[w] = 1 return cou","output":"def count_words(string): counts = { } for w in string.split(): counts[w] = counts.get(w, 0) + 1 return counts"},{"instruction":"Create a Python program to multiply a matrix by its inverse. [[3, 4], [2, 16]]","output":"import numpy as np def inverse_multiplication(matrix): inverseM = np.linalg.inv(matrix) result = np.matmul(matrix, inverseM) return result matrix = [[3, 4], [2, 16]] result = inverse_multiplication(matrix) print(result)"},{"instruction":"Create a Python program to handle incoming HTTP requests from web browsers and send appropriate responses. Not applicable","output":"import http.server class MyHandler(http.server.BaseHTTPRequestHandler): def do_GET(self): # Build file path url_tokens = self.path.split(\\"/\\") file_path = \\".\\" for token in url_tokens: if token != '': file_path += \\"/\\"+token # Set content type self.send_response(200) if file_path.endswith(\\".html\\"): self.send_header(\\"Content-type\\", \\"text/html\\") elif file_path.endswith(\\".css\\"): self.send_header(\\"Content-type\\", \\"text/css\\") else: self.send_header(\\"Content-type\\", \\"text/plain\\") self.end_headers() # Read and send back file content f = open(file_path, \\"rb\\") content = f.read() self.wfile.write(content) f.close() # Run server PORT = 8080 server_address = (\\"\\", PORT) server = http.server.HTTPServer(server_address, MyHandler) server.serve_forever()"},{"instruction":"Develop a code in Python to simulate a lottery game.","output":"import random def generate_lottery_numbers(): # Generate 6 unique random numbers between 1 and 49 lottery_nums = random.sample(range(1, 50), 6) return lottery_nums if __name__ == '__main__': print(\\"Lottery numbers:\\", generate_lottery_numbers())"},{"instruction":"Create a Python script to generate a random password of length 8 with combination of characters, numbers and symbols. Not applicable","output":"import random import string # Generate a random string of 8 characters characters = string.ascii_letters + string.digits + string.punctuation random_str = ''.join(random.choice(characters) for i in range(8)) # Print the generated random string print(\\"Generated random string password is:\\", random_str)"},{"instruction":"Generate a random password of the given length in Python.","output":"import random import string def generate_password(length): chars = string.ascii_letters + string.digits return ''.join(random.choice(chars) for _ in range(length)) random_password = generate_password(8) print(random_password)"},{"instruction":"Build a web spider in Python which can read and parse a given web page. Not applicable","output":"import requests import re url = \\"https://www.example.com\\" r = requests.get(url) data = r.text # Find all the links on the page links = re.findall(r'<a class=\\"linkClass\\" href=\\"(.*?)\\">', data) # Print the links for link in links: full_url = url + link print(full_url)"},{"instruction":"Optimize the runtime of the following Python code to improve its performance. import random random_numbers = [random.randint(1, 1000) for _ in range(1000)] def check_if_exists(n): for i in range(len(random_numbers)): if random_numbers[i] == n: return True return False","output":"import random random_numbers = set(random.randint(1, 1000) for _ in range(1000)) def check_if_exists(n): return n in random_numbers if __name__ == \\"__main__\\": print(check_if_exists(10))"},{"instruction":"Generate a Python program that implements linear search","output":"def linear_search(mylist, x): for i in range(len(mylist)): if mylist[i] == x: return i return -1"},{"instruction":"Write a Python function that takes a list of words as input and capitalizes the first character of each element in the list. [apple, banana, strawberry]","output":"def capitalize(words): return [word.capitalize() for word in words] input_words = [\\"apple\\", \\"banana\\", \\"strawberry\\"] capitalized_words = capitalize(input_words) print(capitalized_words)"},{"instruction":"Create a Flask API in Python that takes in text as input and prints out the lemmas of each word. Not applicable","output":"from flask import Flask, request from nltk.stem import WordNetLemmatizer app = Flask(__name__) @app.route(\\"/lemmas\\", methods=['POST']) def lemmas(): text = request.form[\\"text\\"] lemmatizer = WordNetLemmatizer() words = text.split(\\" \\") lemmas = [lemmatizer.lemmatize(word) for word in words] return \\" \\".join(lemmas) app.run(debug=True)"},{"instruction":"Create a Python code to display the multiplication table for a number between Number: 4","output":"for i in range(1, 11): print(\\"4 x\\", i, \\"=\\", 4*i)"},{"instruction":"Develop a sophisticated algorithm for timeseries forecasting in Python. This algorithm should take a timeseries data as an input and predict the trend of the timeseries with high accuracy. Not applicable","output":"import numpy as np import pandas as pd class TimeseriesForecaster: def __init__(self, data): self.data = data # Perform time-series transformations def create_transformed_timeseries(self): #Create details and aggregated version of the timeseries detail_df, agg_df = self.transform_into_detail_and_aggregates() # Create transformed timeseries transformed_dt = self.transform_into_transformed_timeseries(detai_df, agg_df) return transformed_dt # Fit the time-series forecasting models def fit_model(self, transformed_dt, n_test): # Create train and test datasets train, test = self.create_train_test_data(transformed_dt, n_test) # Fit different models to the train dataset fitted_sarima_model = self.fit_sarima_model(train) fitted_gbm_model = self.fit_gbm_model(train) fitted_nn_model = self.fit_nn_model(train) # Return the fitted models return fitted_sarima_model, fitted_gbm_model, fitted_nn_model # Perform inference on the test data def inference(self, test, fitted_sarima_model, fitted_gbm_model, fitted_nn_model): # Perform inference with the fitted models sarima_predictions, gbm_predictions, nn_predictions = self.inference_with_fitted_models(fitted_sarima_model, fitted_gbm_model, fitted_nn_model, test) # Create a combined predictions array combined_predictions = self.create_combined_predictions(sarima_predictions, gbm_predictions, nn_predictions) # Return the combined predictions return combined_predictions"},{"instruction":"Create a Python program to generate random passwords of 8 alphanumeric characters.","output":"import string import random def generate_password(): letters = string.ascii_letters + string.digits return ''.join(random.choice(letters) for i in range(8))"},{"instruction":"Generate a program in Python that takes a list of numbers as input and finds the closest pair in the list my_list = [12, 4, 6, 18, 2, 8]","output":"def find_closest_pair(my_list): closest_pair = None smallest_diff = float('inf') for i in range(len(my_list)): for j in range(i+1, len(my_list)): diff = abs(my_list[i] - my_list[j]) if diff < smallest_diff: smallest_diff = diff closest_pair = (my_list[i], my_list[j]) return closest_pair closest_pair = find_closest_pair(my_list) print(closest_pair)"},{"instruction":"Design a function in Python to remove all occurrences of a given number from a given list. [1, 7, 3, 1, 4, 7, 9], 7","output":"def remove_num(lst, num): return [n for n in lst if n != num] print(remove_num([1, 7, 3, 1, 4, 7, 9], 7)) # [1, 3, 1, 4, 9]"},{"instruction":"Create a Python script for predicting the stocks price of a company for the next 30 days using a machine learning algorithm.","output":"import pandas as pd from sklearn.linear_model import LinearRegression from sklearn.ensemble import RandomForestRegressor # Read the data of company stocks price df = pd.read_csv(\\"company_stock_prices.csv\\") # Create the features X = df.drop([\\"Date\\", \\"Price\\"], axis=1).values # Create the labels y = df[\\"Price\\"].values # Split the dataset into training and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train the model model = RandomForestRegressor() model.fit(X_train, y_train) # Make prediction on the test set y_pred = model.predict(X_test) # Make prediction for next 30 days X_new = df.drop([\\"Date\\", \\"Price\\"], axis=1).tail(30).values y_pred_30days = model.predict(X_new)"},{"instruction":"Design a function in Python to compute the factorial of a given number.","output":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"instruction":"Generate a Python program to calculate the probability of choosing two cards, one red and one black, from a standard deck of 52 cards","output":"def calculate_probability(num_cards, num_red, num_black): return (num_red/num_cards)*(num_black/(num_cards-1))"},{"instruction":"Write a Python program to access a value from a nested dictionary given its keys.","output":"def nested_dict_value(dictionary, keys): for key in keys: if key in dictionary.keys(): dictionary = dictionary[key] else: return None return dictionary data = { \\"first\\" : { \\"second\\" : { \\"third\\" : 10 } } } result = nested_dict_value(data, [\\"first\\", \\"second\\", \\"third\\"]) print(result)"},{"instruction":"mprove this Python function to double the input array. def double_array(arr): return arr","output":"def double_array(arr): return [element * 2 for element in arr]"},{"instruction":"Create a Python program to take an array of numbers and calculate the average. [1, 4, 5, 6, 7]","output":"def average(nums): sum = 0 for n in nums: sum += n return sum / len(nums) nums = [1, 4, 5, 6, 7] print(average(nums))"},{"instruction":"Compute the Least Common Multiple of two numbers. a = 15 b = 10","output":"# Python3 code to find LCM def compute_lcm(x, y): # choose the greater number if x > y: greater = x else: greater = y while(True): if((greater % x == 0) and (greater % y == 0)): lcm = greater break greater += 1 return lcm lcm = compute_lcm(15, 10) print(\\"The Least Common Multiple of 15 and 10 is: \\",lcm)"},{"instruction":"Create a function in Python that takes in a list of numbers and returns true if the list of numbers is strictly increasing; false otherwise. numbers = [3, 4, 5, 6, 7]","output":"def is_strictly_increasing(numbers): for i in range(len(numbers) - 1): if numbers[i] >= numbers[i + 1]: return False return True numbers = [3, 4, 5, 6, 7] result = is_strictly_increasing(numbers) print(result) # returns True"},{"instruction":"Write a Python program to calculate the probability of two dice rolling the same number.","output":"def two_dice_same(n_dice): total_prob = 0 for i in range(1, n_dice + 1): probability = (1/6)**i * (5/6)**(n_dice - i) total_prob += probability return total_prob result = two_dice_same(2) print(result)"},{"instruction":"Create a Python program to calculate the maximum number divisible from all of the elements in an array. arr = [120, 80, 45, 33]","output":"def maxDivisible(arr): max_num = arr[0] # n is the size of array n = len(arr) for i in range(1, n): if (arr[i] > max_num): max_num = arr[i] div_num = 1 # effectivly checks every number up to maximum of array for i in range(2, max_num + 1): div_flag = True # checks if number divisible from all elements for j in range(n): if (arr[j] % i != 0): div_flag = False if (div_flag): div_num = i return div_num"},{"instruction":"Generate a Python method which will check whether an input number is even or odd. Not applicable","output":"def is_even(num): \\"\\"\\" This function takes a number as input and checks whether it is even or odd. Parameters ---------- num : int The number to be checked. Returns ------- bool Returns True if the number is even, False otherwise. \\"\\"\\" if num % 2 == 0: return True else: return False"},{"instruction":"The given code provides functions to transfer data to and from a GPUArray instance, set values in a GPUArray by index, and set values in a GPUArray by index from indexed values in another GPUArray. Use these functions to efficiently manipulate data on a GPU.","output":"#!/usr/bin/env python import numbers import numpy as np import pycuda.driver as drv import pycuda.elementwise as elementwise import pycuda.gpuarray as gpuarray from pycuda.tools import dtype_to_ctype # List of available numerical types provided by numpy: # XXX This try/except is an ugly hack to prevent the doc build on # ReadTheDocs from failing: try: num_types = [np.typeDict[t] for t in np.typecodes['AllInteger']+np.typecodes['AllFloat']] except TypeError: num_types = [] # Numbers of bytes occupied by each numerical type: num_nbytes = dict((np.dtype(t), t(1).nbytes) for t in num_types) def set_realloc(x_gpu, data): \\"\\"\\" Transfer data into a GPUArray instance. Copies the contents of a numpy array into a GPUArray instance. If the array has a different type or dimensions than the instance, the GPU memory used by the instance is reallocated and the instance updated appropriately. Parameters ---------- x_gpu : pycuda.gpuarray.GPUArray GPUArray instance to modify. data : numpy.ndarray Array of data to transfer to the GPU. Examples -------- >>> import pycuda.gpuarray as gpuarray >>> import pycuda.autoinit >>> import numpy as np >>> import misc >>> x = np.asarray(np.random.rand(5), np.float32) >>> x_gpu = gpuarray.to_gpu(x) >>> x = np.asarray(np.random.rand(10, 1), np.float64) >>> set_realloc(x_gpu, x) >>> np.allclose(x, x_gpu.get()) True \\"\\"\\" # Only reallocate if absolutely necessary: if x_gpu.shape != data.shape or x_gpu.size != data.size or x_gpu.strides != data.strides or x_gpu.dtype != data.dtype: # Free old memory: x_gpu.gpudata.free() # Allocate new memory: nbytes = num_nbytes[data.dtype] x_gpu.gpudata = drv.mem_alloc(nbytes*data.size) # Set array attributes: x_gpu.shape = data.shape x_gpu.size = data.size x_gpu.strides = data.strides x_gpu.dtype = data.dtype # Update the GPU memory: x_gpu.set(data) def bufint(a): \\"\\"\\" Return buffer interface to GPU array. Parameters ---------- a : pycuda.gpuarray.GPUArray GPU array. Returns ------- b : buffer Buffer interface to array. Returns None if \`a\` has a length of 0. \\"\\"\\" assert isinstance(a, gpuarray.GPUArray) if a.size: return a.gpudata.as_buffer(a.nbytes) else: return None def set_by_inds(dest_gpu, ind, src_gpu, ind_which='dest'): \\"\\"\\" Set values in a GPUArray by index. Parameters ---------- dest_gpu : pycuda.gpuarray.GPUArray GPUArray instance to modify. ind : pycuda.gpuarray.GPUArray or numpy.ndarray 1D array of element indices to set. Must have an integer dtype. src_gpu : pycuda.gpuarray.GPUArray GPUArray instance from which to set values. ind_which : str If set to 'dest', set the elements in \`dest_gpu\` with indices \`ind\` to the successive values in \`src_gpu\`; the lengths of \`ind\` and \`src_gpu\` must be equal. If set to 'src', set the successive values in \`dest_gpu\` to the values in \`src_gpu\` with indices \`ind\`; the lengths of \`ind\` and \`dest_gpu\` must be equal. Examples -------- >>> import pycuda.gpuarray as gpuarray >>> import pycuda.autoinit >>> import numpy as np >>> import misc >>> dest_gpu = gpuarray.to_gpu(np.arange(5, dtype=np.float32)) >>> ind = gpuarray.to_gpu(np.array([0, 2, 4])) >>> src_gpu = gpuarray.to_gpu(np.array([1, 1, 1], dtype=np.float32)) >>> misc.set_by_inds(dest_gpu, ind, src_gpu, 'dest') >>> np.allclose(dest_gpu.get(), np.array([1, 1, 1, 3, 1], dtype=np.float32)) True >>> dest_gpu = gpuarray.to_gpu(np.zeros(3, dtype=np.float32)) >>> ind = gpuarray.to_gpu(np.array([0, 2, 4])) >>> src_gpu = gpuarray.to_gpu(np.arange(5, dtype=np.float32)) >>> misc.set_by_inds(dest_gpu, ind, src_gpu) >>> np.allclose(dest_gpu.get(), np.array([0, 2, 4], dtype=np.float32)) True Notes ----- Only supports 1D index arrays. May not be efficient for certain index patterns because of lack of inability to coalesce memory operations. \\"\\"\\" # Only support 1D index arrays: assert len(np.shape(ind)) == 1 assert dest_gpu.dtype == src_gpu.dtype assert issubclass(ind.dtype.type, numbers.Integral) N = len(ind) # Manually handle empty index array because it will cause the kernel to # fail if processed: if N == 0: return if ind_which == 'dest': assert N == len(src_gpu) elif ind_which == 'src': assert N == len(dest_gpu) else: raise ValueError('invalid value for \`ind_which\`') if not isinstance(ind, gpuarray.GPUArray): ind = gpuarray.to_gpu(ind) try: func = set_by_inds.cache[(dest_gpu.dtype, ind.dtype, ind_which)] except KeyError: data_ctype = dtype_to_ctype(dest_gpu.dtype) ind_ctype = dtype_to_ctype(ind.dtype) v = \\"{data_ctype} *dest, {ind_ctype} *ind, {data_ctype} *src\\".format(data_ctype=data_ctype, ind_ctype=ind_ctype) if ind_which == 'dest': func = elementwise.ElementwiseKernel(v, \\"dest[ind[i]] = src[i]\\") else: func = elementwise.ElementwiseKernel(v, \\"dest[i] = src[ind[i]]\\") set_by_inds.cache[(dest_gpu.dtype, ind.dtype, ind_which)] = func func(dest_gpu, ind, src_gpu, range=slice(0, N, 1)) set_by_inds.cache = {} def set_by_inds_from_inds(dest_gpu, ind_dest, src_gpu, ind_src): \\"\\"\\" Set values in a GPUArray by index from indexed values in another GPUArray. Parameters ---------- dest_gpu : pycuda.gpuarray.GPUArray GPUArray instance to modify. ind_dest : pycuda.gpuarray.GPUArray or numpy.ndarray 1D array of element indices in \`dest_gpu\` to set. Must have an integer dtype. src_gpu : pycuda.gpuarray.GPUArray GPUArray instance from which to set values. ind_src : pycuda.gpuarray.GPUArray or numpy.ndarray 1D array of element indices in \`src_gpu\` to copy. Must have an integer dtype. \\"\\"\\" assert len(np.shape(ind_dest)) == 1 assert len(np.shape(ind_src)) == 1 assert dest_gpu.dtype == src_gpu.dtype assert ind_dest.dtype == ind_src.dtype assert issubclass(ind_dest.dtype.type, numbers.Integral) assert issubclass(ind_src.dtype.type, numbers.Integral) N = len(ind_src) # Manually handle empty index array because it will cause the kernel to # fail if processed: if N == 0: return assert N == len(ind_dest) if not isinstance(ind_dest, gpuarray.GPUArray): ind_dest = gpuarray.to_gpu(ind_dest) if not isinstance(ind_src, gpuarray.GPUArray): ind_src = gpuarray.to_gpu(ind_src) try: func = set_by_inds_from_inds.cache[(dest_gpu.dtype, ind_dest.dtype)] except KeyError: data_ctype = dtype_to_ctype(dest_gpu.dtype) ind_ctype = dtype_to_ctype(ind_dest.dtype) v = \\"{data_ctype} *dest, {ind_ctype} *ind_dest,\\" \\"{data_ctype} *src, {ind_ctype} *ind_src\\".format(data_ctype=data_ctype, ind_ctype=ind_ctype) func = elementwise.ElementwiseKernel(v, \\"dest[ind_dest[i]] = src[ind_src[i]]\\") set_by_inds_from_inds.cache[(dest_gpu.dtype, ind_dest.dtype)] = func func(dest_gpu, ind_dest, src_gpu, ind_src, range=slice(0, N, 1)) set_by_inds_from_inds.cache = {}"},{"instruction":"Write a Python function to calculate the mean absolute error between two datasets.","output":"def mean_absolute_error(y_true, y_pred): return np.mean(np.abs(y_true - y_pred))"},{"instruction":"Create a program that will parse the following XML into a Python dictionary. <person age=18> <name> <first>John</first> <last>Doe</last> </name> </person>","output":"import xml.etree.ElementTree as ET def parseXML(xml_file): root = ET.parse(xml_file).getroot() person = dict() person['age'] = root.attrib.get('age') name = dict() name['first'] = root[0][0].text name['last'] = root[0][1].text person['name'] = name return person"},{"instruction":"Create a function in Python that takes a list of strings and for each string appends the first letter to the end of the string. ['cat', 'bird', 'rabbit']","output":"def append_first_letter_end(list_of_strings): new_list_of_strings = [] for string in list_of_strings: new_string = string + string[0] new_list_of_strings.append(new_string) return new_list_of_strings"},{"instruction":"Write a function in Python that returns the nth term in a Fibonacci sequence.","output":"# Fibonacci sequence generator def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 1: return a elif n == 2: return b else: for i in range(2,n): c = a + b a = b b = c return b"},{"instruction":"Round an input float to two decimal places in Python. 8.374","output":"num = 8.374 rounded_num = round(num, 2) print(rounded_num)"},{"instruction":"Create a machine learning algorithm in Python which takes in a dataset and creates a classifier to predict the label Not applicable","output":"# Import necessary packages from sklearn.svm import SVC from sklearn.model_selection import train_test_split # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y) # Create and train the Support Vector Machine (SVM) model model = SVC() model.fit(X_train, y_train) # Accuracy of the model acc = model.score(X_test, y_test) # Predict labels for new data predictions = model.predict(X_test)"},{"instruction":"Could you please craft a Python solution to find the total number of days between two dates? date1 = 29 June 1999 date2 = 29 July 1999","output":"import datetime def diff_in_days(date1, date2): d1 = datetime.datetime.strptime(date1, \\"%d %B %Y\\") d2 = datetime.datetime.strptime(date2, \\"%d %B %Y\\") delta = d2 - d1 return delta.days date1 = \\"29 June 1999\\" date2 = \\"29 July 1999\\" difference = diff_in_days(date1, date2) print(\\"Difference is\\", difference, \\"days\\")"},{"instruction":"Create a machine learning model in Python to predict the age of a person from their height and weight. Sample input: Height: 59 Weight: 140","output":"import numpy as np from sklearn.linear_model import LinearRegression # Creating the X and Y datasets x = [] y = [] # Adding the data x.append([59, 140]) y.append(30) x = np.array(x) y = np.array(y) # Creating and fitting the model model = LinearRegression().fit(x, y)"},{"instruction":"Generate a Python 3 program that creates a list of 10 random numbers between 0 and 100.","output":"import random # Create a list of 10 random numbers between 0 and 100 random_list = [] for i in range(10): random_list.append(random.randint(0,100)) # Print the list print(random_list)"},{"instruction":"Generate a GraphQL API in Python to create and read Books. Books should have a title and an author Not applicable","output":"import asyncio import graphene from graphene import ObjectType, InputObjectType, String from graphene_sqlalchemy import SQLAlchemyObjectType from models import Book # Declare a Book data type class BookObject(SQLAlchemyObjectType): class Meta: model = Book # Define a Book Create Input type class BookCreateInput(InputObjectType): title = String(required=True) author = String(required=True) # Create Book mutation class CreateBook(graphene.Mutation): class Arguments: book_data = BookCreateInput(required=True) book = graphene.Field(BookObject) async def mutate(cls, info, book_data): loop = asyncio.get_running_loop() session = info.context['session'] async with session.begin_nested(): book = await loop.run_in_executor(None, lambda: Book(**book_data)) session.add(book) await session.commit() return CreateBook(book=book) # Queries class Query(ObjectType): book = graphene.Field(BookObject, title=String(required=True)) def resolve_book(self, info, title): return Book.query.filter_by(title=title).first() # Mutations class Mutation(ObjectType): create_book = CreateBook.Field() schema = graphene.Schema(query=Query, mutation=Mutation)"},{"instruction":"Create a Python script that splits a given string into equal parts","output":"def split_str(str, n): return [str[i:i+n] for i in range(0, len(str), n)]"},{"instruction":"Generate Python code for a simple quiz application that displays a multiplechoice question and allows the user to select one of the choices as an answer. Q: What is the capital of France? A: Paris, Marseille, Lyo","output":"quiz_questions = { 'What is the capital of France?': 'Paris', } def quiz(): print('Welcome to the quiz!') for question in quiz_questions: choices = quiz_questions[question].split(', ') print(question + 'n') for idx, choice in enumerate(choices): print(f'{idx+1}) {choice}') user_answer = input('nEnter the number of the correct answer: ') if choices[int(user_answer)-1] == quiz_questions[question]: print('Correct!') else: print('Incorrect!') quiz()"},{"instruction":"mplement an algorithm to find the second smallest element in an array of integers using Python. arr = [1, 5, 3, 0, 1]","output":"def secondSmallest(arr): m1, m2 = float('inf'), float('inf') for x in arr: if x <= m1: m1, m2 = x, m1 elif x < m2: m2 = x return m2 arr = [1, 5, 3, 0, -1] print(secondSmallest(arr)) # Outputs 0"},{"instruction":"mplement a simple python program to split a string on a punctuation symbol. 'Hello,World!'","output":"def split_on_punctuation(s): #Using re module import re out = re.split('[,]',s) return out print(split_on_punctuation('Hello,World!'))"},{"instruction":"Given a list of squares in a 2D array, generate a Python program to find the number of squares with a side greater than 5. [[2, 6, 1], [4, 3, 9], [4, 6, 7]]","output":"count = 0 for row in arr: for col in row: if col > 5: count += 1 print(count)"},{"instruction":"Write a Python program to generate a Python Class using the given description. description = This class should store the name, age, and height of a person.","output":"class Person: def __init__(self, name, age, height): self.name = name self.age = age self.height = height def get_name(self): return self.name def get_age(self): return self.age def get_height(self): return self.height"},{"instruction":"Compose a python program to classify each items in our list. List items: shirt, pants, dress, co","output":"def classify(items): categories = ['shirts', 'pants', 'dresses', 'coats'] results = {} for item in items: for category in categories: if item == category: results[item] = category return results"},{"instruction":"Rewrite the given Python script to remove all punctuation from a given string. This is a sample string with punctuation marks .","output":"def remove_punctuation(string): new_string = \\"\\" for char in string: if char not in \\",.?!;:\\": new_string += char return new_string"},{"instruction":"Write a Python program to convert a given binary form to its original string. b_string = 0100100001100101011011000110110001101111","output":"def binary_to_string(b_string): s = \\"\\" for i in range(0, len(b_string), 8): byte = b_string[i: i + 8] s += chr(int(byte, 2)) return s b_string = \\"0100100001100101011011000110110001101111\\" print(binary_to_string(b_string)) # Output: Hello"},{"instruction":"Rewrite the following piece of code in Python, that calculates the sum of two variables. int x = 2; int y = 4; int sum = x + y;","output":"x = 2 y = 4 sum = x + y print(sum) # 6"},{"instruction":"Write a script in Python to sort a list of words alphabetically. [python, java, c, sql, ruby]","output":"def sort_words(words): ''' Function to sort a list of words alphabetically Parameters words: list of strings Returns sorted list of strings ''' sorted_list = sorted(words) return sorted_list"},{"instruction":"Enhance the following python function to rank elements of the given list in descending order. def my_sort(items): items.sort()","output":"def my_sort(items): items.sort(reverse=True)"},{"instruction":"Develop a function in Python that takes an individual name as an input and output its acronym. Oscar Thomas","output":"def make_acronym(name): acronym = \\"\\".join([word[0] for word in name.split()]).upper() return acronym result = make_acronym(\\"Oscar Thomas\\") print(result)"},{"instruction":"Create a Python program to remove all the duplicates from a given list. [1, 4, 2, 5, 6, 4, 1, 5]","output":"def remove_duplicates(lst): non_duplicate_lst = [] for i in lst: if i not in non_duplicate_lst: non_duplicate_lst.append(i) return non_duplicate_lst lst = [1, 4, 2, 5, 6, 4, 1, 5] print(remove_duplicates(lst))"},{"instruction":"Using a Python dictionary, create a function that counts the occurrence of each word in a given string. string = This is a sample sentence to count the occurrence of each word.","output":"def count_words(string): #split the string into individual words words = string.split() #create an empty dictionary to store the word counts word_counts = {} #loop through each word in the list for word in words: #if the word is not in the dictionary, add it with a count of 1 if word not in word_counts: word_counts[word] = 1 #otherwise increment the count for that word else: word_counts[word] += 1 #return the dictionary of word counts return word_counts"},{"instruction":"Create a program in Python to calculate the sum of the first n positive integers, using recursion. n = 5","output":"def calculateSum(n): if n <= 0: return 0 else: return n + calculateSum(n-1) result = calculateSum(5) print(result)"},{"instruction":"Create a Python program to classify emails as 'spam' or 'not spam' using a machine learning model.","output":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.naive_bayes import GaussianNB, MultinomialNB # Load data data = pd.read_csv('email.csv') # Separate features and labels X = data.drop('spam', axis=1).values y = data['spam'].values # Split data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create and fit the model model = MultinomialNB() model.fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) # Evaluate accuracy accuracy = metrics.accuracy_score(y_test, y_pred) print(f'Accuracy: {accuracy*100:.2f}%')"},{"instruction":"Construct a web scraper in Python using the Scrapy library which fetches information from a web page. Not applicable","output":"import scrapy class MySpider(scrapy.Spider): name = 'myspider' start_urls = [ 'https://example.com/page1', 'https://example.com/page2', ] def parse(self, response): for item in response.css('item'): yield { 'title': item.css('item-title::text').get(), 'description': item.css('item-description::text').get(), }"},{"instruction":"Generate a code to implement the quicksort algorithm in Python","output":"\\"\\"\\" Implement quicksort algorithm \\"\\"\\" def partition(arr,low,high): i = ( low-1 ) pivot = arr[high] for j in range(low , high): if arr[j] <= pivot: i = i+1 arr[i],arr[j] = arr[j],arr[i] arr[i+1],arr[high] = arr[high],arr[i+1] return ( i+1 ) def quick_sort(arr,low,high): if low < high: pi = partition(arr,low,high) quick_sort(arr, low, pi-1) quick_sort(arr, pi+1, high) if __name__ == '__main__': arr = [9,4,2,7,3,8,5,6] n = len(arr) quick_sort(arr,0,n-1) print(\\"The sorted array is:\\") for i in arr: print (i),"},{"instruction":"Compute the best single stock portfolio for a given dataset with Python.","output":"import pandas as pd from scipy.optimize import minimize # read in data df = pd.read_csv('data.csv') # objective function def obj_func(weights, mean_returns, covariance_matrix): # compute portfolio mean return portfolio_mean_return = np.dot(mean_returns, weights) # compute portfolio variance portfolio_variance = np.sqrt(np.dot(weights.T, np.dot(covariance_matrix, weights))) # return the negative of the Sharpe ratio return -(portfolio_mean_return / portfolio_variance) # minimize function def minimize_func(mean_returns, covariance_matrix): # define initial weights init_weights = np.array([1/len(mean_returns)] * len(mean_returns)) # define constraints constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1}, {'type': 'ineq', 'fun': lambda x: x}) # minimize the objective function results = minimize(obj_func, init_weights, args=(mean_returns, covariance_matrix), method='SLSQP', constraints=constraints) return results.x # optimize and get optimal weights weights = minimize_func(df.mean(), df.cov()) print(weights)"},{"instruction":"Construct a function in Python that takes two integers, a and b, and returns their sum.","output":"def add_integers(a, b): return a + b"},{"instruction":"The given code is a Python script that defines a class called ManyJetsHiggsVarFiller which adds new variables to a ROOT tree. To use this class, you need to import it from the tree.gardening module and create an instance of it. Then, you can call the process method of the instance, passing the input and output ROOT files as arguments. The new variables that will be added to the output tree are: m4j, m3j, mW1jj, mW2jj, pt4j, pt3j, eta4j, eta3j, phi4j, phi3j, dphill4j, dphill3j, best1, and best2.","output":"from tree.gardening import TreeCloner import optparse import sys import ROOT import numpy import re import os.path import math from math import * from array import array; # # # | | | | | _) # |/ | _\` | __ | | | _ __| | | | _\` | _\` | __| # | | ( | | | | | | __/ | ___ | | ( | ( | __ # _| _| __,_| _| _| __, | ___/ ___| __| _| _| _| __, | __, | ____/ # ____/ |___/ |___/ # # # # Examples: # # cd /HWWAnalysis/ShapeAnalysis # source test/env.sh # # gardener.py manyJetHiggsVar /data2/amassiro/VBF/Data/All21Aug2012_temp_1/latino_2000_ggToH1000toWWTo2LAndTau2Nu.root /data2/amassiro/VBF/Data/All21Aug2012_temp_2/latino_2000_ggToH1000toWWTo2LAndTau2Nu_TESTISITWORKING.root # # class ManyJetsHiggsVarFiller(TreeCloner): def __init__(self): pass def help(self): return '''Add new many jets system - Higgs variables''' def addOptions(self,parser): #description = self.help() #group = optparse.OptionGroup(parser,self.label, description) #group.add_option('-b', '--branch', dest='branch', help='Name of something that is not used ... ', default='boh') #parser.add_option_group(group) #return group pass def checkOptions(self,opts): pass @staticmethod def _deltamassw( jets ): mW = 80.385 return math.fabs( mW - (jets[0] + jets[1]).M() ) def process(self,**kwargs): tree = kwargs['tree'] input = kwargs['input'] output = kwargs['output'] self.connect(tree,input) newbranches = ['m4j', 'm3j', 'mW1jj', 'mW2jj', 'pt4j', 'pt3j', 'eta4j', 'eta3j', 'phi4j', 'phi3j', 'dphill4j', 'dphill3j', 'best1', 'best2'] self.clone(output,newbranches) m4j = numpy.ones(1, dtype=numpy.float32) m3j = numpy.ones(1, dtype=numpy.float32) mW1jj = numpy.ones(1, dtype=numpy.float32) mW2jj = numpy.ones(1, dtype=numpy.float32) pt4j = numpy.ones(1, dtype=numpy.float32) pt3j = numpy.ones(1, dtype=numpy.float32) eta4j = numpy.ones(1, dtype=numpy.float32) eta3j = numpy.ones(1, dtype=numpy.float32) phi4j = numpy.ones(1, dtype=numpy.float32) phi3j = numpy.ones(1, dtype=numpy.float32) dphill4j = numpy.ones(1, dtype=numpy.float32) dphill3j = numpy.ones(1, dtype=numpy.float32) best1 = numpy.ones(1, dtype=numpy.float32) best2 = numpy.ones(1, dtype=numpy.float32) self.otree.Branch('m4j' , m4j , 'm4j/F' ) self.otree.Branch('m3j' , m3j , 'm3j/F' ) self.otree.Branch('mW1jj' , mW1jj , 'mW1jj/F' ) self.otree.Branch('mW2jj' , mW2jj , 'mW2jj/F' ) self.otree.Branch('pt4j' , pt4j , 'pt4j/F' ) self.otree.Branch('pt3j' , pt3j , 'pt3j/F' ) self.otree.Branch('eta4j' , eta4j , 'eta4j/F' ) self.otree.Branch('eta3j' , eta3j , 'eta3j/F' ) self.otree.Branch('phi4j' , phi4j , 'phi4j/F' ) self.otree.Branch('phi3j' , phi3j , 'phi3j/F' ) self.otree.Branch('dphill4j' , dphill4j , 'dphill4j/F' ) self.otree.Branch('dphill3j' , dphill3j , 'dphill3j/F' ) self.otree.Branch('best1' , best1 , 'best1/F' ) self.otree.Branch('best2' , best2 , 'best2/F' ) nentries = self.itree.GetEntries() print 'Total number of entries: ',nentries # avoid dots to go faster itree = self.itree otree = self.otree print '- Starting eventloop' step = 5000 for i in xrange(nentries): itree.GetEntry(i) print event count if i > 0 and i%step == 0.: print i,'events processed.' jetpt1 = itree.jetpt1 jetphi1 = itree.jetphi1 jeteta1 = itree.jeteta1 jetpt2 = itree.jetpt2 jetphi2 = itree.jetphi2 jeteta2 = itree.jeteta2 jetpt3 = itree.jetpt3 jetphi3 = itree.jetphi3 jeteta3 = itree.jeteta3 jetpt4 = itree.jetpt4 jetphi4 = itree.jetphi4 jeteta4 = itree.jeteta4 jet1 = ROOT.TLorentzVector() jet1.SetPtEtaPhiM(itree.jetpt1, itree.jeteta1, itree.jetphi1, 0) jet2 = ROOT.TLorentzVector() jet2.SetPtEtaPhiM(itree.jetpt2, itree.jeteta2, itree.jetphi2, 0) jet3 = ROOT.TLorentzVector() jet3.SetPtEtaPhiM(itree.jetpt3, itree.jeteta3, itree.jetphi3, 0) jet4 = ROOT.TLorentzVector() jet4.SetPtEtaPhiM(itree.jetpt4, itree.jeteta4, itree.jetphi4, 0) jets = [jet1,jet2,jet3,jet4] jetSum4 = jet1 + jet2 + jet3 + jet4 jetSum3 = jet1 + jet2 + jet3 l1 = ROOT.TLorentzVector() l1.SetPtEtaPhiE(itree.pt1, itree.eta1, itree.phi1, itree.pt1/sin(2*atan(exp(-itree.eta1)))) l2 = ROOT.TLorentzVector() l2.SetPtEtaPhiE(itree.pt2, itree.eta2, itree.phi2, itree.pt2/sin(2*atan(exp(-itree.eta2)))) ll = ROOT.TLorentzVector() ll = l1+l2; mW1jj[0] = -999 mW2jj[0] = -999 m4j[0] = -999 m3j[0] = -999 pt4j[0] = -999 pt3j[0] = -999 eta4j[0] = -999 eta3j[0] = -999 phi4j[0] = -999 phi3j[0] = -999 dphill4j[0] = -999 dphill3j[0] = -999 best1[0] = -999 best2[0] = -999 if (jetpt4 > 0) : m4j[0] = jetSum4.M() pt4j[0] = jetSum4.Pt() eta4j[0] = jetSum4.Eta() phi4j[0] = jetSum4.Phi() dphill4j[0] = jetSum4.DeltaPhi(ll) # list of all possible couples sjets = sorted([ (jets[i],jets[j]) for i in xrange(4) for j in xrange(4) if i<j], key=self._deltamassw) # for jA,jB in sjets: # print (jA+jB).M(),'->', self._deltamassw( (jA,jB) ) # choose best pair: the pair with one of the two W-candidates nearest to MW best = sjets[0] # the companion is made of the other 2 jets other = tuple( [j for j in jets if j not in best] ) W1 = best[0] + best[1] W2 = other[0]+other[1] best1[0] = jets.index(best[0]) best2[0] = jets.index(best[1]) if W1.Pt() > W2.Pt() : mW1jj[0] = W1.M() mW2jj[0] = W2.M() else : mW1jj[0] = W2.M() mW2jj[0] = W1.M() if (jetpt3 > 0) : m3j[0] = jetSum3.M() pt3j[0] = jetSum3.Pt() eta3j[0] = jetSum3.Eta() phi3j[0] = jetSum3.Phi() dphill3j[0] = jetSum3.DeltaPhi(ll) otree.Fill() self.disconnect() print '- Eventloop completed'"},{"instruction":"Generate a correct python program to create a function to determine whether or not a given word is a palindrome.","output":"def is_palindrome(word): reversed_word = word[::-1] if word == reversed_word: return True else: return False"},{"instruction":"Create a Python script to extract email addresses from an input text and save them in an array. Not applicable","output":"import re text = \\"Some text here with an email example@test.com and another test@example.com\\" matches = re.findall(r'[w.-]+@[w.-]+.w+', text) print(matches) # Output: ['example@test.com', 'test@example.com']"},{"instruction":"Create a Python program that takes a long string as input and returns a dictionary of the words with the count of each word. This is a test of a long string with words that will be used to generate a dictionary","output":"def count_words(string): words = string.split() counts = dict() for word in words: if word in counts: counts[word] += 1 else: counts[word] = 1 return counts string = \\"This is a test of a long string with words that will be used to generate a dictionary\\" print(count_words(string)) # Output should be {'This': 1, 'is': 1, 'a': 2, 'test': 1, 'of': 1, 'long': 1, 'string': 1, 'with': 1, 'words': 1, 'that': 1, 'will': 1, 'be': 1, 'used': 1, 'to': 1, 'generate': 1, 'dictionary': 1}"},{"instruction":"Design aPython program to replace the last element in a list with another list. list1 = [1,3,5,2], list2 = [10,20,30]","output":"def replace_last_element(list1, list2): list1[-1:] = list2 return list1"},{"instruction":"Connect to multiple devices in the database using Netmiko and execute 'show version' command on each device. Record the time taken to complete the operation. Use multiprocessing to create a process for each device connection and command execution.","output":"#!/usr/bin/env python ''' Use processes and Netmiko to connect to each of the devices in the database. Execute 'show version' on each device. Record the amount of time required to do this. DISCLAIMER NOTE: Solution is limited to the exercise's scope ''' from net_system.models import NetworkDevice import django from multiprocessing import Process from termcolor import colored from datetime import datetime from netmiko import ConnectHandler def sh_ver(a_device): # Execute cmd with NETMIKO creds = a_device.credentials rem_conn_ssh = ConnectHandler(device_type=a_device.device_type, ip=a_device.ip_address, username=creds.username, password=creds.password, port=a_device.port, secret='') # Output cmd output = rem_conn_ssh.send_command_expect(\\"show version\\") print \\"n <<--------------------------->> n \\"+ colored(output, 'green') + \\"n\\" def main(): # Main function to connect to the devices using NETMIKO and execute a cmd. Multi-processing support. django.setup() # Record start time process = [] start_time = datetime.now() pylab_devices = NetworkDevice.objects.all() for a_device in pylab_devices: # Create a PROCESS for each device connection/cmd node_process = Process(target=sh_ver, args=(a_device,)) # Start the THREAD node_process.start() process.append(node_process) for any_process in process: print \\"Notice: \\" + colored(any_process, 'red') any_process.join() # Function sh_ver runtime calculation runtime = datetime.now() - start_time print \\"This operation required \\" + colored(runtime, 'blue') if __name__ == \\"__main__\\": main()"},{"instruction":"Create a Python program that identifies the longest contiguous subsequence with same values from an integer array. array = [1, 2, 1, 2, 3, 2, 3, 4]","output":"def longestSubsequence(array): longest_start = 0 longest_length = 0 start = 0 current_length = 0 for i in range(len(array) - 1): if array[i] == array[i + 1]: current_length += 1 else: current_length = 0 start = i+1 if current_length > longest_length: longest_length = current_length longest_start = start return array[longest_start : longest_start + longest_length + 1]"},{"instruction":"Generate a Python class to efficiently store two variables in one object.","output":"class TwoVariables: def __init__(self, a, b): self.a = a self.b = b def get_values(self): return (self.a, self.b)"},{"instruction":"Generate a Python program to solve a TSP problem for a given set of cities. A set of citie","output":"import random # Calculate the total distance between two points def distance(c1, c2): return ((c1[0] - c2[0])**2 + (c1[1] - c2[1])**2) ** 0.5 # Calculate the total distance for a complete path def path_distance(cities): dist = 0 for i in range(len(cities) - 1): dist += distance(cities[i], cities[i+1]) return dist # Generate a random path of cities def generate_path(cities): path = cities[:] random.shuffle(path) return path # Simulated Annealing algorithm to optimize the path def anneal(cities): prev_distance = path_distance(cities) T = 1.0 T_min = 0.00001 alpha = 0.9 while T > T_min: i = 1 while i <= 500: i += 1 new_path = generate_path(cities) curr_distance = path_distance(new_path) ap = accept_prob(prev_distance, curr_distance, T) if ap > random.random(): cities = new_path[:] prev_distance = curr_distance T *= alpha return cities # Calculate the acceptance probability def accept_prob(prev_distance, curr_distance, T): if curr_distance < prev_distance: return 1 return math.exp(-abs(curr_distance - prev_distance) / T) # Main program begins here if __name__== \\"__main__\\": # List of cities: cities = [[0, 0], [1, 1], [2, 3], [3, 2]] # Main loop path = anneal(cities) print(\\"Optimized Path:\\") for p in path: print(p)"},{"instruction":"Create a class in Python to store the details of a movie including title, actor, and release date.","output":"class Movie: def __init__(self, title, actor, release_date): self.title = title self.actor = actor self.release_date = release_date"},{"instruction":"Create an algorithm in Python that takes a string and determines how many unique characters are present in the string. The string is Hello World.","output":"def countUniqueCharacters(string): seen = set() count = 0 for char in string: if char not in seen: seen.add(char) count += 1 else: continue return count print(countUniqueCharacters(\\"Hello World\\")) # Output: 10 (The unique characters present in \\"Hello World\\" are: H, e, l, o, W, r, d)"},{"instruction":"Write a Python program that takes a list of numbers as an argument and prints the count of all even and odd numbers. [2, 9, 4, 8, 0, 7, 1]","output":"def countNumbers(nums): evenCount = 0 oddCount = 0 for num in nums: if num % 2 == 0: evenCount += 1 else: oddCount += 1 return (evenCount, oddCount) nums = [2, 9, 4, 8, 0, 7, 1] evenCount, oddCount = countNumbers(nums) print(\\"Even numbers:\\", evenCount) print(\\"Odd numbers:\\", oddCount) # Even numbers: 4 # Odd numbers: 3"},{"instruction":"Using Python and TensorFlow, build a text classifier that can take a piece of text and accurately classify it into one of four given categories. The four categories are: 1. Politics 2. Technology 3. Business 4. Spor","output":"import tensorflow as tf from tensorflow.keras.preprocessing.text import Tokenizer from tensorflow.keras.preprocessing.sequence import pad_sequences from tensorflow.keras.layers import Dense, Flatten, Embedding from tensorflow.keras.models import Sequential # some example text texts = ['This new technology is changing the way we do politics', 'Business has been affected by the new technology', 'Sports have remained unaffected by the new technology', 'Politics have become more complex due to the new technology'] # encode the classes labels = [1, 0, 2, 1] # tokenize the text tokenizer = Tokenizer() tokenizer.fit_on_texts(texts) word_index = tokenizer.word_index # create the sequence of words sequences = tokenizer.texts_to_sequences(texts) # create the padding for sequences data = pad_sequences(sequences, maxlen=8) # Build and train a model model = Sequential() model.add(Embedding(input_dim=len(word_index)+1, output_dim=8, input_length=8)) model.add(Flatten()) model.add(Dense(4, activation='softmax')) model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) model.fit(data, labels, epochs=10) # Evaluate the model # test_text = 'Sports have become more competitive due to the new technology' # test_seq = tokenizer.texts_to_sequences([test_text]) # test_data = pad_sequences(test_seq, maxlen=8) # print('Predicted label:', model.predict_classes(test_data))"},{"instruction":"Create a class in Python which calculates the average of two numbers passed to it as parameters.","output":"class AverageCalculator: def __init__(self, num1, num2): self.num1 = num1 self.num2 = num2 def get_average(self): return (self.num1 + self.num2) / 2 ac = AverageCalculator(4, 8) print(\\"The average of 4 and 8 is: \\" + str(ac.get_average()))"},{"instruction":"Develop an Python program to classify some spoken words. Word list: ['happy', 'sad', 'angry']","output":"import speech_recognition as sr r = sr.Recognizer() words = ['happy', 'sad', 'angry'] with sr.Microphone() as source: print(\\"Say a word.\\") audio = r.listen(source) try: word = r.recognize_google(audio).lower() if word in words: print(\\"The emotion of the word is:\\", word) else: print(\\"The word is unknown.\\") except: print(\\"Sorry could not recognize\\")"},{"instruction":"Write a Python program to get the two smallest numbers in a list of numbers. [1, 3, 7, 4, 5]","output":"list = [1, 3, 7, 4, 5] small1 = min(list) list.remove(small1) small2 = min(list) print(small1, small2) # 1, 3"},{"instruction":"Create a function in Python that takes a list of numbers andarranges them in ascending order. nums = [4, 5, 2, 1, 6, 5]","output":"def sort_ascending(nums): sorted_list = sorted(nums) return sorted_list print(sort_ascending(nums)) # [1, 2, 4, 5, 5, 6]"},{"instruction":"Create a function in Python to compute the average of two numbers. 8, 10","output":"def average(a, b): return (a + b)/2 a = 8 b = 10 print(\\"Average of\\", a, \\"and\\", b, \\"is\\", average(a, b))"},{"instruction":"Create a matrix in Python using lists that is 3x3.","output":"X = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]"},{"instruction":"Design a Python program that takes an array of integers and returns the first element that is divisible by 7. [41, 42, 43, 44, 45]","output":"def findFirstDivisibleBy7(arr): for i in range(0, len(arr)): if arr[i] % 7 == 0: return arr[i] return -1 arr = [41, 42, 43, 44, 45] result = findFirstDivisibleBy7(arr) print(result) # 42"},{"instruction":"Create an algorithm in Python to calculate the sum of all numbers between two given numbers. 10, 20","output":"def sumInRange(lower_limit, upper_limit): # initialize sum variable sum = 0; # calculate sum of all numbers between # lower_limit & upper_limit for i in range(lower_limit, upper_limit + 1): sum += i # return the output return sum;"},{"instruction":"Create a Python 3 machine learning algorithm that discovers trends in a set of mortgage loan interest rate data. The dataset contains 68 columns of data about mortgages and their interest rates.","output":"import pandas as pd # load the dataset df = pd.read_csv('./dataset.csv') # define features X = df.loc[:, df.columns != 'Interest.Rate'] # define target y = df[['Interest.Rate']] # create train and test datasets from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # train the model from sklearn.linear_model import LinearRegression reg = LinearRegression() reg.fit(X_train, y_train) # make predictions y_predict = reg.predict(X_test) # evaluate performance from sklearn.metrics import mean_squared_error mse = mean_squared_error(y_test, y_predict) print('Mean Square Error: %.2f' % mse) # save the model import pickle with open('model.sav', 'wb') as f: pickle.dump(reg, f)"},{"instruction":"Write a python program to transform input set of numbers into a list of tuples. 1, 2, 3, 4, 5","output":"[(1, 2), (3, 4), (5, None)]"},{"instruction":"Write a function in Python to check whether a given string is in lower case or not. String: ThisIsAnExample","output":"def is_lowercase(string): for character in string: if character != character.lower(): return False return True"},{"instruction":"Develop a unit test in Python to verify correctness of an algorithm. def algorithm(arr): sum = 0 for i in range(len(arr)): sum += arr[i] return sum","output":"import unittest class TestAlgorithm(unittest.TestCase): def test_algorithm(self): 10 = algorithm([1, 2, 3, 4]) self.assertEqual(10, 10) 40 = algorithm([10, 10, 10, 10]) self.assertEqual(40, 40) if __name__ == '__main__': unittest.main()"},{"instruction":"Create a Python script that takes a string and prints the first character of every word in the given string. This is a test string","output":"def first_characters_of_words(string): words = string.split(\\" \\") characters = [word[0] for word in words] return \\"\\".join(characters) print(first_characters_of_words(\\"This is a test string\\")) # Tiat"},{"instruction":"Develop a function in Python that removes all the duplicates from a list. arr = [1, 2, 2, 3, 3, 4, 4]","output":"def remove_duplicates(arr): new_list = [] for i in arr: if i not in new_list: new_list.append(i) return new_list arr = [1, 2, 2, 3, 3, 4, 4] print(remove_duplicates(arr))"},{"instruction":"Write a python function which will check if input string is palindrome or not. input_string = racecar","output":"def is_palindrome(input_string): if input_string == input_string[::-1]: return True else: return False input_string = \\"racecar\\" check_palindrome = is_palindrome(input_string) if check_palindrome == True: print(\\"Input string is a palindrome\\") else: print(\\"Input string is NOT a palindrome\\")"},{"instruction":"Write a Python program to extract the nth element from the given list of lists. [[1,2,3], [4,5,6], [7,8,9]]","output":"def get_nth_element(list_of_lists, n): return [item[n] for item in list_of_lists]"},{"instruction":"Design a python script to calculate BMI of a person.","output":"def calculate_bmi(height, weight): bmi = weight / ((height/100) ** 2) return bmi"},{"instruction":"Modify the python code to correctly display the output. if 4 < 8: print('Hello World')","output":"if 4 < 8: print('Hello World') else: print('Goodbye World')"},{"instruction":"Generate command line commands for running a basic GridSearch model to improve an existing machine learning classifier. Not applicable","output":"from sklearn.model_selection import GridSearchCV parameters = {'C': [1, 5, 10, 100], 'gamma': [0.0001, 0.001, 0.01, 0.1]} clf = GridSearchCV(svm.SVC(), parameters) # Run grid search python your_program.py --estimator clf --parameters parameters"},{"instruction":"Create a Python program to generate a table with 20 rows and 10 columns.","output":"import pandas as pd table = pd.DataFrame(columns=[str(i) for i in range(10)], index=range(20)) print(table)"},{"instruction":"Create a Python program to print a table of numbers (110) and their squares. Not applicable","output":"# Print a table of numbers 1 to 10 for i in range(1, 11): print('{0:2d} {1:3d} {2:4d}'.format(i, i**2, i**3)) # Output: 1 1 1 2 4 8 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000"},{"instruction":"Develop a Python script for checking for palindromes. <none>","output":"def is_palindrome(word): rev_word = word[::-1] if word == rev_word: return True return False"},{"instruction":"Create a class in Python that defines a shape and has three methods that calculate the perimeter, area, and volume.","output":"class Shape: def __init__(self): # Initialize any variables as needed. pass def calculate_perimeter(self): # Code to calculate perimeter pass def calculate_area(self): # Code to calculate area pass def calculate_volume(self): # Code to calculate volume pass"},{"instruction":"Construct a Python class to represent a Country that contains its name, population, and area.","output":"class Country: def __init__(self, name, population, area): self.name = name self.population = population self. area = area"},{"instruction":"Write an efficient Python program to search for an element in a list of integers.","output":"def search_element(l, x): for i in range(len(l)): if l[i] == x: return i return -1"},{"instruction":"Write a Python program that checks whether two given strings are anagrams or not. String1: bad String2: dab","output":"def is_anagram(s1, s2): s1_dict = {} s2_dict = {} for char in s1: if char in s1_dict: s1_dict[char] += 1 else: s1_dict[char] = 1 for char in s2: if char in s2_dict: s2_dict[char] += 1 else: s2_dict[char] = 1 return s1_dict == s2_dict"},{"instruction":"Create an interactive chatbot in Python using Natural Language Processing that can answer any questions related to the world of programming. Not applicable","output":"import nltk from nltk.stem import WordNetLemmatizer from nltk.corpus import wordnet #Define preprocessor def preprocess(sentence): lemmatizer = WordNetLemmatizer() tokens = nltk.word_tokenize(sentence) tokens = [lemmatizer.lemmatize(token, get_wordnet_pos(token)) for token in tokens] return ' '.join(tokens) #Define helper function for getting part-of-speech def get_wordnet_pos(word): tag = nltk.pos_tag([word])[0][1][0].upper() tag_dict = { 'J': wordnet.ADJ, 'N': wordnet.NOUN, 'V': wordnet.VERB, 'R': wordnet.ADV } return tag_dict.get(tag, wordnet.NOUN) #Define helper function for getting response def get_response(sentence): return responses.get(preprocess(sentence), 'I am not sure about that. Can you Ask me a different question?') #Define responses responses = { 'what programming language': 'I use Python, but there are many programming languages to choose from.', 'what programming language should i use': 'It depends on what you are trying to achieve, so you should research what language best suits your purpose.' } #Get user input query = input('Ask me about programming: ') #Get response response = get_response(query) #Print response print(response)"},{"instruction":"Create a RESTful API endpoint in Python that returns all the users in a database. Not applicable","output":"import flask from flask import Flask, request from flask_sqlalchemy import SQLAlchemy app = flask.Flask(name) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' db = SQLAlchemy(app) class User(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(120)) @app.route('/users', methods=['GET']) def get_users(): users = User.query.all() users_data = [] for user in users: users_data.append({'id': user.id, 'name': user.name}) return jsonify({'users': users_data})"},{"instruction":"Develop a function in Python that takes two strings and returns a new string that is the longest common subsequence of the two given strings.","output":"def longest_common_subsequence(s1, s2): m = len(s1) n = len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) result = '' i, j = m, n while i > 0 and j > 0: if s1[i-1] == s2[j-1]: result = s1[i-1] + result i -= 1 j -= 1 elif dp[i-1][j] > dp[i][j-1]: i -= 1 else: j -= 1 return result"},{"instruction":"Build a chatbot in Python for a simple airline ticket booking system. The chatbot should have a natural language pipeline, intents, entities, and Actions. Not applicable","output":"import urllib.request import json import logging # define urls def get_response(url): response = urllib.request.urlopen(url) data = json.loads(response.read()) return data # define intent def respond(message): intent, entities = get_entities(message) response = get_action(intent, entities) return response # define entity def get_entities(message): url = f'http://example.com/api/nlp/{message}' result = get_response(url) intent = result['intent'] entities = result['entities'] return intent, entities # define action def get_action(intent, entities): url = f'http://example.com/api/action/{intent}' data = { 'entities': entities } result = get_response(url,data) return result['response'] # main loop while True: message = input(\\">> \\") response = respond(message) print(response)"},{"instruction":"Write a Python class to represent a five sided polygon.","output":"class Polygon: def __init__(self, sides): self.sides = sides def calc_perimeter(self): return (self.sides * 5) # create a Polygon instance polygon = Polygon(5) # calculate the perimeter print(polygon.calc_perimeter())"},{"instruction":"Define a method in Python to detect if a given string is a palindrome.","output":"def is_palindrome(string): return string == string[::-1]"},{"instruction":"Generate a class definition in Python that implements a shopping cart with methods to add item, remove item and calculate the overall cost.","output":"class ShoppingCart: def __init__(self): self.cart_items = [] def add_item(self, item): self.cart_items.append(item) def remove_item(self, item): self.cart_items.remove(item) def calculate_cost(self): total_cost = 0 for item in self.cart_items: total_cost += item.price return total_cost"},{"instruction":"Create a Python script that sorts a list of dictionaries based on their values. list_of_dicts = [ {'name': 'Brian', 'age': 30}, {'name': 'John', 'age': 20}, {'name': 'Tim', 'age': 25}, {'name': 'Susan', 'age': 35} ]","output":"def sort_by_value(list_of_dicts): return sorted(list_of_dicts, key=lambda k: k['age'], reverse=True) print(sort_by_value(list_of_dicts)) # Output: [ {'name': 'Susan', 'age': 35}, {'name': 'Brian', 'age': 30}, {'name': 'Tim', 'age': 25}, {'name': 'John', 'age': 20} ]"},{"instruction":"Design a function in Python that returns the maximum number from a 2D array along with its index. my_array = [[5, 7, 8], [4, 10, 11], [13, 2, 6]]","output":"def max_2d_array(my_array): max_number = my_array[0][0] max_index = 0 for row_index in range(len(my_array)): for col_index in range(len(my_array[row_index])): if my_array[row_index][col_index] > max_number: max_number = my_array[row_index][col_index] max_index = (row_index, col_index) return max_number, max_index print(max_2d_array(my_array))"},{"instruction":"Create an AI Assistant in Python that can identify Web sites and classify them based on category. Not applicable","output":"import requests import json import time # Define a function to process the text def process_text(text): # Make an API request and get the results in JSON response = requests.get('https://api.example.com', params={ 'request': text }) data = json.loads(response.text) # Get the category from the results category = data['category'] # Return the category return category # Loop as long as the user keeps talking while True: # Get the user's input user_input = input('> ') # Process the input category = process_text(user_input) # Print the category if category: print(f\\"This is a {category} website.\\") else: print(\\"I'm not sure what to make of this.\\") # Wait 5 seconds before asking for the user's input again time.sleep(5)"},{"instruction":"Can you build an algorithm in Python to sort an array with the Bubble Sort technique? [2, 7, 4, 1, 5, 3]","output":"def bubble_sort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Driver code to test above arr = [2, 7, 4, 1, 5, 3] bubble_sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"instruction":"Develop a lightweight AI model to classify and categorize text.","output":"A lightweight AI model can be developed using programming languages such as Python, JavaScript, etc. It will contain code to process text data, extract features, apply a suitable machine learning algorithm and train a model to classify and categorize text."},{"instruction":"Design a Python program which sorts a list of integers from lowest to highest. [5, 2, 4, 1, 3]","output":"def sort_list(list): for i in range(0, len(list)): for j in range(0, len(list) - 1 - i): if list[j] > list[j + 1]: list[j], list[j + 1] = list[j + 1], list[j] return list list = [5, 2, 4, 1, 3] sorted_list = sort_list(list) print(sorted_list)"},{"instruction":"Construct a Python script to perform a linear regression model for the given datapoints. X = [1, 2, 3, 4, 5] Y = [1, 4, 9, 16, 25]","output":"import matplotlib.pyplot as plt import numpy as np from sklearn.linear_model import LinearRegression X = np.array([1, 2, 3, 4, 5]).reshape(-1, 1) y = np.array([1, 4, 9, 16, 25]) # Build the model model = LinearRegression() model.fit(X, y) # Plot the results plt.scatter(X, y) plt.plot(X, model.predict(X)) plt.title(\\"Linear Regression Model\\") plt.xlabel(\\"x\\") plt.ylabel(\\"y\\") plt.show()"},{"instruction":"Create a Python program to scrape and store the HTML content of a given website.","output":"\\"\\"\\" Create a Python program to scrape and store the HTML content of a given website \\"\\"\\" import requests import bs4 def scrape_website(url): # Fetch the web page response = requests.get(url) # Parse the web page soup = bs4.BeautifulSoup(response.text, 'html.parser') # Store the HTML content with open('website_content.txt', 'w') as file: file.write(str(soup)) if __name__ == '__main__': scrape_website('https://example.com')"},{"instruction":"Create a simple Python command line utility to calculate the factorial of a given number. Not applicable","output":"import sys def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) if __name__ == '__main__': number = int(sys.argv[1]) result = factorial(number) print('The factorial of %d is %d' % (number, result))"},{"instruction":"Construct a python program to identify the number of times the given element is present in the given list. list: [2, 3, 4, 5, 2, 3] x: 3","output":"def count_x(list, x): count = 0 for i in list: if i == x: count += 1 return count"},{"instruction":"Write a function in Python to encrypt a given message using AES256.","output":"import base64 from cryptography.fernet import Fernet def encrypt_message(message): key = Fernet.generate_key() f = Fernet(key) encoded_message = message.encode() encrypted_message = f.encrypt(encoded_message) return base64.encodestring(encrypted_message)"},{"instruction":"Make a class that processes payments using Python.","output":"class PaymentProcessor: def __init__(self): self.transactions = [] def process_payment(self, amount, account_no, currency): self.transactions.append({ 'amount': amount, 'account_no': account_no, 'currency': currency }) def get_transaction_count(self): return len(self.transactions)"},{"instruction":"Create a Python program to find the shortest string in a given list of strings. [‘Geeks’, ‘for’, ‘Geek’, ‘a’, ‘Geekeee’]","output":"def shortest_string(strings): shortest_string = strings[0] for string in strings: if len(string) < len(shortest_string): shortest_string = string return shortest_string"},{"instruction":"Construct a Python program for finding the intersection of two arrays. Array 1: [1, 2, 3, 4] Array 2: [3, 4, 5, 6]","output":"def intersection(arr1, arr2): result = [i for i in arr1 if i in arr2] return result arr1 = [1, 2, 3, 4] arr2 = [3, 4, 5, 6] result = intersection(arr1, arr2) print(result) # [3, 4]"},{"instruction":"Design a Python script which calculates the minimum number of edits required to convert a string into a palindrome. racecar","output":"def palindrome_edit_distance(string): \\"\\"\\"Calculates the number of one-character edit operations required to make a given string a palindrome. Args: string (str): The string to be evaluated. Returns: int: The number of one-character edit operations required to make the provided string a palindrome. \\"\\"\\" n = len(string) # Create a table to store results of subproblems dp = [[0 for x in range(n)] for x in range(n)] # Fill d[][] in bottom up manner for gap in range(1, n): for j in range(gap, n): i = j - gap if string[i] == string[j] and gap == 1: dp[i][j] = 0 elif string[i] == string[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i + 1][j]) # Remove # Return the minimum edits return dp[0][n - 1]"},{"instruction":"Create a python function which takes two inputs, a list of strings and a character, and returns a dictionary containing the count of each string beginning with the given character. words = ['apple','ball','cat','dog','elephant'] char = 'a'","output":"def find_words(words, char): count_dict = dict() for word in words: if word.startswith(char): count_dict[word] = count_dict.get(word, 0) + 1 return count_dict"},{"instruction":"mplement a quick sort algorithm in Python.","output":"def partition(arr,low,high): i = ( low-1 ) # index of smaller element pivot = arr[high] # pivot for j in range(low , high): # If current element is smaller than the pivot if arr[j] < pivot: # increment index of smaller element i = i+1 arr[i],arr[j] = arr[j],arr[i] arr[i+1],arr[high] = arr[high],arr[i+1] return ( i+1 ) # The main function that implements QuickSort # arr[] --> Array to be sorted, # low --> Starting index, # high --> Ending index # Function to do Quick sort def quickSort(arr,low,high): if low < high: # pi is partitioning index, arr[p] is now # at right place pi = partition(arr,low,high) # Separately sort elements before # partition and after partition quickSort(arr, low, pi-1) quickSort(arr, pi+1, high)"},{"instruction":"Write a basic Python program to simulate a game of Rock, Paper, Scissors. The program should randomly generate one of the choices for both players. Not applicable","output":"import random pieces = ['rock','paper','scissors'] player1 = random.choice(pieces) player2 = random.choice(pieces) print(\\"Player 1 chose\\", player1) print(\\"Player 2 chose\\", player2) if player1 == player2: print('Draw!') elif player1 == 'rock': if player2 == 'scissors': print('Player 1 won!') else: print('Player 2 won!') elif player1 == 'scissors': if player2 == 'paper': print('Player 1 won!') else: print('Player 2 won!') else: if player2 == 'rock': print('Player 1 won!') else: print('Player 2 won!')"},{"instruction":"Construct a loop in Python to identify the numbers divisible by 7 between 15 and 40.","output":"for i in range(15, 41): if i % 7 == 0: print(i)"},{"instruction":"k a Python program to apply a filter to a list of numbers and output the numbers greater than 5. List of numbers: [1, 5, 6, 3, 8]","output":"numbers = [1, 5, 6, 3, 8] filtered_numbers = [] for number in numbers: if number > 5: filtered_numbers.append(number) print(filtered_numbers) # output: [6, 8]"},{"instruction":"Write a Python program to calculate the value of pi to ndigits of precision.","output":"import math # Function to calculate Pi to n-digits of precision def pi_calculator(n): pi = format(math.pi, '.' + str(n) + 'f') return pi # Driver Code print(\\"The value of pi to 3 digits precision is:\\", pi_calculator(3))"},{"instruction":"Produce a program in python that finds the second largest number in a list. list = [45, 81, 90, 102, 24, 76]","output":"def findSecondLargest(list): # Initializing with the smallest possible value max1 = -10000 max2 = -10000 # Iterating the array for i in range (0, len(list)): # If current element is greater than max1, then update both max1 and max2 if list[i] > max1: max2 = max1 max1 = list[i] # If list[i] is between max1 and max2 then update max2 elif list[i] > max2 and list[i] != max1: max2 = list[i] return max2 # Driver code list = [45, 81, 90, 102, 24, 76] print(findSecondLargest(list))"},{"instruction":"Translate a Java loop into a while loop in Python. for (int i=1; i<=10; i++) System.out.println(Hello World);","output":"i = 1 while i <= 10: print(\\"Hello World\\") i += 1"},{"instruction":"Create a function in Python that takes a string argument, and returns all the possible permutations of that string. Not applicable","output":"def permutations(str): if len(str) == 1: return [str] else: perms = [] for i in range(len(str)): remaining_elements = str[:i] + str[i+1:] z = permutations(remaining_elements) for t in z: perms.append(str[i] + t) return perms"},{"instruction":"Write a Python script to check whether a given number is in between two given values. num = 10, lowerBound = 9, upperBound = 11","output":"if lowerBound <= num <= upperBound: print(\\"The number is inside the limit.\\") else: print(\\"The number is outside the limit.\\")"},{"instruction":"Write a Python program to filter a list of strings and only return the strings which follow a certain pattern. strings = [hello, hell, world, word, hello_world]","output":"filtered_strings = [string for string in strings if re.match(r\\"^hello.*world\\", string)] # filtered_strings = [\\"hello_world\\"]"},{"instruction":"Write a Python program to replace all the vowels in the given string with '_'. String: Python is a very interesting language","output":"def replace_vowels(string): vowels = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\"] res = [] for letter in string.lower(): if letter in vowels: res.append('_') else: res.append(letter) return ''.join(res)"},{"instruction":"Generate a Python code snippet to find the minimum value of a list of integers.","output":"def find_min(list): min_value = list[0] for value in list: if value < min_value: min_value = value return min_value"},{"instruction":"Create a Python program that takes a sentence as input and performs sentiment analysis. The program should output either 'negative' or 'positive'. The food was really bad.","output":"import nltk sentence = input('Enter a sentence: ') tokens = nltk.word_tokenize(sentence) from nltk.sentiment.vader import SentimentIntensityAnalyzer sid = SentimentIntensityAnalyzer() score_dict = sid.polarity_scores(sentence) score = score_dict['compound'] if score >= 0.05: print('positive') elif score <= -0.05: print('negative') else: print('neutral')"},{"instruction":"Can you define a class in Python which has 3 variables, name (string), age (int) and grade (char).","output":"class Student: def __init__(self, name, age, grade): self.name = name self.age = age self.grade = grade"},{"instruction":"Generate an algorithm in Python that merges two unsorted linked lists.","output":"class Node: def __init__(self, data): self.data = data self.next = None def merge(head1, head2): # Base cases if head1 is None: return head2 if head2 is None: return head1 mergedHead = None if head1.data <= head2.data: mergedHead = head1 mergedHead.next = merge(head1.next, head2) else: mergedHead = head2 mergedHead.next = merge(head1, head2.next) return mergedHead"},{"instruction":"Develop a Python script to print the first 10 squares of natural numbers.","output":"for i in range(1, 11): print(i**2)"},{"instruction":"Optimize this Python code using the tips from this website https://www.dataquest.io/blog/pythonperformancetips/. # code to calculate Hamming distance between two strings def calculate_hamming(word1, word2): distance = 0 for char1, char2 in zip(word1, word2): if char1 != char2: distance += 1 return distance","output":"def calculate_hamming(word1, word2): distance = 0 length = len(word1) if len(word2) < length: length = len(word2) #Use fast C-style loop to iterate over strings i = 0 while i < length: if word1[i] != word2[i]: distance += 1 i += 1 #count remaining chars if len(word1) != len(word2): distance += abs(len(word1)-len(word2)) return distance"},{"instruction":"Create a python function to classify a given dataset based on the numeric value of a given feature. Income<=50, Risk Level=Low","output":"def classify_data(feature, value, outcome): if feature == \\"Income\\" and float(value) <= 50: return outcome else: return \\"No Classification\\""},{"instruction":"Create a Python program that takes a given list and returns a new list without any duplicates. [1, 2, 2, 3, 4, 5, 5, 6]","output":"def remove_duplicates(lst): new_list = [] for i in lst: if i not in new_list: new_list.append(i) return new_list"},{"instruction":"Write a machine learning algorithm in Python for predicting the stock prices of some company","output":"import pandas as pd from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split # Read historical stock data data = pd.read_csv(‘data.csv’) # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(data.drop(‘target’, axis=1), data[‘target’], test_size=0.2, random_state=2) # Create and fit the model model = LinearRegression() model.fit(X_train, y_train) # Output the prediction y_pred = model.predict(X_test)"},{"instruction":"Write a Python program that encodes an input string with a given shift value.","output":"def encode_string(input_str, shift): output_str = \\"\\" for ch in input_str: if ch != \\" \\": output_str += chr(ord(ch) + shift) else: output_str += \\" \\" return output_str # Example print(encode_string(\\"hello\\", 5)) # Prints mjqqt"},{"instruction":"Create an object in Python that stores a string of text.","output":"my_string = \\"This is a string of text\\" my_object = { \\"string\\": my_string }"},{"instruction":"Write Python code to push a list of numbers in the range of 1 to 10 into a queue.","output":"# Create a queue queue = [] # Push number one to ten for number in range(1, 11): # Pushing each number into the queue queue.append(number) print(queue)"},{"instruction":"Create a Python Pandas program to generate a report summarizing the total sales for each customer. customer_df = [ {'customer_id': '123', 'sales': 100}, {'customer_id': '456', 'sales': 200}, {'customer_id': '789', 'sales': 400} ]","output":"import pandas as pd # Create dataframe df = pd.DataFrame(customer_df) # Group by customer and sum up sales report = df.groupby(['customer_id'])['sales'].sum() print(report)"},{"instruction":"Write a python code snippet to reverse each word of the given sentence. sentence = 'Hello world'","output":"def reverse_string(string): words = string.split() reversed_string = [word[::-1] for word in words] return ' '.join(reversed_string) reverse_string(sentence) //Returns 'olleH dlrow'"},{"instruction":"Design and implement a REST API in Python for managing a ToDo list. This API should support the standard CRUD actions (Create, Read, Update, Delete). Not applicable","output":"from flask import Flask, request, jsonify import sqlite3 app = Flask(name) # Connect to SQLite database connection = sqlite3.connect('tasks.db') cursor = connection.cursor() # Create '/tasks' route for the API @app.route('/tasks', methods=['GET', 'POST', 'PUT', 'DELETE']) def tasks(): # Get all tasks if request.method == 'GET': tasks = cursor.execute('SELECT * FROM tasks').fetchall() tasks = [{'id': task[0], 'description': task[1]} for task in tasks] return jsonify(tasks) # Create a task elif request.method == 'POST': description = request.json['description'] cursor.execute('INSERT INTO tasks (description) VALUES (?)', (description,)) connection.commit() return jsonify({'message': 'Task created'}) # Update a task elif request.method == 'PUT': description = request.json['description'] task_id = request.json['id'] cursor.execute('UPDATE tasks SET description = ? WHERE id = ?', (description, task_id)) connection.commit() return jsonify({'message': 'Task updated'}) # Delete a task elif request.method == 'DELETE': task_id = request.json['id'] cursor.execute('DELETE FROM tasks WHERE id = ?', (task_id,)) connection.commit() return jsonify({'message': 'Task deleted'}) if name == 'main': app.run(debug=True)"},{"instruction":"Convert this Python list to a JSON object. ['Apple', 'Banana', 'Coconut']","output":"import json inputList = ['Apple', 'Banana', 'Coconut'] jsonObj = json.dumps(inputList) print(jsonObj)"},{"instruction":"Create a program in Python to find the edit distance of two given strings.","output":"def edit_distance(str1, str2): # Initialize the DP matrix m = len(str1) + 1 n = len(str2) + 1 dp_matrix = [[0 for x in range(n)] for x in range(m)] for i in range(m): for j in range(n): if i == 0: dp_matrix[i][j] = j # Min. operations = j elif j == 0: dp_matrix[i][j] = i # Min. operations = i # If characters match elif str1[i-1] == str2[j-1]: dp_matrix[i][j] = dp_matrix[i-1][j-1] # If characters don't match else: dp_matrix[i][j] = 1 + min(dp_matrix[i][j-1], # Insert dp_matrix[i-1][j], # Remove dp_matrix[i-1][j-1]) # Replace return dp_matrix[m-1][n-1]"},{"instruction":"Optimize the following python code to speed up execution time: arr = [2, 5, 3, 1] for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] > arr[j]: arr[i], arr[j] = arr[j], arr[i] [2, 5, 3, 1]","output":"arr = [2, 5, 3, 1] # using Python's built in \`sorted\` function arr = sorted(arr) # using the Bubble Sort algorithm for i in range(len(arr) - 1): for j in range(len(arr) - 1 - i): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j]"},{"instruction":"Create a module in Python for validating a phone number. phone number = +18008675309","output":"import re phone_number = \\"+1-800-867-5309\\" phone_pattern = re.compile(r'^+[1-9]d{1,2}-d{3}-d{3}-d{4}') def validate_phone_number(phone_number): return phone_pattern.search(phone_number) valid = validate_phone_number(phone_number) if valid: print(\\"Valid Phone number\\") else: print(\\"Invalid Phone number\\")"},{"instruction":"Create a Machine Learning program in Python to classify a series of handwritten digits Not applicable","output":"from sklearn.datasets import load_digits from sklearn.model_selection import train_test_split from sklearn.svm import SVC # load the dataset digits = load_digits() # split into training and testing sets X_train, X_test, y_train, y_test = train_test_split(digits.data, digits.target, random_state=0) # build the model model = SVC(gamma='auto') model.fit(X_train, y_train) # evaluate the model print(model.score(X_test, y_test))"},{"instruction":"Generate a list of Python library names available in the Python standard library.","output":"Built-in Python libraries: 1. ast 2. dis 3. math 4. fractions 5. datetime 6. hashlib 7. itertools 8. json 9. urllib 10. os 11. pickle 12. random 13. re 14. subprocess 15. sys 16. time 17. zlib"},{"instruction":"Create a Python program to find all elements in a list that appear more than once. list=[1, 2, 3, 2, 4, 5, 1, 0]","output":"def duplicate_elements(lst): seen_elements = set() duplicates = set() for element in lst: if element in seen_elements: duplicates.add(element) else: seen_elements.add(element) return duplicates list = [1, 2, 3, 2, 4, 5, 1, 0] duplicates = duplicate_elements(list) print(duplicates) # {1, 2}"},{"instruction":"Automate a task using a python script to create a git pull request.","output":"# Import necessary libraries import requests import json # Set authentication credentials username = 'username' password = 'password' token = 'token' # Set request headers headers = { 'Content-Type': 'application/json', 'Authorization': 'token %s' % token } # Set the data for the request data = { 'title': 'My pull request', 'head': 'master', 'base': 'develop', 'body': 'This is the body of my pull request' } # Make the request response = requests.post('https://api.github.com/repos/username/repo/pulls', data=json.dumps(data), auth=(username, password), headers=headers) # Check the response if response.status_code == 201: print('Pull request created!')"},{"instruction":"Create a Python class to represent a 3D vector object","output":"class Vector3D(object): def __init__(self, x, y, z): self.x = x self.y = y self.z = z def __str__(self): return f\\"Vector3D({self.x}, {self.y}, {self.z})\\" def __add__(self, other): return Vector3D(self.x + other.x, self.y + other.y, self.z + other.z) def __mul__(self, scalar): return Vector3D(self.x * scalar, self.y * scalar, self.z * scalar)"},{"instruction":"Create an optimization algorithm for a Machine Learning model in Python. The algorithm should use the Bayesian Optimization library ScikitOptimize and optimize both the model parameters and hyperparameters to maximize the accuracy. Not applicable","output":"import numpy as np from skopt.space import Integer, Real from skopt import Optimizer from sklearn.model_selection import cross_val_score # Define the search space search_space = [ Integer(2, 10, name=\\"num_layers\\"), Integer(4, 32, name=\\"num_units\\"), Real(10**-5, 10**0, \\"log-uniform\\", name=\\"learning_rate\\"), Real(10**-5, 10**0, \\"log-uniform\\", name=\\"weight_regularization\\"), Integer(2, 5, name=\\"dropout_rate\\") ] # Define the optimizer opt = Optimizer(search_space, n_random_starts=100, acq_func=\\"EI\\") # Define the objective @opt.objective def objective(parameters): # Set the parameters of the model model.set_params(parameters) # Calculate the cross-validation score cv_score = cross_val_score(model, X, y).mean() # Return the negative score to minimize return -cv_score # Optimize the model opt.maximize(init_points=10, n_iter=100)"},{"instruction":"Create a Python program to calculate the sum of the nth row of Pascal's Triangle. Not applicable","output":"def pascal_triangle(n): rows = [] for i in range(1, n + 1): row = [1] for j in range(1, i): row.append(rows[i-2][j-1] + rows[i-2][j]) row.append(1) rows.append(row) return rows n = 8 result = pascal_triangle(n) sum_of_row = sum(result[n-1]) print(f\\"The sum of the {n}th row of Pascal's Triangle is {sum_of_row}.\\")"},{"instruction":"Write a code in python to remove given character from a given string. given_string = Hello world! character = l","output":"def remove_char(given_string, character): new_string = given_string.replace(character, \\"\\") return new_string"},{"instruction":"Given a JSON record of a customer, write a Python program to extract the customer's name. { name: John Smith, age: 35 }","output":"import json data = json.loads('{ \\"name\\": \\"John Smith\\", \\"age\\": 35 }') customer_name = data[\\"name\\"] print(customer_name)"},{"instruction":"Write a function in Python to Print a given string in Reverse order. string = Welcome to my site!","output":"def reverseString(string): revString = '' for i in range(len(string)-1, -1, -1): revString += string[i] return revString"},{"instruction":"Create a Python program that sorts a list of tuples by the second item. list_of_tuples = [('Apple', 2), ('Orange', 1), ('Banana', 3), ('Grape', 4)]","output":"def sort_by_second_item(list_of_tuples): return sorted(list_of_tuples, key=lambda item: item[1]) sorted_list = sort_by_second_item(list_of_tuples) print(sorted_list) # Output: [('Orange', 1), ('Apple', 2), ('Banana', 3), ('Grape', 4)]"},{"instruction":"Create a machine learning model in Python that can classify a set of samples into two classes. Sample1: 0.8, 0.1, 0.3 Sample2: 1.0, 0.4, 0.7 Sample3: 0.4, 0.5, 0.9 Sample4: 0.2, 0.7, 0.8","output":"import numpy as np from sklearn.svm import SVC X = np.array([[0.8, 0.1, 0.3], [1.0, 0.4, 0.7], [0.4, 0.5, 0.9], [0.2, 0.7, 0.8]]) y = np.array([0, 1, 0, 1]) model = SVC() model.fit(X, y)"},{"instruction":"Design a class to represent a car in the Python programming language.","output":"class Car: def __init__(self, make, model, year): self.make = make self.model = model self.year = year def get_make(self): return self.make def get_model(self): return self.model def get_year(self): return self.year def set_make(self, make): self.make = make def set_model(self, model): self.model = model def set_year(self, year): self.year = year"},{"instruction":"Write a function in Python to count the occurrences of a given character in a string. string: hello world, character: 'l'","output":"def count_char(s, c): count = 0 for ch in s: if ch == c: count += 1 return count print(count_char('hello world', 'l'))"},{"instruction":"Create a REST API in Python using the Flask framework. The API should provide a GET endpoint to get a list of users from a database, and a POST endpoint for creating new users in the database. not applicable","output":"from flask import Flask, request, jsonify import mysql.connector # create a Flask app app = Flask(__name__) # connect to the database mydb = mysql.connector.connect( host=\\"host\\", user=\\"username\\", passwd=\\"password\\", database=\\"databasename\\" ) # create a GET endpoint @app.route('/users', methods=['GET']) def get_users(): cur = mydb.cursor() cur.execute(\\"SELECT * FROM users\\") results = cur.fetchall() return jsonify(results) # create a POST endpoint @app.route('/users', methods=['POST']) def create_user(): data = request.get_json() username = data['username'] password = data['password'] cur = mydb.cursor() cur.execute('INSERT INTO users (username, password) VALUES (%s, %s)', (username, password)) mydb.commit() return jsonify({'message': 'User created successfully'}) # run the app if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Design a program in Python that counts the number of words in a paragraph and returns the count.","output":"def count_paragraph_words(par): par = par.split() return len(par)"},{"instruction":"Write a python program to convert a time string hh:mm:ss into total number of seconds time = 08:11:15","output":"time_in_secs = 8 * 3600 + 11 * 60 + 15"},{"instruction":"Create a Python code snippet for querying a database and converting the data into a Pandas DataFrame. A SQL query that returns column names name, age, gender, and locatio","output":"import pandas as pd import sqlite3 conn = sqlite3.connect('example.db') df = pd.read_sql_query(\\"SELECT name, age, gender, location FROM table_name\\", conn) conn.close()"},{"instruction":"Create a program in Python that takes text as an input and returns keywords and key phrases. text = This is some text I want to analyze and get key phrases and keywords from.","output":"# import libraries #import nltk #nltk.download('popular') from textblob import TextBlob # define text text = \\"This is some text I want to analyze and get key phrases and keywords from.\\" # analyze text blob = TextBlob(text) # extract keywords keywords = [word for (word, score) in blob.keywords] print('Keywords:', ', '.join(keywords)) # extract key phrases key_phrases = [phrase for phrase in blob.noun_phrases ] print('Key Phrases:', ', '.join(key_phrases))"},{"instruction":"Write a Python program to search for a given element in multiple lists my_list1 = [2, 3, 4, 5] my_list2 = [7, 9, 5] elem = 5","output":"def search_elem(my_list1, my_list2, elem): for list in [my_list1, my_list2]: found = False for val in list: if val == elem: found = True break if found: return True return False found = search_elem(my_list1, my_list2, elem) print(found)"},{"instruction":"Generate a Random Forest classifier in Python to categorize emails into two classes spam and notspam. Not applicable","output":"# Random Forest classifier setup from sklearn.ensemble import RandomForestClassifier # Sample data X = [['email_1'], ['email_2'], ...] y = [0, 1, ...] # 0 is not-spam, 1 is spam # Train the model model = RandomForestClassifier(n_estimators=100) model.fit(X, y) # Make predictions predictions = model.predict(X_test)"},{"instruction":"Write a python class to represent a triangle object that has the attributes length of each side.","output":"class Triangle: def __init__(self, side1, side2, side3): self.side1 = side1 self.side2 = side2 self.side3 = side3 def get_area(self): s = (self.side1 + self.side2 + self.side3) / 2 area = (s*(s - self.side1)*(s - self.side2) * (s - self.side3)) ** 0.5 return area"},{"instruction":"Generate a python program that creates a new list by appending an element to the last of an existing list. [1, 2, 3]","output":"def appendElementToList(list, element): list.append(element) return list list = [1, 2, 3] element = 4 print(appendElementToList(list, element))"},{"instruction":"Make Python program to filter out all even numbers from a given list [10, 11, 5, 16, 4, 9]","output":"def filter_even(arr): result = [] for i in arr: if i % 2 != 0: result.append(i) return result"},{"instruction":"Given Python code, fix the bug. def my_function(n): while n > 1000 : n = n/10 return n n = 2000 print(my_function(n))","output":"def my_function(n): while n > 1000 : n = n//10 return n n = 2000 print(my_function(n))"},{"instruction":"Write a Python program that prints the Fibonacci sequence up to n terms.","output":"def print_fibonacci_sequence(n): a = 0 b = 1 print(a, end=' ') print(b, end=' ') for i in range(2, n): c = a + b a = b b = c print(c, end=' ') n = 10 print_fibonacci_sequence(n)"},{"instruction":"Create a Python function to search for a substring in a string. The function should take two arguments, the haystack string and the needle string, and should return a boolean indicating whether the substring was found or not. haystack: This is a string needle: is","output":"def contains_substring(haystack, needle): return needle in haystack # Usage example contains_substring(\\"This is a string\\", \\"is\\") # returns True contains_substring(\\"This is a string\\", \\"xyz\\") # returns False"},{"instruction":"Assemble a Python program to find a pattern Find all the numbers in the array [1, 2, 3, 5, 7, 8] which are divisible by 3.","output":"def find_pattern(arr): div_by_3 = [] for num in arr: if num % 3 == 0: div_by_3.append(num) return div_by_3"},{"instruction":"Write a Python program to find the closest match of a given list of integers in another. arr1 = [1, 5, 12, 36] arr2 = [2, 4, 5, 6, 8, 9, 11, 12, 15, 21]","output":"def closest_match(arr1, arr2): closest_match = None min_diff = float('inf') for x in arr1: for y in arr2: diff = abs(x - y) if diff < min_diff: min_diff = diff closest_match = y return closest_match"},{"instruction":"Develop a custom word embedding model in Python using word2vec that takes as inputs a corpus of documents and outputs representations of words. Not applicable","output":"# Import libraries import gensim from gensim.test.utils import common_texts from gensim.models import Word2Vec # Define the input corpus docs = [\\"this is a sentence\\", \\"this is also a sentence\\", \\"this sentence is not like the others\\"] # Create the word2vec model model = Word2Vec(docs, size=10, window=3, min_count=1, workers=4) # Get the vocabulary words = list(model.wv.vocab) # Get word vectors word_vectors = model.wv[words]"},{"instruction":"Create a python function that stores the elements of a list in a dictionary. list = ['apple', 'orange', 'banana']","output":"def list_to_dict(list): dictionary = {} for item in list: dictionary[item] = 0 return dictionary"},{"instruction":"Create a class in Python to represent a realworld employee object. This class should contain attributes like name, ID, and salary. Not applicable","output":"class Employee: def __init__(self, name, ID, salary): self.name = name self.ID = ID self.salary = salary employee = Employee('John', '123456', 50000)"},{"instruction":"Generate a correct python program to classify a given text document into one of three categories. The text document contains articles about sports, politics and business.","output":"def classify_document(doc): words = doc.split() sports_words = 0 politics_words = 0 business_words = 0 for word in words: if word in sports_words: sports_words += 1 elif word in politics_words: politics_words += 1 elif word in business_words: business_words += 1 if sports_words > politics_words and sports_words > business_words: return \\"sports\\" elif politics_words > sports_words and politics_words > business_words: return \\"politics\\" else: return \\"business\\""},{"instruction":"dentify (classify) the programming language used in the following code snippet. # Start code mylist = [1, 2, 3, 'hello'] for item in mylist: print(item) # End code","output":"Python"},{"instruction":"Create a Python script that takes a number and prints the multiplication table for that number. Number: 4","output":"num = 4 # Take input # To take input from the user # num = int(input(\\"Display multiplication table of? \\")) # Iterate 10 times from i = 1 to 10 for i in range(1, 11): print(num, 'x', i, '=', num*i)"},{"instruction":"Suggest a way to make this Python function more efficient: def divide(nums): result = [] for num in nums: if num % 2 == 0: result.append(num) return resul","output":"def divide(nums): return [num for num in nums if num % 2 == 0]"},{"instruction":"Generate an artificial neural network algorithm in Python for classification.","output":"import numpy as np from keras.models import Sequential from keras.layers import Dense # Generate data X, y = np.random.rand(1000, 10), np.random.randint(2, size = (1000, 1)) # Define model model = Sequential() model.add(Dense(64, input_dim=10, activation='relu')) model.add(Dense(64, activation='relu')) model.add(Dense(1, activation='sigmoid')) # Compile model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) # Fit model model.fit(X, y, epochs=20, batch_size=32)"},{"instruction":"Design a program in Python to search a tree using a BreadthFirst Search.","output":"def BFS(tree, item): # Create an empty queue for BFS queue = [] # Enqueue the root of tree queue.append(tree) # Do till the queue is empty while(len(queue) > 0): # Dequeue an item from queue item = queue.pop(0) # If the dequeued item is the item we are looking for then return if item == item: return item # Enqueue the left node if item.left is not None: queue.append(item.left) # Right node enqueue if item.right is not None: queue.append(item.right) # Item not found return None"},{"instruction":"Write a Python program which takes a string and returns the first nonrepeated character. String: hello","output":"def first_non_repeated_char(input): counts = {} chars = [] for char in input: if char in counts: counts[char] += 1 else: counts[char] = 1 chars.append(char) for char in chars: if counts[char] == 1: return char return None"},{"instruction":"Write a Python program convert a list with nested levels of tuples and lists into a list of strings. input_list = [('a', 'b', ('c', ['d', 'e', 'f'])), 'g', ['h', ['i', 'j']]]","output":"output_list = [] def flatten_list(my_list): for item in my_list: if isinstance(item, list): flatten_list(item) elif isinstance(item, tuple): flatten_list(list(item)) else: output_list.append(item) flatten_list(input_list) print(output_list)"},{"instruction":"Generate a Python program to classify news articles into topics. Not applicable","output":"import nltk from nltk.corpus import stopwords from nltk.tokenize import word_tokenize from nltk.stem import WordNetLemmatizer from sklearn.feature_extraction.text import CountVectorizer from sklearn.feature_extraction.text import TfidfTransformer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB stop_words = set(stopwords.words('english')) lemmatizer = WordNetLemmatizer() # get the data news_data = open('news.txt').read() # preprocess it words = word_tokenize(news_data) words = [w for w in words if not w in stop_words] words = [lemmatizer.lemmatize(w) for w in words] news_data = ' '.join(words) # build the model vectorizer = CountVectorizer() features = vectorizer.fit_transform([news_data]) transformer = TfidfTransformer() tfidf = transformer.fit_transform(features) # split the data X = tfidf.todense() y = ['politics', 'sports', 'finance', 'health'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # train the model clf = MultinomialNB().fit(X_train, y_train) # test the model print(clf.score(X_test, y_test))"},{"instruction":"Generate a programmatically sound MIDI sequence using Python. Not applicable","output":"import mido from mido import MidiFile # Create MIDI file object mid = MidiFile() # Create track for beat and one for notes beat = MidiTrack() notes = MidiTrack() # Append tracks to midi object mid.tracks.append(beat) mid.tracks.append(notes) # Add beats to beat track beat.append(Message('program_change', program=12, time=0)) beat.append(Message('note_on', note=60, velocity=64, time=0)) # Generate random notes for notes track # constrained by midi scale for i in range(100): note = random.randrange(127) pitch = mido.note_to_midi[note] on = random.randrange(127) off = random.randrange(127) notes.append(Message('note_on', note=pitch, velocity=on, time=i)) notes.append(Message('note_off', note=pitch, velocity=off, time=i + 3)) # Save to file mid.save('song.mid')"},{"instruction":"Write a Python code snippet to sum the elements of two given lists. list1 = [1, 2, 3] list2 = [4, 5, 6]","output":"def sum_lists(list1, list2): return [a + b for a, b in zip(list1, list2)]"},{"instruction":"dentify which of the following are palindromes in Python. words = ['radar', 'mom', 'dad', 'civic']","output":"palindromes = [] for word in words: if word == word[::-1]: palindromes.append(word) print(palindromes) # prints ['radar', 'mom', 'dad', 'civic']"},{"instruction":"Create a Python function that takes a string as an argument and reverses it. testing","output":"def reverse_string(str_input): reversed_string = '' index = len(str_input) while index > 0: reversed_string += str_input[ index - 1 ] index = index - 1 return reversed_string print(reverse_string(\\"testing\\"))"},{"instruction":"Generate a Python program to produce a poem given a few keywords as input sky, moon, star","output":"def create_poem(keywords): poem = \\"The night sky is so beautiful nFill with stars, moon and \\" + keywords[0] + \\".nNo matter how dark it is now,nHope will come if we look above.\\" poem += \\"nnThe \\" + keywords[0] + \\" will shining its light,nBring calm and peace in the night.nAlong with the stars, and the \\" + keywords[1] + \\" above,nLighting our path and giving us love.\\" poem += \\"nnThough life can be hard, don't give up nLook above, between the \\" + keywords[2] + \\". nShine through the darkness and keep strong,nWe will find hope, just like the sun. return poem"},{"instruction":"Generate a random password in Python. It should include digits, symbols and upper and lowercase letters.","output":"import random import string def generate_password(): lettersAndDigits = string.ascii_letters + string.digits password = ''.join(random.choice(lettersAndDigits) for i in range(12)) return password"},{"instruction":"Write a Python program to generate a random password. The program should include at least two types of characters (numbers and symbols) and the length of the password should be between 8 and 16. Not applicable","output":"import random import string def generate_password(): chars = string.ascii_lowercase + string.digits + string.punctuation size = random.randint(8, 16) return ''.join(random.choice(chars) for _ in range(size)) print(generate_password())"},{"instruction":"Write a Python program that accepts two input strings and finds the longest common substring among them. string1: abcdjfgh, string2: abcdjfeeee","output":"def longest_common_substring(string1, string2): x = len(string1) y = len(string2) table = [[0]*(y+1) for _ in range(x+1)] longest, x_longest = 0, 0 for i in range(x): for j in range(y): if string1[i] == string2[j]: c = table[i][j] + 1 table[i+1][j+1] = c if c > longest: longest = c x_longest = i+1 return string1[x_longest-longest: x_longest] string1 = \\"abcdjfgh\\" string2 = \\"abcdjfeeee\\" print(longest_common_substring(string1, string2))"},{"instruction":"Write a Python program to convert a given Roman number to its integer numerical equivalent.","output":"def romanToInt(s): values = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } number = 0 for i in range(len(s)): if i == 0 or values[s[i]] <= values[s[i-1]]: number += values[s[i]] else: number += values[s[i]] - 2*values[s[i-1]] return number"},{"instruction":"Create a class called Employee in Python.","output":"class Employee: def __init__(self, name, age, salary): self.name = name self.age = age self.salary = salary def get_name(self): return self.name def get_age(self): return self.age def get_salary(self): return self.salary def set_name(self, name): self.name = name def set_age(self, age): self.age = age def set_salary(self, salary): self.salary = salary"},{"instruction":"Compare two strings to check if they are anagrams or not in Python. “silent”, “listen”","output":"def is_anagram(w1, w2): # Check if lengths are equal if len(w1) == len(w2): # Sort the strings s1 = sorted(w1) s2 = sorted(w2) # Check if sorted strings are equal if s1 == s2: return True return False # Example w1 = \\"silent\\" w2 = \\"listen\\" print(is_anagram(w1, w2)) #Output: True"},{"instruction":"Create a Python function for converting a list of strings into a dictionary of unique words and their respective counts ['this', 'is', 'a', 'sentence', 'with', 'repeated', 'words', 'this', 'sentence', 'contains', 'four', 'unique', 'words']","output":"def string_counter(str_list): word_count = {} for i in str_list: if i not in word_count: word_count[i] = 1 else: word_count[i] += 1 return word_count my_list = ['this', 'is', 'a', 'sentence', 'with', 'repeated', 'words', 'this', 'sentence', 'contains', 'four', 'unique', 'words'] print(string_counter(my_list)) # Output: {'this': 2, 'is': 1, 'a': 1, 'sentence': 2, 'with': 1, 'repeated': 1, 'words': 2, 'contains': 1, 'four': 1, 'unique': 1}"},{"instruction":"Create an endtoend machine learning system in Python by using a deep neural network to solve a multiclass classification problem. Not applicable","output":"# Importing Libraries import numpy as np from keras.models import Sequential from keras.layers import Dense # Defining Input and Output x = np.array([[1, 3], [1, 4], [2, 4], [3, 1], [4, 1], [4, 2]]) y = np.array([[1], [1], [2], [3], [3], [2]]) # Defining and Compiling the Model model = Sequential() model.add(Dense(4, input_dim=2, activation='relu')) model.add(Dense(1, activation='sigmoid')) model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) # Training the Model model.fit(x, y, epochs=100, batch_size=5) # Testing the Model test_x = np.array([[5, 2], [4, 3]]) results = model.predict(test_x) print(\\"Classes predicted: \\", np.round(results))"},{"instruction":"Create a for loop in python to print all the items in the given list. List = [1, 2, 3, 4]","output":"for item in List: print(item)"},{"instruction":"Design a Python program to generate a frequency distribution report given a list of input words. [‘hello’, ‘world’, ‘hello’, ‘welcome’, ’world’]","output":"from collections import Counter def print_frequency_report(words): word_frequencies = Counter(words) print('WordtFrequency') print('==============') for word, frequency in word_frequencies.items(): print('{}t{}'.format(word, frequency))"},{"instruction":"Write a Python code for feature engineering.","output":"import pandas as pd def feature_engineering(df): ''' Function to perform feature engineering steps on a dataframe ''' # Drop columns with missing values df = df.dropna(axis=1) # Check for outliers df = df[(df < 3 * df.std()).all(axis=1)] # Identify and remove highly correlated values corr_matrix = df.corr().abs() upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool)) to_drop = [column for column in upper.columns if any(upper[column] > 0.95)] df.drop(columns = to_drop, inplace=True) # Normalize data for col in df.columns: df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min()) return df df = pd.read_csv('data.csv') df = feature_engineering(df)"},{"instruction":"Create a python function to compute the area of a triangle with given sides. a = 3 b = 5 c = 4","output":"def calculateTriangleArea(a, b, c): s = (a + b + c) / 2 area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 return area area = calculateTriangleArea(a, b, c) print(\\"Area of triangle is %.2f\\" % area)"},{"instruction":"Write an algorithm in Python to compute the total number of distinct pairs (x, y) such that ax + by = c. a = 2, b = 2, and c = 4","output":"def countPairs(a, b, c): count = 0 for x in range(0, c + 1): for y in range(0, c + 1): if a * x + b * y == c: count += 1 return count a = 2 b = 2 c = 4 print(countPairs(a, b, c))"},{"instruction":"This code defines four models: Event, Rule, Blacklist, and Script. Each model has its own fields and methods. The models are stored in a database table with the specified names. The code also includes the necessary imports and license information.","output":"#!/usr/bin/env python # -*- coding: utf-8 -*- # # models.py # # Copyright 2012 Thomas Grainger <tagrain@gmail.com> # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU Affero General Public License as # published by the Free Software Foundation; version 3. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU Affero General Public License for more details. # # You should have received a copy of the GNU Affero General Public # License along with this program; if not, write to the Free Software # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, # MA 02110-1301, USA. # # from django.db import models class Event(models.Model): id = models.BigIntegerField(db_column= \\"event_id\\", primary_key=True) username = models.CharField(max_length=765) radius_account_id = models.CharField(max_length=765) radius_session_id = models.CharField(max_length=765) radius_info = models.TextField() ip_src = models.CharField(max_length=765) ip_dst = models.CharField(max_length=765) start = models.DateTimeField() finish = models.DateTimeField() alerts = models.BigIntegerField() blacklist = models.ForeignKey(\\"Blacklist\\", db_column = \\"blacklist\\") rule = models.ForeignKey(\\"Rule\\", db_column = \\"rule\\") rule_class = models.CharField(max_length=93) def __unicode__(self): return \\"{username}@{ip_src} accessed {ip_dst} from {start} till {finish}. Rule class: {rule_class}\\".format( username = self.username, ip_src = self.ip_src, ip_dst = self.ip_dst, start = self.start, finish = self.finish, rule_class = self.rule_class ) class Meta: db_table = u'event' unique_together = (\\"username\\", \\"ip_src\\", \\"ip_dst\\", \\"start\\", \\"finish\\") class Rule(models.Model): id = models.BigIntegerField(primary_key=True, db_column=\\"rule_id\\", editable=False) name = models.CharField(max_length=765, db_column = \\"rule_name\\") hide = models.BooleanField() @models.permalink def get_absolute_url(self): return ('rule', (), {\\"pk\\":str(self.pk)}); def __unicode__(self): return \\"{name}[{pk}]\\".format(name=self.name, pk=self.pk) class Meta: db_table = u'rules' class Blacklist(models.Model): id = models.BigIntegerField(primary_key=True, db_column=\\"bl_id\\", editable=False) name = models.CharField(max_length=765, editable=False) url = models.CharField(max_length=765, editable=False) serialized = models.TextField(editable=False) updated = models.DateTimeField(editable=False) hide = models.BooleanField() @models.permalink def get_absolute_url(self): return ('blacklist', (), {\\"pk\\":str(self.pk)}); def __unicode__(self): return self.name class Meta: db_table = u'blacklists' class Script(models.Model): id = models.AutoField(primary_key=True, db_column = \\"script_id\\", editable=False) name = models.CharField(max_length=765) updated = models.DateTimeField(db_column=\\"lastupdated\\", editable=False) @models.permalink def get_absolute_url(self): return ('script', (), {\\"pk\\":str(self.pk)}); def __unicode__(self): return \\"{name}[{pk}]\\".format( name=self.name, pk=self.pk ) class Meta: db_table = u'scripts'"},{"instruction":"Using the provided input, write a Python program to find all combinations of two numbers in a list and return the summation of each pair. Not applicable","output":"def combinationSum(lst): result = [] for i in range(len(lst)): for j in range(i + 1, len(lst)): result.append(lst[i] + lst[j]) return result input_list = [2, 4, 6, 8] print(combinationSum(input_list)) # Output: [6, 10, 12, 16]"},{"instruction":"Create a Python program that can detect vowels in a given string.","output":"def detect_vowels(inp_str): vowels = set(['a', 'e', 'i', 'o', 'u']) return [char for char in inp_str if char.lower() in vowels]"},{"instruction":"Write a python program to rotate an array of size n by d elements","output":"def rotateArray(arr, d): result = [] for i in range(len(arr)-d, len(arr)): result.append(arr[i]) for i in range(0, len(arr)-d): result.append(arr[i]) return result"},{"instruction":"Write a Python program to print out the grade of a student based on the given marks 60","output":"def get_grade(marks): if marks >= 90: grade = \\"A+\\" elif marks >= 80 and marks < 90: grade = \\"A\\" elif marks >= 70 and marks < 80: grade = \\"B+\\" elif marks >= 60 and marks < 70: grade = \\"B\\" elif marks >= 50 and marks < 60: grade = \\"C+\\" else: grade = \\"F\\" print(\\"Grade: %s\\" %grade) marks = 60 get_grade(marks)"},{"instruction":"Generate a Python script that filters a list of strings, keeping only those that have a length greater than 5 characters. words = [hello, world, example, test]","output":"def filter_words(words): filtered_words = [] for word in words: if len(word) > 5: filtered_words.append(word) return filtered_words words = [\\"hello\\", \\"world\\", \\"example\\", \\"test\\"] filtered_words = filter_words(words) print(filtered_words) # Output: ['example', 'test']"},{"instruction":"Optimize this Python code to reduce the running time. def find_max_value(array, start, end): max_value = float('inf') for i in range(start, end): for j in range(start, end): max_value = max(max_value, array[i][j]) return max_value","output":"def find_max_value(array, start, end): max_value = -float('inf') for i in range(start, end): max_value = max(max_value, max(array[i][start:end])) return max_value"},{"instruction":"Convert the following Python code into equivalent C code. def avg(nums): return sum(nums) / len(nums)","output":"#include <stdio.h> #include <stdlib.h> float avg(int nums[], int len) { float sum = 0; for (int i = 0; i < len; i++) { sum += nums[i]; } return sum / len; } int main() { int nums[] = {1, 2, 3}; int len = 3; printf(\\"Average = %fn\\", avg(nums, len)); return 0; }"},{"instruction":"Create a python script to implement linear regression.","output":"from sklearn.linear_model import LinearRegression import numpy as np def linear_regression(x, y): lr = LinearRegression() lr.fit(x , y) y_hat = lr.predict(x) return np.abs(y_hat - y).mean()"},{"instruction":"Create a python program that takes in a list of URLs and returns a list of the top 5 URLs that are visited most often. ['www.example1.com', 'www.example2.com', 'www.example3.com', 'www.example4.com']","output":"\\"\\"\\" Create a python program that takes in a list of URLs and returns a list of the top 5 URLs that are visited most often. \\"\\"\\" from collections import Counter def most_visited_urls(urls): counts = Counter(urls) top_5 = counts.most_common(5) print(\\"Top 5 URLs:\\") for url, count in top_5: print(\\"%s: %d\\" % (url, count)) if __name__ == '__main__': urls = ['www.example1.com', 'www.example2.com', 'www.example3.com', 'www.example4.com'] most_visited_urls(urls)"},{"instruction":"Create a program in Python to calculate the Levenshtein distance between two strings.","output":"def levenshtein(s1, s2): if len(s1) > len(s2): s1, s2 = s2, s1 distances = range(len(s1) + 1) for i2, c2 in enumerate(s2): distances_ = [i2+1] for i1, c1 in enumerate(s1): if c1 == c2: distances_.append(distances[i1]) else: distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1]))) distances = distances_ return distances[-1]"},{"instruction":"Design a shuffling algorithm for a deck of cards using Python. No inpu","output":"import random # Creating a list of cards cards = [1,2,3,4,5,6,7,8,9,10,11,12,13] * 4 def shuffle_cards(cards): # We use the Fisher-Yates algorithm # Get last index last_index = len(cards) - 1 # Loop from back for i in range(last_index, 0, -1): # Get a random index between the current index and 0 random_index = random.randint(0, i) # Swap the cards using Python's tuple unpacking cards[i], cards[random_index] = cards[random_index], cards[i] return cards # Call the shuffling algorithm print(shuffle_cards(cards))"},{"instruction":"Generate a code in Python to print the length of the given string. Hello world","output":"string = 'Hello world' # print the length of string print(len(string))"},{"instruction":"Build an algorithm in Python that creates output based on the given input. Input: [1, 2, 5, 8, 11]","output":"def algorithm(input_list): output_list = [] for i in input_list: if i % 2 == 0: output_list.append(str(i) + ' is an even number') else: output_list.append(str(i) + ' is an odd number') return output_list"},{"instruction":"Generate an optimization problem in Python to find the minimum cost path in a matrix.","output":"def matrix_min_cost_path(matrix): n = len(matrix) m = len(matrix[0]) min_cost = [[0 for i in range(m + 1)] for j in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if i == 1 and j == 1: min_cost[i][j] = matrix[i-1][j-1] else: min_cost[i][j] = matrix[i-1][j-1] + min(min_cost[i][j-1], min_cost[i-1][j], min_cost[i-1][j-1]) return min_cost[n][m]"},{"instruction":"mplement a Python program to remove all duplicates from an array. array = [3, 8, 12, 3, 17, 8, 25]","output":"def remove_duplicates(my_list): result = [] seen = set() for item in my_list: if item not in seen: seen.add(item) result.append(item) return result"},{"instruction":"Write a Python program to make a deep copy a given dictionary.","output":"import copy def deep_copy_dictionary(dictionary): deep_copy = copy.deepcopy(dictionary) return deep_copy data = {\\"name\\": \\"John\\", \\"age\\": 28} result = deep_copy_dictionary(data) print(result)"},{"instruction":"Write a Python code snippet for encrypting a given string using secret key. secret_key = 'test' string = 'hello world'","output":"import base64 def encrypt(key, string): enc = [] for i in range(len(string)): key_c = key[i % len(key)] enc_c = chr((ord(string[i]) + ord(key_c)) % 256) enc.append(enc_c) return base64.urlsafe_b64encode(\\"\\".join(enc).encode()).decode() encrypted_string = encrypt(secret_key, string) print(encrypted_string)"},{"instruction":"Create an algorithm in Python to find the maximum nested depth of a given dictionary. dictionary={ name: gaani, age: 18, university: { name: Imperial, majors: [Computer Science], location: { city: London, country: UK } } }","output":"def max_nested_depth(dictionary): max_depth = 0 stack = [] stack.append((dictionary, 1)) while len(stack) > 0: item, depth = stack.pop() if depth > max_depth: max_depth = depth if type(item) is dict: for value in item.values(): stack.append((value, depth+1)) return max_depth print(max_nested_depth(dictionary))"},{"instruction":"Write a Bash script to activate a python virtual environment.","output":"# activate the virtual environment source venv/bin/activate"},{"instruction":"Create a program in Python to compute the host BMI given a user’s height and weight. Height: 172 cm Weight: 85 kg","output":"def compute_bmi(height, weight): bmi = weight / (height * height) return bmi bmi = compute_bmi(172, 85) print(\\"Your BMI is {:.2f}\\".format(bmi))"},{"instruction":"Create a web application in Python with Flask and Mongodb as the backend to provide an endtoend solution for editing user profile information. The user profile must include fields for name, email address, phone number, age, location, and profession.","output":"from flask import Flask, request, jsonify from pymongo import MongoClient app = Flask(__name__) client = MongoClient('localhost', 27017) db = client.user_database users = db.users @app.route('/user', methods=['GET', 'POST']) def user_profile(): if request.method == 'GET': # Retrieve user profile information user_info = users.find_one({'_id': request.args.get('id')}) return jsonify(user_info) elif request.method == 'POST': # Update user profile information data = request.get_json() users.update({ '_id': data['id'] }, { 'name': data['name'], 'email': data['email'], 'phone': data['phone'], 'age': data['age'], 'location': data['location'], 'profession': data['profession'] }) result = users.find_one({'_id': data['id']}) return jsonify({'result': result}) if __name__ == '__main__': app.run()"},{"instruction":"Develop a Python program that can convert a given amount in American Dollar (USD) to British Pound Sterling (GBP). 500 USD","output":"# Python code: def convert_usd_to_gbp(usd): gbp = usd / 1.3 return gbp usd = 500 gbp = convert_usd_to_gbp(usd) print(f\\"{usd} USD = {gbp:.2f} GBP\\")"},{"instruction":"Create an algorithm in Python to determine the number of days between two dates.","output":"def daysBetween (date1, date2): # Number of days per month in # non leap year. monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Initialize count using years and day n1 = date1[2] * 365 + date1[0] n2 = date2[2] * 365 + date2[0] # Add days for months in given date for i in range(date1[1]-1): n1 += monthDays[i] for i in range(date2[1]-1): n2 += monthDays[i] # Since every leap year is of 366 days, # Add a day for every leap year n1 += date1[2]//4 - date1[2]//100 + date1[2]//400 n2 += date2[2]//4 - date2[2]//100 + date2[2]//400 # Return difference between two counts return (n2 - n1)"},{"instruction":"Design a machine learning model in Python to predict house prices based on the given features.","output":"import numpy as np import pandas as pd from sklearn import linear_model # Load the data data = pd.read_csv('house_price_data.csv') # Select features X = data[['size', 'bedrooms', 'bathrooms', 'year']] # Select target y = data['price'] # Create and fit the model model = linear_model.LinearRegression() model.fit(X, y)"},{"instruction":"Create a function in Python that takes in a list of words and a target word, and prints out the first word that is alphabetically larger than the target. words = [Bob, Cat, Happy, Lemon, Texas, Zebra], target = Lemon","output":"# Function to find the first word alphabetically larger than the target def find_next_word(words, target): for word in words: if word > target: return word return None"}]`),j={name:"App",components:{PoemCard:A},data(){return{searchQuery:"",visibleCount:4,poemsData:q,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.instruction&&e.instruction.toLowerCase().includes(i)||e.output&&e.output.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},I={class:"search-container"},N={class:"card-container"},L={key:0,class:"empty-state"},D=["disabled"],R={key:0},O={key:1};function F(i,e,u,m,a,o){const f=g("PoemCard");return r(),n("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",I,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=s=>a.searchQuery=s),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(r(),n("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=s=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",N,[(r(!0),n(b,null,w(o.displayedPoems,(s,h)=>(r(),v(f,{key:h,poem:s},null,8,["poem"]))),128)),o.displayedPoems.length===0?(r(),n("div",L,' No results found for "'+d(a.searchQuery)+'". ',1)):l("",!0)]),o.hasMorePoems?(r(),n("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...s)=>o.loadMore&&o.loadMore(...s))},[a.isLoading?(r(),n("span",O,"Loading...")):(r(),n("span",R,"See more"))],8,D)):l("",!0)])}const M=p(j,[["render",F],["__scopeId","data-v-b978d7f7"]]),G=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"grok/68.md","filePath":"grok/68.md"}'),W={name:"grok/68.md"},B=Object.assign(W,{setup(i){return(e,u)=>(r(),n("div",null,[x(M)]))}});export{G as __pageData,B as default};
