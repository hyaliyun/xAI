import{_ as p,o as n,c as r,a as t,m as c,t as d,C as g,M as _,U as y,f as u,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},C={class:"poem-container"},S={class:"review"},P={class:"review-title"},T={class:"review-content"};function N(i,e,l,m,a,o){return n(),r("div",C,[t("div",S,[t("div",P,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(d(l.poem.instruction),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",T,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(d(l.poem.output),1)])])])}const E=p(k,[["render",N],["__scopeId","data-v-426a8a23"]]),A=JSON.parse(`[{"instruction":"Optimize the Python code snippet (below) for performance efficiency. def process_data(data): processed_data = [] for item in data: if item % 10 == 0: processed_data.append(item) return processed_d","output":"def process_data(data): processed_data = [] for item in data: if (item % 10) == 0: processed_data.append(item) return processed_data def process_data_fast(data): return [item for item in data if item % 10 == 0]"},{"instruction":"Create a machine learning model in Python to classify emails into two classes: spam and ham. Not applicable","output":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.svm import LinearSVC # read the data data = pd.read_csv(\\"spam_emails.csv\\") # split the data for training and testing X_train, X_test, y_train, y_test = train_test_split(data['text'],data['label'],test_size=0.2,random_state=42) # create an instance of the vectorizer and fit it tfidf = TfidfVectorizer() X_train_vec = tfidf.fit_transform(X_train) X_test_vec = tfidf.transform(X_test) # create the classifier clf = LinearSVC() clf.fit(X_train_vec, y_train) # predict and measure the accuracy prediction = clf.predict(X_test_vec) accuracy = clf.score(X_test_vec, y_test) # print the accuracy print(accuracy)"},{"instruction":"Generate a function in Python that takes a natural number as argument and returns the product of all numbers up to it. n = 4","output":"def getProduct(n): result = 1 for i in range(n): result *= i+1 return result"},{"instruction":"mplement a storage API in Python that supports the CRUD methods.","output":"class StorageAPI: def __init__(self): self._data = {} def create(self, key, data): \\"\\"\\"Creates a new entry in the storage API\\"\\"\\" self._data[key] = data def read(self, key): \\"\\"\\"Reads a entry from the storage API\\"\\"\\" return self._data.get(key, None) def update(self, key, data): \\"\\"\\"Updates a entry in the storage API\\"\\"\\" self._data[key] = data def delete(self, key): \\"\\"\\"Deletes a entry from the storage API\\"\\"\\" del self._data[key]"},{"instruction":"Write a code in Python to find the sum of all the prime numbers less than or equal to a given number.","output":"def sum_of_primes_below(n): prime_sum = 0 for num in range(2, n+1): for i in range(2,num): if (num % i == 0): break else: prime_sum += num return prime_sum"},{"instruction":"Create a Python program to randomly generate a list of strings of 5, 10 or 15 characters long. Not applicable","output":"import string import random def generate_list(length): chars = string.ascii_letters + string.digits result = [''.join(random.choice(chars) for i in range(length)) for x in range(10)] return result lengths = [5, 10, 15] results = [generate_list(length) for length in lengths] print(results)"},{"instruction":"Generate a list of phone numbers in python given a start and end number. Start number: 12345 End number: 12354","output":"phone_numbers = [str(i) for i in range(12345, 12355)]"},{"instruction":"Create a Decision Tree classifier in Python that can be used to predict whether a given customer will buy a car or not.","output":"# Import Decision Tree Classifier from sklearn.tree import DecisionTreeClassifier # Define the Decision Tree Classifier clf = DecisionTreeClassifier() # Train the Decision Tree Classifier clf.fit(X_train, y_train) # Predict the target values y_pred = clf.predict(X_test)"},{"instruction":"Create a web scraper in Python to extract information from a website. The scraper should find all the links in the given webpage and store them in a list. https://www.example.com","output":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com' response = requests.get(url) html = response.content soup = BeautifulSoup(html, 'html5lib') links = [] for link in soup.find_all('a', href=True): links.append(link['href']) print(links)"},{"instruction":"Create an algorithm in Python that receives an array of integers and returns an array with the unique values of the input array.","output":"def unique(arr): uniq_arr = [] for x in arr: if x not in uniq_arr: uniq_arr.append(x) return uniq_arr"},{"instruction":"Design a Python script that prints out all the even numbers in a given list of numbers. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","output":"# given list of numbers nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # empty list for even numbers even_list = [] # iterate over the list for num in nums: # check if number is even if num % 2 == 0: # append number to even list even_list.append(num) # print even numbers print(even_list)"},{"instruction":"Design an algorithm in Python for finding a common element in two sorted arrays. List 1: [1, 4, 6, 10, 20] List 2: [2, 5, 8, 10, 15, 20]","output":"def findCommon(list1, list2): common = [] i = j = 0 while i < len(list1) and j < len(list2): if list1[i] == list2[j]: common.append(list1[i]) i += 1 j += 1 elif list1[i] < list2[j]: i += 1 else: j += 1 return common list1 = [1, 4, 6, 10, 20] list2 = [2, 5, 8, 10, 15, 20] print(findCommon(list1, list2))"},{"instruction":"Write an algorithm in Python to find the longest continuous increasing subarray. [6 , 5, 4, 8, 10, 5]","output":"def find_longest_subarray(arr): maxLength = 1 curLength = 1 n = len(arr) for i in range(1, n): if (arr[i] > arr[i - 1]): curLength += 1 maxLength = max(maxLength, curLength) else: curLength = 1 return maxLength longest_subarray = find_longest_subarray([6, 5, 4, 8, 10, 5]) print(longest_subarray) # Output: 3"},{"instruction":"Build a web scraping tool using Python that extracts data from a given web page.","output":"import requests from bs4 import BeautifulSoup # Function to make a GET request to a given URL def get_page_data(url): # Make a GET request response = requests.get(url) # Parse the HTML from the GET request soup = BeautifulSoup(response.text, 'html.parser') # Extract the desired data data = soup.find_all('div', {'class':'data-container'}) # Return the data return data # Extract data from a given URL data = get_page_data('example.com/data-page') # Print the extracted data print(data)"},{"instruction":"Suggest how to make the following Python loop execute faster. def find_list_difference(list1, list2): diff = [] for item in list1: if item not in list2: diff.append(item) return diff","output":"def find_list_difference(list1, list2): diff = [] list2_set = set(list2) for item in list1: if item not in list2_set: diff.append(item) return diff"},{"instruction":"Publish an article to Medium using the Medium Python SDK. No inpu","output":"import medium # Create a client client = medium.Client( application_id=\\"YourApplicationID\\", application_secret=\\"YourApplicationSecret\\", ) # Log in to your account client.access_token = \\"<YourAccessToken>\\" # Create a post to publish post = medium.Post( title=\\"Article Title\\", content=\\"This is the article content that will be published on Medium.\\", content_format=\\"html\\", tags=[\\"Python\\", \\"Medium\\"], canonical_url=\\"\\", publish_status=\\"draft\\", ) # Publish the post published_post = client.create_post(post, author_id=\\"<YourAuthorID>\\")"},{"instruction":"Write a Python function for reversing a string and identify the time and space complexity. Not applicable","output":"def reverse_string(string): rev_string = '' for char in string: rev_string = char + rev_string return rev_string # Time Complexity: O(N) # Space Complexity: O(N)"},{"instruction":"Generate a code snippet to reverse a string in Python.","output":"def reverse(s): return s[::-1]"},{"instruction":"Can you generate a Python program for computing the median of three numbers?","output":"def median(a, b, c): if (a <= b <= c) or (c <= b <= a): return b elif (b <= a <= c) or (c <= a <= b): return a else: return c median_value = median(6, 8, 7) print(median_value)"},{"instruction":"Write a Python program to find the index of the first occurrence of the given element in the given list. inputlist = [1, 2, 5, 8, 10, 9] element = 8","output":"def find_element(inputlist, element): for i, num in enumerate(inputlist): if element == num: return i"},{"instruction":"Create a Python script that takes in a string and outputs a list of all permutations of the string. String: ABC","output":"def permute(str): # base case if len(str) == 0: return [''] prev_list = permute(str[1:]) curr_list = [] first_char = str[0] # iterate over previous list and place first character # at every possible position in every string for s in prev_list: for i in range(len(s)+1): temp = s[:i] + first_char + s[i:] curr_list.append(temp) return curr_list # test case print(permute('ABC'))"},{"instruction":"Rewrite this python code using JavaScript. import os for root, dirs, files in os.walk(/home/user, topdown = True): for name in files: print(os.path.join(root, name))","output":"var fs = require('fs'); var walk = function(dir, done) { var results = []; fs.readdir(dir, function(err, list) { if (err) return done(err); var pending = list.length; if (!pending) return done(null, results); list.forEach(function(file) { file = dir + '/' + file; fs.stat(file, function(err, stat) { if (stat && stat.isDirectory()) { walk(file, function(err, res) { results = results.concat(res); if (!--pending) done(null, results); }); } else { results.push(file); if (!--pending) done(null, results); } }); }); }); }; walk(\\"/home/user\\", function(err, results) { if (err) throw err; results.forEach(function(file) { console.log(file); }); });"},{"instruction":"Create a Python program which calculates the mean of a dataset data = [2, 4, 6, 8]","output":"def dataset_mean(data): return sum(data)/len(data)"},{"instruction":"Create an algorithm in Python to search for a given item in a dictionary. Dictionary = {'name': 'john', 'age': 22, 'city': 'New York'}, item = 'John'","output":"def search(dict, item): for key, value in dict.items(): if item == value: return True return False dict = {'name': 'john', 'age': 22, 'city': 'New York'} item = 'John' print(search(dict, item))"},{"instruction":"Make a prediction model in Python to classify the class of a credit score","output":"# Import the necessary packages from sklearn.preprocessing import LabelEncoder from sklearn.ensemble import RandomForestClassifier # Load the dataset data = pd.read_csv('credit_score_data.csv') X = data.drop('credit_class', axis=1) y = data['credit_class'] # Encode labels y = LabelEncoder().fit_transform(y) # Split dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42) # Create and train the model model = RandomForestClassifier() model.fit(X_train, y_train) # Evaluate the model with the test set y_preds = model.predict(X_test) print(metrics.accuracy_score(y_test, y_preds))"},{"instruction":"Generate a Python program that takes in a list of strings and outputs a new list containing only those that are between 3 and 7 characters long. ['apple', 'banana', 'strawberry', 'orange']","output":"def filterList(lst): result = [] for s in lst: if 3 <= len(s) <= 7: result.append(s) return result print(filterList(['apple', 'banana', 'strawberry', 'orange'])) # ['apple', 'banana', 'orange']"},{"instruction":"Develop a Python program that counts the number of times each word appears in a given sentence.","output":"sentence = input('Enter a sentence: ') words = sentence.split() word_freq = {} for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 for key, value in word_freq.items(): print (key,\\":\\", value)"},{"instruction":"Create an algorithm in Python to solve a given sudoku board.","output":"def solveSudoku(board): if not findUnassignedLocation(board): return True for num in range(1, 10): if isSafe(board, row, col, num): board[row][col] = num if solveSudoku(board): return True board[row][col] = 0 return False def findUnassignedLocation(board): for i in range(9): for j in range(9): if board[i][j] == 0: return (i, j) return None def isSafe(board, row, col, num): # Check row for i in range(9): if board[row][i] == num: return False # Check column for i in range(9): if board[i][col] == num: return False # Check sub-grid row_start = (row // 3) * 3 col_start = (col // 3) * 3 for i in range(row_start, row_start + 3): for j in range(col_start, col_start + 3): if board[i][j] == num: return False return True"},{"instruction":"Create a Python program to convert an English sentence to Pig Latin.","output":"def pig_latin(sentence): words = sentence.split(\\" \\") result = \\"\\" for word in words: result += word[1:] + word[0] + \\"ay \\" return result[:-1]"},{"instruction":"Write a function in Python that takes a list of names as the parameter and returns the longest name in the list. Names = ['John', 'Michael', 'Scott', 'Steve']","output":"def longest_name(names): longest_name = '' for name in names: if len(name) > len(longest_name): longest_name = name return longest_name Names = ['John', 'Michael', 'Scott', 'Steve'] longest = longest_name(Names) print(longest) # Michael"},{"instruction":"Create a Python program that takes a two dimensional array of integers and calculates the sum of each row and each column of the array. [[2, 3, 5], [5, 7, 1], [4, 6, 9]]","output":"def calculateSum(arr): sums = [0] * len(arr[0]) for r in arr: for i in range(len(r)): sums[i] += r[i] return sums def getRowsSum(arr): rowSums = [] for r in arr: rowSums.append(sum(r)) return rowSums arr = [[2, 3, 5], [5, 7, 1], [4, 6, 9]] columnSums = calculateSum(arr) rowSums = getRowsSum(arr) print(\\"Row sums:\\", rowSums) print(\\"Column sums:\\", columnSums) # Output: Row sums: [10, 13, 15] Column sums: [11, 16, 15]"},{"instruction":"Write a Python Function that receives two strings and checks to see if one of them is an anagram of the other one.","output":"def is_anagram(s1, s2): s1 = s1.replace(\\" \\",\\"\\").lower() s2 = s2.replace(\\" \\",\\"\\").lower() return sorted(s1) == sorted(s2)"},{"instruction":"dentify the programming language in the given code snippet. def f(x): return x + 2","output":"Python"},{"instruction":"Visualize a dataset with ndimensional features in Python. Not applicable","output":"import matplotlib.pyplot as plt #Read data into array data = [list of data points] #Define plot dimensions n = len(data[0]) if n == 2: x = [x for x,y in data] y = [y for x,y in data] plt.scatter(x,y) plt.show() elif n == 3: x = [x for x,y,z in data] y = [y for x,y,z in data] z = [z for x,y,z in data] figure = plt.figure() axis = figure.add_subplot(111, projection='3d') axis.scatter(x, y, z) plt.show()"},{"instruction":"Build a webservice using the Flask python library that returns a Hello, world! message when accessed through a browser.","output":"#Import the Flask library from flask import flask # Initialize the Flask app app = Flask(__name__) #Define the hello function @app.route('/') def hello(): return \\"Hello, world!\\" # Have the Flask app listen on port 500 if __name__ == '__main__': app.run(port=500)"},{"instruction":"Develop a python code to compute the sum of digits in an integer. 1234","output":"def sum_digits(n): s = 0 while (n > 0): s = s + n % 10 n = n//10 return s n = 1234 print(sum_digits(n))"},{"instruction":"Write a Python function to convert a given number into its Roman numeral equivalent. 1314","output":"def roman_numeral(number): romans = [ (1000, \\"M\\"), (900, \\"CM\\"), (500, \\"D\\"), (400, \\"CD\\"), (100, \\"C\\"), (90, \\"XC\\"), (50, \\"L\\"), (40, \\"XL\\"), (10, \\"X\\"), (9, \\"IX\\"), (5, \\"V\\"), (4, \\"IV\\"), (1, \\"I\\") ] result = \\"\\" for value, numeral in romans: result += numeral * (number // value) number %= value return result result = roman_numeral(1314) print(result)"},{"instruction":"Create a function in Python that converts a Fahrenheit temperature to Celsius. 100 degree","output":"def convertFahrenheitToCelsius(fahrenheit): celsius = (fahrenheit - 32) * 5/9 print(\\"{}°F is {}°C\\".format(fahrenheit,celsius)) convertFahrenheitToCelsius(100)"},{"instruction":"Write a Python code to generate a random number between 10 and 50.","output":"import random random_number = random.randint(10, 50) print(\\"Random number between 10 and 50 is\\", random_number)"},{"instruction":"Create a basic chatbot using Python.","output":"import re #importing library for regular expressions user_input = \\"\\" #Initializing user_input while user_input != \\"exit\\": user_input = input(\\"Type your message: \\") if re.search(\\"hi|hello\\", user_input): #Using regural expressions to make the chatbot response to greetings print(\\"Hello, I am a chatbot. How can I help you?\\") else: print(\\"Sorry, I don't understand.\\")"},{"instruction":"Write a Python program to detect cycle in a linked list using Floyd's Cycle Detection Algorithm.","output":"def detect_cycle(head): slow_p = head fast_p = head while(slow_p and fast_p and fast_p.next) : slow_p = slow_p.next fast_p = fast_p.next.next if slow_p == fast_p : return True return False"},{"instruction":"Create a Python program that can search through two collections of data (collection 1 and collection 2) and calculate the probability that two items match one another.","output":"# Import the necessary libraries import json from collections import OrderedDict import pandas as pd # Load the data with open('collection1.json') as json_file: collection1 = json.load(json_file) with open('collection2.json') as json_file: collection2 = json.load(json_file) # Create a DataFrame from both collections df1 = pd.DataFrame(collection1) df2 = pd.DataFrame(collection2) # Calculate the probability of matching items match_probs = {} for item1 in df1.item.unique(): for item2 in df2.item.unique(): item1_obs = df1.loc[df1['item'] == item1] item2_obs = df2.loc[df2['item'] == item2] match_prob = (len(item1_obs) * len(item2_obs)) / (len(df1) * len(df2)) match_probs[(item1,item2)] = match_prob # Print the results match_probs = OrderedDict(sorted(match_probs.items(), key=lambda x: x[1], reverse=True)) print(match_probs)"},{"instruction":"Create an algorithm in Python to detect duplicate numbers in a given array. [3, 7, 4, 3, 6, 7]","output":"def find_duplicates(numbers): seen = set() duplicates = set() for number in numbers: if number in seen: duplicates.add(number) else: seen.add(number) return duplicates"},{"instruction":"dentify the programming languages used for writing a Python program that scrapes a website for email addresses. Not applicable","output":"The languages used for writing a Python program to scrape a website for email addresses would be Python and HTML. Python is used for writing the web scraper and HTML is used to define the structure and content of the website, which the scraper accesses in order to scrape the email addresses."},{"instruction":"Create a Python script to find the maximum and minimum numbers from a list. list1 = [2, 3, 7, 4, 5]","output":"maxnum = max(list1) minnum = min(list1) print(\\"Maximum number is:\\", maxnum) print(\\"Minimum number is:\\", minnum) #prints Maximum number is: 7 Minimum number is: 2"},{"instruction":"Given a list of integers and Boolean values, write a classifier program in Python to predict whether the input is an integer or a Boolean value.","output":"def classifyValue(value): if isinstance(value, bool): return \\"Boolean\\" elif isinstance(value, int): return \\"Integer\\" else: return \\"Other\\""},{"instruction":"Can you write a Python program to find the position of the second occurrence of a word in a given string? This is this is a sample string","output":"def find_second_occurence(given_string): # Split the given string split_string = given_string.split(' ') # Find the index of the second occurence index = [i for i,x in enumerate(split_string) if x == split_string[0]][1] # Print the second occurence print(\\"Second occurrence of given word:\\", split_string[index]) # Driver function given_string = \\"This is this is a sample string\\" find_second_occurence(given_string)"},{"instruction":"Create a Python script that takes a list of integers and finds the highest value. [2, 5, 3, 4, 8]","output":"The highest value is 8. list_ints = [2, 5, 3, 4, 8] highest_value = max(list_ints) print('The highest value is ' + str(highest_value) + '.')"},{"instruction":"Write Python code to classify the sentiment of this sentence. The movie was awesome!","output":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sentiment_analyzer = SentimentIntensityAnalyzer() sentiment_score = sentiment_analyzer.polarity_scores(\\"The movie was awesome!\\") if sentiment_score['compound'] >= 0.05: sentiment = \\"positive\\" elif sentiment_score['compound'] <= -0.05: sentiment = \\"negative\\" else: sentiment = \\"neutral\\" print(\\"Sentiment of the sentence is\\", sentiment)"},{"instruction":"Write a Python program to flatten a nested list. lst = [[1,2,3], [4,5], [6]]","output":"def flatten_list(lst): return [item for sublist in lst for item in sublist]"},{"instruction":"Generate a Python program to transform the following string 'Welcome to GPT world!' into an all uppercase string.","output":"my_string = \\"Welcome to GPT world!\\" print(my_string.upper())"},{"instruction":"Develop a Python program to check if a number is an Armstrong number.","output":"def isArmstrong(x): # Calculate the number of # digits in x n = len(str(x)) sum1 = 0 # For every digit calculate # its sum of nth power temp = x while temp > 0: d = temp % 10 sum1 = sum1 + d ** n temp = temp//10 # Check whether sum1 is equal to x if sum1 == x: return True return False"},{"instruction":"Create a Python function that takes in two strings and concatenates them with a space in between. Programming, is Fun","output":"def concatStringsWithSpace(str1, str2): return str1 + \\" \\" + str2 result = concatStringsWithSpace(\\"Programming\\", \\"is Fun\\") print(result)"},{"instruction":"Write a Python program to create a KMeans model and cluster iris data into 3 clusters.","output":"\\"\\"\\" Write a Python program to create a KMeans model and cluster iris data into 3 clusters. \\"\\"\\" import pandas as pd from sklearn.cluster import KMeans from sklearn import datasets # Load the iris data iris = datasets.load_iris() X = pd.DataFrame(iris.data) y = pd.DataFrame(iris.target) # Create the KMeans model model = KMeans(n_clusters=3, random_state=0) model.fit(X) # Predict the clusters prediction = model.predict(X) # Add the prediction to the data frame X.insert(0, \\"cluster\\", prediction) # Print the result print(X)"},{"instruction":"Develop an algorithm to identify palindromes using regular expression in Python.","output":"import re def is_palindrome(s): pattern = r'^[a-zA-Z0-9]*' if re.match(pattern, s): return s == s[::-1] else: return False"},{"instruction":"Create a Python code snippet to print the current time in the format \`hh:mm:ss\`.","output":"# Import datetime module import datetime # Get the current time now = datetime.datetime.now() # Print the current time in the format hh:mm:ss print(now.strftime(\\"%H:%M:%S\\"))"},{"instruction":"Design a function in Python that takes two strings and returns a single string which is the concatenation of both strings. Hello and World","output":"def concatenate(str1, str2): return str1 + str2 # example str1 = \\"Hello\\" str2 = \\" World\\" result = concatenate(str1, str2) print(result) # Hello World"},{"instruction":"You are given a data set with categorical variables. Create a Python program to convert it into dummy variables. dataset = [Gender, Occupation] dataset = [['Male', 'Doctor'], ['Female', 'Teacher'], ['Female', 'Lawyer']]","output":"import pandas as pd dataset = [['Male', 'Doctor'], ['Female', 'Teacher'], ['Female', 'Lawyer']] df = pd.DataFrame(dataset, columns = ['Gender', 'Occupation']) df_dummies = pd.get_dummies(df, columns=['Gender']) print(df_dummies) # Output Occupation Gender_Female Gender_Male 0 Doctor 0 1 1 Teacher 1 0 2 Lawyer 1 0"},{"instruction":"Generate a Python program to print the first 10 numbers in the Fibonacci sequence.","output":"def fibonacciGenerator(num): a = 0 b = 1 for i in range(0, num): c = a + b a = b b = c yield a numbers = fibonacciGenerator(10) for num in numbers: print(num)"},{"instruction":"Generate a Python program to calculate the minimum cost of a given shopping cart. cartItems = {Apple: 10, Banana: 5, Orange: 2, Grapes: 15 }","output":"def minimum_cost(cart): min_cost = 0 for item, cost in cart.items(): min_cost += int(cost) return min_cost print(minimum_cost(cartItems))"},{"instruction":"Create an object in Python that has two properties: name and year.","output":"class Person: def __init__(self, name, year): self.name = name self.year = year person = Person(\\"Jane\\", 1998)"},{"instruction":"Develop a web scraper in Python to get all emails from a web page. URL of the page: http://example.com","output":"import requests from bs4 import BeautifulSoup # Get request to the URL page = requests.get(\\"http://example.com\\") # Create a BeautifulSoup object from the response soup = BeautifulSoup(page.content, 'html.parser') # Get all emails from the page emails = soup.find_all('a', {'href': 'mailto'}) for email in emails: print(email.get('href').replace(\\"mailto:\\", \\"\\"))"},{"instruction":"Develop a Python code to print the current date and time.","output":"import datetime dateTimeObj = datetime.datetime.now() print('Current Date and Time:', dateTimeObj)"},{"instruction":"Create an openended machine learning program in Python to classify a given dataset based on its features. Not applicable","output":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier # load the data df = pd.read_csv('dataset.csv') # split into features and labels features = df.drop('label', axis=1).values labels = df['label'].values # split into train and test sets X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42) # create a random forest classifier clf = RandomForestClassifier(n_estimators=1000, random_state=42) # train the classifier clf.fit(X_train, y_train) # make predictions y_pred = clf.predict(X_test) # calculate accuracy accuracy = np.mean(y_pred == y_test) print('Accuracy:', accuracy)"},{"instruction":"Write a script in Python to sort the given list of numbers in nondecreasing order [3, 2, 7, 1, 9, 5]","output":"def sortNumbers(nums): for i in range(len(nums)-1): minPos = i for j in range(i+1,len(nums)): if nums[minPos] > nums[j]: minPos = j nums[i],nums[minPos] = nums[minPos],nums[i] nums = [3, 2, 7, 1, 9, 5] sortNumbers(nums) print(nums)"},{"instruction":"Write a Python program to find the lowest common multiple of two numbers.","output":"def lowest_common_multiple(x, y): if x > y: greater = x else: greater = y while(True): if((greater % x == 0) and (greater % y == 0)): lcm = greater break greater += 1 return lcm print(lowest_common_multiple(x, y))"},{"instruction":"Write a Python function that gets a list of numbers and returns the sum of the elements. List = [1, 2, 3, 4, 5]","output":"def get_sum(list): total = 0 for num in list: total += num return total"},{"instruction":"Create a Python program for automation that types text into a textbox. The program should take text to be typed and the HTML ID of the textbox as inputs, and simulate the typing of the text into the element. Text to be typed: Hello World! HTML ID of the textbox: textbox1","output":"import pyautogui def type_text(text, textbox_id): # Locate the textbox by id element = driver.find_element_by_id(textbox_id) # Move the mouse to the textbox pyautogui.moveTo(element.location['x'], element.location['y']) # Simulate typing in the text pyautogui.typewrite(text) \`\`\`"},{"instruction":"Write a python program to generate a random list of numbers within a specified range.","output":"import random def rand_list(start, end, n): rand_list = [] for i in range(n): rand_list.append(random.randint(start, end)) return rand_list nums = rand_list(1, 10, 5) print(nums)"},{"instruction":"Write a Python program to create a stack using two queues. Not applicable","output":"class Stack: def __init__(self): self.queue1 = [] self.queue2 = [] def push(self, value): self.queue1.append(value) def pop(self): if self.queue1: while len(self.queue1) > 1: self.queue2.append(self.queue1.pop(0)) return self.queue1.pop(0) else: while len(self.queue2) > 1: self.queue1.append(self.queue2.pop(0)) return self.queue2.pop(0)"},{"instruction":"Create a code in Python for finding the shortest path between two given points. Start: [3, 4] End: [9, 8]","output":"def shortest_path(start_point, end_point): path = [] current_point = start_point while current_point != end_point: x_dist = end_point[0] - current_point[0] y_dist = end_point[1] - current_point[1] # move right if x_dist is greater than or equal to # y_dist, and move up otherwise if x_dist >= y_dist: current_point[0] += 1 else: current_point[1] += 1 path.append(current_point[:]) return path result = shortest_path([3, 4], [9, 8]) print(result)"},{"instruction":"Modify the following Python program to explore and retrieve data from a dataset using Pandas. import pandas as pd df = pd.read_csv('data.csv') print(df)","output":"import pandas as pd df = pd.read_csv('data.csv') print(df.head()) print(df.info()) print(\\"Average age of passengers:\\", df['Age'].mean()) print(\\"Number of female passengers:\\", df[df['Sex'] == 'female'].shape[0]) print(\\"Oldest passenger:\\", df.loc[df['Age'].idxmax()])"},{"instruction":"Given a Python dictionary, write a function that prints out the keyvalue pairs in alphabetical order. { 'Mark': '68', 'Carol': '35', 'John': '42' }","output":"def print_dict_alphabetically(dictionary): sorted_keys = sorted(dictionary.keys()) for key in sorted_keys: print(f\\"{key}: {dictionary[key]}\\") print_dict_alphabetically({ 'Mark': '68', 'Carol': '35', 'John': '42' })"},{"instruction":"Create a Python class to generate random passwords. The class should contain a method to generate a random password of specified length. Not applicable","output":"import random import string class PasswordGenerator: def generate_password(length): password_characters = string.ascii_letters + string.digits + string.punctuation return ''.join(random.choice(password_characters) for i in range(length)) password = PasswordGenerator.generate_password(16) print(password)"},{"instruction":"Create a classification model using the SciKitLearn library in Python to predict if a given email is a spam email or not. Example training data of emails and their label (spam or not spam)","output":"from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # load the data labels = ['spam', 'not spam'] data = [...] # example data of emails and labels # convert the text to a bag of words model vectorizer = CountVectorizer() X = vectorizer.fit_transform(data) # split the data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2) # fit the classification model model = MultinomialNB() model.fit(X_train, y_train) # evaluate the model score = model.score(X_test, y_test) print('Test score: ', score)"},{"instruction":"Write a debugging tool which visualizes the calls and returns of a Python program.","output":"import sys import traceback def visualize_program_calls(): def trace_calls(frame, event, arg): if event != 'call': return co = frame.f_code func_name = co.co_name if func_name == 'write': # Ignore write() calls from print statements return func_line_no = frame.f_lineno func_filename = co.co_filename caller = frame.f_back caller_line_no = caller.f_lineno caller_filename = caller.f_code.co_filename print('Call to %s on line %s of %s from line %s of %s' % (func_name, func_line_no, func_filename, caller_line_no, caller_filename)) return sys.setprofile(trace_calls) def _visualize_program_returns(*args): for thread_id, frame in sys._current_frames().items(): print('Return from %s on line %s of %s' % (frame.f_code.co_name, frame.f_lineno, frame.f_code.co_filename)) sys.settrace(_visualize_program_returns)"},{"instruction":"Use Selenium Webdriver to create a Python program that navigates to the Google homepage, searches for GPT and prints the h2 element in the result page. Not applicable","output":"from selenium import webdriver # set chrome driver driver = webdriver.Chrome() # open google driver.get(\\"https://www.google.com/\\") # find search box and enter \\"GPT\\" search = driver.find_element_by_name(\\"q\\") search.send_keys(\\"GPT\\") # click search search.submit() # print h2 element h2 = driver.find_element_by_tag_name(\\"h2\\") print(h2.text) # close browser driver.close()"},{"instruction":"Create a Python function to calculate the factorial of an input number.","output":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"instruction":"Create a new class in Python, named 'Car', that contains two attributes, 'make' and 'model'.","output":"class Car: def __init__(self, make, model): self.make = make self.model = model"},{"instruction":"Create a GUI application in Python that shows the current date and time.","output":"import tkinter as tk from tkinter import font import datetime window = tk.Tk() window.title(\\"Current Date and Time\\") helv36 = font.Font(family='Helvetica', size=36, weight='bold') time = datetime.datetime.now().strftime(\\"%H:%M:%S\\") date = datetime.datetime.now().strftime(\\"%d/%m/%Y\\") clock_frame = tk.Frame( master = window, relief = tk.RAISED, borderwidth = 1) clock_frame.pack(fill = tk.BOTH) date_label = tk.Label( master = clock_frame, text = date, font = helv36) date_label.pack(side = tk.TOP, expand = True) time_label = tk.Label( master = clock_frame, text = time, font = helv36) time_label.pack(side = tk.BOTTOM, expand = True) window.mainloop()"},{"instruction":"Write a Python code to calculate the factorial of a given number using memoization.","output":"def factorial_memoization(n): #Creating table to store result factorial_table = [1] * (n+1) # Calculating factorial and storing in # the table for i in range(1, n+1): factorial_table[i] = i * factorial_table[i - 1] return factorial_table[n] result = factorial_memoization(5) print(result)"},{"instruction":"Develop a machine learning classifier in Python to classify a set of emails as spam or not. The following emails: 1. You won the lottery! 2. Check out this offer! 3. Can you help me with my project? 4. Are you free for lunch tomorrow?","output":"import pandas as pd # Load data into a dataframe emails = pd.DataFrame([ {'text': 'You won the lottery!', 'label': 'spam'}, {'text': 'Check out this offer!', 'label': 'spam'}, {'text': 'Can you help me with my project?', 'label': 'not_spam'}, {'text': 'Are you free for lunch tomorrow?', 'label': 'not_spam'}, ]) # Train the ML model from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB X = emails['text'] y = emails['label'] vectorizer = CountVectorizer() X_train = vectorizer.fit_transform(X) nb = MultinomialNB() nb.fit(X_train, y)"},{"instruction":"Create a program in Python to display the powers of 2 from 0 to 10.","output":"# Python program to display the power of 2 from 0 to 10 for i in range(0,11): print(\\"2**\\",i,\\"=\\",2**i) # Output: # 2** 0 = 1 # 2** 1 = 2 # 2** 2 = 4 # 2** 3 = 8 # 2** 4 = 16 # 2** 5 = 32 # 2** 6 = 64 # 2** 7 = 128 # 2** 8 = 256 # 2** 9 = 512 # 2** 10 = 1024"},{"instruction":"Construct a perceptron class for a singlelayer neural network in Python. Not applicable","output":"import numpy as np class Perceptron: def __init__(self, num_inputs, learning_rate=0.01): self.learning_rate = learning_rate # Initiailizing the weights to random values self.weights = np.random.rand(num_inputs) def predict(self, inputs): # Compute the dot product between inputs and weights weighted_sum = np.dot(inputs, self.weights) # The output is either 0 or 1 depending on the weighted sum result = int(weighted_sum > 0) return result def train(self, inputs, desired_output): # Calculate the prediction error prediction = self.predict(inputs) error = desired_output - prediction # Update the weights self.weights += self.learning_rate * error * inputs"},{"instruction":"Create a program in Python for finding the greatest common divisor of two numbers. Number1: 20 Number2: 45","output":"def gcd(a, b): while b != 0: temp = a a = b b = temp % b return a print(gcd(20,45))"},{"instruction":"Write a Python program to convert a given number of seconds into days, hours, minutes and seconds.","output":"# Function to convert given number of seconds into days, hours, minutes and seconds def convert_seconds(seconds): # Get the number of days days = seconds // 86400 # Get the remaining seconds secs = seconds % 86400 # Get the number of hours hours = secs // 3600 # Get the remaining seconds secs = secs % 3600 # Get the number of minutes minutes = secs // 60 # Get the remaining seconds secs = secs % 60 return days, hours, minutes, secs # Main Program seconds = int(input(\\"Enter a number of seconds: \\")) days, hours, minutes, secs = convert_seconds(seconds) print(\\"Days:\\", days) print(\\"Hours:\\", hours) print(\\"Minutes:\\", minutes) print(\\"Seconds:\\", secs)"},{"instruction":"Write a Python function to find the closest pair of points from a given list of points.","output":"def find_closest_pair(points): min_distance = float('inf') min_pair = [] for i in range(len(points)): for j in range(i+1, len(points)): distance = get_euclidean_distance(points[i], points[j]) if distance < min_distance: min_distance = distance min_pair = points[i], points[j] return min_pair def get_euclidean_distance(point1, point2): diffx = point1[0] - point2[0] diffy = point1[1] - point2[1] return math.sqrt(diffx**2 + diffy**2)"},{"instruction":"Can you develop a Python program that creates a dictionary of students with their names and grades as the keyvalue pair? [{'name':'John', 'grade':'A'}, {'name':'Steve', 'grade':'B'}, {'name':'Bob', 'grade':'C'}]","output":"data = [{'name':'John', 'grade':'A'}, {'name':'Steve', 'grade':'B'}, {'name':'Bob', 'grade':'C'}] # Create a dictionary of students student_dict = {} for student in data: student_dict[student['name']] = student['grade'] # Print the dictionary print(student_dict)"},{"instruction":"Based on the following Python function, create a Pandas dataframe that contain the start and end date of each season: def get_seasons(): season_dates = { 'spring': ('March 20', 'June 20'), 'summer': ('June 21', 'September 21'), 'autumn': ('September 22', 'December 21'), 'winter': ('December 22', 'March 19') } return season_dates Not applicable","output":"import pandas as pd def get_seasons(): season_dates = { 'spring': ('March 20', 'June 20'), 'summer': ('June 21', 'September 21'), 'autumn': ('September 22', 'December 21'), 'winter': ('December 22', 'March 19') } return season_dates seasons = get_seasons() df = pd.DataFrame(columns=['Season', 'Start_Date', 'End_Date']) for season, dates in seasons.items(): start_date, end_date = dates df = df.append({'Season': season, 'Start_Date': start_date, 'End_Date': end_date}, ignore_index=True) print(df)"},{"instruction":"Create a method in Python to find the sum of all even numbers between two integers including the first and last number. Low: 10 High: 20","output":"def even_sum(low, high): sum = 0 for i in range(low, high+1): if i % 2 == 0: sum += i return sum result = even_sum(10, 20) print(result)"},{"instruction":"Create a Python program to build a language model. The model should take a sequence of words as input and predict the next word in the sequence. Not applicable","output":"import numpy as np from keras.preprocessing.text import Tokenizer from keras.layers import Embedding, LSTM from keras.models import Sequential # tokenizing the text tokenizer = Tokenizer() tokenizer.fit_on_texts(<some text>) sequences = tokenizer.texts_to_sequences(<some text>) vocab_size = len(tokenizer.word_index) + 1 # create the language model model = Sequential() model.add(Embedding(vocab_size, 50, input_length=3)) model.add(LSTM(100, return_sequences=True)) model.add(LSTM(100)) model.add(Dense(vocab_size, activation='softmax')) # compile the model model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) # fit the model model.fit(sequences, X, epochs=100, verbose=2) # evaluate the model loss, accuracy = model.evaluate(sequences, X, verbose=0)"},{"instruction":"Create a code that plots a sine wave in Python.","output":"\\"\\"\\" Plot a sine wave in Python. \\"\\"\\" # Import matplotlib and numpy libraries import matplotlib.pyplot as plt import numpy as np # Set the x axis range x_axis = np.arange(0, 2*np.pi, 0.1) # Set the y axis range y_axis = np.sin(x_axis) # Plot the sine wave plt.plot(x_axis, y_axis) # Set the figure title plt.title('Sine Wave') # Set the x and y labels plt.xlabel('x axis') plt.ylabel('y axis') # Set the x and y limits plt.xlim(0, 2*np.pi) plt.ylim(-1, 1) # Draw the graph plt.show()"},{"instruction":"Design an API for a Python script that returns the average of any given list of numbers. [1, 4, 5, 7, 8]","output":"# Create API endpoint @app.route('/api/average', methods=['POST']) def average(): # Get data from request data = request.get_json() # Calculate average avg = np.mean(data) # Return result return jsonify({'result': avg})"},{"instruction":"Develop an algorithm in Python to identify the majority element in an unsorted array. [3,9,3,3,3,1,3,3]","output":"def find_majority_element(array): count = 0 majority_element = None for element in array: if count == 0: majority_element = element count += (1 if element == majority_element else -1) return majority_element"},{"instruction":"Create a Python function to print the following star pyramid pattern.","output":"def print_star_pyramid(n): # Outer loop to handle number of lines for i in range(0, n): # Inner loop to handle number of columns for j in range(0, i+1): # Will print star print(\\"* \\", end=\\"\\") # Line break print(\\"r\\") # Program to demonstrate star pyramid n = 5 print_star_pyramid(n)"},{"instruction":"Generate code in Python create an array of 100 random integers between 1 to 1000. Not applicable","output":"import random # Create an array of 100 random integers between 1 to 1000 array = [random.randint(1, 1000) for i in range(100)] print(array)"},{"instruction":"Create a classifier in Python to predict the gender of a person based on their name. Not applicable","output":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.linear_model import LogisticRegression # Load training data train_data = pd.read_csv(\\"train.csv\\") X_train = train_data[\\"Name\\"].values y_train = train_data[\\"Gender\\"].values # Create the vectorizer vectorizer = CountVectorizer() # Fit the vectorizer vectorizer.fit(X_train) # Transform the vectorizer X_train_vectorized = vectorizer.transform(X_train) # Create a model model = LogisticRegression() # Fit the model model.fit(X_train_vectorized, y_train)"},{"instruction":"Write a Python program to replace all occurrences of the word hello with hi. This is a sentence with hello","output":"updated_sentence = sentence.replace(\\"hello\\", \\"hi\\")"},{"instruction":"Create a website using the Django web framework.","output":"# create a new Django project django-admin startproject mysite # create a new application python manage.py startapp myapp # add the new application in INSTALLED_APPS in the settings.py file INSTALLED_APPS = [ 'myapp', ... ] # define the urls in urls.py file urlpatterns = [ path('', myapp.views.index, name='index'), ... ]"},{"instruction":"Create a Python program that updates the records of a given movie in an SQL database. Database schema: movie(title, year_released, genre, rating, director)","output":"import sqlite3 conn = sqlite3.connect(\\"movies.db\\") cur = conn.cursor() # create the table if it does not exist cur.execute(\\"CREATE TABLE IF NOT EXISTS movie(title TEXT, year_released INTEGER, genre TEXT, rating REAL, director TEXT)\\") # update the record record = cur.execute(\\"UPDATE movie SET genre = 'Thriller', rating = 8.2, director = 'Jason Burke' WHERE title = 'The King's Speech' and year_released = '2010'\\") conn.commit() conn.close()"},{"instruction":"Set up a Python program to read in .csv data and generate a table. [Name, Age, City] [John, 20, New York], [George, 18, London], [Ringo, 25, Tokyo]","output":"import pandas as pd # Initialize the data data = [['John', 20, 'New York'], ['George', 18, 'London'], ['Ringo', 25, 'Tokyo']] # Create the dataframe df = pd.DataFrame(data, columns = ['Name', 'Age', 'City']) # Print the dataframe print (df) Name Age City 0 John 20 New York 1 George 18 London 2 Ringo 25 Tokyo"},{"instruction":"Create a Python script to fetch the top 10 trending YouTube videos from last week. Not applicable","output":"import requests url = \\"https://www.youtube.com/feed/trending\\" response = requests.get(url) data = response.json() trending_videos = [] for video in data[\\"items\\"]: video_title = video[\\"snippet\\"][\\"title\\"] video_url = \\"https://www.youtube.com/watch?v=\\" + video[\\"id\\"][\\"videoId\\"] trending_videos.append(\\"Title: \\" + video_title + \\" | URL \\" + video_url) for i in range(10): print(trending_videos[i])"},{"instruction":"Construct a basic class in Python for a Rectangle with two methods to calculate its area and perimeter.","output":"class Rectangle(): def __init__(self,length,width): self.length = length self.width = width def area(self): return self.length * self.width def perimeter(self): return 2 * (self.length + self.width)"},{"instruction":"Create a Python script that takes a URL as an input and outputs the website title and description. https://www.example.com","output":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com' r = requests.get(url) soup = BeautifulSoup(r.content, 'html.parser') title = soup.title.string description = soup.find('meta', attrs={'name': 'description'})['content'] print('Title:', title) print('Description:', description)"},{"instruction":"Given two integers, write a Python function to add them.","output":"def add_integers(num1, num2): return num1 + num2"},{"instruction":"Write a Python program that generates a series of Fibonacci numbers.","output":"def fibonacci(n): a = 0 b = 1 for _ in range(n): a, b = b, a + b return a print(fibonacci(10))"},{"instruction":"Write a Python class to parse a JSON object. The JSON object will contain a list of dicts with a 'name' key. Write a method for the class that returns the names of the dicts in the supplied JSON object. {items: [{name: item1}, {name: item2}, {name: item3}]}","output":"class ParseJSON: def __init__(self, jsonObject): self.jsonObject = jsonObject def getNames(self): names = [] for item in self.jsonObject['items']: name = item['name'] names.append(name) return names jsonObject = {\\"items\\": [{\\"name\\": \\"item1\\"}, {\\"name\\": \\"item2\\"}, {\\"name\\": \\"item3\\"}]} pp = ParseJSON(jsonObject) result = pp.getNames() print(result) # ['item1', 'item2', 'item3']"},{"instruction":"Create a Python script that creates a GUI application with two checkboxes. The checkboxes should be labeled cat and dog. When the submit button is pressed, it should print out whether the cat and dog checkboxes are checked. Not applicable","output":"import tkinter as tk root = tk.Tk() # Create the two checkboxes cat_var = tk.IntVar() dog_var = tk.IntVar() cat_checkbox = tk.Checkbutton(root, text=\\"Cat\\", variable=cat_var) dog_checkbox = tk.Checkbutton(root, text=\\"Dog\\", variable=dog_var) cat_checkbox.pack() dog_checkbox.pack() # Create the button button = tk.Button(root, text=\\"Submit\\") button.pack() # Define the button handler def button_handler(): if cat_var.get(): print(\\"Cat is checked\\") else: print(\\"Cat is not checked\\") if dog_var.get(): print(\\"Dog is checked\\") else: print(\\"Dog is not checked\\") # Set the button handler button.configure(command=button_handler) root.mainloop()"},{"instruction":"Write a code block in Python to compute the dot product of two vectors. u = [1, 2, 3] v = [4, 5, 6]","output":"def dot_product(u, v): if len(u) != len(v): raise ValueError(\\"Vectors u and v must be of the same length!\\") result = 0 for i in range(len(u)): result += u[i] * v[i] return result u = [1, 2, 3] v = [4, 5, 6] print(\\"Dot product of u and v is:\\" , dot_product(u, v))"},{"instruction":"Write a python program to extract all the words from a given sentence and store them into a dictionary. Calculate the frequency of each word, and store them in the same dictionary keyed with the words. I love to code","output":"words_dict = {} sentence = \\"I love to code\\" words = sentence.split() for word in words: if word in words_dict: words_dict[word] += 1 else: words_dict[word] = 1 print(words_dict) # Output: # {'I': 1, 'love': 1, 'to': 1, 'code': 1}"},{"instruction":"Define a function in Python that takes as input a sentence and returns a list of all noun phrases in the sentence. sentence = The quick brown fox jumps over the lazy dog","output":"def get_noun_phrases(sentence): noun_phrases = [] words = word_tokenize(sentence) tagged_sentence = pos_tag(words) chunks = ne_chunk(tagged_sentence) for chunk in chunks: if type(chunk) == Tree: phrase = \\" \\".join([word[0] for word in chunk]) noun_phrases.append(phrase) return noun_phrases"},{"instruction":"Generate a function in Python that accepts an array and its length as input and output the maximum sum of all its contiguous subarrays. [1, 9, 3, 17, 3, 6]","output":"def maxSubArraySum(arr, length): max_so_far = 0 max_ending_here = 0 for i in range(0, length): max_ending_here = max_ending_here + arr[i] if max_ending_here < 0: max_ending_here = 0 elif max_so_far < max_ending_here: max_so_far = max_ending_here return max_so_far"},{"instruction":"Can you find the smallest number in a given list using Python? [4, 5, 6, 7, 8, 1, 2]","output":"def smallest_num(lst): min_num = lst[0] for num in lst: if num < min_num: min_num = num return min_num lst = [4, 5, 6, 7, 8, 1, 2] print(smallest_num(lst))"},{"instruction":"Write a Python program to group two lists of numbers into a dictionary. The keys would be the first list and the values would be the second list. list_a = [1,2,3,4,5] list_b = [6,7,8,9,10]","output":"list_a = [1,2,3,4,5] list_b = [6,7,8,9,10] d = dict(zip(list_a, list_b)) print(d) // {1: 6, 2: 7, 3: 8, 4: 9, 5: 10}"},{"instruction":"Create a Python function to check whether a number is divisible by another number or not. number1 = 15 number2 = 3","output":"def is_divisible(number1, number2): return number1 % number2 == 0"},{"instruction":"Create a Python program for sorting a dictionary based on a given key. {apple: 10, banana: 5, pear: 7}","output":"def sort_dict(d, key): return sorted(d.items(), key=lambda x: x[1][key]) #Test d = {\\"apple\\": 10, \\"banana\\": 5, \\"pear\\": 7} print(sort_dict(d, \\"price\\")) # Output: [('banana', {'price': 5}), ('pear', {'price': 7}), ('apple', {'price': 10})]"},{"instruction":"Develop an algorithm in Python for parsing a given text and counting the number of occurrences of a given word. This is an example text.","output":"def parse_text(text, word): word_count = 0 words = text.split() for w in words: if w == word: word_count += 1 return word_count text = 'This is an example text.' word = 'example' word_count = parse_text(text, word) print('The word \\"{}\\" appears {} times in the text.'.format(word, word_count))"},{"instruction":"Create a Python program to generate a dot product between two given lists. list1 = [1, 2, 3] list2 = [4, 5, 6]","output":"def dot_product(list1, list2): product = 0 for x, y in zip(list1, list2): product += x*y return product"},{"instruction":"Write a machine learning model in Python that can classify a given text in one of two categories. text1: “This is a good movie text2: “This movie is bad","output":"import pandas as pd import numpy as np from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB # Input data texts = [“This is a good movie”, “This movie is bad”] labels = [1, 0] # Create the feature vectors cv = CountVectorizer() x = cv.fit_transform(texts) # Split the dataset to train and test sets x_train, x_test, y_train, y_test = train_test_split(x, labels, test_size=0.2) # Build the ML model model = MultinomialNB() model.fit(x_train, y_train) # Make predictions predictions = model.predict(x_test)"},{"instruction":"Write a Python program to classify bank transactions into classes of 'Income' or 'Expenses' [{ 'description': 'Grocery', 'amount': 100 }, { 'description': 'Rent', 'amount': 600 }, { 'description': 'Salary', 'amount': 3000 }]","output":"def classify_transactions(transaction_list): results = [] for transaction in transaction_list: category = 'Expense' if transaction['amount'] >= 0: category = 'Income' results.append({ 'description': transaction['description'], 'amount': transaction['amount'], 'category': category }) return results"},{"instruction":"Write a python code to sort a linked list by its value. The list is composed of nodes, each containing a value and a pointer to the next node.","output":"class Node: def __init__(self, val): self.val = val self.next = None def sort_linked_list(head): if head is None: return None # Initialize the sorted linked list dummy_head = Node(None) prev = dummy_head # Traverse the linked list curr = head while curr: # Store the next node next_node = curr.next # Find the correct position in the sorted list while prev.next and prev.next.val < curr.val: prev = prev.next # Insert the current node curr.next = prev.next prev.next = curr # Move to the next node prev = dummy_head curr = next_node return dummy_head.next"},{"instruction":"Write a Python program to print the multiplication table for a given number. Number: 8","output":"def printMultiplicationTable(num): for i in range(1, 11): print(\\"{} x {} = {}\\".format(num, i, num * i)) printMultiplicationTable(8) # Output: # 8 x 1 = 8 # 8 x 2 = 16 # 8 x 3 = 24 # 8 x 4 = 32 # 8 x 5 = 40 # 8 x 6 = 48 # 8 x 7 = 56 # 8 x 8 = 64 # 8 x 9 = 72 # 8 x 10 = 80"},{"instruction":"Generate a Python program to calculate the Mean Absolute Error (MAE) of a given dataset.","output":"def mae(data): # Calculate the mean of the data mean = sum(data) / len(data) # Calculate the absolute difference of the data values from the mean abs_differences = [abs(value - mean) for value in data] # Calculate the mean absolute error mae = sum(abs_differences) / len(abs_differences) return mae"},{"instruction":"Can you generate Python code that prints the larger of two input numbers? 37, 22","output":"# Define the two numbers num1 = 37 num2 = 22 # Print the larger number if num1 > num2: print(num1) else: print(num2)"},{"instruction":"Code a solution to the following problem in Python Given a list of integers, find the sum of all the elements in the list.","output":"# Define a function for finding the sum of the elements of a list def find_sum(list): # Initialise the sum to 0 total = 0 # Iterate through each element for item in list: # Add the element to the total total += item # Return the total return total # Example list lst = [1, 2, 3, 4] # Call the function print(find_sum(lst))"},{"instruction":"Generate a Python script to classify the given data points according to their label. data_points = [(2,2),(3,3),(4,4)] labels = ['x', 'y',]","output":"def classify_data_points(data_points, labels): classified_data_points = [] for data_point in data_points: if data_point[0] == data_point[1]: classified_data_points.append((data_point, labels[0])) else: classified_data_points.append((data_point, labels[1])) return classified_data_points"},{"instruction":"Generate a list of square numbers in Python.","output":"square_numbers = [x**2 for x in range(10)]"},{"instruction":"mplement a web server in Python that responds to incoming requests.","output":"import http.server def respond(handler): handler.send_response(200) handler.send_header('Content-type','text/html') handler.end_headers() handler.wfile.write(b'Hello World') class MyWebRequestHandler(http.server.BaseHTTPRequestHandler): def do_GET(self): respond(self) if __name__=='__main__': server = http.server.HTTPServer(('0.0.0.0', 8001), MyWebRequestHandler) print('Starting server at port 8001...') server.serve_forever()"},{"instruction":"Write an algorithm in Python to perform a linear search. arr = [1, 5, 7, 8, 10] key = 7","output":"def linear_search(arr, key): for index, element in enumerate(arr): if element == key: return index return -1 print(linear_search(arr, key))"},{"instruction":"Create a linked list structure in Python.","output":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def push(self, new_data): new_node = Node(new_data) new_node.next = self.head self.head = new_node def printList(self): temp = self.head while (temp): print(temp.data) temp = temp.next"},{"instruction":"Create a Python program to take in two strings as input and return the longest common substring between them. string1 = ABBABCD string2 = ABCABC","output":"def find_longest_common_substring(s1, s2): m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] longest, x_longest = 0, 0 for x in range(1, 1 + len(s1)): for y in range(1, 1 + len(s2)): if s1[x - 1] == s2[y - 1]: m[x][y] = m[x - 1][y - 1] + 1 if m[x][y] > longest: longest = m[x][y] x_longest = x else: m[x][y] = 0 return s1[x_longest - longest: x_longest] # Driver code string1 = \\"ABBABCD\\" string2 = \\"ABCABC\\" print(\\"Longest Common Substring: \\" + find_longest_common_substring(string1, string2))"},{"instruction":"Generate a program in Python to convert a list of integers into a single integer. list = [1, 2, 3, 4]","output":"def list_to_int(list_of_ints): number = 0 for int in list_of_ints: number = number*10 + int return number"},{"instruction":"Create a linear regression model in Python to predict house prices based on geographic features such as rooms, square footage, and zip code. Rooms: 3 Square Footage: 2000 Zip Code: 92101","output":"import pandas as pd import numpy as np data = pd.DataFrame({'Rooms': [3], 'Square_Footage': [2000], 'Zip_Code': [92101] }) # Split the input data into independent and dependent variables X = data.iloc[:, :-1] y = data.iloc[:, -1] # Build the model from sklearn.linear_model import LinearRegression regressor = LinearRegression() regressor.fit(X, y) # Predict the price prediction = regressor.predict([[3, 2000, 92101]]) print(prediction)"},{"instruction":"Create an algorithm in Python to find the shortest path between two given points in a grid.","output":"# Find the shortest path between two given points in a grid def findShortestPath(grid, start, end): # Create a queue for BFS queue = [] # Create visited array visited= [[False for col in range(len(grid[0]))] for row in range(len(grid))] # Create a Node object with the starting point start_node = Node(start[0],start[1],0) # Append the start node to the queue queue.append(start_node) # Check if the start and end coordinate is the same if start== end: return \\"Both points are same,no need to search\\" # Flag that indicates if the target node is reached target_found = False while queue and not target_found: # Get the front node node = queue.pop(0) i = node.x j = node.y # Check if the current node is the target if([i,j] == end): target_found = True # Return the number of moves from the start node to the target node return node.dist # Check if the current node is unvisited and not an obstacle if(not visited[i][j] and grid[i][j]!=1): # Mark the current node as visited visited[i][j] = True # Add all possible adjacent nodes to the queue # Move up if(i+1<len(grid)): queue.append(Node(i+1,j,node.dist + 1)) # Move down if(i-1>=0): queue.append(Node(i-1,j,node.dist + 1)) # Move left if(j+1<len(grid[0])): queue.append(Node(i,j+1,node.dist + 1)) # Move right if(j-1>=0): queue.append(Node(i,j-1,node.dist + 1)) return 0 # Create a Node class for storing each node class Node: def __init__(self,x,y,dist): self.x = x self.y = y self.dist = dist"},{"instruction":"Create a program in Python that finds the index of the first occurrence of a target number in a given array. arr = [1, 3, 5, 3, 7, 3, 6], target = 3","output":"arr = [1, 3, 5, 3, 7, 3, 6] target = 3 def findIndex(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 # Driver Code index = findIndex(arr, target) print(\\"Index of\\", target, \\"is\\", index) // Output: Index of 3 is 1"},{"instruction":"Read the string ‘Hello World’ and identify the lengths of the words using Python","output":"def word_lengths(string): words = string.split(' ') lengths = [] for word in words: lengths.append(len(word)) return lengths word_lengths('Hello World') // [5, 5]"},{"instruction":"Generate a Python program to find the maximum number in a given set of numbers. 7, 6, 5, 9, 8","output":"def find_maximum(nums): # Initialize the maximum number max_num = nums[0] # Loop through the list for num in nums: # Check if the current number is bigger if num > max_num: # If it is, save the number max_num = num return max_num # call the function maximum = find_maximum(nums) print(\\"The maximum is \\" + str(maximum))"},{"instruction":"Create a Python program to calculate the average of a given list of integers while ignoring any values greater than 10. [1, 5, 9, 10, 12, 15]","output":"def average_ignoring_ten(numbers): total = 0 number_of_numbers = 0 for number in numbers: if number <= 10: total += number number_of_numbers += 1 return total / number_of_numbers"},{"instruction":"Create a python script to automatically generate new pseudorandom passwords.","output":"import string import random def generate_password(length): password_chars = string.ascii_letters + string.digits + string.punctuation return ''.join(random.choice(password_chars) for i in range(length)) print(generate_password(20))"},{"instruction":"The given code is a Python class called ScriptBase that contains several methods for performing various tasks. To use this code, create an instance of the ScriptBase class and call its methods as needed. The methods include: __init__: Initializes the ScriptBase object and sets its instance_id, name, and ts attributes. If a config_file is provided, it reads the configuration from that file. notify: Sends a notification with the given subject and body. mkdir: Creates a directory at the given path if it does not already exist. umount: Unmounts the given path if it is currently mounted. run: Executes the given command and returns its status. If notify is True, it sends a notification with the command output if the command fails. If exit_on_error is True, it exits the script with a status code of 1 if the command fails. main: A placeholder method that can be overridden in a subclass to define the main logic of the script.","output":"import os import sys from vulpo.utils import ShellCommand, get_ts import vulpo import vulpo.utils class ScriptBase(object): def __init__(self, config_file=None): self.instance_id = vulpo.config.get('Instance', 'instance-id', 'default') self.name = self.__class__.__name__ self.ts = get_ts() if config_file: vulpo.config.read(config_file) def notify(self, subject, body=''): vulpo.utils.notify(subject, body) def mkdir(self, path): if not os.path.isdir(path): try: os.mkdir(path) except: vulpo.log.error('Error creating directory: %s' % path) def umount(self, path): if os.path.ismount(path): self.run('umount %s' % path) def run(self, command, notify=True, exit_on_error=False, cwd=None): self.last_command = ShellCommand(command, cwd=cwd) if self.last_command.status != 0: vulpo.log.error('Error running command: \\"%s\\". Output: \\"%s\\"' % (command, self.last_command.output)) if notify: self.notify('Error encountered', 'Error running the following command:nt%snnCommand output:nt%s' % (command, self.last_command.output)) if exit_on_error: sys.exit(-1) return self.last_command.status def main(self): pass"},{"instruction":"Create a script in Python that calculates the average length of a given list of strings list_of_strings = [cat, dog, mouse, elephant]","output":"def calculate_avg_string_length(string_list): total_length = 0 for item in string_list: total_length += len(item) return total_length / len(string_list) list_of_strings = [\\"cat\\", \\"dog\\", \\"mouse\\", \\"elephant\\"] result = calculate_avg_string_length(list_of_strings) print(result)"},{"instruction":"Can you develop a python script to classify the sentiment of the following tweet as either positive, negative, or neutral? I'm so confused about everything I'm going through right now","output":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def classify_sentiment(tweet): sid = SentimentIntensityAnalyzer() scores = sid.polarity_scores(tweet) if scores['compound'] > 0: return 'positive' elif scores['compound'] == 0: return 'neutral' else: return 'negative' tweet = \\"I'm so confused about everything I'm going through right now\\" sentiment = classify_sentiment(tweet) print(sentiment) # prints 'negative'"},{"instruction":"Create a class in Python to represent a student. This class should contain fields for name, age, and a list of subjects taken. Not applicable","output":"class Student: def __init__(self, name, age, subjects): self.name = name self.age = age self.subjects = subjects def getName(self): return self.name def getAge(self): return self.age def getSubjects(self): return self.subjects"},{"instruction":"Develop a neural network model in Python to predict the output for the folowwing input data. Inputs: [1, 0, 1] Output: 0","output":"import numpy as np from keras.layers import Dense from keras.models import Sequential # Prepare training data X = np.array([[1, 0, 1]]) y = np.array([0]) # Create model model = Sequential() model.add(Dense(3, input_dim=3, activation='relu')) model.add(Dense(1, activation='sigmoid')) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(X, y) # Predict output pred = model.predict(X) print(pred)"},{"instruction":"Can you create a program in Python that prints out the number of syllables of a given word? word = potato","output":"import re def get_num_syllables(word): #list of vowel characters vowels = ['a', 'e', 'i', 'o', 'u', 'y'] #count the number of syllables num_syllables = 0 for i in range(len(word)): if word[i].lower() in vowels: num_syllables += 1 #don't double count syllables elif word[i] == 'e' and (i == len(word)-1 or not word[i+1].lower() in vowels): num_syllables -= 1 return num_syllables word = \\"potato\\" num_syllables = get_num_syllables(word) print(\\"The word '\\" + word + \\"' has \\" + str(num_syllables) + \\" syllables.\\")"},{"instruction":"Write a python program to invert a given dictionary.","output":"def invert_dictionary(d): inverse = dict() for key in d: # Go through the original dictionary val = d[key] # Check if key already exists in the inverse dictionary if val not in inverse: # If not, create a new key-value pair inverse[val] = [key] else: inverse[val].append(key) return inverse"},{"instruction":"Create a dictionary in python from a commaseparated value string. s = name,age,city,country","output":"def csv_to_dict(s): data_dict = {} # split the string into list of elements elements = s.split(',') # iterate through the list for i in range(0, len(elements), 2): # add each element as a key to the dictionary data_dict[elements[i]] = elements[i+1] # return the dictionary return data_dict"},{"instruction":"Write a Python code which will print out the number of words in a string. Example string","output":"def wordCount(str): count = len(str.split()) return count print(wordCount(\\"Example string\\")) # Output: 2"},{"instruction":"Generate the syntax tree for a given Python expression. expression = (A + B) * (C + D)","output":"import ast tree = ast.parse(expression)"},{"instruction":"Create a JSONbased web service using Python's Flask and SQLite. Not applicable","output":"from flask import Flask, jsonify from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite' db = SQLAlchemy(app) class User(db.Model): id = db.Column(db.Integer, primary_key=True) username = db.Column(db.String(80), unique=True, nullable=False) email = db.Column(db.String(120), unique=True, nullable=False) db.create_all() @app.route('/users', methods=['GET']) def get_users(): users = User.query.all() return jsonify([user.serialize() for user in users]) @app.route('/user/<int:user_id>', methods=['GET']) def get_user_by_id(user_id): user = User.query.get(user_id) if user is None: return jsonify({'error': 'User not found'}), 404 return jsonify(user.serialize()) if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Use Amazon SageMaker to create a productionready model for realtime analytics of stock price data. Not applicable","output":"# Create a data processing job import boto3 job_name = \\"sagemaker-demo-stock-price-job\\" role = \\"arn:aws:iam::aws:role/service-role/AmazonSageMaker-ExecutionRole-20200720T202051\\" dataprocessing = boto3.client('sagemaker') response = dataprocessing.create_processing_job( ProcessingInputs=[{ 'InputName': 'stock_data', 'S3Input': { 'S3Uri': 's3://stock-data-bucket/data', 'LocalPath': '/opt/ml/processing/input' } }], ProcessingOutputConfig={ 'Outputs': [{ 'OutputName': 'stock_data_processed', 'S3Output': { 'S3Uri': 's3://stock-data-bucket/processed-data', 'LocalPath': '/opt/ml/processing/output' } }], 'KmsKeyId': 'aws/sagemaker' }, ProcessingJobName=job_name, ProcessingResources={ 'ClusterConfig': { 'InstanceCount': 1, 'InstanceType': 'ml.m5.xlarge', 'VolumeSizeInGB': 30 } }, StoppingCondition={ 'MaxRuntimeInSeconds': 1800 }, AppSpecification={ 'ImageUri': '732703918919.dkr.ecr.us-east-1.amazonaws.com/sagemaker-stock-price-model:1.0.0', 'ContainerEntrypoint': [ 'python3', '/opt/ml/processing/train.py' ] }, Environment={ 'MaxRuntimeInSeconds': 1800, 'ResourceConfig': { 'VolumeKmsKeyId': 'aws/sagemaker' } }, RoleArn=role )"},{"instruction":"Design a chatbot agent in Python.","output":"class Chatbot: def __init__(self, name): self.name = name def greet(self): print(\\"Hey there! I'm {}. What's your name?\\".format(self.name)) def handle_input(self, user_input): if user_input == \\"Hi\\": print(\\"Hi there! What can I do for you?\\") elif user_input == \\"Bye\\": print(\\"Bye! Have a great day!\\") else: print(\\"I'm sorry, I don't understand.\\") bot = Chatbot(\\"Python Bot\\") bot.greet() bot.handle_input(\\"Hi\\") bot.handle_input(\\"Bye\\")"},{"instruction":"Clean the following dataset using Python to remove any irrelevant entries. data = [ [1, 'John', 'Apple'], [2, 'Allan', ''], [3, 'Kim', 'Orange'], [4, '', 'Banana'], [5, 'Sam', 'Kiwi'] ]","output":"def clean_data(data): cleaned_data = [] for row in data: if row[1] != '' and row[2] != '': cleaned_data.append(row) return cleaned_data"},{"instruction":"Generate a function to calculate the greatest common factor (GCF) of two numbers in Python. Not applicable","output":"def gcf(a, b): if (a == 0): return b if (b == 0): return a if (a == b): return a if (a > b): return gcf(a-b, b) return gcf(a, b-a)"},{"instruction":"Write a function in Python that finds the most frequent item in a given sequence. sequence = [1, 2, 3, 4, 5, 1, 1, 2]","output":"def most_frequent(sequence): return max(set(sequence), key = sequence.count) print(most_frequent(sequence))"},{"instruction":"Write a Python program to sort a given list of dictionaries based on the value and key of each item. data = [ {name: John, age: 20}, {name: Alex, age: 16}, {name: David, age: 30} ]","output":"def sort_dict_list(data): \\"\\"\\" Sort a list of dictionaries based on their values and keys. Parameters: data (list): List of dictionaries with key and value Returns: list: Sorted list of dictionaries \\"\\"\\" return sorted(data, key=lambda k: (k['name'], k['age'])) if __name__ == '__main__': data = [ {\\"name\\": \\"John\\", \\"age\\": 20}, {\\"name\\": \\"Alex\\", \\"age\\": 16}, {\\"name\\": \\"David\\", \\"age\\": 30} ] print(sort_dict_list(data))"},{"instruction":"Optimize this Python code for finding the maximum value in an array. def find_max(arr): max_value = 0 for x in arr: if x > max_value: max_value = x return max_value","output":"def find_max(arr): return max(arr)"},{"instruction":"Create a Python script to retrieve stock market data from an API and visualize it. Stock market data for Apple","output":"import requests import json import matplotlib.pyplot as plt # Fetch stock data from the API response = requests.get('https://api.iextrading.com/1.0/stock/{symbol}/chart/1d') # Parse the data into a dict data = json.loads(response.text) x_values = [entry['minute'] for entry in data] y_values = [entry['average'] for entry in data] # Plot the data plt.plot(x_values, y_values) plt.title('Stock Market Data for Apple') plt.xlabel('Time (minutes)') plt.ylabel('Average Price') plt.show()"},{"instruction":"Convert the given equation in Python to a mathematical expression. x = y + 2z 7","output":"x = y + 2*z - 7"},{"instruction":"Create a Python program to write a string in Reverse order This is a Test string","output":"def reverse_string(input_string): str = \\"\\" for i in input_string: str = i + str return str if __name__ == \\"__main__\\": input_string = \\"This is a Test string\\" print(reverse_string(input_string))"},{"instruction":"Create a python script which replaces each letter in a string by the letter which appears n positions after it. string = abcdef n = 2","output":"def replace_letter(string, n): result = \\"\\" for char in string: if char == 'z': result += 'b' elif char == 'Z': result += 'B' else: result += chr(ord(char) + n) return result"},{"instruction":"Create a Python function that generates random points within a given area of a circle. center=(4, 4), radius=3","output":"import random import math def get_random_points_in_circle(center, radius): points = [] x_center, y_center = center while True: x = random.uniform(x_center - radius, x_center + radius) y = random.uniform(y_center - radius, y_center + radius) dist = math.sqrt((x - x_center) ** 2 + (y - y_center) ** 2) if dist <= radius: points.append((x, y)) if len(points) >= 10: break return points if __name__ == \\"__main__\\": points = get_random_points_in_circle((4, 4), 3) print(points)"},{"instruction":"Create a Python script to parse a JSON string from a web request. The script should parse the string and print keyvalue pairs for each item in the JSON. { data: [ { id: 1, name: John Doe, age: 28 }, { id: 2, name: Jane Doe, age: 23 } ] }","output":"import json # parse json file data = json.loads(<input>) # print key-value pairs for each item in json string for item in data['data']: print('ID:', item['id']) print('Name:', item['name']) print('Age:', item['age'])"},{"instruction":"Design a program in Python to encrypt data using AES algorithm","output":"from Crypto.Cipher import AES # the block size for the cipher object; must be 16, 24, or 32 for AES BLOCK_SIZE = 16 # the character used for padding--with a block cipher such as AES, the value # you encrypt must be a multiple of BLOCK_SIZE in length. This character is # used to ensure that your value is always a multiple of BLOCK_SIZE PADDING = '{' # one-liner to sufficiently pad the text to be encrypted pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING # one-liners to encrypt/encode and decrypt/decode a string # encrypt with AES, encode with base64 EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s))) DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING) # generate a random secret key secret = os.urandom(BLOCK_SIZE) # create a cipher object using the random secret cipher = AES.new(secret)"},{"instruction":"Generate a Python class with a constructor that initializes two variables a list and a dictionary.","output":"class MyClass: def __init__(self): self.list = [] self.dictionary = {}"},{"instruction":"Generate a complete REST API using Python and Flask that can operate on a simple item model. Input fields for item model: id (integer, primary key) name (string) colour (string) price (integer)","output":"from flask import Flask, request from flask_sqlalchemy import SQLAlchemy app = Flask(name) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' db = SQLAlchemy(app) class Item(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String) colour = db.Column(db.String) price = db.Column(db.Integer) db.create_all() @app.route('/items', methods=['POST']) def create_item(): item = Item(name=request.json['name'], colour=request.json['colour'], price=request.json['price']) db.session.add(item) db.session.commit() return {'id': item.id} @app.route('/items/int:id', methods=['GET']) def get_item(id): item = Item.query.get(id) return {'name': item.name, 'colour': item.colour, 'price': item.price} @app.route('/items/int:id', methods=['PUT']) def update_item(id): item = Item.query.get(id) item.name = request.json['name'] item.colour = request.json['colour'] item.price = request.json['price'] db.session.commit() return {'message': 'Item updated'} @app.route('/items', methods=['GET']) def get_items(): items = Item.query.all() return {'items': [{'name': item.name, 'colour': item.colour, 'price': item.price} for item in items]} @app.route('/items/int:id', methods=['DELETE']) def delete_item(id): Item.query.filter_by(id=id).delete() db.session.commit() return {'message': 'Item deleted'} if name == 'main': app.run(debug=True)"},{"instruction":"Generate a python program to swap the first and last element of a list list_of_numbers = [4, 5, 7, 8, 6]","output":"def swap(list_of_numbers): list_of_numbers[0], list_of_numbers[-1] = list_of_numbers[-1], list_of_numbers[0] return list_of_numbers"},{"instruction":"Produce a program in Python to search for an element in a list [2, 3, 4, 5, 6]","output":"# function to search an element # in a list def linear_search(list, x): for index, element in enumerate(list): if element == x: return index return -1"},{"instruction":"Explain the concept of Lambda functions in Python.","output":"Lambda functions in Python allow us to create anonymous functions, which are functions that are not bound to a name. These functions are typically used when we need a quick function for a specific task, and do not plan to reuse it. Lambda functions can take any number of arguments, but can only have one expression. The expression is then evaluated and the result is returned. Lambda functions are typically written in a single line and are often used with higher order functions like map(), filter() and reduce()."},{"instruction":"Optimize the given Python code to reduce execution time def calculate_sum(numbers): result = 0 for number in numbers: result += number return result numbers = [1, 2, 3, 4, 5] calculate_sum(numbers)","output":"def calculate_sum(numbers): return sum(numbers) numbers = [1, 2, 3, 4, 5] calculate_sum(numbers)"},{"instruction":"Create a Python function that takes a string and finds the longest word in it. str = I love learning new things","output":"def findLongestWord(string): # Split the string into an array of words words = string.split(\\" \\") # Initialize the longest word as empty string longestWord = \\"\\" # Iterate over the words and keep track of the longest one for word in words: if len(word) > len(longestWord): longestWord = word # Return the longest word return longestWord # Test string = \\"I love learning new things\\" longestWord = findLongestWord(string) print(\\"Longest word is \\" + longestWord)"},{"instruction":"Create a Python program to find the minimum element in a BST. Tree in the form of: 4 2 7 1 3 6 8","output":"def minValue(root): if root is None: # check if tree is empty return -1 curr = root while curr.left: # until we reach the leftmost leaf curr = curr.left return curr.data # Driver Program if __name__ == '__main__': root = Node(4) root.left = Node(2) root.right = Node(7) root.left.left = Node(1) root.left.right = Node(3) root.right.left = Node(6) root.right.right = Node(8) print \\"Minimum Element in BST is %d\\" %(minValue(root))"},{"instruction":"Create a Python program to identify most frequent value Identify the most frequent element in the array [1, 2, 2, 3, 3, 3, 4].","output":"def identify_most_frequent_value(arr): counts = {} # count the occurrence of each element for num in arr: if num in counts: counts[num] += 1 else: counts[num] = 1 # find the most frequent element max_freq = 0 max_freq_num = 0 for num in counts: if counts[num] > max_freq: max_freq_num = num max_freq = counts[num] return max_freq_num"},{"instruction":"Develop a Python script to print the current date and time in ISO 8601 format.","output":"import datetime # Get current datetime now = datetime.datetime.now() # Print the current datetime in ISO 8601 format print(now.isoformat())"},{"instruction":"Can you create a web scraper in Python to extract the titles of articles from a newspaper website? http://example.com/newspaper","output":"import requests from bs4 import BeautifulSoup url = \\"http://example.com/newspaper\\" # fetch data from the given URL r = requests.get(url) # create a BeautifulSoup object soup = BeautifulSoup(r.content, \\"lxml\\") # extract the title of all articles for article_title in soup.find_all('h3', class_='title'): print(article_title.text)"},{"instruction":"Write a Python program to generate the powerset of a given set. [1, 2, 3]","output":"def powerset(s): x = len(s) powerset = [] for i in range(1 << x): subset = [s[j] for j in range(x) if (i & (1 << j))] powerset.append(subset) return powerset"},{"instruction":"Create a virtual environment in Python using Pipenv.","output":"pip install pipenv pipenv install pipenv shell"},{"instruction":"Edit the existing Python code to make the program more efficient. def sum_array(array): total = 0 for element in array: total += element return total","output":"def sum_array(array): total = 0 for element in array: total = total + element return total"},{"instruction":"Python, generate a function that takes two arguments (a list and a number) and prints out the first two elements of the list that have a length greater than the second argument. list_of_words = ['apple', 'banana', 'carrot', 'durian'] integer = 4","output":"def print_long_words(list_of_words, integer): long_words = [] for word in list_of_words: if len(word) > integer: long_words.append(word) if len(long_words)>1: print(long_words[0], long_words[1]) else: print('No words found with length greater than ', integer)"},{"instruction":"Rewrite a Python function given a few specific requirements. def is_prime(n): if n < 2: return False for i in range(2, n): if n % i == 0: return False return True","output":"def is_prime(n): if n < 2: return False elif n == 2: return True elif n > 2 and n % 2 == 0: return False for i in range(3, int(n**0.5)+1, 2): if n % i == 0: return False return True"},{"instruction":"Create a Python program to automatically delete any repeated words from a given text. The cat was was running running in the park","output":"text = \\"The cat was running in the park\\" words = text.split(' ') unique_words = [] for word in words: if word not in unique_words: unique_words.append(word) print(' '.join(unique_words))"},{"instruction":"Write a Python program that implements a dataset augmentation technique to increase the size of a given dataset. Sample Dataset (Python nested lists): [ [1,1,1], [2,2,2], [3,3,3], [4,4,4] ]","output":"import random sample_dataset = [ [1,1,1], [2,2,2], [3,3,3], [4,4,4] ] def data_augmentation(dataset): augmented_dataset = [] for data in dataset: augmented_row = list(data) augmented_row.append(random.randint(-1,1)) augmented_dataset.append(augmented_row) return augmented_dataset augmented_dataset = data_augmentation(sample_dataset) print('Sample dataset:') print(sample_dataset) print('Augmented dataset:') print(augmented_dataset)"},{"instruction":"Create a class in Python that models a charging station.","output":"class ChargingStation: def __init__(self, id, description, max_charge): self.id = id self.description = description self.max_charge = max_charge def check_status(self): if self.max_charge > 0: return \\"Charging station is available\\" else: return \\"Charging station is not available\\""},{"instruction":"Can you provide a Python program to generate a random integer within the range of 1 to 100?","output":"import random def random_int_between_1_and_100(): return random.randint(1, 100)"},{"instruction":"Create a kNearest Neighbors (kNN) classifier in Python to predict whether an individual earns more or less than 50,000 per year. [[44, 'M', 17, 0, 0, 'high school', 44000], [38, 'M', 9, 4, 0, 'Bachelor's degree', 55000], [30, 'F', 12, 2, 0, 'Master's degree', 48000]]","output":"import numpy as np class KNNClassifier: def __init__(self, k): self.k = k def fit(self, X, y): self.X_train = X self.y_train = y def predict(self, X): predictions = [] for row in X: distances = [] for train_row in self.X_train: distances.append(np.linalg.norm(row - train_row)) sorted_distances = np.argsort(distances) top_k_distances = sorted_distances[:self.k] top_k_labels = [self.y_train[i] for i in top_k_distances] label_counts = {} for label in top_k_labels: label_counts[label] = label_counts.get(label, 0) + 1 sorted_label_counts = sorted(label_counts.items(), key = lambda x: x[1], reverse=True) predictions.append(sorted_label_counts[0][0]) return predictions"},{"instruction":"Write an invitation program in Python for a birthday party.","output":"def invite_guests(guests): for guest in guests: print(\\"Dear \\"+ guest + \\", You are invited to my birthday party!\\")"},{"instruction":"Create a Python Flask application that takes a user input and generates a new text from the input. Alice was once a a little girl living","output":"from flask import Flask app = Flask(__name__) @app.route('/', methods=['POST']) def generate_newtext(): input_text = request.form.get('input_text') new_text = input_text + \\" She had wonderful adventures exploring the world around her and filled her days with joy.\\" return new_text if __name__ == '__main__': app.run()"},{"instruction":"Write a Python program to implement an algebraic equation. Equation: 3x2 + 7x 4","output":"def evaluate_eq(x): return 3*x*x + 7*x - 4"},{"instruction":"Write a Python program to count words in a sentence. The program should take in a sentence as input and return a dictionary with the words as the keys and the frequencies as the values. Sentence: “The quick brown fox jumps over the lazy dog”","output":"sentence = \\"The quick brown fox jumps over the lazy dog\\" word_freq = {} for word in sentence.split(): if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 print(word_freq)"},{"instruction":"dentify the issue with the following Python code snippet. list1 = [1, 2, 3] list2 = [4, 5, 6] list3 = list1 + list2","output":"The issue with the code snippet is that the two lists are not being concatenated, but instead being added together, resulting in a list containing the sums of the corresponding elements in the two lists. The correct code snippet should be as following: list1 = [1, 2, 3] list2 = [4, 5, 6] list3 = list1 + list2"},{"instruction":"Use regex to match a valid email address in python","output":"import re EMAIL_REGEX = re.compile(r\\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+)\\") def is_email_valid(email): return EMAIL_REGEX.match(email) != None"},{"instruction":"Create a Python script that extracts a 3x3 submatrix from a 3x5 matrix. [[1, 2, 3, 4, 5], [6, 7, 8, 9, 0], [1, 2, 3, 4, 5]]","output":"matrix = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 0], [1, 2, 3, 4, 5]] submatrix = [[matrix[0][0], matrix[0][1], matrix[0][2]], [matrix[1][0], matrix[1][1], matrix[1][2]], [matrix[2][0], matrix[2][1], matrix[2][2]]] print(submatrix)"},{"instruction":"Suggest an approach to solve a Sudoku using Python.","output":"def solve_sudoku(board): find = find_empty_location(board) if not find: return True else: row, col = find for i in range(1,10): if is_valid(board, i, (row, col)): board[row][col] = i if solve_sudoku(board): return True # Undo the current cell for backtracking board[row][col] = 0 return False"},{"instruction":"Develop a Python program that plays all the notes of a particular key (say F Sharp Major)","output":"def play_f_sharp_major(): key_notes = ['F#', 'G#', 'A', 'A#', 'B', 'C#', 'D#'] for note in key_notes: play_note(note)"},{"instruction":"Create a data analysis solution using Python and Pandas. The CSV file has three columns: Country, Population, and Are","output":"import pandas as pd # Read in the CSV file df = pd.read_csv(\\"data.csv\\") # Calculate population density df['Density'] = df['Population'] / df['Area'] # Print the density of the first 5 countries print(df.head()['Density'])"},{"instruction":"Create a function in Python to calculate the length of the longest palindrome in a given string. String: abbaacb","output":"def longest_palindrome(text): n = len(text) result = 0 dp = [[False] * (n + 1) for _ in range(n + 1)] for l in range(1, n + 1): for i in range(n - l + 1): j = i + l - 1 if l == 1: dp[i][j] = True elif l == 2 and text[i] == text[j]: dp[i][j] = True elif text[i] == text[j] and dp[i + 1][j - 1]: dp[i][j] = True if dp[i][j] and l > result: result = l return result text = 'abbaacba' print(longest_palindrome(text))"},{"instruction":"Construct an algorithm in Python to find the deepest node in a binary tree.","output":"def find_deepest_node(root): if root is None: return queue = [] queue.append(root) deepest_node = None while queue: node = queue.pop(0) deepest_node = node if node.left: queue.append(node.left) if node.right: queue.append(node.right) return deepest_node"},{"instruction":"Create a neural network in Python for handwritten digit recognition using the MNIST dataset.","output":"import tensorflow as tf from tensorflow.examples.tutorials.mnist import input_data # Load the MNIST dataset mnist = input_data.read_data_sets(\\"MNIST_data/\\", one_hot=True) # Inputs and Outputs x = tf.placeholder(tf.float32, [None, 784]) y_ = tf.placeholder(tf.float32, [None, 10]) # Neural Network Model W = tf.Variable(tf.zeros([784, 10])) b = tf.Variable(tf.zeros([10])) # Softmax Output y = tf.nn.softmax(tf.matmul(x, W) + b) # Cost Function cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1])) # Training train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy) init = tf.initialize_all_variables() sess = tf.Session() sess.run(init) # Train for i in range(10000): batch_xs, batch_ys = mnist.train.next_batch(100) sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys}) # Test correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1)) accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) print(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))"},{"instruction":"Modify the following Python code to remove any duplicate elements in an array. myList = [1, 2, 3, 2, 1]","output":"myList = list(set(myList))"},{"instruction":"Generate a Python program that determines whether a given array is a palindrome or not. [3,2,1,1,2,3]","output":"def is_palindrome(arr): if arr == arr[::-1]: return True return False result = is_palindrome([3, 2, 1, 1, 2, 3]) print(result) # Output: True"},{"instruction":"Write a class definition in python that will initialize an object of the class with given parameters name, age","output":"class Person: def __init__(self, name, age): self.name = name self.age = age"},{"instruction":"Construct a Python program to encrypt a given text using the Caesar cipher. text = “Hello World!” key = 2","output":"def caesar_encrypt(text, key): encrypted = \\"\\" for char in text: if char.isalpha(): if char.isupper(): encrypted += chr((ord(char) + key - 65) % 26 + 65) else: encrypted += chr((ord(char) + key - 97) % 26 + 97) else: encrypted += char return encrypted text = \\"Hello World!\\" key = 2 encrypted_text = caesar_encrypt(text, key) print(encrypted_text) #Hfnnq Yqgfgt!"},{"instruction":"Design a Python script to insert a given string at the beginning and end of a given array. [hello, world], ***","output":"def insertBeginningAndEnd(arr, str): result = [] for element in arr: result.append(str + element + str) return result result = insertBeginningAndEnd([\\"hello\\", \\"world\\"], \\"***\\") print(result)"},{"instruction":"Write a Python program to collect data from an API and store the data in a SQL database. import requests url = 'http://some_api.com/resource1/?format=json'","output":"import sqlite3 import requests # Connect to the database db = sqlite3.connect('api_data.db') # Create the statement stmt = 'INSERT INTO api_data (data) VALUES (?)' # Collect and save the data data = requests.get(url).json() db.execute(stmt, (data,)) db.commit() db.close()"},{"instruction":"mplement a regression algorithm in Python to predict housing prices. Not applicable","output":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression # Load the data data = pd.read_csv('data.csv') # Define the inputs and labels X = data[['square_feet', 'beds', 'baths']] y = data['price'] # Create and train the model model = LinearRegression() model.fit(X, y) # Test the model predictions = model.predict(X)"},{"instruction":"mplement an algorithm in Python to calculate the Fibonacci sequence.","output":"def Fibonacci(x): if x <= 0: return 0 elif x == 1: return 1 else: return Fibonacci(x-1) + Fibonacci(x-2)"},{"instruction":"Create a feature for a Python script to generate random passwords. The script should produce secure passwords between 8 to 12 characters using a combination of lowercase, uppercase, numeric, and special characters. Not applicable","output":"import random import string def generate_password(length): chars = string.ascii_letters + string.digits + string.punctuation random.seed = (os.urandom(1024)) password = ''.join(random.choice(chars) for i in range(length)) return password password = generate_password(12)"},{"instruction":"Generate a Python function to return the elements of a given list in reverse order without using any library.","output":"def reverse_list(lst): reversed_list = [] for i in range(len(lst)-1, -1, -1): reversed_list.append(lst[i]) return reversed_list result = reverse_list([1,2,3,4,5]) print(result)"},{"instruction":"Generate a function in Python to calculate the value of an employee’s paycheck given the hours worked and the hourly rate.","output":"def calc_paycheck(hours_worked, hourly_rate): return hours_worked * hourly_rate"},{"instruction":"Create a Python program to mark a character as asterisk (*) if it's the same as the previous one? test_string = SSSSSSSSSShellllllllllllooooooooo","output":"def mark_asterisk(input): res = \\"\\" temp = input[0] for char in input: if char == temp: res += '*' else: res += char temp = char return res"},{"instruction":"Optimize the following Python code to make it run faster. def is_prime(num): for i in range(2, num): if (number % i) == 0: return False return True","output":"def is_prime(num): if num < 2: return False if num == 2 or num == 3: return True i = 2 while i*i <= num: if (num % i) == 0: return False i += 1 return True"},{"instruction":"Create a data visualization in Python to represent the given dataset. Dataset contains information on 922 passengers from the Titanic, including age, gender and class.","output":"import matplotlib.pyplot as plt import seaborn as sns #Read in data titanic_data = pd.read_csv('titanic_data.csv') #Create a barplot for age ax = sns.countplot(x=\\"age\\", data=titanic_data) ax.set_title('Age Distribution of Titanic Passengers') ax.set_ylabel('Number of Passengers') ax.set_xlabel('Age') plt.show()"},{"instruction":"Create a Python function that takes inputs in the form of two words and returns the start index of the second word in the first word. Word1 = Mountain ,Word2 = tain","output":"def index_of_word(w1, w2): pos = 0 for i in w1: if w1.find(w2,pos) > -1: return w1.find(w2,pos) pos +=1 return -1"},{"instruction":"Simplify and optimize the following Python code for computing the mean of a list of numbers. def mean(numbers): total = 0 for n in numbers: total = total + n return total / len(numbers)","output":"def mean(numbers): return sum(numbers) / len(numbers)"},{"instruction":"Design a class in Python to store value pairs.","output":"class ValuePair(): def __init__(self, key, value): self.key = key self.value = value def get_key(self): return self.key def get_value(self): return self.value"},{"instruction":"Write a Python program to convert a given date in the format mm/dd/yyyy to its equivalent day of the week.","output":"import datetime date_string = input(\\"Enter date in mm/dd/yyyy format:\\") date = datetime.datetime.strptime(date_string, \\"%m/%d/%Y\\") weekday = date.strftime(\\"%A\\") print(\\"The day for the date\\",date_string,\\"is\\",weekday)"},{"instruction":"mplement a sorting algorithm in Python to sort letters of an alphabet.","output":"def alphabet_sort(string): # Split the string into a list of chars chars = list(string) # Sort the list alphabetically chars.sort() # Join the list of chars return \\"\\".join(chars)"},{"instruction":"Create a Python program that takes a string as input and returns its top 3 most frequent characters","output":"def most_frequent_chars(s): d = {} for i in s: if i not in d: d[i] = 0 d[i]+=1 d = sorted(d.items(),key = lambda x:x[1], reverse=True) return [k for k ,v in d[:3]]"},{"instruction":"Create a library in Python to generate Fibonacci numbers.","output":"We can create a library in Python to generate Fibonacci numbers. We can define a function that takes in the numbers of Fibonacci numbers to generate as an argument and returns a list of Fibonacci numbers. The function can maintain a cache of previously generated Fibonacci numbers to reduce computation time."},{"instruction":"Create a \`GenericScalar\` class that represents a GraphQL scalar value that could be a String, Boolean, Int, Float, List or Object. Implement the \`identity\` method that returns the input value, \`serialize\` and \`parse_value\` methods that also return the input value, and the \`parse_literal\` method that parses the input AST and returns the corresponding Python value.","output":"from __future__ import unicode_literals from graphql.language.ast import (BooleanValue, FloatValue, IntValue, StringValue, ListValue, ObjectValue) from graphene.types.scalars import MIN_INT, MAX_INT from .scalars import Scalar class GenericScalar(Scalar): \\"\\"\\" The \`GenericScalar\` scalar type represents a generic GraphQL scalar value that could be: String, Boolean, Int, Float, List or Object. \\"\\"\\" @staticmethod def identity(value): return value serialize = identity parse_value = identity @staticmethod def parse_literal(ast): if isinstance(ast, (StringValue, BooleanValue)): return ast.value elif isinstance(ast, IntValue): num = int(ast.value) if MIN_INT <= num <= MAX_INT: return num elif isinstance(ast, FloatValue): return float(ast.value) elif isinstance(ast, ListValue): return [GenericScalar.parse_literal(value) for value in ast.values] elif isinstance(ast, ObjectValue): return {field.name.value: GenericScalar.parse_literal(field.value) for field in ast.fields} else: return None"},{"instruction":"Write a Python program to optimize an array of integers to produce the greatest possible sum. [5, 3, 8, 10]","output":"def optimize_sum(arr): n = len(arr) dp =[[0 for x in range(n)] for x in range(n)] # initialize base cases for i in range(n): dp[i][i] = arr[i] # Fill entries in dp[][] from bottom to top for start in range(n-2, -1, -1): for end in range(start + 1, n): dp[start][end] = max(arr[start] + min(dp[start + 1][end - 1], dp[start + 2][end]), arr[end] + min(dp[start][end - 2], dp[start + 1][end - 1])) return dp[0][n - 1] # Driver code arr = [5, 3, 8, 10] n = len(arr) print (optimize_sum(arr))"},{"instruction":"Generate a code snippet to get an item stored in a Python dictionary using the key. Not applicable","output":"#Getting the value of the 'name' key from the dictionary dict = {'name':'John', 'age': 30, 'city':'New York'} value = dict['name'] #Printing the value print(value)"},{"instruction":"Create a Python function to sort a list of strings alphabetically. my_list = [apple, orange, banana]","output":"def sort_list(list): list.sort() return list sort_list(my_list)"},{"instruction":"Can you program a web scraper in Python to extract specific data from a website?","output":"import requests from bs4 import BeautifulSoup url = \\"example.com\\" response = requests.get(url) html = response.text soup = BeautifulSoup(html, \\"html.parser\\") data = soup.find_all(class_=\\"data-class\\") for item in data: # Extract the data you need here # ..."},{"instruction":"Design a neural network in Python to predict if a stock price will rise or fall in the next 10 days.","output":"import tensorflow as tf # Define the model model = tf.keras.Sequential([ tf.keras.layers.Dense(128, activation='relu', input_shape=(5,)), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(2, activation='softmax') ]) # Compile the model model.compile( optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'] )"},{"instruction":"Write a Python program that uses natural language processing to classify the sentiment of a given sentence.","output":"import nltk import numpy as np from nltk.sentiment.vader import SentimentIntensityAnalyzer # Download relevant NLTK packages nltk.download('vader_lexicon') # Initialize Sentiment Analyzer sentiment_analyzer = SentimentIntensityAnalyzer() # Take input from user sentence = input(\\"Enter a sentence to be analyzed: \\") # Calculate sentiment sentiment = sentiment_analyzer.polarity_scores(sentence) # Output sentiment if sentiment['compound'] > 0.2: print(\\"Positive sentiment\\") elif sentiment['compound'] < -0.2: print(\\"Negative sentiment\\") else: print(\\"Neutral sentiment\\")"},{"instruction":"Create a Python script using the twittertextpython library that takes a tweet as input and returns the text of the tweet with all the hashtags and URLs converted to their original versions. Input tweet: Such a great #day today! Check out this link: http://example.com #cool","output":"import twitter_text tweet_text = 'Such a great #day today! Check out this link: http://example.com #cool' parsed_tweet = twitter_text.Parser(tweet_text).parse() # Print the plain text of the tweet print(parsed_tweet.plain_text) # Output: Such a great day today! Check out this link: http://example.com cool"},{"instruction":"Optimize an existing Python function to reverse a string. This function should take a string as input and return the reversed string. 'Hello World!'","output":"def reverse_string(input): return input[::-1]"},{"instruction":"Develop a Python program that uses a series of ifelifelse statements to act on the input data Input a string and the program should convert it to uppercase letters.","output":"def convert_to_uppercase(data): if type(data)==str: return data.upper() else: print(\\"Input must be a string\\")"},{"instruction":"Write a Python code to encode a given string using the Caesar cipher. string = Hello World","output":"def caesar_encrypt(string, shift_amount): encrypted_string = \\"\\" for i in range(len(string)): char = string[i] x = ord(char) + shift_amount encrypted_string += chr(x) return encrypted_string encoded_string = caesar_encrypt(string, 3) print(encoded_string) // Output: Khoor Zruog"},{"instruction":"Can you create a Python program to sort the values in a dictionary by their keys? {'Shiva': 23, 'Rohan': 12, 'Amit': 79}","output":"d = {'Shiva': 23, 'Rohan': 12, 'Amit': 79} sorted_dict = dict(sorted(d.items(), key = lambda x : x[0])) print(\\"Sorted Dictionary :\\", sorted_dict)"},{"instruction":"Create a neural network in Python to classify the sexes of animals using their heights. Not applicable","output":"import numpy as np from sklearn.datasets import make_blobs from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler import keras from keras.models import Sequential from keras.layers import Dense # Generate some fake data X, y = make_blobs(n_samples=100, n_features=2, centers=2, random_state=1) X, y = np.hstack((X, y[:, np.newaxis])), y # Split data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1) # Scale the data scaler = StandardScaler() X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) # Build the model model = Sequential() model.add(Dense(4, activation='relu', input_shape=(3,))) model.add(Dense(4, activation='relu')) model.add(Dense(1, activation='sigmoid')) # Compile the model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) # Train the model model.fit(X_train_scaled, y_train, epochs=20, verbose=0) # Evaluate the model test_loss, test_acc = model.evaluate(X_test_scaled, y_test, verbose=0) print('test acc:', test_acc)"},{"instruction":"mplement a distributed system in Python that can incrementally process a large input stream of data.","output":"#define MAX_NODES 10 def process_data(data): # process the data def incrementally_process_data(stream, num_nodes): # validate number of nodes if num_nodes > MAX_NODES: return # create nodes nodes = [] for _ in range(num_nodes): nodes.append(mp.Process(target=process_data, args=(data,))) # start nodes for node in nodes: node.start() # process stream for chunk in stream: for node in nodes: node.send(chunk) # join nodes for node in nodes: node.join()"},{"instruction":"Create an optimized web crawler using Python to explore a given website. Website Url: https://www.example.com","output":"import requests from bs4 import BeautifulSoup # define the URL to crawl url = 'https://www.example.com' # make an HTTP request to the given URL response = requests.get(url) # print a message to indicate the request type print(f'Crawling {url}') # parse the response and extract the HTML html = BeautifulSoup(response.text, 'html.parser') # define a list to store the URLs links = [] # traverse the HTML page and find all 'a' tags for link in html.find_all('a'): # extract the 'href' value for each 'a' tag links.append(link.get('href')) # print the list of urls for the web page print('n'.join(links))"},{"instruction":"Generate a function in Python to get the most frequent element in an array. [1, 15, 6, 1, 6, 15]","output":"def most_frequent(arr): max_count = -1 max_elem = -1 count_dict = {} for ele in arr: if ele in count_dict: count_dict[ele] += 1 else: count_dict[ele] = 1 if count_dict[ele] > max_count: max_count = count_dict[ele] max_elem = ele return max_elem"},{"instruction":"Write a python function for calculating the factorial of a given number.","output":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"instruction":"Write a python program to check if a given number is prime or not. 27","output":"def is_prime(num): for i in range(2, num): if (num % i) == 0: return False return True number = 27 if is_prime(number): print(str(number) + ' is a prime number.') else: print(str(number) + ' is not a prime number.')"},{"instruction":"Create a function in Python that takes a list of words as an argument and returns a new list without duplicates. ['apple', 'banana', 'apple', 'orange']","output":"def remove_duplicates(words): seen = set() unique_words = [] for word in words: if word not in seen: seen.add(word) unique_words.append(word) return unique_words arr = ['apple', 'banana', 'apple', 'orange'] result = remove_duplicates(arr) print(result)"},{"instruction":"Code a python program to simulate a dice roll","output":"\\"\\"\\" Simulate a dice roll with Python \\"\\"\\" import random def simulate_dice_roll(): dice_roll = random.randint(1, 6) return dice_roll if __name__ == '__main__': dice_roll = simulate_dice_roll() print(dice_roll)"},{"instruction":"Create a simple chatbot in Python to respond to the user's messages. The chatbot should have a limited range of responses and should be able to generate appropriate responses for the user's message. Not applicable","output":"def respond(message): bot_template = \\"I'm sorry, I don't understand. Could you try rephrasing that?\\" user_template = \\"USER: {message}nBOT: {response}\\" response = bot_template if 'hello' in message: response = \\"Hi! How can I help you?\\" print(user_template.format(message=message, response=response)) if __name__ == \\"__main__\\": respond(\\"Hello\\") respond(\\"I would like to purchase a phone\\")"},{"instruction":"Create a function in Python to detect cycles in a given linked list.","output":"def detect_cycle(head): slow_p = head fast_p = head while(slow_p and fast_p): slow_p = slow_p.next fast_p = fast_p.next.next if slow_p == fast_p: return True return False"},{"instruction":"Create a Python program to compare two words using edit distance. word1: hello word2: yellow","output":"def editDistance(word1, word2): m = len(word1) n = len(word2) # Create a matrix to store results of subproblems dp = [[0 for x in range(n+1)] for x in range(m+1)] # Fill dp[][] in bottom up manner for i in range(m+1): for j in range(n+1): # If first string is empty, only option is to # insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, only option is to # remove all characters of second string elif j == 0: dp[i][j] = i # If last characters are same, ignore last char # and recur for remaining string elif word1[i-1] == word2[j-1]: dp[i][j] = dp[i-1][j-1] # If last character are different, consider all # possibilities and find minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n] # Driver program word1 = \\"hello\\" word2 = \\"yellow\\" print( editDistance(word1, word2))"},{"instruction":"Generate a piece of code for raising an exception in Python.","output":"raise Exception(\\"This is an exception\\")"},{"instruction":"Create a Python program to generate the nth number in the Fibonacci series.","output":"def nth_fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return nth_fibonacci(n-1) + nth_fibonacci(n-2)"},{"instruction":"Write a Python program to generate all combinations of three given numbers. [1,2,3]","output":"def combinations(lst, n): # generate all the combinations # we use the itertools library to do this from itertools import combinations # generate all the combinations of length three combinations = list(combinations(lst, n)) # loop through all the combinations and print them for i in range(len(combinations)): print(combinations[i]) # call the function with the given list combinations([1,2,3], 3)"},{"instruction":"Generate a Python program that scores words based on their length shorter words should receive a higher score. Hello World!","output":"def score_by_length(s): score = 0 for word in s.split(): score += len(word)**(-1) return score print(score_by_length(\\"Hello World!\\")) # Output: 1.8333333333333335"},{"instruction":"Create a Python script to generate a list of prime numbers less than 1000. Not applicable","output":"# list of prime numbers primes = [] # loop over numbers 0 - 1000 for num in range(2,1000): # if current number is prime add to list if all(num % i != 0 for i in range(2,num)): primes.append(num) print(primes)"},{"instruction":"Create a class in Python that generates and prints a random string of 10 characters.","output":"import random class RandomString: def __init__(self): self.random_string = \\"\\" def generate_string(self): for i in range (10): self.random_string += chr(random.randint(65, 122)) return self.random_string def print_string(self): print(self.random_string) str1 = RandomString() str1.generate_string() str1.print_string()"},{"instruction":"Develop a loop in Python to generate a dictionary of all numbers below 1000 that are divisible by 7.","output":"d = {} for i in range(1000): if i % 7 == 0: d[i] = i print(d)"},{"instruction":"Write a python program to solve an 8puzzle problem. [2, 3, 7, 8, 0, 5, 6, 1, 4]","output":"def solve_8_puzzle(initial_state): # Create goal state goal_state = [1, 2, 3, 8, 0, 4, 7, 6, 5] # Dictionary to maintain visited states visited_states = {} state_list = [] state_list.append(initial_state) visited_states[tuple(initial_state)] = True # Create the nodes that need to be traversed while len(state_list) > 0: curr_state = state_list.pop(0) # If the goal is reached if curr_state == goal_state: return curr_state else: blank_position = curr_state.index(0) # Move up if blank_position <= 5: new_blank_position = blank_position + 3 new_state = list(curr_state) new_state[blank_position], new_state[new_blank_position] = new_state[new_blank_position], new_state[blank_position] if tuple(new_state) not in visited_states: state_list.append(new_state) visited_states[tuple(new_state)] = True # Move Down if blank_position >= 3: new_blank_position = blank_position - 3 new_state = list(curr_state) new_state[blank_position], new_state[new_blank_position] = new_state[new_blank_position], new_state[blank_position] if tuple(new_state) not in visited_states: state_list.append(new_state) visited_states[tuple(new_state)] = True # Move Left if blank_position not in [0 , 3, 6]: new_blank_position = blank_position - 1 new_state = list(curr_state) new_state[blank_position], new_state[new_blank_position] = new_state[new_blank_position], new_state[blank_position] if tuple(new_state) not in visited_states: state_list.append(new_state) visited_states[tuple(new_state)] = True # Move Right if blank_position not in [2, 5, 8]: new_blank_position = blank_position + 1 new_state = list(curr_state) new_state[blank_position], new_state[new_blank_position] = new_state[new_blank_position], new_state[blank_position] if tuple(new_state) not in visited_states: state_list.append(new_state) visited_states[tuple(new_state)] = True"},{"instruction":"Generate a code in Python to find the maximum sum subarray of size k. arr = [1, 4, 2, 10, 2, 3, 1, 0, 20] k = 4","output":"def maxSubArraySum(arr, k): n = len(arr) max_sum = 0 for i in range(n - k + 1): window_sum = sum(arr[i : k + i]) max_sum = max(max_sum, window_sum) return max_sum arr = [1, 4, 2, 10, 2, 3, 1, 0, 20] k = 4 print(maxSubArraySum(arr, k))"},{"instruction":"Create a function in Python which takes a string and returns the reversed string","output":"def reverseString(string): reversedString = \\"\\" for i in range(len(string) - 1, -1, -1): reversedString += string[i] return reversedString"},{"instruction":"Use the mobile pattern design to make this page look better. A page with a header, main section and footer","output":"<div class=\\"container\\"> <div class=\\"header\\"> <!-- Header content goes here --> </div> <div class=\\"main\\"> <!-- Main content goes here --> </div> <div class=\\"footer\\"> <!-- Footer content goes here --> </div> </div> # 13. Instruction: Write a function that joins an array of strings using a given separator. 13. Input: [\\"Python\\", \\"JavaScript\\", \\"C++\\"], \\", \\" 13. Output: def joinStrings(arr, sep): return sep.join(arr) result = joinStrings([\\"Python\\", \\"JavaScript\\", \\"C++\\"], \\", \\") print(result)"},{"instruction":"Create a python program to capitalize words in a string. String: enter the dragon","output":"def capitalize_words(string): words = string.split(' ') capitalized_words = [word.capitalize() for word in words] return ' '.join(capitalized_words) print(capitalize_words('enter the dragon'))"},{"instruction":"Write a Python code to fetch recent twitter posts from a specific account.","output":"\\"\\"\\" Fetch recent twitter posts from a specific account \\"\\"\\" import tweepy def get_posts(screen_name): consumer_key = '...' consumer_secret = '...' access_key = '...' access_secret = '...' # Authenticate to Twitter auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_key, access_secret) # Create API object api = tweepy.API(auth) # Get recent posts posts = api.user_timeline(screen_name=screen_name, count=200) return [post.text for post in posts] if __name__ == '__main__': # Get recent posts from a sample account posts = get_posts('example') print(posts)"},{"instruction":"Write a Python function to add two given numbers without using the '+' operator.","output":"def add(num1, num2): while num2 != 0: carry = num1 & num2 num1 = num1 ^ num2 num2 = carry << 1 return num1"},{"instruction":"Write a Python function to calculate the Hamming distance between two strings of same length. abc, acd","output":"def hamming_distance(s1, s2): distance = 0 for char1, char2 in zip(s1, s2): if char1 != char2: distance += 1 return distance result = hamming_distance(\\"abc\\", \\"acd\\") print(result)"},{"instruction":"Design a Python function for determining if a) two strings are anagrams of each other, or b) if two strings are permutations of each other? algorithm, logarithm","output":"def anagram_permutation(string1, string2): if sorted(string1) == sorted(string2): print(\\"The strings are anagrams.\\") elif sorted(string1) == sorted(string2[::-1]): print(\\"The strings are permutations.\\") else: print(\\"The strings are neither anagrams nor permutations.\\") anagram_permutation(\\"algorithm\\", \\"logarithm\\")"},{"instruction":"Generate a Python program that takes a numerical list and finds the index of the largest value. [3, 5, 9, 10]","output":"# list of numbers list = [3, 5, 9, 10] # maximum number MaxNum = max(list) # index of the maximum number index = list.index(MaxNum) print(\\"Maximum number is:\\", MaxNum) print(\\"Index of maximum number is:\\", index)"},{"instruction":"Create a Python program that uses the Natural Language Processing library spaCy to classify a list of words into one of three categories. words = [cat, dog, apple, banana, table]","output":"import spacy nlp = spacy.load('en_core_web_sm') categories = {'animals': [], 'fruits': [], 'furniture': []} for word in words: doc = nlp(word) if doc.ents: label = doc.ents[0].label_ if label == 'ANIMAL': categories['animals'].append(word) elif label == 'FRUIT': categories['fruits'].append(word) elif label == 'FURNITURE': categories['furniture'].append(word) print(categories)"},{"instruction":"Create a Python program to spread tasks into a timeline based on the given data. tasks = [{name:Task 1,duration:1}, {name:Task 2,duration:2}, {name:Task 3,duration:3}]","output":"timeline = [] # Sort tasks in ascending order of duration tasks.sort(key=lambda x: x[\\"duration\\"]) # Move tasks to timeline start_time = 0 for task in tasks: timeline.append({\\"name\\": task[\\"name\\"], \\"start_time\\": start_time, \\"end_time\\": start_time + task[\\"duration\\"]}) start_time = start_time + task[\\"duration\\"] # Print the timeline for task in timeline: print(\\"{}: [{},{}]\\".format(task[\\"name\\"], task[\\"start_time\\"], task[\\"end_time\\"]))"},{"instruction":"Create a Python function to generate a password of length 10 containing alphanumeric characters only.","output":"import string import random def generate_password(length): chars = string.ascii_lowercase + string.ascii_uppercase + string.digits return ''.join(random.choice(chars) for _ in range(length)) generate_password(10)"},{"instruction":"Create an online quiz application with three levels of difficulty. The application should be written in Python using Flask and it should have an endpoint for GET, POST, and PUT requests. Not applicable","output":"import flask app = flask.Flask(__name__) questions = { 'level_1': [ {\\"question\\": \\"What color is the sky?\\", \\"answers\\" : [\\"blue\\", \\"red\\", \\"green\\"], \\"correct\\" : \\"blue\\" }, {\\"question\\": \\"What color is the grass?\\", \\"answers\\" : [\\"blue\\", \\"red\\", \\"green\\"], \\"correct\\" : \\"green\\" } ], 'level_2': [ {\\"question\\": \\"What is the capital of France?\\", \\"answers\\" : [\\"London\\", \\"Paris\\", \\"Rome\\"], \\"correct\\" : \\"Paris\\" }, {\\"question\\": \\"What is the capital of Germany?\\", \\"answers\\" : [\\"Berlin\\", \\"Hamburg\\", \\"Munich\\"], \\"correct\\" : \\"Berlin\\" } ], 'level_3': [ {\\"question\\": \\"What is the third largest country by area?\\", \\"answers\\" : [\\"China\\", \\"Russia\\", \\"United States\\"], \\"correct\\" : \\"United States\\" }, {\\"question\\": \\"What is the fifth largest country by population?\\", \\"answers\\" : [\\"Brazil\\", \\"Germany\\", \\"Japan\\"], \\"correct\\" : \\"Brazil\\" } ] } @app.route('/api/quiz', methods=['GET', 'POST', 'PUT']) def handle_requests(): if request.method == \\"GET\\": # Return a list of all questions return questions elif request.method == \\"POST\\": # Add a new question return \\"Successfully added question\\" elif request.method == \\"PUT\\": # Update an existing question return \\"Updated question\\" if __name__ == '__main__': app.run()"},{"instruction":"Create a REST API in Python with Flask for a restaurant menu. The API should have endpoints for creating, updating, and deleting menu items. Not applicable","output":"from flask import Flask, request, json from flask_sqlalchemy import SQLAlchemy from flask_marshmallow import Marshmallow # init Flask app = Flask(__name__) # Database init app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db' app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False db = SQLAlchemy(app) # Marshmallow init ma = Marshmallow(app) # Create MenuItem model class MenuItem(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(100)) description = db.Column(db.String(200)) def __init__(self, name, description): self.name = name self.description = description # Create MenuItemSchema class MenuItemSchema(ma.Schema): class Meta: fields = ('id', 'name', 'description') # Init Schema menu_item_schema = MenuItemSchema() menu_items_schema = MenuItemSchema(many=True) # Create endpoints @app.route('/menu_items/create') def create_menu_item(): name = request.json['name'] description = request.json['description'] new_menu_item = User(name, description) db.session.add(new_menu_item) db.session.commit() return menu_item_schema.jsonify(new_menu_item) @app.route('/menu_items/<id>/update', methods=['PUT']) def update_menu_item(id): menu_item = MenuItem.query.get(id) name = request.json['name'] description = request.json['description'] menu_item.name = name menu_item.description = description db.session.commit() return menu_item_schema.jsonify(menu_item) @app.route('/menu_items/<id>/delete', methods=['DELETE']) def delete_menu_item(id): menu_item = MenuItem.query.get(id) db.session.delete(menu_item) db.session.commit() return json.dumps({'success': True}) # Run the app if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Design an algorithm in Python that sorts an unordered array of numbers from low to high. [2, 5, 1, 8, 7, 4]","output":"def sort(arr): for i in range(len(arr)): minIdx = i for j in range(i+1, len(arr)): if arr[minIdx] > arr[j]: minIdx = j arr[i], arr[minIdx] = arr[minIdx], arr[i] return arr"},{"instruction":"Build a Markdown document generator in Python that takes input from the user and generates a Markdown document.","output":"#!/usr/bin/env python # Imports import sys # Constants MARKDOWN_EXTENSION = \\".md\\" # Helper Fuctions def convert_to_markdown(text): \\"\\"\\" Converts plain text to markdown format \\"\\"\\" return text def write_to_file(filename, text): \\"\\"\\" Writes text to a file \\"\\"\\" with open(filename + MARKDOWN_EXTENSION, \\"w\\") as f: f.write(text + \\"n\\") # Main Function def main(): \\"\\"\\" Main function \\"\\"\\" # Read input from user text = input(\\"Please enter the text you would like to convert to Markdown: \\") filename = input(\\"Please enter a file name: \\") # Convert text to markdown markdown = convert_to_markdown(text) # Write to file write_to_file(filename, markdown) # Main Execution if __name__ == \\"__main__\\": main()"},{"instruction":"Write a Big O notation for the following python code. def fibonacci(n) if n <= 2 return 1 else return fibonacci(n1) + fibonacci(n2)","output":"O(2^n)"},{"instruction":"Rewrite the following Javascript code as a Python code that solves the same problem. Given an array of numbers, find the square root of each number and print it. [2, 3, 4, 5]","output":"import math numbers = [2, 3, 4, 5] for number in numbers: print(math.sqrt(number)) # Output # 1.414 # 1.732 # 2.000 # 2.236"},{"instruction":"Generate a Python code to convert a given number from decimal format to its binary equivalent. num = 25","output":"def decToBin(num): if num > 1: decToBin(num//2) print(num % 2,end = '') # Driver code to test above if __name__ == '__main__': num = 25 decToBin(num)"},{"instruction":"Develop a Python script to encode and decode a string using Base64. Hello","output":"import base64 def encode(s): encoded = base64.b64encode(s.encode('utf-8')) return encoded.decode('utf-8') def decode(s): decoded = base64.b64decode(s.encode('utf-8')) return decoded.decode('utf-8')"},{"instruction":"Write a command line utility in Python to spin up a web server.","output":"import http.server import socketserver PORT = 8000 Handler = http.server.SimpleHTTPRequestHandler httpd = socketserver.TCPServer((\\"\\", PORT), Handler) print(\\"Serving at port\\", PORT) httpd.serve_forever()"},{"instruction":"Construct a linked list from the following array. arr = [1, 4, 9, 6, 5, 11]","output":"# Python program to convert an # array to linked list # Node class class Node: # Function to initialize the node object def __init__(self, data): self.data = data # Assign data self.next = None # Initialize next as null # Linked List class contains a Node # object class LinkedList: # Function to initialize head def __init__(self): self.head = None # This functions inserts a new node # at the beginning of Linked List def push(self, new_data): # 1. Allocates node # 2. Put the data in it new_node = Node(new_data) # 3. Make next of new node as head new_node.next = self.head # 4. Move the head to point to new Node self.head = new_node # Utility function to print the linked LinkedList def printList(self): temp = self.head while(temp): print (temp.data) temp = temp.next # Code execution if __name__=='__main__': # Start with empty list llist = LinkedList() # Insert 6. So linked list becomes 6->None arr = [1, 4, 9, 6, 5, 11] for x in arr: llist.push(x) # Print the linked list llist.printList()"},{"instruction":"Draft a Python program to calculate the total amount of a given item in a shopping cart. [{'name': 'apple', 'price': 0.99, 'quantity': 3}, {'name': 'banana', 'price': 1.25, 'quantity': 4}, {'name': 'pear', 'price': 0.50, 'quantity': 1}]","output":"def calculate_total(shopping_cart): total = 0 for item in shopping_cart: total += item['price'] * item['quantity'] return total shopping_cart = [{'name': 'apple', 'price': 0.99, 'quantity': 3}, {'name': 'banana', 'price': 1.25, 'quantity': 4}, {'name': 'pear', 'price': 0.50, 'quantity': 1}] total = calculate_total(shopping_cart) print(total)"},{"instruction":"Translate the following pseudo code into a Python program. for i in range(0, n1): j = i + 1 while j < n: swap(list[i],list[j]) j = j + 1","output":"def swap(list, i, j): temp = list[i] list[i] = list[j] list[j] = temp def permutations(list, n): for i in range(0, n-1): j = i + 1 while j < n: swap(list,i,j) j = j + 1 list = [10, 11, 12] n = len(list) permutations(list, n)"},{"instruction":"What is the smallest possible code in Python to read the value of an item in a given dictionary? {key: value}","output":"dictionary = {\\"key\\": \\"value\\"} value = dictionary[\\"key\\"]"},{"instruction":"Write a Python function to find the difference between two given dates in days.","output":"from datetime import datetime def find_difference_in_days(date1, date2): date1 = datetime.strptime(date1, '%Y-%m-%d') date2 = datetime.strptime(date2, '%Y-%m-%d') return abs((date2 - date1).days)"},{"instruction":"Create a python code to predict if a given pattern of features of a target user can be classified as a fraud. features = ['high credit' , 'low age' , 'high spending']","output":"import numpy as np from sklearn.naive_bayes import GaussianNB #define the labels labels = {'fraud': 0, 'not fraud': 1} #defining the training data and the labels train_data = [[1, 'high credit', 'low age', 'high spending'], [1, 'low credit', 'low age', 'low spending'], [0, 'low credit', 'low age', 'high spending'], [1, 'low credit', 'low age', 'low spending'], [0, 'low credit', 'low age', 'low spending'], [1, 'low credit', 'low age', 'low spending'], [0, 'low credit', 'low age', 'low spending'], ] train_labels = [0, 1, 0, 1, 0, 1, 0] #fitting the classifier clf = GaussianNB() clf.fit(train_data, train_labels) #prediction features = ['high credit' , 'low age' , 'high spending'] label = clf.predict([features]) if label == labels['fraud']: print('Target user is a fraud') else: print('Target user is not a fraud')"},{"instruction":"Develop a program in Python to compute the median of three numbers.","output":"def median(a, b, c): if (a <= b <= c) or (c <= b <= a): median = b elif (b <= a <= c) or (c <= a <= b): median = a else: median = c return median"},{"instruction":"Create an AI Chatbot in Python using the nltk library. The program should ask the user to enter a phrase and respond accordingly. Not applicable","output":"# Load Packages import nltk from nltk.chat.util import Chat, reflections # Set up the conversation reflection_map = { \\"hello\\": \\"Hi there!\\", \\"hi\\": \\"Hello!\\" } cref = reflections.keys() Chat = Chat(reflection_map, cref) # Start the conversation Chat.converse()"},{"instruction":"Write a python program to count the total number of 1s present in a binary string binary_string = '10101100110'","output":"def count_ones(binary_string): count = 0 for bit in binary_string: if bit == '1': count += 1 return count"},{"instruction":"Classify a snippet of code according to programming language. def greet(): print(Hello world!)","output":"Python"},{"instruction":"Suggest a Python program to create a list filled with random numbers Length = 10 Lower bound = 0 Upper bound = 1000","output":"import random def create_random_number_list(length, lower_bound, upper_bound): output_list = [] for i in range(length): output_list.append(random.randint(lower_bound, upper_bound)) return output_list length = 10 lower_bound = 0 upper_bound = 1000 result = create_random_number_list(length, lower_bound, upper_bound) print(result)"},{"instruction":"Create a Python program using virtualenv to create a virtual environment and install a package.","output":"#!/usr/bin/env python import virtualenv # Create a virtual environment virtualenv_dir = virtualenv.create_environment() # Activate the virtual environment virtualenv.activate_environment(virtualenv_dir) # Install package virtualenv.install_package('mypackage', virtualenv_dir)"},{"instruction":"Design a function to reverse a linked list in python.","output":"def reverse_linked_list(head): prev = None curr = head next = None while curr is not None: next = curr.next curr.next = prev prev = curr curr = next head = prev return head"},{"instruction":"Construct a tree data structure with the given elements in Python. elements = [1, 2, 3, 4, 5]","output":"class Node: def __init__(self, data): self.left = None self.right = None self.data = data def createTree(elements): root = Node(elements[0]) for i in range(1, len(elements)): insert(root, elements[i]) return root def insert(root, data): if root.data < data: if root.right is None: root.right = Node(data) else: insert(root.right, data) else: if root.left is None: root.left = Node(data) else: insert(root.left, data)"},{"instruction":"Develop a program in Python to operate with complex numbers.","output":"import cmath # define two operations to add and subtract complex numbers def add_complex(num1, num2): return num1+num2 def sub_complex(num1,num2): return num1-num2 # add two complex numbers num1 = complex(5, 7) num2 = complex(3, 4) print(\\"Addition of two complex numbers : \\", add_complex(num1, num2)) # subtract two complex numbers num1 = complex(5, 7) num2 = complex(3, 4) print(\\"Subtraction of two complex numbers : \\", sub_complex(num1, num2))"},{"instruction":"Write a Python class to serialize and deserialize a binary tree.","output":"class Codec: def serialize(self, root): def _serialize(node): if not node: return '#' return str(node.val) + ',' + _serialize(node.left) + ',' + _serialize(node.right) return _serialize(root) def deserialize(self, data): def _deserialize(nums): val = nums.pop(0) if val == '#': return None node = TreeNode(val) node.left = _deserialize(nums) node.right = _deserialize(nums) return node return _deserialize(data.split(','))"},{"instruction":"Create a program in Python that calculates the median of an array of integers without using the builtin function. [1, 2, 3, 4, 5]","output":"def median(arr): n = len(arr) arr.sort() # check for even case if n % 2 == 0: return (arr[int((n - 1)/2)] + arr[int(n/2)]) / 2 else: return arr[int(n/2)] # test arr = [1, 2, 3, 4, 5] print(\\"Median =\\", median(arr)) # Output: Median = 3.0"},{"instruction":"Create a Python program that finds a given string in a sentence and capitalizes it. Sentence: I love the world String to Find: world","output":"def capitalize_string(text, string_to_find): index = text.find(string_to_find) if index != -1: capitalized_string = text[:index] + string_to_find.upper() + text[index+len(string_to_find):] return capitalized_string else: return text sentence = \\"I love the world\\" string_to_find = \\"world\\" print(capitalize_string(sentence, string_to_find))"},{"instruction":"Create a Python function to generate a 2dimensional array of random numbers between 0 and 1.","output":"def generate_random_array(m, n): array = [[random.random() for i in range(m)] for j in range(n)] return array"},{"instruction":"Create a Python script to parse a JSON string and return the value of the given field. {name: John, age: 30}","output":"def get_value(json_string, field): json_dict = json.loads(json_string) return json_dict[field]"},{"instruction":"Write a Python program that generates a multiplication table of a given size. 5","output":"def multiplication_table(n): for i in range(1, n+1): for j in range(1, n+1): print(str(i*j).rjust(4), end=\\" \\") print() multiplication_table(5) # Output: 1 2 3 4 5 2 4 6 8 10 3 6 9 12 15 4 8 12 16 20 5 10 15 20 25"},{"instruction":"Create a list of even numbers from 0 to 30 in one line of Python.","output":"even_numbers = [num for num in range(0, 31) if num % 2 == 0]"},{"instruction":"Generate a python program to print out all the factors of a number n. n = 10","output":"def factor_of(n): result = [] for i in range(1, n + 1): if n % i == 0: result.append(i) return result"},{"instruction":"Develop a Python 3 program that takes a list of integers as an argument and returns the mean of the list. [1,2,3,4,5]","output":"def mean(list): total = 0 for num in list: total+=num return total/len(list) list = [1,2,3,4,5] mean = mean(list) print(mean) # prints 3.0"},{"instruction":"Build a sorting algorithm in Python that sorts an array of integers. [5, 3, 1, 4, 2]","output":"def sort_arr(arr): for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr result = sort_arr([5, 3, 1, 4, 2]) print(result)"},{"instruction":"Construct a code in Python to generate the first 10 prime numbers.","output":"# Python program to print first 10 prime numbers # Method 1 def first10PrimeNumbers(): for num in range(2, 12): # if number is divisible by any number # between 2 and one less than it, it is not prime for i in range(2, num): if num % i == 0: break else: print(num) # Driver Code if __name__ == \\"__main__\\": first10PrimeNumbers()"},{"instruction":"mplement a web scraper in Python to collect the titles and URLs of all the articles in a website.","output":"import requests from bs4 import BeautifulSoup # specify the URL to scrape url = 'https://example.com' # make a request to request the page request = requests.get(url) # Parse the page using beautifulsoup soup = BeautifulSoup(request.text, 'lxml') # Extract the titles and URLs titles = [title.text for title in soup.find_all('h2')] urls = [url['href'] for url in soup.find_all('a', href=True)] # Print the results for title, url in zip(titles, urls): print(title, '->', url)"},{"instruction":"Generate a python code to build a simple regression model? X = [[1, 2, 3], [4, 5, 6]] Y = [[7], [8]]","output":"import numpy as np X = np.array(X) Y = np.array(Y) b = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y) #Print the parameters print(\\"Parameters: \\", b) #Make predictions x_new = [[1, 2, 3]] y_pred = np.dot(x_new, b) print(\\"Predicted output: \\", y_pred)"},{"instruction":"Develop a Python program to find all possible words from a set of characters The set of characters is 'abcd'","output":"def findWords(string): results = [] for i in range(len(string)): for j in range(i+1, len(string)+1): results.append(string[i:j]) return results string = \\"abcd\\" print(findWords(string))"},{"instruction":"Write a Python script that takes a list of numbers and returns the median. numbers = [2,4,7,10,11]","output":"def calculate_median(numbers): \\"\\"\\" Calculates the median of a list of numbers. Args: numbers: a list of numbers. Returns: median: the median of the list. \\"\\"\\" numbers.sort() length = len(numbers) if length % 2 == 0: median = (numbers[length//2 - 1] + numbers[length//2]) / 2 else: median = numbers[length//2] return median numbers = [2,4,7,10,11] median = calculate_median(numbers) print(median)"},{"instruction":"Rewrite the following Python code to improve readability and to simplify the code start = 0 end = 10 while start < end: print start start = start + 1","output":"for start in range(10): print(start)"},{"instruction":"Create a Python program to detect and print the number of vowels in a given string. Hi everyone","output":"def number_of_vowels(s): count = 0 for char in s: if char in 'aeiouAEIOU': count += 1 return count s = 'Hi everyone' print('The number of vowels in the given string is :', number_of_vowels(s))"},{"instruction":"What is the most memory efficient way to iterate through a large list of objects in Python?","output":"The most memory efficient way to iterate through a large list of objects in Python is to use an iterator. Iterators are more memory-efficient because they only store a single value at a time and can be used instead of the whole collection, which was held by the list. An iterator is accessed using the iter() function and is used in a for loop to loop through the items in the list. for obj in iter(large_list_of_objects): # Do something with the object"},{"instruction":"Generate a python dictionary with all prime numbers between 10 and 30 as keys and their squares as values.","output":"prime_nos = {11, 13, 17, 19, 23, 29} output_dict = {prime_no: prime_no**2 for prime_no in prime_nos} print(output_dict)"},{"instruction":"Create an algorithm in Python using multiple classes to detect if a number is prime. Not applicable","output":"class PrimeNumberDetector: # Constructor def __init__(self): self.prime_numbers = [] # Helper method to determine if a number is prime def is_prime(self, n): if n <= 1: return False else: for i in range(2, n): if n % i == 0: return False return True # Searches the prime numbers in a given range def search(self, start, end): self.prime_numbers = [] for i in range(start, end + 1): if self.is_prime(i): self.prime_numbers.append(i) return self.prime_numbers"},{"instruction":"Explain the purpose of using dictionaries in Python.","output":"Dictionaries are used in Python to store data in the form of key-value pairs, where each key is associated with a specific value. Dictionaries can be used for a variety of tasks including representing complex data, creating lookup tables, and organizing information. The key-value pairs in a dictionary are mutable, meaning they can be changed at any point in the program. Finally, dictionaries are very efficient in terms of memory space and can be used to store large amounts of data in a relatively small amount of space."},{"instruction":"Create an interactive program in Python that allows users to enter two numbers and then prints out the sum of the two numbers.","output":"# define a function to take in two numbers def adder(num1, num2): return num1 + num2 # prompt the user to enter the two numbers num1 = float(input(\\"Enter number 1: \\")) num2 = float(input(\\"Enter number 2: \\")) # print the sum of the two numbers print(\\"The sum of the two numbers is:\\", adder(num1, num2))"},{"instruction":"Write a Python script to classify an email as spam or ham. This email is a spam message.","output":"import nltk def classify_spam(): nltk.download('stopwords') from nltk.corpus import stopwords from nltk.tokenize import word_tokenize data = \\"This email is a spam message.\\" stop_words = set(stopwords.words('english')) words = word_tokenize(data) words_filtered = [] for w in words: if w not in stop_words: words_filtered.append(w) if 'spam' in words_filtered: print(\\"This is a spam email.\\") else: print(\\"This is a valid email.\\") if __name__ == \\"__main__\\": classify_spam()"},{"instruction":"Write a Flask application that has two root pages, one for displaying all books in a library, and another page for displaying the details for a single book by its ISBN number. An example library containing all books and their ISBN numbers: The Catcher in the Rye – ISBN 13: 9780316769174 The Hunger Games – ISBN 13: 9780439023528 The Lord of the Rings – ISBN 13: 9780618640157","output":"#!/usr/bin/env python from flask import Flask, render_template app = Flask(__name__) library = [{'title': 'The Catcher in the Rye', 'isbn': '978-0316769174'}, {'title': 'The Hunger Games', 'isbn': '978-0439023528'}, {'title': 'The Lord of the Rings', 'isbn': '978-0618640157'}] @app.route('/') def index(): return render_template('index.html', library=library) @app.route('/book/<isbn>') def book_info(isbn): selected_book = next((book for book in library if book['isbn'] == isbn), None) return render_template('book.html', book=selected_book) if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Draft a Python Class to store sensitive data such as passwords in an encrypted format.","output":"import hashlib class PasswordStore: def __init__(self, username, password): self.username = username self.encryptedPassword = self._encryptPassword(password) def _encryptPassword(self, password): hashed_password = hashlib.sha512((password + self.username).encode('utf-8')).hexdigest() return hashed_password def authenticate(self, password): return self.encryptedPassword == self._encryptPassword(password)"},{"instruction":"Convert the following pseudocode into a python program. i = 0 j = 0 while i < 10: j += i i += 1","output":"\\"\\"\\" Convert the following pseudocode into a Python program \\"\\"\\" i = 0 j = 0 while i < 10: j += i i += 1 print(j)"},{"instruction":"Create a python program to find the least common ancestor of two nodes in a binary tree.","output":"class BinaryTree: def __init__(self, root): self.root = root def leastCommonAncestor(self, node1, node2): def recurseTree(node): if not node: return False left = recurseTree(node.left) right = recurseTree(node.right) mid = node == node1 or node == node2 # If any two of the three flags left, right or mid become True. if mid + left +right >= 2: self.ancestor = node # Return True if either left or right or mid becomes True. return mid or left or right recurseTree(self.root) return self.ancestor"},{"instruction":"Write a Python function to find the maximum depth of a given binary search tree.","output":"def find_maximum_depth(tree): if tree is None: return 0 else : left_depth = find_maximum_depth(tree.left) right_depth = find_maximum_depth(tree.right) if (left_depth > right_depth): return left_depth+1 else: return right_depth+1"},{"instruction":"Design a program to simulate a vending machine in Python.","output":"def vending_machine(): # Variable to store the user's choice choice = '' # List of items available products = {1 : \\"Chips\\", 2 : \\"Chocolate\\", 3 : \\"Coke\\", 4 : \\"Sprite\\"} # Dictionary to store the price corresponding to each product price = {1 : 40, 2 : 20, 3 : 30, 4 : 30} while choice != \\"quit\\": # Print the available products print(\\"Available products:\\") for product in products: print(product, \\":\\", products[product], \\"-\\", price[product], \\"Rupees\\") # Get the user's choice choice = input(\\"Enter your choice (1-4): \\") if choice.isdigit() == False: print(\\"Invalid input.\\") elif int(choice) > 0 and int(choice) < 5: print(\\"You have purchased\\", products[int(choice)] + \\".\\") print(\\"Thank you for shopping with us.\\") elif choice == \\"quit\\": break else: print(\\"Invalid input.\\") # Call the function vending_machine()"},{"instruction":"Create a Python program to read a web page and print all of the links and their text Not applicable","output":"import re from urllib.request import urlopen html = urlopen(\\"http://www.example.com/\\").read().decode('utf-8') links = re.findall(\\"<a href=(.*?)>(.*?)</a>\\", html) for link in links: print(\\"Link: \\", link[0]) print(\\"Text: \\", link[1])"},{"instruction":"Formulate a python code to remove the characters of odd index in a given string. string = welcome","output":"def remove_odd_index_char(string): \\"\\"\\" Remove the characters of odd index in a given string \\"\\"\\" result = \\"\\" for i in range(len(string)): if i % 2 == 0: result = result + string[i] return result if __name__ == '__main__': string = \\"welcome\\" print(remove_odd_index_char(string)) # wloe"},{"instruction":"Write a Python program to get the sum of all odd numbers between 0 and 30.","output":"# Variable to store the sum sum = 0 # Iterate over all odd numbers in the range for i in range(1, 30, 2): sum += i # Print the result print(\\"The sum of all odd numbers between 0 and 30: \\", sum)"},{"instruction":"Generate a Python program to produce text output with given conditions. Condition 1: Print Hello World Condition 2: Print Goodbye World","output":"def print_conditions(): print(\\"Hello World\\") print(\\"Goodbye World\\") print_conditions()"},{"instruction":"Using a web API, create a Python program to search for books with a given title. Alice in Wonderland","output":"import json import requests api_url = \\"https://www.googleapis.com/books/v1/volumes?q=\\" query = \\"Alice in Wonderland\\" # form the API call URL url = api_url + query # issue API call response = requests.get(url) # parse the API response response_JSON = json.loads(response.text) # loop through API response and print the book titles for item in response_JSON[\\"items\\"]: print(item[\\"volumeInfo\\"][\\"title\\"])"},{"instruction":"Create a vectorized function in Python that computes the sigmoid of a given number.","output":"import numpy as np def sigmoid(x): \\"\\"\\" Compute the sigmoid of an array of numbers x. \\"\\"\\" # Apply the sigmoid function to every element of x sig = np.vectorize(lambda x: 1/(1 + np.exp(-x))) return sig(x) print(sigmoid(5))"},{"instruction":"Write a Python program that takes a sentence as an input and outputs a list of words in it in reverse order. This is a test.","output":"def reverse(sentence): words = sentence.split(\\" \\") rev_words = words[::-1] rev_sentence =' '.join(rev_words) return rev_sentence"},{"instruction":"To create a Reddit bot that scans a subreddit for new posts containing a specific string in the title, and sends a welcome message to new users who have not posted before, follow the steps below: 1. Install the PRAW library and import it into your Python script. 2. Import the datetime and sqlite3 libraries. 3. Define the user configuration variables at the beginning of your script, including your Reddit app ID, secret, URI, refresh token, user agent, subreddit name, maximum number of posts to retrieve at once, wait time between cycles, the string to look for in post titles, and the time limit between a user's posts. 4. Create a SQL database to store user and post information. 5. Use the PRAW library to authenticate your bot with Reddit using your app information and refresh token. 6. Define a function to get the current time in UTC and convert it to a Unix timestamp if needed. 7. Define a function to scan the subreddit for new posts and check if they contain the specified string in the title. 8. If the post is from a new user, add them to the database and send them a welcome message. 9. If the post is from a known user, check if they have exceeded the time limit between posts. If they have, reset their database information. If they have not, remove their post and send them a message indicating how long they must wait before posting again. 10. Add the post ID to the list of old posts to prevent duplicates. 11. Run the scan function in a loop with a wait time between cycles.","output":"#/u/GoldenSights import praw import time import datetime import sqlite3 '''USER CONFIGURATION''' APP_ID = \\"\\" APP_SECRET = \\"\\" APP_URI = \\"\\" APP_REFRESH = \\"\\" # https://www.reddit.com/comments/3cm1p8/how_to_make_your_bot_use_oauth2/ USERAGENT = \\"\\" #This is a short description of what the bot does. For example \\"/u/GoldenSights' Newsletter Bot\\" SUBREDDIT = \\"GoldTesting\\" #This is the sub or list of subs to scan for new posts. For a single sub, use \\"sub1\\". For multiple subreddits, use \\"sub1+sub2+sub3+...\\" MAXPOSTS = 30 #This is how many posts you want to retrieve all at once. PRAW can download 100 at a time. WAIT = 20 #This is how many seconds you will wait between cycles. The bot is completely inactive during this time. TSTRING = \\"[request]\\" #This is the part of the title that you want to look for DELAY = 172800 #This is the time limit between a user's posts, IN SECONDS. 1h = 3600 || 12h = 43200 || 24h = 86400 || 144h = 518400 '''All done!''' WAITS = str(WAIT) try: import bot USERAGENT = bot.aG except ImportError: pass sql = sqlite3.connect('sql.db') print('Loaded SQL Database') cur = sql.cursor() cur.execute('CREATE TABLE IF NOT EXISTS users(name TEXT, lastpost TEXT)') print('Loaded Users') cur.execute('CREATE TABLE IF NOT EXISTS oldposts(id TEXT)') print('Loaded Oldposts') sql.commit() r = praw.Reddit(USERAGENT) r.set_oauth_app_info(APP_ID, APP_SECRET, APP_URI) r.refresh_access_information(APP_REFRESH) def getTime(bool): timeNow = datetime.datetime.now(datetime.timezone.utc) timeUnix = timeNow.timestamp() if bool == False: return timeNow else: return timeUnix def scan(): print('Scanning ' + SUBREDDIT) subreddit = r.get_subreddit(SUBREDDIT) posts = subreddit.get_new(limit=MAXPOSTS) for post in posts: try: pauthor = post.author.name except Exception: pauthor = '[deleted]' pid = post.id plink = post.short_link ptime = post.created_utc ptitle = post.title.lower() if TSTRING.lower() in ptitle: cur.execute('SELECT * FROM oldposts WHERE id=?', [pid]) if not cur.fetchone(): cur.execute('SELECT * FROM users WHERE name=?', [pauthor]) if not cur.fetchone(): print('Found new user: ' + pauthor) cur.execute('INSERT INTO users VALUES(?, ?)', (pauthor, pid)) r.send_message(pauthor, 'Welcome to /r/pkmntcgtrades!','Dear ' + pauthor + ',nn Our bot has determined that this is your first time posting in /r/pkmntcgtrades. Please take the time to read [the guidelines](http://www.reddit.com/r/pkmntcgtrades/wiki/guidelines) to understand how the subreddit works.nnIf you have any questions, feel free to [message the moderators.](http://www.reddit.com/message/compose?to=%2Fr%2Fpkmntcgtrades) Thanks, and happy trading!', captcha=None) sql.commit() print('t' + pauthor + ' has been added to the database.') time.sleep(5) else: cur.execute('SELECT * FROM users WHERE name=?', [pauthor]) fetch = cur.fetchone() print('Found post by known user: ' + pauthor) previousid = fetch[1] previous = r.get_info(thing_id='t3_'+previousid) previoustime = previous.created_utc if ptime > previoustime: curtime = getTime(True) difference = curtime - previoustime if difference >= DELAY: print('tPost complies with timelimit guidelines. Permitting') cur.execute('DELETE FROM users WHERE name=?', [pauthor]) cur.execute('INSERT INTO users VALUES(?, ?)', (pauthor, pid)) sql.commit() print('t' + pauthor + \\"'s database info has been reset.\\") else: differences = '%.0f' % (DELAY - difference) print('tPost does not comply with timelimit guidelines. Author must wait ' + differences) print('t' + pauthor + \\"'s database info remains unchanged\\") response = post.add_comment('You are posting here too frequently, so your post has been deleted. You may post again in ' + str(datetime.timedelta(seconds=float(differences)))) response.distinguish() post.remove(spam=False) time.sleep(5) cur.execute('INSERT INTO oldposts VALUES(?)', [pid]) sql.commit() while True: try: scan() except Exception as e: print('An error has occured:', e) print('Running again in ' + WAITS + ' seconds.n') time.sleep(WAIT)"},{"instruction":"Create a Python script to calculate the sum of all elements in a matrix. matrix = [[1, 7, 3], [9, 2, 8], [3, 1, 7]]","output":"def sum_of_elements_matrix(matrix): # Initialize result result = 0 # Iterate through the matrix for row in matrix: for col in row: result += col # Return the result return result"},{"instruction":"Design a Python script to check if a given value is an alphabet or not.","output":"\\"\\"\\" Design a Python script to check if a given value is an alphabet or not \\"\\"\\" # function to check if the given value is an alphabet or not def is_alphabet(value): # check if the value is empty if value == '': return False # check if the given value is an alphabet if value.isalpha(): return True else: return False if __name__ == '__main__': value = input('Enter a value: ') print(is_alphabet(value))"},{"instruction":"Write a Python program to generate a matrix style output of a given alphabet.","output":"alphabet = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" matrix_size = len(alphabet) col, row = 0, 0 matrix = [[0 for col in range(matrix_size)] for row in range(matrix_size)] for char in alphabet: matrix[row][col] = char col +=1 if(col == matrix_size): col = 0 row += 1 for row in range(matrix_size): for col in range(matrix_size): print(matrix[row][col], end = \\" \\") print()"},{"instruction":"Convert the following JSON data into a dictionary object in Python. { name: John Doe, age: 30, address: { street: 123 Example St., city: Exampletown, state: CA } }","output":"import json # Convert JSON Data to Dictionary in Python data = json.loads('{\\"name\\": \\"John Doe\\",\\"age\\": 30,\\"address\\": {\\"street\\": \\"123 Example St.\\",\\"city\\": \\"Exampletown\\",\\"state\\": \\"CA\\"}}') # Use the dictionary print(data['name']) # Output: John Doe print(data['address']['city']) # Output: Exampletown"},{"instruction":"Generate a list of the binomial coefficients for a given value of n using a Python function.","output":"def binomial_coefficient(n): coefficient = [] for k in range(n+1): coefficient.append(int(math.factorial(n) / (math.factorial(k) * math.factorial(n - k)))) return coefficient"},{"instruction":"Given a 2D array of integers, write a Python function to rotate the array clockwise by 90 degrees. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","output":"def rotate_array(arr): newarr = [] for i in range(len(arr[0])): newarr_row = [] for j in range(len(arr)): newarr_row.append(arr[len(arr)-j-1][i]) newarr.append(newarr_row) return newarr"},{"instruction":"Write a Python program to flatten a list of lists into a single list. List of lists: [[1,2], [3], [4,5,6]]","output":"import itertools # flatten a list of lists list_of_lists = [[1,2], [3], [4,5,6]] flattened_list = list(itertools.chain.from_iterable(list_of_lists)) # print the flattened list print(flattened_list) # Output: [1, 2, 3, 4, 5, 6]"},{"instruction":"Create a Python program to assign a unique ID to each employee. The program should include a function that takes a list of employees and assigns a unique ID to each employee. List of employees: John Doe, Jane Doe, Fred Flintstone","output":"def assign_ids(employees): counter = 1 for i in range(len(employees)): employee = employees[i] employee_id = f\\"{counter:03d}\\" print(f\\"Employee {employee} has the ID {employee_id}\\") counter += 1 employees = [\\"John Doe\\", \\"Jane Doe\\", \\"Fred Flintstone\\"] assign_ids(employees)"},{"instruction":"Write a Python program that multiplies all even numbers in a given list.","output":"def multiplyEvens(numbers): # Initialize result result = 1 # Multiply all even elements for x in numbers: if x % 2 == 0: result = result * x return result # Driver code assert multiplyEvens([2, 3, 4, 5, 6]) == 48"},{"instruction":"Create a Python script to generate a random password with a mix of alphabets, numbers and symbols at least 8 characters long.","output":"import string import random def generate_password(length): password_characters = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(password_characters) for i in range(length)) return password password = generate_password(8) print(password)"},{"instruction":"Write a Python script to implement a linear search algorithm. lst = [1, 2, 3, 4, 5, 6] target = 4","output":"def linearSearch(lst, target): for i in range(len(lst)): if lst[i] == target: return i return -1 lst = [1, 2, 3, 4, 5, 6] target = 4 result = linearSearch(lst, target) if result == -1: print(\\"Element is not present in the list\\") else: print(\\"Element is present at index\\", result)"},{"instruction":"Write a Python program to parse a string containing HTML tags and extract the text not contained in the HTML tags. <p>This is a <a href=https://example.com>link</a>.</p>","output":"import re html = '<p>This is a <a href=\\"https://example.com\\">link</a>.' text = re.sub(r'<[^>]+>', '', html) print(text) # Output: This is a link."},{"instruction":"Develop an algorithm in Python to sort a list of numbers using merge sort. list = [10, 7, 8, 9, 1, 5]","output":"def mergeSort(arr): if len(arr) > 1: mid = len(arr)//2 left = arr[:mid] right = arr[mid:] mergeSort(left) mergeSort(right) i = 0 j = 0 k = 0 while i < len(left) and j < len(right): if left[i] < right[j]: arr[k] = left[i] i += 1 else: arr[k] = right[j] j += 1 k += 1 while i < len(left): arr[k] = left[i] i += 1 k += 1 while j < len(right): arr[k] = right[j] j += 1 k += 1"},{"instruction":"Generate a machine learning model in Python that can predict the price of a given stock. Historical stock prices of Apple (AAPL)","output":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression # Load the dataset data = pd.read_csv('AAPL_data.csv') X = data[['Open','High','Low','Close','Volume']] y = data['Adj Close'] # Split the dataset X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42) # Create and fit the linear regression model model = LinearRegression() model.fit(X_train, y_train) # Make predictions predictions = model.predict(X_test)"},{"instruction":"Create a Python Flask application for solving a linear equation. The application should have an endpoint that receives an equation as input and returns the solution as output. 3x + 2 = 5","output":"from flask import Flask, request from sympy import * app = Flask(name) x = Symbol('x') @app.route('/solve', methods=['POST']) def solve(): equation = request.json['equation'] solution = solve(equation, x) return {'solution': str(solution[0])} if name == 'main': app.run(debug=True)"},{"instruction":"Create a Python function that takes two numbers, n and m, and prints out the first n odd numbers between 0 and m (both inclusive). n = 3, m = 10","output":"def printOddNumbers(n, m): nums = [] for i in range(m): if i%2 != 0 and len(nums) < n: nums.append(i) return nums print(printOddNumbers(3, 10))"},{"instruction":"Create a python program to find all n digit prime numbers.","output":"def get_n_digit_prime_numbers(n): prime_numbers = [] for number in range(10**(n-1), 10**n): is_prime = True for divisor in range(2, number): if number % divisor == 0: is_prime = False break if is_prime: prime_numbers.append(number) return prime_numbers"},{"instruction":"Create a sorting algorithm in Python to sort an unsorted set of names. [John, Jack, Joan, Adam, Elena, Mia]","output":"def sort_names(names): # sorted() returns an alphabetically sorted list return sorted(names) unsorted_names = [\\"John\\", \\"Jack\\", \\"Joan\\", \\"Adam\\", \\"Elena\\", \\"Mia\\"] print(sort_names(unsorted_names)) # ['Adam', 'Elena', 'Jack', 'Joan', 'John', 'Mia']"},{"instruction":"This code sets up a Python package for the GIFT parser. To use it, download the code and run the setup.py script. The package includes a parser, i18n support, answer and question models, and utility functions. It requires the yattag, markdown, and MarkdownSuperscript libraries to be installed. The package also includes localization support for multiple languages.","output":"#!/usr/bin/python3 # -*- coding: utf-8 -*- import os from setuptools import setup try: long_description = open(\\"README.rst\\").read() except IOError: long_description = \\"\\" LOCALEDIR = os.path.join('share', 'locale') setup( name=\\"pygiftparser\\", version=\\"1.1\\", url=\\"https://github.com/mtommasi/pygiftparser\\", description=\\"GIFT parser in python that parses a Gift source code and loads data in a Question/Answer model for further use in an application\\", license=\\"MIT\\", author=\\"Marc Tommasi - UdL/INRIA\\", author_email=\\"first.last@univ-lille.fr\\", py_modules=['pygiftparser.parser', 'pygiftparser.i18n', 'pygiftparser.answer', 'pygiftparser.question', 'pygiftparser.utils'], install_requires=['yattag', 'markdown', 'MarkdownSuperscript'], long_description=long_description, classifiers=[ \\"Programming Language :: Python\\", \\"Programming Language :: Python :: 3.4\\", \\"Topic :: Text Processing\\" ], data_files=[(os.path.join('share', 'locale', lang, 'LC_MESSAGES'), [os.path.join('share', 'locale', lang, 'LC_MESSAGES', 'pygiftparser.mo')]) for lang in os.listdir(LOCALEDIR)] )"},{"instruction":"Write a Python program to create multiple directories from the given list. [dir1, dir2, dir3]","output":"import os dirs_list = [\\"dir1\\", \\"dir2\\", \\"dir3\\"] for d in dirs_list: os.makedirs(d)"},{"instruction":"Parse the following JSON into a Python dictionary. { name: John, age: 28, hobbies: [ Programming, Sports ] }","output":"# import the json module import json # parse the json json_dict = json.loads('{ \\"name\\": \\"John\\", \\"age\\": 28, \\"hobbies\\": [ \\"Programming\\", \\"Sports\\" ]}') # print the parsed json print(json_dict)"},{"instruction":"Use a Python print function to write a statement that takes an input message and prints the message in all uppercase letters. Hello world!","output":"message = 'Hello world!' print(message.upper()) // HELLO WORLD!"},{"instruction":"Create a web scraper using Python and Beautiful Soup to extract Twitter data. Not applicable","output":"import requests from bs4 import BeautifulSoup # load the Twitter page url = 'https://twitter.com/' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') # extract the tweets tweets = [tweet.text for tweet in soup.find_all('p', {'class': 'TweetTextSize TweetTextSize--normal js-tweet-text tweet-text'})] # print the tweets for tweet in tweets: print(tweet)"},{"instruction":"Write a Python function to generate the Fibonacci series up to the nth term.","output":"def fibonacci(n): fib = [0, 1] for i in range(2, n): fib.append(fib[i-1] + fib[i-2]) return fib"},{"instruction":"Construct a python code to preprocess a text by removing stop words and making the text all lower case.","output":"# Importing the required library import nltk # Defining a function to pre-process the text def pre_process_text(text): # Converting the text to lowercase text = text.lower() # Tokenising the text tokens = nltk.word_tokenize(text) # Removing the stop words words = [word for word in tokens if word not in nltk.corpus.stopwords.words('english')] return words if __name__ == '__main__': text = \\"This is a sample text to demonstrate text pre-processing.\\" print(pre_process_text(text))"},{"instruction":"Code a Python function to split a sentence into an array of words. Not applicable","output":"def splitSentence(sentence): words = sentence.split() return words # Usage sentence = \\"Split a sentence into an array of words\\" words = splitSentence(sentence) print(words) # ['Split', 'a', 'sentence', 'into', 'an', 'array', 'of', 'words']"},{"instruction":"Create an optimization algorithm in Python that takes an array of numbers as input. The algorithm should return the sum of the maximum two elements. Input Array: [1, 2, 4, 5, 3, 7]","output":"def maximizeSum(arr): if (len(arr) < 2): print(\\"Invalid Input\\") return first = second = -1000 for i in range(0, len(arr)): if (arr[i] > first): second = first first = arr[i] elif (arr[i] > second and arr[i] != first): second = arr[i] return (first + second) # Driver code arr = [1, 2, 4, 5, 3, 7] print(maximizeSum(arr))"},{"instruction":"Create a Python program to edit a given list according to a given condition [1,3,5,8,2,6], lambda x : x%2==0","output":"def edit_list(l, condition): result = [] for i in l: if condition(i): result.append(i) return result l = [1,3,5,8,2,6] condition = lambda x : x%2==0 print(edit_list(l, condition))"},{"instruction":"Create a basic Python application to fetch data from an SQL database and display it in the console. Not applicable","output":"import sqlite3 conn = sqlite3.connect('example.db') cursor = conn.cursor() cursor.execute('SELECT * FROM users') rows = cursor.fetchall() for row in rows: print(row) conn.close()"},{"instruction":"Write a function to delete the last item from a list in Python. [1,2,3,4,5]","output":"def delete_last_item(lst): lst.pop() return lst print(delete_last_item([1,2,3,4,5]))"},{"instruction":"Generate a regular expression in Python to match strings containing three digits.","output":"import re pattern = re.compile(r'd{3}')"},{"instruction":"Write a Python program to sort a list of words using a recursive bubble sort. ['word', 'list', 'of', 'words']","output":"def bubble_sort(arr): # Base case if len(arr) == 1: return arr swapped = False for i in range(len(arr)-1): if arr[i] > arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] swapped = True # Recursive call if items are swapped if swapped: return bubble_sort(arr) return arr # Test words = ['word', 'list', 'of', 'words'] # Sort bubble_sort(words) # Print sorted list print(words)"},{"instruction":"Generate a command line application that takes a number as an argument and prints out the prime numbers below it.","output":"import sys def find_primes(n): primes = [True] * n for p in range(2, n): if primes[p] == True: for i in range(2*p, n, p): primes[i] = False return [p for p in range(2, n) if primes[p]] if __name__ == '__main__': if len(sys.argv) != 2: print('Usage: python3 prime_numbers.py <number>') sys.exit(1) num = int(sys.argv[1]) print(find_primes(num))"},{"instruction":"Create a web service endpoint in Python to register a user's name by passing it as a parameter.","output":"from flask import Flask, request app = Flask(__name__) @app.route('/register', methods=['POST']) def register_name(): name = request.args.get('name') # Add code to register name return \\"Name registered\\" if __name__ == '__main__': app.run()"},{"instruction":"Write a terminalbased program in Python to simulate a Rock, Paper, Scissors (RPS) game. Not applicable","output":"import random player_choice = '' while player_choice.lower() not in ['rock','paper','scissors']: player_choice = input('Enter your choice (Rock, Paper, Scissors): ') computer_choice = random.choice(['rock', 'paper', 'scissors']) if (player_choice.lower() == 'rock' and computer_choice.lower() == 'scissors') or (player_choice.lower() == 'paper' and computer_choice.lower() == 'rock') or (player_choice.lower() == 'scissors' and computer_choice.lower() == 'paper'): print('You Win!') elif (player_choice.lower() == 'rock' and computer_choice.lower() == 'paper') or (player_choice.lower() == 'paper' and computer_choice.lower() == 'scissors') or (player_choice.lower() == 'scissors' and computer_choice.lower() == 'rock'): print('You Lose!') else: print('It's a tie!')"},{"instruction":"Create a web application in Python using Flask that prints out the number of unique visitors for the site. Not applicable","output":"from flask import Flask, session, render_template app = Flask(name) app.secret_key = 'secret_key' @app.route('/') def index(): if 'visits' not in session: session['visits'] = 0 session['visits'] += 1 return render_template('index.html', visits=session['visits']) if name == 'main': app.run(debug=True)"},{"instruction":"Design a Python program to detect loops in a linked list.","output":"def detectLoop(head): slow_p = head fast_p = head while(slow_p and fast_p and fast_p.next): slow_p = slow_p.next fast_p = fast_p.next.next if slow_p == fast_p: return True return False"},{"instruction":"Design an Artificial Neural Network in Python to identify the sentiment of tweets.","output":"import numpy as np import tensorflow as tf #Define Model Layers model = tf.keras.Sequential([ tf.keras.layers.Embedding(input_dim=vocabulary_size, output_dim=embedding_dim, input_length=max_length), tf.keras.layers.Flatten(), tf.keras.layers.Dense(24, activation='relu'), tf.keras.layers.Dense(1, activation='sigmoid') ]) #Compile Model model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])"},{"instruction":"Write a function in Python that takes in two strings and returns true if both strings have the same letter counts. 'abc', 'cba'","output":"def isPermutation(s1, s2): s1_dict = {} s2_dict = {} for c in s1: if c in s1_dict: s1_dict[c] += 1 else: s1_dict[c] = 1 for c in s2: if c in s2_dict: s2_dict[c] += 1 else: s2_dict[c] = 1 return s1_dict == s2_dict"},{"instruction":"Generate a Python program that accepts a user input and checks if the input is a valid email address. Not applicable","output":"import re def is_valid_email(email): pattern = re.compile(r\\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+\\") match = pattern.match(email) return match != None user_input = input(\\"Enter your email address: \\") if is_valid_email(user_input): print(\\"Valid email address!\\") else: print(\\"Invalid email address!\\")"},{"instruction":"Create a Python module that converts a temperature in Celsius to Fahrenheit.","output":"def celsius_to_fahrenheit(celsius): return (celsius * 9/5) + 32"},{"instruction":"Create a headless Chrome program in Python that fetches a website and returns the HTML code.","output":"from selenium import webdriver url = \\"https://www.example.com\\" chrome_options = webdriver.ChromeOptions() chrome_options.add_argument('--headless') driver = webdriver.Chrome(options=chrome_options) driver.get(url) htmlCode = driver.page_source print(htmlCode)"},{"instruction":"Generate an optimized python program to calculate the sum of all digits in a given positive integer number. 123456","output":"input_number = 123456 def find_sum_of_digits(number): n = number sum = 0 while n > 0: sum += n % 10 n //= 10 return sum sum_of_digits = find_sum_of_digits(input_number) print(\\"Sum of all digits in {} is {}.\\" .format(input_number,sum_of_digits))"},{"instruction":"Create a Python code to group a list of names into groups of three. ['John','Mike','Sarah','Larry','Steve','Blake','Karen']","output":"def group_names(names): \\"\\"\\" This function groups a list of names into groups of three \\"\\"\\" list_of_groups = [] # iterate over the list, stoping when only one name remains while(len(names) > 0): temp_list = [] # iterate over elments in groups of three for i in range(3): # check if there are more than three elements left in the list if(i < len(names)): temp_list.append(names[i]) # pop the elements from the names list for i in range(3): if(len(names) > 0): names.pop(0) # append the list of three elements to the list of groups list_of_groups.append(temp_list) # return the list of names return list_of_groups names = ['John','Mike','Sarah','Larry','Steve','Blake','Karen'] grouped_names = group_names(names) print(grouped_names) #[['John', 'Mike', 'Sarah'], ['Larry', 'Steve', 'Blake'], ['Karen']]"},{"instruction":"Create Python code to edit a given piece of code and make it more efficient. def sum_of_squares(arr): total = 0 for i in range(len(arr)): for j in range(len(arr)): total += arr[i] * arr[j] return total","output":"def sum_of_squares(arr): total = 0 for num in arr: total += num * num return total"},{"instruction":"Create a Python dictionary which contains a list of keyvalue pairs of word counts. words = [cat, apple, dog, banana]","output":"word_count = { 'cat': 1, 'apple': 1, 'dog': 1, 'banana': 1 }"},{"instruction":"Using a Greedy algorithm, write a program in Python that takes in a list of tasks with varying completion times and returns the order in which the tasks should be completed to achieve the overall minimum completion time. Tasks T1 (5 minutes), T2 (8 minutes), T3 (2 minutes), T4 (9 minutes)","output":"# Greedy Algorithm to find minimum completion time def find_min_completion_time(tasks): completed_tasks = [] total_time = 0 while len(tasks) > 0: # Find the task with the minimum completion time min_time = min(tasks, key=lambda x:x[1]) completed_tasks.append(min_time[0]) total_time += min_time[1] # remove the task from the list of tasks tasks.remove(min_time) return (completed_tasks, total_time) tasks = [('T1', 5), ('T2', 8), ('T3', 2), ('T4', 9)] result = find_min_completion_time(tasks) print('Order of tasks: ', result[0]) print('Minimum Completion time: ', result[1]) # Output # Order of tasks: ['T3', 'T1', 'T2', 'T4'] # Minimum Completion time: 24"},{"instruction":"Design a Python class to filter an array of strings. Array: [foo, hello, world, foobar], Character: o","output":"class FilterStrings: def __init__(self, array, character): self.array = array self.character = character def filter(self): output = [] for s in self.array: for c in s: if c == self.character: output.append(s) break return output # driver code arr = [\\"foo\\", \\"hello\\", \\"world\\", \\"foobar\\"] character = \\"o\\" filteredArray = FilterStrings(arr, character).filter() print(\\"Array with strings containing character o: \\", filteredArray)"},{"instruction":"Convert the following Python function to Java. def add_two_numbers(a, b): return a + b","output":"public static int addTwoNumbers(int a, int b) { return a + b; }"},{"instruction":"Create a function in Python that will return the most frequent value in a dataset. [0, 1, 6, 4, 4, 5, 0, 2, 8, 5, 6, 8, 0, 8]","output":"def most_frequent(data): counts = dict() for i in data: if i in counts: counts[i] += 1 else: counts[i] = 1 max_value = max(counts.values()) return [k for k, v in counts.items() if v == max_value]"},{"instruction":"Write an algorithm to a binary search tree in Python. Not applicable","output":"class Node: def __init__(self, key): self.left = None self.right = None self.val = key def insert(root,node): if root is None: root = node else: if root.val < node.val: if root.right is None: root.right = node else: insert(root.right, node) else: if root.left is None: root.left = node else: insert(root.left, node) def inorder(root): if root: inorder(root.left) print(root.val) inorder(root.right) r = Node(50) insert(r,Node(30)) insert(r,Node(20)) insert(r,Node(40)) insert(r,Node(70)) insert(r,Node(60)) insert(r,Node(80)) inorder(r)"},{"instruction":"Create a loop in Python that prints numbers 1 to 10.","output":"for i in range(1, 11): print(i)"},{"instruction":"Construct an AI algorithm to identify the sentiment of a given set of comments in Python. comments = [I love the product!, I'm not a fan of this product]","output":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sid_obj = SentimentIntensityAnalyzer() for comment in comments: sentiment_dict = sid_obj.polarity_scores(comment) print(comment, sentiment_dict) # Output I love the product! {'neg': 0.0, 'neu': 0.424, 'pos': 0.576, 'compound': 0.6369} I'm not a fan of this product {'neg': 0.396, 'neu': 0.604, 'pos': 0.0, 'compound': -0.5574}"},{"instruction":"Write a Python class to represent a complex number.","output":"class ComplexNumber: def __init__(self, real, imaginary): self.real = real self.imaginary = imaginary def __repr__(self): if self.imaginary >= 0: return '{} + {}i'.format(self.real, self.imaginary) else: return '{} - {}i'.format(self.real, abs(self.imaginary)) def __add__(self, other): real = self.real + other.real imaginary = self.imaginary + other.imaginary return ComplexNumber(real, imaginary) def __sub__(self, other): real = self.real - other.real imaginary = self.imaginary - other.imaginary return ComplexNumber(real, imaginary)"},{"instruction":"Change the following Pythoncode to display Hello, World! on the web page: print(Hello, World!)","output":"from flask import Flask app = Flask(__name__) @app.route(\\"/\\") def hello(): return \\"Hello, World!\\" if __name__ == \\"__main__\\": app.run()"},{"instruction":"Create a Django app and view to display query results of all customers who had made a purchase within the last month.","output":"# Create a Django app python manage.py startapp customers # Create a view in view.py in the customers app def list_customers(request): customers = Customers.objects.filter(purchased_at__gte=timezone.now() - timezone.timedelta(days=30)).all() return render(request, 'customers.html', {'customers': customers}) # Update the urls.py in the app urlpatterns = [ path('customers', list_customers, name='list_customers') ] # Create customers.html template <html> <body> <h2> Customers </h2> <ul> {% for customer in customers %} <li> {{ customer.name }} </li> {% endfor %} </ul> </body> </html>"},{"instruction":"Create a Python program that takes any number of lists and combines them into a single list. list_1 = [1, 2, 3] list_2 = [4, 5, 6] list_3 = [7, 8, 9]","output":"def combine_lists(*lists): '''This function takes any number of lists and combines them into a single list.''' combined_list = [] for list in lists: for item in list: combined_list.append(item) return combined_list combined_list = combine_lists(list_1, list_2, list_3) print(combined_list)"},{"instruction":"Write a script in python that outputs all even numbers between 0 and 10.","output":"for number in range(0,11): if (number % 2 == 0): print(number)"},{"instruction":"Write a Python program to print a Fibonacci sequence with a length of n, where n is a given number that is equal to or greater than 0. n = 5","output":"def fibonacci(n): # Base Case if n == 0: return [] elif n == 1: return [0] # Recursive Case else: l = fibonacci(n-1) l.append(l[-1]+l[-2]) return l # Driver Program n = 5 print(fibonacci(n)) # Output: [0, 1, 1, 2, 3]"},{"instruction":"Sort a given list of strings into alphabetical order. my_list = [Python, JavaScript, Java, C++]","output":"def sort_alphabetically(my_list): return sorted(my_list) print(sort_alphabetically(my_list)) # ['C++', 'Java', 'JavaScript', 'Python']"},{"instruction":"Write a Python program to sort a list of integers in ascending order. list=[4,2,3,5,1]","output":"list = [4, 2, 3, 5, 1] list.sort() print(list)"},{"instruction":"Create a function in Python that takes an array and returns the element at the middle index. [1, 2, 3, 4, 5]","output":"def returnMiddle(arr): if len(arr) % 2 == 0: return (arr[int(len(arr) / 2) - 1] + arr[int(len(arr) / 2)])/2 else: return arr[int(len(arr) / 2)] print(returnMiddle([1, 2, 3, 4, 5]))"},{"instruction":"Create a Python program that asks the user for a number and displays all the prime numbers up to that number.","output":"number = int(input(\\"Please enter a number: \\")) for n in range(2, number + 1): is_prime = True for i in range(2, n): if n % i == 0: is_prime = False break if is_prime: print(n)"},{"instruction":"mplement quicksort in Python. Not applicable","output":"def quicksort(arr): if len(arr) < 2: return arr pivot = arr[0] less_than_pivot = [x for x in arr[1:] if x <= pivot] greater_than_pivot = [x for x in arr[1:] if x > pivot] return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)"},{"instruction":"Rewrite the below program to use Python's dictionary comprehension. states = {'NY': 'New York', 'PA': 'Pennsylvania', 'FL': 'Florida'} inverse_states = {} for key,value in states.items(): inverse_states[value] = key","output":"states = {'NY': 'New York', 'PA': 'Pennsylvania', 'FL': 'Florida'} inverse_states = {value:key for key,value in states.items()}"},{"instruction":"Write a Python function that takes a list as an input and returns the largest element. [8, 5, 2, 4, 9]","output":"def maximum(list): return max(list) list = [8, 5, 2, 4, 9] result = maximum(list) print(result)"},{"instruction":"Create a RESTful API endpoint in Python with Flask that returns a list of items. The endpoint should return a list of books (with fields for title and author).","output":"from flask import Flask, jsonify app = Flask(__name__) @app.route('/books', methods=['GET']) def get_books(): books = [ { 'title': 'The Great Gatsby', 'author': 'F. Scott Fitzgerald' }, { 'title': 'The Catcher in the Rye', 'author': 'J. D. Salinger' }, { 'title': 'To Kill a Mockingbird', 'author': 'Harper Lee' } ] return jsonify(books) if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Debug a piece of code written in Python. def say_hello(name): message = Hello %s! % name print(message) say_hello('John')","output":"def say_hello(name): message = \\"Hello %s!\\" % name print(message) # checking for input if name != '': say_hello(name) else: print('Error: No name provided')"},{"instruction":"Develop a class for implementing a stack in Python.","output":"class Stack: # Constructor def __init__(self): self.stack = [] # Pop operation def pop(self): if len(self.stack) <= 0: return \\"Stack is empty\\" return self.stack.pop() # Push operation def push(self, data): self.stack.append(data) # Peek operation def peek(self): if len(self.stack) <= 0: return \\"Stack is empty\\" return self.stack[-1]"},{"instruction":"Write an algorithm in Python that takes an array of integers as input and checks if it is a palindrome. [1, 2, 3, 4, 3, 2, 1]","output":"def is_palindrome(arr): mid = len(arr) // 2 for i in range(mid): if arr[i] != arr[-i - 1]: return False return True result = is_palindrome([1, 2, 3, 4, 3, 2, 1]) print(result) # True"},{"instruction":"This script generates simulated RNASeq reads (in .bed format) from known gene annotations. To use this script, run gensimreads.py followed by the options and the BEDFile. The options available are: e/expression [expression level file]: Specify the weight of each transcript. Each line in the file should have at least (NFIELD+1) fields, with field 0 the annotation id, and field NFIELD the weight of this annoation. If this file is not provided, uniform weight is applied. n/nreads readcnt: Specify the number of reads to be generated. Default 100000. b/posbias [positional bias file]: Specify the positional bias file. The file should include at least 100 lines, each contains only one integer number, showing the preference of the positional bias at this position. If no positional bias file is specified, use uniform distribution bias. l/readlen [read length]: Specify the read length. Default 32. o/output [output .bed file]: Specify the output file. Default STDOUT. f/field [NFIELD]: The field of each line as weight input. Default 7 (beginning from field 0) to compatible to genexplvprofile.py. p/pairend [PELENMEAN,PELENSTD]: Generate pairedend reads with specified insert length mean and standard derivation. The default is 200,20. stranded: The reads are strand specific. The BEDFile is the gene annotation file (in BED format). Use '' for STDIN input. Note that the bed file is required to sort according to the chromosome name and position. In Unix systems, use sort k 1,1 k 2,2n in.BED > out.BED to get a sorted version (out.BED) of the bed file (in.BED). No problem to handle reads spanning multiple exons.","output":"#!/usr/bin/env python \\"\\"\\" This script generates simulated RNA-Seq reads (in .bed format) from known gene annotations. USAGE gensimreads.py {OPTIONS} <BED-File|-> PARAMETER BED-FiletThe gene annotation file (in BED format). Use '-' for STDIN input OPTIONS -e/--expression [expression level file] tSpecify the weight of each transcript. Each line in the file should have at least (NFIELD+1) fields, with field 0 the annotation id, and field NFIELD the weight of this annoation. If this file is not provided, uniform weight is applied. -n/--nreads readcnt tSpecify the number of reads to be generated. Default 100000. -b/--posbias [positional bias file] tSpecify the positional bias file. The file should include at least 100 lines, each contains only one integer number, showing the preference of the positional bias at this position. If no positional bias file is specified, use uniform distribution bias. -l/--readlen [read length] tSpecify the read length. Default 32. -o/--output [output .bed file] tSpecify the output file. Default STDOUT -f/--field [NFIELD] tThe field of each line as weight input. Default 7 (beginning from field 0) to compatible to genexplvprofile.py. -p/--pairend [PELENMEAN,PELENSTD]t Generate paired-end reads with specified insert length mean and standard derivation. The default is 200,20. --stranded tThe reads are strand specific. NOTE 1. The bed file is required to sort according to the chromosome name and position. In Unix systems, use \\"sort -k 1,1 -k 2,2n in.BED > out.BED\\" to get a sorted version (out.BED) of the bed file (in.BED). 2. No problem to handle reads spanning multiple exons. HISTORY 04/30/2012 Support generating stranded RNA-Seq reads 02/16/2012 Now runs on python 2.7 02/08/2012 Change default value of NFIELD from 4 to 7 to be compatible with default genexplvprofile values. 01/29/2012 Add paired-end support. 01/09/2012 Add -f option. AUTHOR Wei Li (li.david.wei AT gmail.com) \\"\\"\\" from __future__ import print_function import sys; import subprocess; import pydoc; import os; import random; import bisect; import math; from getSegs import *; import pdb; # read length readlen=32; # number of reads to sample readcnt=100000; nfield=7; if len(sys.argv)<2: print(pydoc.render_doc(sys.modules[__name__])); sys.exit(); allids={}; allidl=[]; allexp=[]; posweight=[]; #onbedfile=sys.argv[-1]+'.reads.bed'; onbedfile=\\"-\\"; genpereads=False; pemean=200; pestd=20; stranded=False; for i in range(len(sys.argv)): if i<len(sys.argv)-1: if sys.argv[i]=='-e' or sys.argv[i]=='--expression': # parse the annoatation file, and sum up the weights nline=0; totalweight=0; print('Reading annoatation file...',file=sys.stderr); for lines in open(sys.argv[i+1]): nline=nline+1; if lines[0]=='#': continue; fields=lines.strip().split(); if len(fields)<nfield+1: print('Error: the annotation file should include at least '+str(nfield+1)+' fields.',file=sys.stderr); sys.exit(); allids[fields[0]]=0; totalweight+=float(fields[nfield]); allexp.append(totalweight); allidl.append(fields[0]); print('Read %d lines of the annoatation' % nline,file=sys.stderr); #print('Total weight: %f' % sum(totalweight)); if sys.argv[i]=='-b' or sys.argv[i]=='--posbias': bline=0; tbweight=0; for lines in open(sys.argv[i+1]): bline=bline+1; if bline>100: break; tbweight=float(lines.strip()); posweight.append(tbweight); if len(posweight)!=100: print('Error: the bias file should include at least 100 lines.',file=sys.stderr); sys.exit(); if sys.argv[i]=='-n' or sys.argv[i]=='--nreads': readcnt=int(sys.argv[i+1]); print('Read count:',readcnt,file=sys.stderr); if sys.argv[i]=='-l' or sys.argv[i]=='--readlen': readlen=int(sys.argv[i+1]); print('Read length:',readlen,file=sys.stderr); if sys.argv[i]=='-o' or sys.argv[i]=='--output': onbedfile=sys.argv[i+1]; print('Output bed file:',onbedfile,file=sys.stderr); if sys.argv[i]=='-f' or sys.argv[i]=='--field': nfield=int(sys.argv[i+1]); print('Field:',nfield,file=sys.stderr); if sys.argv[i]=='-p' or sys.argv[i]=='--pairend': genpereads=True; pef=sys.argv[i+1].split(','); pemean=int(pef[0]); pestd=int(pef[1]); print('Generate paired-end reads with mean and std '+str(pemean)+','+str(pestd),file=sys.stderr); if sys.argv[i]=='-h' or sys.argv[i]=='--help': print(pydoc.render_doc(sys.modules[__name__])); sys.exit(); if sys.argv[i]=='--stranded': stranded=True; bedfile=sys.argv[-1]; # if no annotation file is specified, use uniform distri. print('Assigning weights...',file=sys.stderr); if len(allexp)==0: totalweight=0; for lines in open(bedfile): bedfield=lines.strip().split(); allids[bedfield[3]]=0; totalweight+=1; allexp.append(totalweight); allidl.append(bedfield[3]); # sampling process print('Sampling...',file=sys.stderr); for j in range(readcnt): k=random.random()*totalweight; sel=bisect.bisect_right(allexp,k); allids[allidl[sel]]=allids[allidl[sel]]+1; # if no bias file specified, use uniform distrib print('Total assigned reads:',sum(allids.values()),file=sys.stderr); #debug info: #for k in allidl: # print (k, allids[k]); #sys.exit(); if onbedfile!=\\"-\\": onfid=open(onbedfile,'w'); else: onfid=sys.stdout; nlines=0; totalgenreads=0; # read bed file for lines in open(bedfile): # update line counter nlines=nlines+1; if nlines %10000==1: print('Processing '+str(nlines)+' lines...',file=sys.stderr); # parse lines bedfield=lines.strip().split(); if len(bedfield)!=12: print('Error: incorrect number of fields (should be 12)',file=sys.stderr); continue; if bedfield[5]=='+': direction=1; elif bedfield[5]=='-': direction=-1; else: print('Error: incorrect field in field[5] %s:' %bedfield[5],file=sys.stderr); if bedfield[3] not in allids: # the current id not found, continue continue; nreads=allids[bedfield[3]]; if nreads<1: continue; # parse all segments fieldrange=(int(bedfield[1]),int(bedfield[2])); if bedfield[10][-1]==',': bedfield[10]=bedfield[10][:-1]; if bedfield[11][-1]==',': bedfield[11]=bedfield[11][:-1]; exonlen=[int(x) for x in bedfield[10].split(',')]; exonstart=[int(x)+fieldrange[0] for x in bedfield[11].split(',')]; # old code: for each possible position in the transcript, build its segments # for ne in range(len(exonlen)): # for pos in range(exonstart[ne],exonstart[ne]+exonlen[ne]): # create a position totallen=sum(exonlen); # here, we randomly choose one position if genpereads==False: selrange=totallen-readlen+1; else: selrange=totallen-pemean+2*pestd; if selrange<1: if genpereads==False: print('Ignore annoatation',bedfield[3],'of length',totallen,'Reads:',allids[bedfield[3]],file=sys.stderr); else: print('Ignore annoatation',bedfield[3],'of length',totallen,'since its shorter than paired-end mean insert length. Reads:',allids[bedfield[3]],file=sys.stderr); continue; totalgenreads+=nreads; cumlen=[];cumlen.extend(exonlen); for i in range(1,len(cumlen)): cumlen[i]=cumlen[i]+cumlen[i-1]; # for nun-uniform distribution, construct a new array for selection thistbweight=[]; if len(posweight)!=0: kweight=0; for i in range(selrange): nfrac=i*100.0/selrange; # a value between 0-100 nlower=int(math.floor(nfrac)); # 0-100 nhigher=int(math.ceil(nfrac)); # 0-100 if nhigher==nlower: nhigher=nlower+1; if nhigher<100: val=posweight[nlower]*(nfrac-nlower)+posweight[nhigher]*(nhigher-nfrac); else: val=posweight[99]; kweight+=val; thistbweight.append(kweight); for t in range(nreads): if len(posweight)==0: tpos=random.choice(range(selrange)); else: rd=random.random()*kweight; bsl=bisect.bisect_right(thistbweight,rd); # for reverse transcripts: flip the position if direction==-1: bsl=selrange-1-bsl; tpos=bsl; pos=tpos2pos(tpos,cumlen,exonstart); if genpereads==True: tpos2=tpos+int(random.normalvariate(pemean-readlen+1,pestd)); pos2=tpos2pos(tpos2,cumlen,exonstart); # get the segments if True: (startrange,lenrange,status)=getSegs(pos,readlen,1,exonstart,exonlen); if status!=0: print('Status:',status,', pos:', pos,'out of',len(cumlen),file=sys.stderr); #pdb.set_trace(); continue; # generate another pair if genpereads==True: (startrange2,lenrange2,status2)=getSegs(pos2,readlen,1,exonstart,exonlen); if status==1: print('Status:',status,', pos:', pos,'out of',len(cumlen),file=sys.stderr); if genpereads==False: lineid=\\"%s_e_%d_%s_%d\\" % (bedfield[3],t,bedfield[0],pos); else: lineid=\\"%s_e_%d_%s_%d/1\\" % (bedfield[3],t,bedfield[0],pos); lineid2=\\"%s_e_%d_%s_%d/2\\" % (bedfield[3],t,bedfield[0],pos); # random direction if stranded==False or direction==0: thisdir=random.choice([1,-1]); else: thisdir=direction; writeBedline(onfid,lineid,bedfield[0],thisdir,startrange,lenrange); if genpereads==True: writeBedline(onfid,lineid2,bedfield[0],thisdir*(-1),startrange2,lenrange2); else: print(bedfield[0],file=sys.stdout); #print('Pospool:'); #for k in sorted(pospool.keys()): # print(str(k)+\\":\\"+str(pospool[k]),end=\\",\\"); #print(); print('Total '+str(nlines)+' lines...',file=sys.stderr); print('Total '+str(totalgenreads)+' reads...',file=sys.stderr); if onbedfile!=\\"-\\": onfid.close();"},{"instruction":"Using Python, create a program to convert the string 'Hello, world!' to titlecase. Hello, world!","output":"import string def toTitlecase(inputString): return inputString.title() print(toTitlecase(\\"Hello, world!\\"))"},{"instruction":"Write a Python function to get the nth number in the Fibonacci sequence. n = 5","output":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b"},{"instruction":"mplement a natural language processing model using the NLTK library in Python in order to extract sentiment from user feedback reviews. This product is great! It changed my life for the better","output":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sid = SentimentIntensityAnalyzer() review_text = \\"This product is great! It changed my life for the better\\" scores = sid.polarity_scores(review_text) print(scores['compound']) # 0.94 if scores['compound'] >= 0.05: print(\\"Positive sentiment\\") elif scores['compound'] <= - 0.05: print(\\"Negative sentiment\\") else: print(\\"Neutral sentiment\\") # Output: Positive sentiment"},{"instruction":"Compare two lists and extract the common elements of both the lists in Python.","output":"def commonElements(l1, l2): return set(l1).intersection(l2)"},{"instruction":"Create a virtual environment for Python using pipenv in the current directory.","output":"pipenv --three"},{"instruction":"Create a python function that takes in a list of strings and returns a list with all the strings stripped of unwanted whitespace. lst = [ hello , world , hi ]","output":"def strip_whitespace(lst): return [string.strip() for string in lst]"},{"instruction":"Create a list of HTML tags using the Python language.","output":"html_tags = [\\"a\\", \\"abbr\\", \\"acronym\\", \\"address\\", \\"applet\\", \\"area\\", \\"article\\", \\"aside\\", \\"audio\\", \\"b\\", \\"base\\", \\"basefont\\", \\"bdi\\", \\"bdo\\", \\"big\\", \\"blockquote\\", \\"body\\", \\"br\\", \\"button\\", \\"canvas\\", \\"caption\\", \\"center\\", \\"cite\\", \\"code\\", \\"col\\", \\"colgroup\\", \\"data\\", \\"datalist\\", \\"dd\\", \\"del\\", \\"details\\", \\"dfn\\", \\"dialog\\", \\"dir\\", \\"div\\", \\"dl\\", \\"dt\\", \\"em\\", \\"embed\\", \\"fieldset\\", \\"figcaption\\", \\"figure\\", \\"font\\", \\"footer\\", \\"form\\", \\"frame\\", \\"frameset\\", \\"h1\\", \\"h2\\", \\"h3\\", \\"h4\\", \\"h5\\", \\"h6\\", \\"head\\", \\"header\\", \\"hgroup\\", \\"hr\\", \\"html\\", \\"i\\", \\"iframe\\", \\"img\\", \\"input\\", \\"ins\\", \\"kbd\\", \\"keygen\\", \\"label\\", \\"legend\\", \\"li\\", \\"link\\", \\"main\\", \\"map\\", \\"mark\\", \\"menu\\", \\"menuitem\\", \\"meta\\", \\"meter\\", \\"nav\\", \\"noframes\\", \\"noscript\\", \\"object\\", \\"ol\\", \\"optgroup\\", \\"option\\", \\"output\\", \\"p\\", \\"param\\", \\"picture\\", \\"pre\\", \\"progress\\", \\"q\\", \\"rp\\", \\"rt\\", \\"ruby\\", \\"s\\", \\"samp\\", \\"script\\", \\"section\\", \\"select\\", \\"small\\", \\"source\\", \\"span\\", \\"strike\\", \\"strong\\", \\"style\\", \\"sub\\", \\"summary\\", \\"sup\\", \\"table\\", \\"tbody\\", \\"td\\", \\"textarea\\", \\"tfoot\\", \\"th\\", \\"thead\\", \\"time\\", \\"title\\", \\"tr\\", \\"track\\", \\"tt\\", \\"u\\", \\"ul\\", \\"var\\", \\"video\\", \\"wbr\\"]"},{"instruction":"Generate a reverse string of each word present in the list. [Python, Java, C++]","output":"def reverseStringOfList(list): revList = [] for string in list: revList.append(string[::-1]) return revList result = reverseStringOfList([\\"Python\\", \\"Java\\", \\"C++\\"]) print(result)"},{"instruction":"Construct a Python script that would train a model and show its performance Input dataset consists of 47 samples, each with 40 features and 1 label.","output":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Load the dataset dataset = pd.read_csv(\\"dataset.csv\\") # Separate data into features and labels features = dataset.drop(['label'], axis=1) labels = dataset[\\"label\\"] # Split the data into training and testing sets x_train, x_test, y_train, y_test = train_test_split(features, labels, test_size=0.25, random_state=42) # Create a model and train it model = LogisticRegression() model.fit(x_train, y_train) # Get a prediction on the test set y_preds = model.predict(x_test) # Calculate the accuracy of the model accuracy = accuracy_score(y_test, y_preds) print('Accuracy of the model is {}%'.format(accuracy * 100))"},{"instruction":"Develop a Python script that connects to a MySQL database to retrieve certain data information.","output":"\\"\\"\\" Develop a Python script that connects to a MySQL database to retrieve certain data information \\"\\"\\" import pymysql # Establish a connection to a MySQL database conn = pymysql.connect( host='localhost', user='username', password='password', db='dbname', charset='utf8mb4', cursorclass=pymysql.cursors.DictCursor ) # Create and execute a MySQL query sql = 'SELECT * FROM table WHERE condition=value' cur = conn.cursor() cur.execute(sql) # Retrieve results from the query result = cur.fetchall() # Close the cursor and connection before exiting the script cur.close() conn.close()"},{"instruction":"Generate a random string in with five characters in Python.","output":"import string import random def generate_random_string(size): chars = string.ascii_letters + string.digits return ''.join(random.choice(chars) for _ in range(size))"},{"instruction":"Construct a forloop in Python to repeat a code snipet 10 times.","output":"for i in range(10): print(\\"This code is being repeated 10 times\\")"},{"instruction":"Automatically refactor a subsection of Python code that uses two forloops. for x in range(3): for y in range(4): print(x, '', y)","output":"for x, y in itertools.product(range(3), range(4)): print(x, \\"-\\", y)"},{"instruction":"Create a wrapper function to parse the following JSON data into a Python dictionary. { name: John, age: 20, siblings: [Steven, Sarah] }","output":"import json def parse_json(data): # load the json string into a python dictionary data = json.loads(data) # parse the data and store the values in a python dictionary parsed_data = { 'name': data['name'], 'age': data['age'], 'siblings': data['siblings'] } # return the parsed data return parsed_data"},{"instruction":"Create a chatbot using Python which can respond to a user's question about the current weather in a given city. Not applicable","output":"import requests def get_weather(city): url = 'http://api.openweathermap.org/data/2.5/weather' params = {'APPID': '<Your API Key>', 'q': city, 'units': 'metric'} response = requests.get(url, params=params) data = response.json() if 'main' in data: temperature = data['main']['temp'] response = f'The temperature in {city} is {temperature}°C.' else: response = f\\"I couldn't get the weather in {city}.\\" return response city = input('Where are you? ') weather = get_weather(city) print(weather)"},{"instruction":"Generate a Python program to convert an array from the cartesian to the polar coordinate system. [1, 2]","output":"def cartesian_to_polar(arr): x = arr[0] y = arr[1] radius = (x**2 + y**2)**0.5 theta = math.atan2(y,x) return [radius, theta] arr = [1, 2] result = cartesian_to_polar(arr) print(result)"},{"instruction":"Write a function in Python to convert a string of Roman numerals to its decimal equivalent. XLIX","output":"def convert_roman_to_decimal(roman_string): # define a dictionary of key-value pairs roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000} # runs loop to accrue total total = 0 for i in range(len(roman_string)): # assign values of characters check = roman_dict[roman_string[i]] if i+1 < len(roman_string): # if the Next letter is in the string, compare it check_next = roman_dict[roman_string[i+1]] if check >= check_next: # if the examined letter is bigger, add it total += check if check_next > check: # if the examined letter is smaller , subtract it total -= check else: total += check return total"},{"instruction":"Construct a function in Python to determine if a tree is a BST or not.","output":"def isBST(root): # An empty tree is BST if root is None: return True # Check recursively that # all the nodes follow BST property inOrder = isBSTUtil(root, float(\\"-inf\\"), float(\\"inf\\")) # Return result return inOrder # Retusn True if the given tree is BST. Else return False def isBSTUtil(root, mini, maxi): # Base case if root is None: return True # False if this node violates the min/max constraint if root.data < mini or root.data > maxi: return False # Otherwise check the subtrees recursively # tightening the min or max constraint return (isBSTUtil(root.left, mini, root.data-1) and isBSTUtil(root.right, root.data+1, maxi))"},{"instruction":"Create a Python program to scrape a search engine for the top 10 results on a given query. Search query: best movies of 2019","output":"import requests from bs4 import BeautifulSoup url = 'https://www.google.com/search?q=best+movies+of+2019&num=10' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') results = soup.find_all('div', class_='rc') for result in results: title = result.find('h3').text print(title)"},{"instruction":"Modify a Python program to add a minimum value of 10 to each element in a list. list = [1, 2, 3, 4]","output":"list = [x + 10 for x in [1, 2, 3, 4]]"},{"instruction":"Write a function in Python to generate a random password of 8 characters.","output":"import random, string def random_password(length): chars = string.ascii_letters + string.digits + '!@#%^&*()' random_password = ''.join(random.choice(chars) for i in range(length)) return random_password print(random_password(8))"},{"instruction":"Create a python class for a Binary Search Tree (BST).","output":"class BinarySearchTree: def __init__(self, value): self.value = value self.left = None self.right = None def insert(self, value): if value < self.value: if self.left is None: self.left = BinarySearchTree(value) else: self.left.insert(value) else: if self.right is None: self.right = BinarySearchTree(value) else: self.right.insert(value) def contains(self, target): if self.value == target: return True elif target < self.value: if self.left is None: return False else: return self.left.contains(target) else: if self.right is None: return False else: return self.right.contains(target)"},{"instruction":"Develop a custom classifier in Python to detect malicious URLs.","output":"import pandas as pd from sklearn import svm from sklearn.feature_extraction.text import TfidfVectorizer # read in train/test data df_train = pd.read_csv('train_data.csv') df_test = pd.read_csv('test_data.csv') # Vectorize the data vectorizer = TfidfVectorizer() X_train = vectorizer.fit_transform(df_train.url) X_test = vectorizer.transform(df_test.url) # Fit the model model = svm.SVC(kernel='linear', probability=True) model.fit(X_train, df_train.malicious) # Make predictions predictions = model.predict_proba(X_test)"},{"instruction":"Write a Python function to predict the sentiment of a given text. text = ‘I love this film’","output":"import nltk import numpy as np from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_score(text): \\"\\"\\" Computes the sentiment score of a given text. \\"\\"\\" sid = SentimentIntensityAnalyzer() scores = sid.polarity_scores(text) sentiment = np.argmax(list(scores.values())) return sentiment if __name__ == '__main__': text = 'I love this film' print(sentiment_score(text))"},{"instruction":"Create a function in Python to generate random passwords of length n.","output":"import string import random def generate_password(length): chars = string.ascii_lowercase + string.ascii_uppercase + string.digits generated_password = ''.join(random.choice(chars) for i in range(length)) return generated_password"},{"instruction":"mplement a Python function called “check_prime” which takes an integer as an argument and returns True if the number is prime, and False otherwise. check_prime(125)","output":"def check_prime(n): if n == 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True"},{"instruction":"Write a Python function to generate a random string of length n.","output":"import string import random def generate_random_string(length): random_str = ''.join(random.choices(string.ascii_uppercase + string.digits, k=length)) return random_str"},{"instruction":"Create a Python script that crawls a given URL and prints out all of the links within it.","output":"import requests from bs4 import BeautifulSoup def get_url_links(url): # query the website and return the html to the variable page = requests.get(url) # parse the html using beautiful soup and store in variable \`soup\` soup = BeautifulSoup(page.content, 'html.parser') # Take out the <div> of name and get its value links = soup.find_all('a') for link in links: print(link.get('href')) get_url_links('https://www.example.com/')"},{"instruction":"Create a python program to display a histogram of the list items. [1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9]","output":"import matplotlib.pyplot as plt list_data = [1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9] plt.hist(list_data, bins=6) plt.title(\\"Histogram\\") plt.show()"},{"instruction":"Write a function in Python to generate a Fibonacci sequence up to n.","output":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b"},{"instruction":"Write a Python program that takes the two numbers and creates a generator expression to give you the sum of the numbers. 5, 10","output":"sum = sum(x for x in range(5,11)) print(sum)"},{"instruction":"Create a function in python that takes a string and adds a prefix to each word in the string. Input String: Hello World Prefix: Prefix_","output":"def add_prefix(input_string, prefix): \\"\\"\\"Takes a string and adds a prefix to each word in the string.\\"\\"\\" output_string = [] words = input_string.split() for word in words: output_string.append(prefix + word) return ' '.join(output_string)"},{"instruction":"Design a function in Python for swapping the values of two given integers. x = 3, y = 5","output":"def swap_values(x, y): temp = x x = y y = temp return x, y x, y = swap_values(3,5) print(x, y)"},{"instruction":"Create a function to classify a given text into list of predefined categories. text = 'I'm writing a Python program now' categories = ['Python', 'Java', 'HTML', 'C++']","output":"text = 'I'm writing a Python program now' categories = ['Python', 'Java', 'HTML', 'C++'] def classify(text, categories): for category in categories: if category in text: return category return \\"Not found\\" print(classify(text, categories))"},{"instruction":"Write a Python script to explore a data set using matplotlib. The script should show a histogram for each column in the data set and should also show the mean and median values for each feature. Not applicable","output":"import pandas as pd import numpy as np import matplotlib.pyplot as plt # Read the data set df = pd.read_csv('data_set.csv') # Plot histograms for each feature for col in df.columns: plt.hist(df[col], alpha=0.5, label=col) plt.legend(loc='upper right') plt.show() # Compute the mean and median values for each feature mean = df.mean() median = df.median() # Print the mean and median values print(\\"Mean Values:n{}nnMedian Values:n{}\\".format(mean, median))"},{"instruction":"Build a program in Python that compresses a given string using Run Length Encoding.","output":"def run_length_encoding(s): n = len(s) encoded_string = \\"\\" i = 1 while i < n: count = 1 while i < n and s[i] == s[i - 1]: count += 1 i += 1 encoded_string += (s[i - 1] + str(count)) i += 1 return encoded_string"},{"instruction":"Write a Python program to find the string which is most frequent among the given list of strings. my_list = [apple, banana, apple, orange]","output":"def most_frequent(my_list): max_count = 0 frequent_string = \\"\\" for i in my_list: if my_list.count(i) > max_count: max_count = my_list.count(i) frequent_string = i return frequent_string"},{"instruction":"Write a function in Python to evenly distribute the total number of tasks among n workers.","output":"def distribute_tasks(total, num_workers): tasks_per_worker = [total // num_workers] * num_workers remainder = total - sum(tasks_per_worker) # Distribute the remainder among the workers. for i in range(remainder): tasks_per_worker[i] += 1 return tasks_per_worker"},{"instruction":"Write a Python program to create a valid Sudoku board from user input. [4, 0, 6, 8, 0, 0, 2, 0, 9, 0, 0, 5, 9, 0, 1, 0, 0, 3, 0, 0, 7, 0, 0, 6, 0, 0, 8, 0, 0, 0, 0, 0, 7, 0, 0, 5, 1, 0, 0, 0, 7, 0, 0, 8, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 6, 0, 0, 0, 6, 0, 0, 1, 0, 0]","output":"def is_valid_sudoku(board): #Rows for i in range(9): if not (set(board[i]) == {1, 2, 3, 4, 5, 6, 7, 8, 9} or set(board[i]) == {0}): return False #Columns for i in range(9): vals = [] for j in range(9): vals.append(board[j][i]) if not (set(vals) == {1, 2, 3, 4, 5, 6, 7, 8, 9} or set(vals) == {0}): return False #Cubes for i in range(0, 9, 3): for j in range(0, 9, 3): vals = [] for m in range(3): for n in range(3): vals.append(board[i+m][j+n]) if not (set(vals) == {1, 2, 3, 4, 5, 6, 7, 8, 9} or set(vals) == {0}): return False return True def generate_board(arr): if len(arr) != 81: return False board = [[0 for i in range(9)] for j in range(9)] for i in range(81): board[int(i/9)][i%9] = arr[i] if is_valid_sudoku(board): return board else: return False"},{"instruction":"Write a function in Python that constructs a URL based on user input. The function should take a string and an integer as arguments and should construct a URL with the string as the base followed by sequential numbers starting from the number provided in the integer argument. base = https://www.example.com/ start_num = 10","output":"def construct_url(base, start_num): num = start_num while True: url = base + str(num) yield url num += 1"},{"instruction":"Write a Python program to count the number of digits in an integer. number = 9923","output":"def count_digits(number): count = 0 while (number != 0): count=count+1 number = number//10 return count"},{"instruction":"Create a post request in python with the given parameters. API: https://api.endpoint.com Headers: {'Authorization': 'Bearer abcdefg', 'ContentType': 'application/json'} Parameters: {'name': 'John', 'age': 25}","output":"import requests url = 'https://api.endpoint.com' headers = {'Authorization': 'Bearer abcdefg', 'Content-Type': 'application/json'} parameters = {'name': 'John', 'age': 25} response = requests.post(url, headers=headers, json=parameters)"},{"instruction":"mplment a Python class to store data in a dictionary.","output":"class DataStorage: def __init__(self): self._data = {} def store_data(self, key, value): self._data[key] = value def get_data(self, key): return self._data.get(key)"},{"instruction":"Generate a python class that implements the turtle's position and orientation.","output":"class TurtlePosOri: def __init__(self, pos_x, pos_y, orientation): self.pos_x = pos_x self.pos_y = pos_y self.orientation = orientation def get_turtle_position(self): return (self.pos_x, self.pos_y) def get_turtle_orientation(self): return self.orientation def set_turtle_position(self, pos_x, pos_y): self.pos_x = pos_x self.pos_y = pos_y def set_turtle_orientation(self, orientation): self.orientation = orientation"},{"instruction":"Convert GenBank flat files to GFF3 format using the provided Python script. Run the script with the following arguments: 'i' or 'input_file' followed by the path to the input GBK file 'o' or 'output_file' followed by the path to the output GFF file to be created (optional) 'with_fasta' to include the FASTA section with genomic sequence at the end of the file (default) 'no_fasta' to exclude the FASTA section The script supports the following features: gene, CDS, mRNA, tRNA, rRNA and primary identifiers, gene product name annotations. The script links parent/child features using the expected format convention of shared /locus_tag entries for each feature of the gene graph (gene, mRNA, CDS). The script has only been tested with prokaryotic (nonspliced) genes.","output":"#!/usr/bin/env python3 \\"\\"\\" This is a script to convert GenBank flat files to GFF3 format with a specific focus on initially maintaining as much structural annotation as possible, then expanding into functional annotation support. This is not guaranteed to convert all features, but warnings will be printed wherever possible for features which aren't included. Currently supported: Structural features: gene, CDS, mRNA, tRNA, rRNA Annotations: primary identifiers, gene product name This is written to handle multi-entry GBK files Caveats: - Because the GBK flatfile format doesn't explicitly model parent/child features, this script links them using the expected format convention of shared /locus_tag entries for each feature of the gene graph (gene, mRNA, CDS) - It has only been tested with prokaryotic (non-spliced) genes Author: Joshua Orvis (jorvis AT gmail) \\"\\"\\" import argparse import sys from collections import defaultdict from Bio import SeqIO from biocode import annotation, things, utils def main(): parser = argparse.ArgumentParser( description='Convert GenBank flat files to GFF3 format') output file to be written parser.add_argument('-i', '--input_file', type=str, required=True, help='Path to an input GBK file' ) parser.add_argument('-o', '--output_file', type=str, required=False, help='Path to an output GFF file to be created' ) parser.add_argument('--with_fasta', dest='fasta', action='store_true', help='Include the FASTA section with genomic sequence at end of file. (default)' ) parser.add_argument('--no_fasta', dest='fasta', action='store_false' ) parser.set_defaults(fasta=True) args = parser.parse_args() output will either be a file or STDOUT ofh = sys.stdout if args.output_file is not None: ofh = open(args.output_file, 'wt') ofh.write(\\"gff-version 3n\\") assemblies = dict() current_assembly = None current_gene = None current_RNA = None rna_count_by_gene = defaultdict(int) exon_count_by_RNA = defaultdict(int) seqs_pending_writes = False features_skipped_count = 0 # each gb_record is a SeqRecord object for gb_record in SeqIO.parse(open(args.input_file, \\"r\\"), \\"genbank\\"): mol_id = gb_record.name if mol_id not in assemblies: assemblies[mol_id] = things.Assembly(id=mol_id) if len(str(gb_record.seq)) > 0: seqs_pending_writes = True assemblies[mol_id].residues = str(gb_record.seq) assemblies[mol_id].length = len(str(gb_record.seq)) current_assembly = assemblies[mol_id] # each feat is a SeqFeature object for feat in gb_record.features: #print(feat) fmin = int(feat.location.start) fmax = int(feat.location.end) if feat.location.strand == 1: strand = '+' elif feat.location.strand == -1: strand = '-' else: raise Exception(\\"ERROR: unstranded feature encountered: {0}\\".format(feat)) #print(\\"{0} located at {1}-{2} strand:{3}\\".format( locus_tag, fmin, fmax, strand ) ) if feat.type == 'source': continue if feat.type == 'gene': # print the previous gene (if there is one) if current_gene is not None: gene.print_as(fh=ofh, source='GenBank', format='gff3') locus_tag = feat.qualifiers['locus_tag'][0] gene = things.Gene(id=locus_tag, locus_tag=locus_tag) gene.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand ) current_gene = gene current_RNA = None elif feat.type == 'mRNA': locus_tag = feat.qualifiers['locus_tag'][0] rna_count_by_gene[locus_tag] += 1 feat_id = \\"{0}.mRNA.{1}\\".format( locus_tag, rna_count_by_gene[locus_tag] ) mRNA = things.mRNA(id=feat_id, parent=current_gene, locus_tag=locus_tag) mRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand ) gene.add_mRNA(mRNA) current_RNA = mRNA if feat_id in exon_count_by_RNA: raise Exception( \\"ERROR: two different RNAs found with same ID: {0}\\".format(feat_id) ) else: exon_count_by_RNA[feat_id] = 0 elif feat.type == 'tRNA': locus_tag = feat.qualifiers['locus_tag'][0] rna_count_by_gene[locus_tag] += 1 feat_id = \\"{0}.tRNA.{1}\\".format(locus_tag, rna_count_by_gene[locus_tag]) if 'product' in feat.qualifiers: anticodon = feat.qualifiers['product'][0] else: anticodon = None tRNA = things.tRNA(id=feat_id, parent=current_gene, anticodon=anticodon) tRNA.locate_on(target=current_assembly, fmin=fmin, fmax=fmax, strand=strand) gene.add_tRNA(tRNA) current_RNA = tRNA if feat_id in exon_count_by_RNA: raise Exception( \\"ERROR: two different RNAs found with same ID: {0}\\".format(feat_id) ) else: exon_count_by_RNA[feat_id] = 0 elif feat.type == 'rRNA': locus_tag = feat.qualifiers['locus_tag'][0] rna_count_by_gene[locus_tag] += 1 feat_id = \\"{0}.rRNA.{1}\\".format(locus_tag, rna_count_by_gene[locus_tag]) if 'product' in feat.qualifiers: product = feat.qualifiers['product'][0] else: product = None annot = annotation.FunctionalAnnotation(product_name=product) rRNA = things.rRNA(id=feat_id, parent=current_gene, annotation=annot) rRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand ) gene.add_rRNA(rRNA) current_RNA = rRNA if feat_id in exon_count_by_RNA: raise Exception( \\"ERROR: two different RNAs found with same ID: {0}\\".format(feat_id) ) else: exon_count_by_RNA[feat_id] = 0 elif feat.type == 'CDS': locus_tag = feat.qualifiers['locus_tag'][0] # If processing a prokaryotic GBK, we'll encounter CDS before mRNA, so we have to # manually make one if current_RNA is None: feat_id = \\"{0}.mRNA.{1}\\".format( locus_tag, rna_count_by_gene[locus_tag] ) mRNA = things.mRNA(id=feat_id, parent=current_gene) mRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand ) gene.add_mRNA(mRNA) current_RNA = mRNA if 'product' in feat.qualifiers: product = feat.qualifiers['product'][0] else: product = None if 'gene' in feat.qualifiers: gene_symbol = feat.qualifiers['gene'][0] else: gene_symbol = None annot = annotation.FunctionalAnnotation(product_name=product, gene_symbol=gene_symbol) if 'db_xref' in feat.qualifiers: for dbxref in feat.qualifiers['db_xref']: annot.add_dbxref(dbxref) polypeptide_id = \\"{0}.polypeptide.{1}\\".format( locus_tag, rna_count_by_gene[locus_tag] ) polypeptide = things.Polypeptide(id=polypeptide_id, parent=mRNA, annotation=annot) mRNA.add_polypeptide(polypeptide) exon_count_by_RNA[current_RNA.id] += 1 cds_id = \\"{0}.CDS.{1}\\".format( current_RNA.id, exon_count_by_RNA[current_RNA.id] ) current_CDS_phase = 0 for loc in feat.location.parts: subfmin = int(loc.start) subfmax = int(loc.end) CDS = things.CDS(id=cds_id, parent=current_RNA) CDS.locate_on( target=current_assembly, fmin=subfmin, fmax=subfmax, strand=strand, phase=current_CDS_phase ) current_RNA.add_CDS(CDS) # calculate the starting phase for the next CDS feature (in case there is one) # 0 + 6 = 0 TTGCAT # 0 + 7 = 2 TTGCATG # 1 + 6 = 1 TTGCAT # 2 + 7 = 1 TTGCATG # general: 3 - ((length - previous phase) % 3) current_CDS_phase = 3 - (((subfmax - subfmin) - current_CDS_phase) % 3) if current_CDS_phase == 3: current_CDS_phase = 0 exon_id = \\"{0}.exon.{1}\\".format( current_RNA.id, exon_count_by_RNA[current_RNA.id] ) exon = things.Exon(id=exon_id, parent=current_RNA) exon.locate_on( target=current_assembly, fmin=subfmin, fmax=subfmax, strand=strand ) current_RNA.add_exon(exon) exon_count_by_RNA[current_RNA.id] += 1 else: print(\\"WARNING: The following feature was skipped:n{0}\\".format(feat)) features_skipped_count += 1 # don't forget to do the last gene, if there were any if current_gene is not None: gene.print_as(fh=ofh, source='GenBank', format='gff3') if args.fasta is True: if seqs_pending_writes is True: ofh.write(\\"FASTAn\\") for assembly_id in assemblies: ofh.write(\\">{0}n\\".format(assembly_id)) ofh.write(\\"{0}n\\".format(utils.wrapped_fasta(assemblies[assembly_id].residues))) if features_skipped_count > 0: print(\\"Warning: {0} unsupported feature types were skipped\\".format(features_skipped_count)) if __name__ == '__main__': main()"},{"instruction":"Develop an algorithm in Python to predict the category of a sentence. This movie is a classic drama.","output":"def sentence_category_predictor(sentence): #split up sentence into words words = sentence.split() #initialize a counter for each category count_drama = 0 count_comedy = 0 count_thriller = 0 #loop over words to get counts of each category for word in words: if word in drama_words: count_drama += 1 if word in comedy_words: count_comedy += 1 if word in thriller_words: count_thriller += 1 #compare counts and return category with highest count max_count = max(count_drama, count_comedy, count_thriller) if max_count == count_drama: return \\"drama\\" if max_count == count_comedy: return \\"comedy\\" else: return \\"thriller\\" #calling the function category = sentence_category_predictor(\\"This movie is a classic drama.\\") print(\\"The sentence falls under the category:\\", category)"},{"instruction":"Create a machine learning model in Python using the scikitlearn library that can classify cars according to their brand. Car dataset with columns 'Brand' and 'Features'","output":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.svm import SVC # Read in the data data = pd.read_csv('cars.csv') # Split into X and y X = data.drop('Brand', axis=1).values y = data['Brand'].values # Split into training and test sets X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=0) # Create the scaler sc = StandardScaler() # Fit and transform the training data X_train = sc.fit_transform(X_train) # Transform the test data X_test = sc.transform(X_test) # Fit the classifier classifier = SVC(kernel='linear') classifier.fit(X_train, y_train) # Predict the labels y_pred = classifier.predict(X_test)"},{"instruction":"Create a commandline chatbot in Python that can respond to simple questions like What is your name? Not applicable","output":"import cmd class Bot(cmd.Cmd): prompt = 'Bot> ' def do_greet(self, args): print('Hello! My name is Bot.') def do_name(self, args): print('My name is Bot.') if __name__ == '__main__': Bot().cmdloop()"},{"instruction":"Create a class in Python with two methods.","output":"class SomeClass: def __init__(self): pass def method1(self): pass def method2(self): pass"},{"instruction":"Can you write a Python code that can sort dictionaries based on the values","output":"def sort_dict_by_values(dict): return sorted(dict.items(), key=lambda kv: kv[1])"},{"instruction":"Create a Python script that connects to a SQLite database, creates three tables (stations, observations, and time), and populates them with data from a CSV file and a JSON API. The script should use the csv, json, requests, numpy, and sqlite3 modules. The CSV file should contain data about weather stations, and the JSON API should provide data about weather observations. The stations table should have columns for id, short, name, lon, lat, height, and json. The observations table should have columns for id, local_date_time, local_date_time_full, apparent_t, delta_t, air_temp, rain_trace, rel_hum, wind_dir, and wind_spd_kmh. The time table should have columns for id and local_date_time_full. The script should insert data into the tables using SQL queries, and should print out the queries as they are executed. Finally, the script should print out the names of the tables in the database and export each table to a CSV file.","output":"#!/usr/bin/env python import csv import json import requests import numpy as np import sqlite3 csv_filename = \\"testdata/vic_usgs/south_west_stations.csv\\" db_filename = \\"testdata/vic_usgs/south_west_stations.db\\" # open database conn = sqlite3.connect(db_filename) c = conn.cursor() # Create stations table c.execute('''CREATE TABLE IF NOT EXISTS stations (id text, short text, name text, lon real, lat real, height real, json text, UNIQUE(id))''') # Create observations table c.execute('''CREATE TABLE IF NOT EXISTS observations (id text, local_date_time text, local_date_time_full text, apparent_t real, delta_t real, air_temp real, rain_trace text, rel_hum real, wind_dir text, wind_spd_kmh real, UNIQUE(id, local_date_time_full))''') # Create time point table c.execute('''CREATE TABLE IF NOT EXISTS time (id text, local_date_time_full text, UNIQUE(local_date_time_full))''') # stations with open(csv_filename, 'rb') as csvfile: stations = csv.DictReader(csvfile) for station in stations: id = station[\\"ID\\"] short = station[\\"Short\\"] name = station[\\"Name\\"] lon = float(station[\\"Lon\\"]) lat = float(station[\\"Lat\\"]) height = float(station[\\"Height\\"]) json = station[\\"Json\\"] # Insert a row of data into stations query_str = \\"INSERT OR IGNORE INTO stations VALUES ('%s', '%s', '%s', %f, %f, %f, '%s')\\" % (id, short, name, lon, lat, height, json) print query_str c.execute( query_str ) # Update observations table r = requests.get(json) stationdata = r.json() data = stationdata[\\"observations\\"][\\"data\\"] nrows = len(data) for i in range(nrows): apparent_t = data[i]['apparent_t'] if apparent_t is None: apparent_t = 0 delta_t = data[i]['delta_t'] if delta_t is None: delta_t = 0 air_temp = data[i]['air_temp'] if air_temp is None: air_temp = 0 rain_trace = data[i]['rain_trace'] if rain_trace is None: rain_trace = '' rel_hum = data[i]['rel_hum'] if rel_hum is None: rel_hum = 0 wind_spd_kmh = data[i]['wind_spd_kmh'] if wind_spd_kmh is None: wind_spd_kmh = 0 query_str = \\"INSERT OR IGNORE INTO observations VALUES ('%s', '%s', '%s', %0.2f, %0.2f, %0.2f, '%s', %0.2f, '%s', %0.2f)\\" % (id, data[i]['local_date_time'], data[i]['local_date_time_full'], apparent_t, delta_t, air_temp, rain_trace, rel_hum, data[i]['wind_dir'], wind_spd_kmh) print query_str c.execute(query_str) query_str = \\"INSERT OR IGNORE INTO time VALUES (%s, '%s')\\" % (id, data[i]['local_date_time_full']) print query_str c.execute(query_str) # commit the change conn.commit() # close database conn.close() # TESTING: print out to check \\"\\"\\" conn = sqlite3.connect(db_filename) c = conn.cursor() c.execute(\\"SELECT name FROM sqlite_master WHERE type='table';\\") tables = c.fetchall() print tables for table_name in tables: table_name = table_name[0] table = pd.read_sql_query(\\"SELECT * from %s\\" % table_name, conn) #print table table.to_csv('testdata/vic_usgs/south_west_stations_' + table_name + '.csv', index_label='index') # close database conn.close() \\"\\"\\""},{"instruction":"Make a Python program that prints out a message that gives the number 7 when a value for an integer variable x is 7.","output":"x = 7 if x == 7: print(\\"The number is 7\\")"},{"instruction":"Write Python code to get the difference between two lists. [1, 2, 3, 4] [1, 2, 5, 6]","output":"def difference(list1, list2): difference_list = [] for num1 in list1: if num1 not in list2: difference_list.append(num1) for num2 in list2: if num2 not in list1: difference_list.append(num2) return difference_list"},{"instruction":"Write a Python program to parse a JSON string and extract a specific keyvalue pair. { key: value1, anotherKey: value2, somekey: somevalue }","output":"import json myJSON = '{\\"key\\": \\"value1\\", \\"anotherKey\\": \\"value2\\", \\"somekey\\": \\"somevalue\\"}' # parse json parsedJSON = json.loads(myJSON) # access data key = parsedJSON['key'] value = parsedJSON['value'] # print key and value print(\\"key: \\" + key) print(\\"value: \\" + value)"},{"instruction":"Modify the given code such that a python list of strings is created based on the input. lst = [1, 2, 3]","output":"lst_strs = [] for i in lst: lst_strs.append(str(i))"},{"instruction":"Generate a program in Python which will take a sentence and output its synonyms.","output":"import nltk def get_synonyms(sentence): output = [] words = nltk.word_tokenize(sentence) for word in words: synonyms = [] for syn in wordnet.synsets(word): for l in syn.lemmas(): synonyms.append(l.name()) output.append(list(set(synonyms))) return output"},{"instruction":"Design an algorithm in Python to solve the traveling salesman problem.","output":"def tsp(graph): # Set initial values: best_path = [] best_path_cost = float('Inf') # Iterate through all the possible paths: for i in range(1 << len(graph[0])): # Generate the binary string: path = [] for j in range(len(graph[0])): if (i & (1 << j)) > 0: path.append(j) # Calculate the cost of the path: cost = 0 k = 0 for j in range(len(path)): if j+1 < len(path): cost += graph[path[j]][path[j+1]] else: cost += graph[path[j]][path[0]] # Check if the cost of the path is less than the # current best path cost: if cost < best_path_cost: best_path_cost = cost best_path = path return best_path, best_path_cost"},{"instruction":"Create an API endpoint in a python Flask application to get the list of items stored in a database table called products. Not applicable","output":"from flask import Flask, jsonify from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3' db = SQLAlchemy(app) class Product(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(40), nullable=False) @app.route('/products', methods=['GET']) def get_products(): products = Product.query.all() products_list = [] for product in products: products_list.append({ 'id': product.id, 'name': product.name }) return jsonify(products_list) if __name__ == '__main__': app.run(host='0.0.0.0', port=5000, debug=True)"},{"instruction":"Compose a python program to carry out the following purpose Check if a string is a palindrome","output":"def is_palindrome(s): rev_s = s[::-1] if s == rev_s: return True else: return False"},{"instruction":"Develop a web scraping Python program to scrape the product details of a sample store. The website is located at https://example.com","output":"import requests from bs4 import BeautifulSoup # Get the HTML from the webpage page = requests.get('https://example.com') soup = BeautifulSoup(page.text, 'html.parser') # Isolate the product information product_list = soup.find_all('div', class_='product') # Extract the product information products = [] for product in product_list: name = product.find('div', class_='name').text.strip() price = product.find('div', class_='price').text.strip() description = product.find('div', class_='description').text.strip() products.append({ 'name': name, 'price': price, 'description': description }) # Print the product list print(products)"},{"instruction":"Design a Python class which represents a bank account. This class should contain attributes and methods to create an account, to deposit money, to withdraw money, to check the balance and to transfer money to another account. Not applicable","output":"class BankAccount: def __init__(self,name,balance): self.name = name self.balance = balance def deposit(self, amount): self.balance += amount return self.balance def withdraw(self, amount): if self.balance >= amount: self.balance -= amount else: print(\\"Insufficient funds\\") return self.balance def checkBalance(self): return self.balance def transfer(self, target, amount): if self.balance >= amount: self.balance -= amount target.balance += amount else: print(\\"Insufficient funds\\") return self.balance"},{"instruction":"Create a Python program to detect whether two words are similar using fuzzy string matching. first_word: apple second_word: apple","output":"import fuzzy first_word = 'apple' second_word = 'apples' # Create a FuzzySet object fuzzy_set = fuzzy.FuzzySet() # Add strings to the FuzzySet fuzzy_set.add(first_word) fuzzy_set.add(second_word) # Calculate similarity between strings similarity = fuzzy_set.get(first_word)[0][0] print(\\"The similarity between '{}' and '{}' is {:.2f}\\".format(first_word, second_word, similarity))"},{"instruction":"vent a python data structure to store information about friends.","output":"class Friend: def __init__(self, name, age, address): self.name = name self.age = age self.address = address friends_list = []"},{"instruction":"Develop a function in Python that will find the sum of all prime numbers in a given range. upper = 10 lower = 1","output":"def primeSum(lower, upper): sum = 0 for num in range(lower, upper + 1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: sum += num return sum"},{"instruction":"Create an AI agent in Python to play the game of Tic Tac Toe. Not applicable","output":"import random # Define the board board = ['_', '_', '_', '_', '_', '_', '_', '_', '_'] # Define the players player = 'X' ai = 'O' # Define the rules of the game def play_game(): # Draw initial board draw_board(board) # Choose the player to start (randomly) choose_player() # Start playing the game game_state = 'Playing' while game_state == 'Playing': if player == 'X': # Ask the player to make a move make_move(player) # Check if anyone has won the game after the player's move game_state = check_game(board, player) # Change the player player = ai else: # Let the AI make a move make_move(ai) # Check if anyone has won the game after the AI's move game_state = check_game(board, ai) # Change the player player = 'X' # Draw the board def draw_board(board): print(\\"-----------------\\") for i in range(3): print(\\"| \\", board[i*3], \\" | \\", board[i*3 + 1], \\" | \\", board[i*3 + 2], \\" |\\") print(\\"-----------------\\") # Choose the player to start (randomly) def choose_player(): global player random_num = random.randint(0,1) if random_num == 0: player = 'X' else: player = 'O' # Make a move def make_move(player): legal_moves = [i for i, x in enumerate(board) if x == '_'] move = -1 # Player is human if player == 'X': while move not in legal_moves: move = int(input(\\"Choose your move: (0-9)\\")) # Player is AI else: move = random.choice(legal_moves) # Make the move board[move] = player # Check if anyone has won def check_game(board, player): for row in range(3): if board[row*3] == board[row*3 + 1] and board[row*3 + 1] == board[row*3 + 2]: if board[row*3] == player: return 'Player ' + player + ' won the game!' for col in range(3): if board[col] == board[col + 3] and board[col + 3] == board[col + 6]: if board[col] == player: return 'Player ' + player + ' won the game!' if board[0] == board[4] and board[4] == board[8]: if board[0] == player: return 'Player ' + player + ' won the game!' if board[2] == board[4] and board[4] == board[6]: if board[2] == player: return 'Player ' + player + ' won the game!' # Check if all the squares are filled if board.count('_') == 0: return 'Draw!' return 'Playing' # Execute the game play_game()"},{"instruction":"Edit the following python code to make it as efficient as possible. def check_year(year): if (year % 4) == 0: if (year % 100) == 0: if (year % 400) == 0: print({0} is a leap year.format(year)) else: print({0} is not a leap year.format(year)) else: print({0} is a leap year.format(year)) else: print({0} is not a leap year.format(year))","output":"def check_year(year): leap_year = False if (year % 4) == 0: if (year % 100) == 0: if (year % 400) == 0: leap_year = True do_print = True else: leap_year = True do_print = True else: do_print = True if do_print: if leap_year: print(\\"{0} is a leap year\\".format(year)) else: print(\\"{0} is not a leap year\\".format(year))"},{"instruction":"Python, create a class that can be used to store employee details such as their salary, name, and job assignment.","output":"class Employee: def __init__(self, name, salary, job_assignment): self.name = name self.salary = salary self.job_assignment = job_assignment # other methods here"},{"instruction":"Create a python program that automatically calculates the amount of money in a given account after given a period of time. balance = 100, annual interest rate = 4.5%, years = 5","output":"def calculate_compound_interest(balance, annual_interest_rate, years): interest = balance * (1 + (annual_interest_rate/100)) ** years return interest # Test balance = 100 annual_interest_rate = 4.5 years = 5 compound_interest = calculate_compound_interest(balance, annual_interest_rate, years) print('Your balance after %d years is %.2f.' % (years, compound_interest)) # Your balance after 5 years is 128.77."},{"instruction":"Create a Python program to process raw customer data into a summary report. Raw Customer Data (JSON): [ { customer_name: John Doe, total_amount_spent: 2000 }, { customer_name: Jane Doe, total_amount_spent: 800 }, { customer_name: Joe Smith, total_amount_spent: 200 } ]","output":"import json raw_data = [ { \\"customer_name\\": \\"John Doe\\", \\"total_amount_spent\\": 2000 }, { \\"customer_name\\": \\"Jane Doe\\", \\"total_amount_spent\\": 800 }, { \\"customer_name\\": \\"Joe Smith\\", \\"total_amount_spent\\": 200 } ] # calculate total amount spent total_amount_spent = 0 for customer in raw_data: total_amount_spent += customer['total_amount_spent'] # generate summary report summary_report = { 'total_amount_spent': total_amount_spent, 'customers': [] } for customer in raw_data: summary_report['customers'].append({ 'customer_name': customer['customer_name'], 'total_amount_spent': customer['total_amount_spent'] }) # save summary report to a file with open('summary_report.json', 'w') as outfile: json.dump(summary_report, outfile)"},{"instruction":"Convert the following selection sort algorithm into a Python code. Selection Sort(arr) 1 for i=1 to arr.length 1 2 min = i 3 for j = i+1 to arr.length 4 if arr[j] < arr[min] 5 min = j 6 swap(arr[i],arr[min])","output":"def selection_sort(arr): for i in range(0, len(arr)-1): min = i for j in range(i+1, len(arr)): if arr[j] < arr[min]: min = j arr[i], arr[min] = arr[min], arr[i]"},{"instruction":"Write a Python program to get the index of the largest item in a given list. [4, 3, 5, 7, 6]","output":"# get the index of the largest item in a list def get_max_index(arr): max_index = 0 for i in range(1, len(arr)): if arr[i] > arr[max_index]: max_index = i return max_index result = get_max_index([4, 3, 5, 7, 6]) print(result) # 3"},{"instruction":"Generate a program in Python which creates an ordered dictionary from a given list of tuples.","output":"def create_ordered_dict(list_tuple): ordered_dict = OrderedDict() for key, value in list_tuple: ordered_dict[key] = value return ordered_dict"},{"instruction":"Design a Python algorithm to sort the elements of a given array by insertion sorting.","output":"def insertionSort(array): \\"\\"\\"Algorithm to sort an array using insertion sort.\\"\\"\\" for j in range(1,len(array)): key = array[j] i = j-1 while i >= 0 and array[i]> key: array[i+1] = array[i] i-=1 array[i+1] = key"},{"instruction":"Create a Python function that returns all the prime numbers between 1 and a given number. Number: 25","output":"def get_primes(n): primes = [] for num in range(2, n + 1): is_prime = True for divisor in range(2, num): if num % divisor == 0: is_prime = False break if is_prime: primes.append(num) return primes primes = get_primes(25) print(primes) # prints [2, 3, 5, 7, 11, 13, 17, 19, 23]"},{"instruction":"Program an algorithm in Python to calculate the largest sum of nonadjacents from an unsorted array.","output":"def largestSumNonAdjacent(arr): incl = 0 excl = 0 for i in arr: new_excl = max(incl, excl) incl = excl + i excl = new_excl return max(incl, excl)"},{"instruction":"Create a function in Python that prints the numbers between 0 and 10 (inclusive) in descending order.","output":"def printDescending(): for i in range(10,-1,-1): print (i) printDescending()"},{"instruction":"mplement a minisearch engine in Python which returns the most relevant document for the given query. A list of documents is provided in a file called docs.tx","output":"import re def search(docs, query): # Tokenize the documents tokenized_docs = [tokenize(doc) for doc in docs] # Perform pre-processing on the query processed_query = preprocess(query) # Calculate the scores for each document based on the query scores = [calculate_score(processed_query, doc) for doc in tokenized_docs] # Get the index of the best matching document max_index = scores.index(max(scores)) # Return the most relevant document return docs[max_index] def tokenize(doc): # Split the document into tokens tokens = re.split('W+', doc) # Remove any empty tokens tokens = [token for token in tokens if token != ''] return tokens def preprocess(query): # Split the query into tokens tokens = re.split('W+', query) # Remove any empty tokens tokens = [token for token in tokens if token != ''] # Normalize the tokens tokens = [token.lower() for token in tokens] return tokens def calculate_score(query, doc): # Calculate the score of a document score = 0 for token in query: if token in doc: score += 1 return score"},{"instruction":"Generate code for a CRON job that runs every day at 5pm to send out an email reminder to each user in the system. Not applicable","output":"from django.core.management.base import BaseCommand from users.models import User from django.core.mail import send_mail class Command(BaseCommand): def handle(self, *args, **kwargs): users = User.objects.all() for u in users: send_mail('Reminder', 'My reminder message', 'from@example.com', [u.email], fail_silently=False) # add this line to your crontab 0 17 * * * python manage.py my_command"},{"instruction":"Develop a machine learning classifier in Python to identify whether an email is spam or not.","output":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.metrics import confusion_matrix # Load the data data = pd.read_csv('spam_data.csv') # Create features and target X = data['Text'] y = data['Spam'] # Split into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2) # Vectorize the text using TF-IDF vectorizer = TfidfVectorizer() X_train_tfidf = vectorizer.fit_transform(X_train) X_test_tfidf = vectorizer.transform(X_test) # Create and train the model model = MultinomialNB() model.fit(X_train_tfidf, y_train) # Make predictions y_pred = model.predict(X_test_tfidf) # Print confusion matrix print(confusion_matrix(y_test, y_pred))"},{"instruction":"Create a Python script to query a MongoDB database and return a list of documents that match a query Query: Return documents that contain the string the quick","output":"import pymongo from pymongo import MongoClient # connect to Mongo client = MongoClient(\\"mongodb://localhost:27017/\\") # get a database object db = client['mydb'] # get a collection object collection = db['mycollection'] # create a query object query = { \\"text\\": { \\"regex\\": \\"the quick\\" } } # perform a simple query documents = collection.find(query) # loop over the documents for doc in documents: print(doc)"},{"instruction":"Can you provide a machine learning algorithm in Python that performs sentiment analysis on a given text? Text: This product is simply incredible!","output":"from nltk.sentiment.vader import SentimentIntensityAnalyzer sentences = [\\"This product is simply incredible!\\"] analyzer = SentimentIntensityAnalyzer() for sentence in sentences: scores = analyzer.polarity_scores(sentence) print(\\"{:-<40} {}\\".format(sentence, str(scores)))"},{"instruction":"Create a password generator in Python that generates passwords with a combination of letters (both uppercase and lowercase), numbers, and symbols. The password should contain at least 6 characters. Not applicable","output":"import string import random def password_generator(size=6): chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + '!@#%^&*()' return ''.join(random.choice(chars) for x in range(size)) password = password_generator() print(password)"},{"instruction":"Develop a Python 3 function that implements a linear search algorithm. [4, 1, 9, 6]","output":"def linear_search(arr, target_val): \\"\\"\\" This function performs linear search on an array to find the target value \\"\\"\\" for idx in range(len(arr)): if arr[idx] == target_val: return idx return -1 target_val = 9 arr = [4, 1, 9, 6] target_idx = linear_search(arr, target_val) if target_idx == -1: print(\\"Target not found!\\") else: print(f\\"Target found at index {target_idx}\\")"},{"instruction":"Encode a given URL using percentencoding. https://www.example.com/search?q=pytho","output":"String url = \\"https://www.example.com/search?q=python\\"; String encodedUrl = URLEncoder.encode(url, \\"UTF-8\\"); System.out.println(encodedUrl); // https%3A%2F%2Fwww.example.com%2Fsearch%3Fq%3Dpython"},{"instruction":"Create a program in Python that counts the number of vowels in a given string.","output":"def count_vowels(string): vowels = ['a', 'e', 'i', 'o', 'u'] return sum(string.count(x) for x in vowels)"},{"instruction":"Code a function in Python to identify a valid email address.","output":"import re def is_valid_email(email): regex = '^[a-z0-9]+[._]?[a-z0-9]+[@]w+[.]w{2,3}' return re.search(regex, email)"},{"instruction":"Develop a Python program to generate a date sequence between two given dates. start_date = 20200101 end_date = 20200108","output":"import datetime start_date = datetime.date(2020, 1, 1) end_date = datetime.date(2020, 1, 8) delta = end_date - start_date date_list = [] for i in range(delta.days + 1): day = start_date + datetime.timedelta(days=i) date_list.append(day.strftime('%Y-%m-%d')) print(date_list) # Output: ['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04', '2020-01-05', '2020-01-06', '2020-01-07', '2020-01-08']"},{"instruction":"Develop a Python script which sorts a list of names in alphabetical order John, Anna, David, Bob, Alex","output":"names = [\\"John\\", \\"Anna\\", \\"David\\", \\"Bob\\", \\"Alex\\"] # sorting the names names.sort() # printing the first name in the sorted list print(\\"The first name in the sorted list is:\\") print(names[0])"},{"instruction":"mplement a function in Python that will take in an arbitrary list of numbers and output the average of the list. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","output":"def average(nums): total = 0 for num in nums: total += num return total/len(nums)"},{"instruction":"Create a virtual environment using Python with the name myenv","output":"python -m venv myenv"},{"instruction":"Can you create a function in Python that prints all permutations of a given word?","output":"def print_permutations(string): if len(string) == 1: print(string) else: for i, char in enumerate(string): for perm in print_permutations(string[:i] + string[i+1:]): print(char + perm)"},{"instruction":"Write a Python function to invert a string (swap uppercase and lowercase letters).","output":"def invert_string(string): # Initially create an empty string as result result = '' # Traverse every character of the string for char in string: # If an uppercase character is found if char.isupper(): # Add its lowercase equivalent to the result result += char.lower() # If a lowercase character is found elif char.islower(): # Add its uppercase equivalent to the result result += char.upper() else: # If not an alphabet character result += char return result"},{"instruction":"Write a Python program to check if a given string is a rotation of another given string. str1 = waterbottle str2 = erbottlewat","output":"def is_rotation(str1, str2): if len(str1) != len(str2): return False concat_str2 = str2 * 2 return str1 in concat_str2 is_rotation(str1, str2)"},{"instruction":"Write a Python program to find all pairs of numbers in a given list whose sum is equal to a given target number.","output":"def find_pairs_with_sum(nums, target): found_pairs = [] for i in range(len(nums)): for j in range(i + 1, len(nums)): if nums[i] + nums[j] == target: found_pairs.append([nums[i], nums[j]]) return found_pairs"},{"instruction":"Create a program to perform a tfidf calculation in Python.","output":"import re from collections import Counter def tf_idf(documents): # Split documents into tokens tokens = [tokenize(document) for document in documents] # Get vocabulary vocabulary = get_vocabulary(tokens) # Calculate Term Frequency tf = get_termfrequency(tokens, vocabulary) # Calculate Document Frequency df = get_documentfrequency(tokens, vocabulary) # Calculate Inverse Document Frequency idf = get_inverse_documentfrequency(df, len(documents)) # Calculate TF-IDF tf_idf = get_tf_idf(tf, idf) # Return TF-IDF scores return tf_idf def tokenize(document): # Tokenize document tokens = re.findall(r\\"[w']+\\", document) # Return tokens return tokens def get_vocabulary(tokens): # Get vocabulary vocabulary = set() for token_list in tokens: vocabulary.update(set(token_list)) # Return vocabulary return vocabulary def get_termfrequency(tokens, vocabulary): # Initialize term frequency tf = {word: [] for word in vocabulary} for token_list in tokens: # Get word frequency counter = Counter(token_list) # Update term frequency for word in vocabulary: tf[word] = tf[word] + [counter[word]] # Return term frequency return tf def get_documentfrequency(tokens, vocabulary): # Initialize document frequency df = {word: 0 for word in vocabulary} for token_list in tokens: # Update document frequency for word in vocabulary: if word in token_list: df[word] += 1 # Return document frequency return df def get_inverse_documentfrequency(df, num_documents): # Initialize Inverse document frequency idf = {word: 0 for word in df.keys()} # Calculate inverse document frequency for word in df.keys(): idf[word] = math.log(num_documents / df[word]) # Return Inverse Document Frequency return idf def get_tf_idf(tf, idf): # Initialize tf-idf tf_idf = {word: [] for word in tf.keys()} # Calculate tf-idf for word in tf.keys(): scores = [tf[word][k] * idf[word] for k in range(len(tf[word])) ] tf_idf[word] = scores # Return tf-idf return tf_idf"},{"instruction":"Create Python code that will insert a new item at the end of a list.","output":"def insert_at_end(list, item): \\"\\"\\"Inserts an item at the end of a list\\"\\"\\" list.append(item)"},{"instruction":"Optimize a Python program to run faster and use less memory. import math # Slow loop implementation def slow_loop(num): for i in range(int(num)): result = math.sqrt(i*i + 1) return resul","output":"import math # Faster loop implementation def fast_loop(num): result = 1 for i in range(int(num)): result += math.sqrt(i*i + 1) return result"},{"instruction":"Create a program in Python to extract words of length 4 from a given string. s = extract four letter words;","output":"words = s.split() four_letter_words = [] for word in words: if len(word) == 4: four_letter_words.append(word) print(four_letter_words)"},{"instruction":"Create an algorithm in Python for searching for an element in an array.","output":"def linearSearch(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 # target not found"},{"instruction":"Optimize the provided Python code to run in linear time. def function(arr): for i in range(len(arr)): for j in range(i+1, len(arr)): if arr[i] > arr[j]: arr[i], arr[j] = arr[j], arr[i]","output":"def function(arr): for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i]"},{"instruction":"Given two lists x and y, write a python program to return a list that contains the elements which are common to both lists. x = [1, 2, 3, 4], y = [2, 3, 4, 5]","output":"def common_elements(x, y): common = [] for i in x: if i in y: common.append(i) return common"},{"instruction":"Create a machine learning model in Python to classify digits from the MNIST dataset. Not applicable","output":"import tensorflow as tf (x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data() x_train = x_train.reshape(60000, 784) x_test = x_test.reshape(10000, 784) model = tf.keras.models.Sequential([ tf.keras.layers.Dense(256, activation='relu', input_shape=(784,)), tf.keras.layers.Dropout(0.2), tf.keras.layers.Dense(10, activation='softmax') ]) model.compile( optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'] ) model.fit(x_train, y_train, epochs=5) model.evaluate(x_test, y_test)"},{"instruction":"Design a Python algorithm to compute the total number of inversions in an array of integers. [2, 4, 1, 3, 5]","output":"def count_inversions(arr): inversion_count = 0 for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] > arr[j]: inversion_count += 1 return inversion_count"},{"instruction":"Create functions in Python for validating if a number is prime or not. n = 12","output":"def is_prime(n): if n == 1: return False for i in range(2,int(n**(1/2))+1): if n%i == 0: return False return True if is_prime(12): print(\\"Prime\\") else: print(\\"Not Prime\\")"},{"instruction":"Create a python code to optimize an equation for its maximum value","output":"\\"\\"\\" Create a python code to optimize an equation for its maximum value. \\"\\"\\" import numpy as np from scipy.optimize import minimize def objective(x): # Objective function return -(2*x[0] + 5*x[1] + 3*x[2] + 6*x[3]) if __name__ == '__main__': # Initial guess x0 = [2,4,1,3] # Show initial objective print('Initial Objective: ' + str(objective(x0))) #Optimize res = minimize(objective, x0, method='nelder-mead', options={'xtol': 1e-8, 'disp': True}) #Show final objective print('Final Objective: ' + str(res.fun)) #Print Optimized values print('Optimized values: ' + str(res.x))"},{"instruction":"Generate a Python program that will compare two strings and return 'True' or 'False'. ('Apple', 'Orange')","output":"def compare_strings(first, second): return first == second result = compare_strings('Apple', 'Orange') print (result)"},{"instruction":"Program a function in Python 3 that takes a list of integers and returns a list with only the nonduplicate values. [1, 2, 4, 1, 5, 7, 8, 2]","output":"def uniqueVals(arr): uniqueValsArr = [] for x in arr: if x not in uniqueValsArr: uniqueValsArr.append(x) return uniqueValsArr mylist = [1, 2, 4, 1, 5, 7, 8, 2] print(uniqueVals(mylist)) # Output: [1,2,4,5,7,8]"},{"instruction":"Develop a Python generator to yield a Fibonacci sequence No inpu","output":"def fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b for x in fibonacci(20): print(x)"},{"instruction":"Write a Python program that prints all pairs of numbers between 0 and 5 (inclusive).","output":"for i in range(0,6): for j in range(0,6): if i != j: print(i,j)"},{"instruction":"Using Python, create a script that finds the longest common prefix in a given array of strings. [ABCDE, ABCD, ABCXYZ, ABCDEFG]","output":"def longest_common_prefix(st): if len(st) == 0: return '' first_word = st[0] prefix = '' for i in range(len(first_word)): for w in range(1, len(st)): if i >= len(st[w]) or st[w][i] != first_word[i]: return prefix prefix += first_word[i] return prefix words = [\\"ABCDE\\", \\"ABCD\\", \\"ABCXYZ\\", \\"ABCDEFG\\"] print(longest_common_prefix(words))"},{"instruction":"Create a python script to display a grid pattern.","output":"def printgrid(rows, columns): for i in range(1, rows+1): for j in range(1, columns+1): print(\\"*\\", end=\\" \\") print(\\"r\\") printgrid(4, 4)"},{"instruction":"Create a class called ClassName that sets options for a WIGLE query using the Builders module. The required options are bssid, user, and pass, which should be set to specific values. The startx method should initiate the query using the WigleAgent class and print the resulting latitude, longitude, and BSSID. It should also use the kml_builder class to build a KML file with the latitude, longitude, and BSSID, and print a message to check the output.","output":"from Builders import wigile_query from Builders import kml_builder class ClassName(): #These are the options we will set def __init__(self): # Descriptions that are required!!! self.name = \\"Registry Network info corelation\\" self.description = \\"WIGLE Query your known BSSID\\" self.language = \\"python\\" self.extension = \\"py\\" self.rating = \\"Excellent\\" # options we require user interaction for- format is {Option : [Value, Description]]} self.required_options = {\\"bssid\\" : ['00:22:55:DF:C8:01', \\"Set BSSID or MAC of AP\\"], \\"user\\" : ['offtest', \\"Set Username to WIGLE\\"], \\"pass\\" : ['83128312', \\"Set Password to WIGLE\\"]} def startx(self): wa = wigile_query.WigleAgent(self.required_options[\\"user\\"][0], self.required_options[\\"pass\\"][0]) final = wa.get_lat_lng(self.required_options[\\"bssid\\"][0]) print final kml = kml_builder.kml() kml.build(final[\\"lat\\"], final[\\"lng\\"], final[\\"bssid\\"]) #Pass SSID name of network print \\"[*] Check output\\""},{"instruction":"Create a Python class to represent a point in the xy plane and a method to calculate the distance from the origin. Not applicable","output":"import math class Point: def __init__(self, x, y): self.x = x self.y = y def distance_from_origin(self): return math.sqrt(self.x**2 + self.y**2) pt1 = Point(3, 4) print(pt1.distance_from_origin()) # prints 5.0"},{"instruction":"Write a Python script to generate a random 3 X 3 matrix of integers in the range [1, 9]. Not applicable","output":"import random # Generate a random 3 X 3 matrix of integers in the range [1, 9]. matrix = [[random.randint(1, 9) for _ in range(3)] for _ in range(3)] for row in matrix: print(row)"},{"instruction":"Create an algorithm in Python to find all pairs of numbers in a given array whose sum is equal to a specific target number. arr = [4, 5, 6, 7, 8], target = 10","output":"def find_pairs(arr, target): pairs = [] i, j = 0, len(arr)-1 while i < j: sum = arr[i] + arr[j] if sum == target: pairs.append([arr[i], arr[j]]) i += 1 j -= 1 elif sum < target: i += 1 else: j -= 1 return pairs arr = [4, 5, 6, 7, 8] target = 10 result = find_pairs(arr, target) print(result)"},{"instruction":"Develop a python code to calculate the number of overlapping elements in two unsorted arrays. Array 1: [1, 2, 2, 4] Array 2: [2, 3, 4]","output":"def overlap_count(a1, a2): a1_set = set(a1) a2_set = set(a2) overlap_set = a1_set.intersection(a2_set) return len(overlap_set) arr1 = [1, 2, 2, 4] arr2 = [2, 3, 4] print(overlap_count(arr1, arr2)) # 3"},{"instruction":"Write a script in Python to generate a dictionary of words from a given string. def words_dict(string)","output":"def words_dict(string): \\"\\"\\"This function returns a dictionary with words as keys and their count as values.\\"\\"\\" words = string.split() word_dict = {} for word in words: if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 return word_dict"},{"instruction":"Develop a web scraper in Python that pulls data from ESPN's website for a given team name. Team name Manchester United","output":"from bs4 import BeautifulSoup import requests teamname = 'Manchester United' url = f'https://www.espn.com/soccer/team/_/name/{teamname}' html = requests.get(url, headers={'User-Agent':'Chrome/85.0.4183.102'}).text soup = BeautifulSoup(html, 'html.parser') for tag in soup.find_all('div', {'class': 'stat-cell'}): if tag.find('span') and tag.find('span').string: statname = tag.find('span').string.strip() statnum = tag.find('p').string.strip() print(f'{statname}: {statnum}')"},{"instruction":"Create a histogram of the following data using Python. data = [2, 3, 4, 6, 7, 8, 9, 10]","output":"import matplotlib.pyplot as plt data = [2, 3, 4, 6, 7, 8, 9, 10] plt.hist(data) plt.title('Histogram of Wind Direction') plt.xlabel('Direction (degrees)') plt.ylabel('Frequency') plt.show()"},{"instruction":"Build a class in Python that creates a Point in a two dimensional space.","output":"class Point: def __init__(self, x, y): self.x = x self.y = y # create a Point object p = Point(2, 4) print(p.x) print(p.y)"},{"instruction":"Create a class Animal in Python with two instance variables, name and age, and a constructor Animal(name, age). It should also have a speak() method that prints out the animal's name. Not applicable","output":"class Animal: def __init__(self, name, age): self.name = name self.age = age def speak(self): print(\\"My name is\\", self.name)"},{"instruction":"Create an algorithm in Python to classify a given array into two parts for even and odd elements. [2, 3, 5, 4, 1]","output":"def classifyArray(arr): if len(arr) == 0: return [[], []] even, odd = [], [] for num in arr: if num % 2 == 0: even.append(num) else: odd.append(num) return[even, odd] # Driver code arr = [2, 3, 5, 4, 1] [even, odd] = classifyArray(arr) print(\\"Even elements of the array:\\") print(*even) print(\\"Odd elements of the array:\\") print(*odd)"},{"instruction":"Write a Python program to construct a binary search tree using a list of integers. [15, 7, 13, 12, 2, 1, 3, 16, 20]","output":"class Node: def __init__(self, val): self.val = val self.left = None self.right = None def build_bst(lst): root = Node(lst[0]) for num in lst[1:]: cur = root while cur: if num < cur.val: if cur.left: cur = cur.left else: cur.left = Node(num) break else: if cur.right: cur = cur.right else: cur.right = Node(num) break return root"},{"instruction":"Write a Python function to find all possible nletter words from a given list of letters. [a,b,c], n = 2","output":"def find_words_length_n(letters, n): words = set() for combo in itertools.combinations_with_replacement(letters, n): for perm in itertools.permutations(combo): words.add(\\"\\".join(perm)) return words words = find_words_length_n([\\"a\\",\\"b\\",\\"c\\"], 2) print(words)"},{"instruction":"Compose a Python program that evaluates a given expression provided as a string and prints its result. 1+1","output":"def evaluate_expression(expression): try: result = eval(expression) print(result) except: print(\\"Error: invalid expression\\") evaluate_expression(\\"1+1\\")"},{"instruction":"Write a function in Python that takes in two strings of the same length and returns the number of different characters in the two strings. str1 = data str2 = muta","output":"def diff_char(str1, str2): count = 0 for i in range(len(str1)): if str1[i] != str2[i]: count += 1 return count"},{"instruction":"Create an API in Python that performs sentiment analysis on a given text. Not applicable","output":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_analysis(text): # Download language models nltk.download('vader_lexicon') # Initialize a sentiment analyzer sid = SentimentIntensityAnalyzer() # Calculate the sentiment score sentiment = sid.polarity_scores(text) # Return the sentiment score return sentiment"},{"instruction":"Create a program to classify the given emails into spam or ham using a Naive Bayes classifier in Python.","output":"\\"\\"\\" Classify emails into spam or ham using Naive Bayes \\"\\"\\" import numpy as np import pandas as pd from sklearn.naive_bayes import MultinomialNB from sklearn.feature_extraction.text import TfidfVectorizer # read the emails df = pd.read_csv('emails.csv') # prepare training and test sets df_train = df[:int(df.shape[0]*0.8)] df_test = df[int(df.shape[0]*0.8):] # instantiate tf-idf vectorizers tfidf_vectorizer = TfidfVectorizer() # tf-idf vectorize the texts X_train = tfidf_vectorizer.fit_transform(df_train.text) X_test = tfidf_vectorizer.transform(df_test.text) # create Naive Bayes classifier clf = MultinomialNB().fit(X_train, df_train.label) # predict the labels for the test set predictions = clf.predict(X_test) # calculate the accuracy accuracy = np.mean(predictions == df_test.label) print('Accuracy: {}'.format(accuracy))"},{"instruction":"Create a Python program to generate a maze of size NxN. 5","output":"import random def maze_generator(n): maze = [[0 for x in range(n)] for y in range(n)] # Fill the walls and open paths for i in range(n): for j in range(n): if i == 0 and j == 0: maze[i][j] = 0 elif i == 0 and j == n-1: maze[i][j] = 0 elif i == n-1 and j == 0: maze[i][j] = 0 elif i == n-1 and j == n-1: maze[i][j] = 0 else: maze[i][j] = random.randint(0, 1) # Print the maze for i in range(n): for j in range(n): print(maze[i][j], end = ' ') print() maze_generator(5)"},{"instruction":"Write a Python script to retrieve a list of tweets using a given hashtag.","output":"import tweepy from tweepy import OAuthHandler consumer_key = '<your-consumer-key-here>' consumer_secret = '<your-consumer-secret-here>' access_token = '<your-access-token-here>' access_token_secret = '<your-access-token-secret-here>' auth = OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token,access_token_secret) api = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True) def get_tweets(hashtag): tweets = [] for tweet in tweepy.Cursor(api.search, q=hashtag, lang='en').items(): tweets.append(tweet.text) return tweets tweets = get_tweets(\\"#python\\") print(tweets)"},{"instruction":"Analyze a given Python code snippet and determine its type a documentation, a code snippet, or a comment. def f(x): A simple function that prints the argument print(x)","output":"Documentation"},{"instruction":"Write a Python program to scrape a website for movie titles and ratings. Not applicable","output":"import requests import lxml.html as lh movies_url = 'https://www.imdb.com/chart/top?ref_=nv_mv_250_6' page = requests.get(movies_url) doc = lh.fromstring(page.content) # Get the list of movie elements movie_elements = doc.xpath('//tr') # Store the titles and ratings titles = [] ratings = [] for movie in movie_elements: title_cell = movie.xpath('./td[@class=\\"titleColumn\\"]//a') if title_cell: title = title_cell[0].text_content() titles.append(title) rating_cell = movie.xpath('./td[@class=\\"ratingColumn imdbRating\\"]//strong') if rating_cell: rating = rating_cell[0].text_content() ratings.append(rating) # Print the titles and ratings for i in range(len(titles)): print(titles[i], '-', ratings[i])"},{"instruction":"Define a class in Python for a circle.","output":"class Circle: def __init__(self, radius): self.radius = radius # Getter method def getRadius(self): return self.radius # Setter method def setRadius(self, radius): self.radius = radius # Area method def getArea(self): return 3.14 * (self.radius**2)"},{"instruction":"Create a Python function to calculate the sum of the list elements. [1, 3, 4, 7, 9]","output":"def list_sum(list_in): return sum(list_in) # or def list_sum(list_in): total_sum = 0 for num in list_in: total_sum += num return total_sum"},{"instruction":"it possible to write a function in Python to convert a given list of lists into a CMOV instruction? [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","output":"def listoflists_to_cmov(listoflists): # Initialise CMOV array cmov = [0]*9 # Fill CMOV array with given list of lists for i, list_ in enumerate(listoflists): cmov[i*3:(i+1)*3] = list_ # Return CMOV array return cmov"},{"instruction":"Create a functions in Python that takes a string as an argument and outputs an array of strings that are all palindromes comprised of all the letters in the argument string. abacad","output":"def palindromeArray(s): res = [] for i in range(1 << len(s)): temp = \\"\\" for j in range(len(s)): # Check if jth bit is set in i if (i & (1 << j)) > 0: temp = temp + s[j] # Check if temp is palindrome if (temp == temp[::-1]): res.append(temp) return res print(palindromeArray(\\"abacad\\")) # Output: ['a', 'aa', 'ada', 'aca', 'aba']"},{"instruction":"Optimize the given Python function to reduce its run time and memory usage. def func1(n): if n==0: return 0 if n==1: return 1 else: return func1(n1)+func1(n2)","output":"def func1(n, lookup): if n == 0 or n == 1 : lookup[n] = n if lookup[n] is None: lookup[n] = func1(n-1, lookup) + func1(n-2, lookup) return lookup[n] def optimizedFibo(n): lookup = [None]*(n+1) return func1(n, lookup)"},{"instruction":"Develop a code that implements linear regression in Python.","output":"import numpy as np # define the data # X = [1, 2, 3, 4, 5] # Y = [2, 4, 5, 4, 5] X = np.array([1, 2, 3, 4, 5]) Y = np.array([2, 4, 5, 4, 5]) # calculate the mean of x and y xmean = np.mean(X) ymean = np.mean(Y) # calculate the equations num = 0 den = 0 for i in range(len(X)): num += (X[i] - xmean)*(Y[i] - ymean) den += (X[i] - xmean)**2 # calculate m and c m = num/den c = ymean - m*xmean # display the line equation print(\\"Regression line equation:\\") print(\\"y = {}x + {}\\".format(m, c))"},{"instruction":"Can you modify the program from above to print the two numbers in ascending order instead?","output":"# Python program def main(): num1 = int(input(\\"Enter the first number: \\")) num2 = int(input(\\"Enter the second number: \\")) # use max and min functions to output the numbers in ascending order print(min(num1, num2)) print(max(num1, num2)) if __name__ == \\"__main__\\": main()"},{"instruction":"Can you create a Python function that returns the sum of all the elements in a given list? [1, 2, 3, 4, 5]","output":"def list_sum(list): sum = 0 for el in list: sum += el return sum"},{"instruction":"Write a Python program to find the highest repeating word in a given paragraph.","output":"def highest_repeating_word(paragraph): \\"\\"\\" Finds the highest repeating word in a given paragraph. Args: paragraph (str): The paragraph. Return: str: The highest repeating word. \\"\\"\\" words = paragraph.split() # Create a dictionary to store the word frequencies word_freq = {} for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 highest_freq = 0 highest_freq_word = None # Find the highest frequency word for word, freq in word_freq.items(): if freq > highest_freq: highest_freq = freq highest_freq_word = word return highest_freq_word"},{"instruction":"Generate a Python program to retrieve the top N most commonly used words in a text document No Inpu","output":"import collections def get_top_words(text, n): \\"\\"\\" Function to retrieve the top N most used words in a given text document. Args: text (str): The text document n (int): Number of words to extract Returns: The top n most used words as a list of strings. \\"\\"\\" # Tokenize the text tokens = tokenize(text) # Count the number of times each token appears in the text token_count = collections.Counter(tokens).most_common(n) # Extract the words from token_count top_words = [word for word, _ in token_count] return top_words"},{"instruction":"Generate a shell script to install a specific version of Python and two modules. version=3.6.2 modules=matplotlib, Django","output":"#!/bin/bash # Download and install Python wget https://www.python.org/ftp/python/{version}/Python-{version}.tgz tar -xvzf Python-{version} cd Python-{version}/ ./configure make make install # Install modules pip install {modules[0]} pip install {modules[1]}"},{"instruction":"Write an algorithm to find the largest possible sum of two nonoverlapping subarrays. [1, 1, 2, 3, 3, 4, 1]","output":"def maxNonOverlappingSum(arr): incl_sum = 0 excl_sum = 0 for i in arr: # Current max excluding i (No ternary operator in Python) new_excl_sum = excl_sum if excl_sum>incl_sum else incl_sum # Current max including i incl_sum = excl_sum + i # Add previous excl_sum excl_sum = new_excl_sum # return max of incl_sum and excl_sum return (excl_sum if excl_sum>incl_sum else incl_sum)"},{"instruction":"Design a Python module that prints out a table of squares for input ranging from 0 to 10.","output":"def print_table(): print(\\" x | x^2\\") print(\\"-----------\\") for i in range(11): answer = i * i print(f\\" {i} | {answer}\\") print_table()"},{"instruction":"Write a python program that takes an array as an input and returns a list of all possible combinations from the array where the length must not exceed 3 elements. [1, 2, 3]","output":"def get_combinations(arr): combinations = [] for i in range(len(arr) + 1): for j in range(i + 1, len(arr) + 1): for k in range(j + 1, len(arr)+1): combinations.append(arr[i:j] + arr[j:k]) return combinations result = get_combinations([1, 2, 3]) print(result)"},{"instruction":"mplement a decision tree model in Python to classify given data. [0, 1, 0, 1, 0], [1, 0, 1, 0, 1]","output":"#importing necessary libraries from sklearn import tree import numpy as np #data X = np.array([[0, 1, 0, 1, 0], [1, 0, 1, 0, 1]]) y = np.array([0, 1]) #model clf = tree.DecisionTreeClassifier() clf = clf.fit(X, y) #predicting x_test = np.array([[1, 0, 0, 0, 1]]) prediction = clf.predict(x_test) #result print(prediction)"},{"instruction":"Using Python, create a program to print the following pattern.","output":"for i in range(7): print(\\"*\\" * i) for i in reversed(range(7)): print(\\"*\\" * i)"},{"instruction":"Design and write an algorithm in Python to solve the Tower of Hanoi puzzle. Number of disks = 3","output":"def hanoi(n, source, temp, dest): if n == 1: print(\\"Move disk 1 from {} to {}\\".format(source, dest)) return hanoi(n-1, source, dest, temp) print(\\"Move disk {} from {} to {}\\".format(n, source, dest)) hanoi(n-1, temp, source, dest) if __name__ == \\"__main__\\": n = 3 # Number of disks hanoi(n, 'A', 'B', 'C') # A, B and C are the names of the rods"},{"instruction":"Create a crossplatform application in Python to schedule reminders.","output":"import datetime import time import os def setReminder(reminder_time, reminder_message): # Get the current time current_time = datetime.datetime.now() # Calculate the amount of time until the reminder is due wait_time = (reminder_time - current_time).total_seconds() # Sleep for the amount of time until the reminder time.sleep(wait_time) # Print the reminder message print(\\"nReminder: %s\\" % reminder_message) # Play a sound to alert the user os.system(\\"start reminder_sound.wav\\") # Set a reminder for 5 minutes from now reminder_time = datetime.datetime.now() + datetime.timedelta(minutes=5) reminder_message = \\"Time to take a break!\\" setReminder(reminder_time, reminder_message)"},{"instruction":"Write a Python function to print the nth row of Pascal's triangle. n = 8","output":"def pascals_triangle(n): # list to store the elements of each row pascal_triangle = [] # loop to calculate each row of the triangle for row_number in range(n): row = [] for element in range(row_number+1): # first and last elements of each row are 1 if element == 0 or element == row_number: row.append(1) # other elements if any are sum of the elements # just above it else: row.append(pascal_triangle[row_number-1][element-1] + pascal_triangle[row_number-1][element]) # add the row to the triangle pascal_triangle.append(row) return pascal_triangle[n-1] # nth row number n = 8 # print 8th row of pascal's triangle print(pascals_triangle(n))"},{"instruction":"Create a python program to scrape news articles from a website and store them in a database. The news website: https://www.huffpost.com","output":"import requests from bs4 import BeautifulSoup import sqlite3 URL = 'https://www.huffpost.com' # Request the data html_data = requests.get(URL).text # Parse the data soup = BeautifulSoup(html_data, 'html.parser') # Create a connection conn = sqlite3.connect('news.db') c = conn.cursor() # Get all article links articles = soup.find_all('article') for article in articles: a = article.find('a') # check if a has href attr if a and 'href' in a.attr: # join the url with href article_url = URL + a.attr['href'] # Get article data html_data = requests.get(article_url).text soup_article = BeautifulSoup(html_data, 'html.parser') # Get title title = soup_article.find('h1') # Get the content content = soup_article.find('div', {'class': 'entry__content'}) # Create a database entry c.execute('INSERT INTO article (title, url, content) VALUES (?,?,?)', (title.text, article_url, content.text)) # Save the changes conn.commit() # Close the connection conn.close()"},{"instruction":"Write a Java program to remove all whitespace from a string.","output":"public class RemoveWhitespace { public static String removeWhitespace(String str) { str = str.replaceAll(\\"s\\", \\"\\"); return str; } public static void main(String[] args) { String str = \\"Python Programming\\"; System.out.println(removeWhitespace(str)); } }"},{"instruction":"Can you create a Python program for classifying spam and nonspam emails? Mail content: This is an email from XYZ corporation.nMail label: Nonspam","output":"import spacy from textblob import TextBlob # load the spacy model nlp = spacy.load('en') # classify the given mail mail_content = 'This is an email from XYZ corporation.' if TextBlob(mail_content).sentiment.polarity > 0: output_label = 'Non-spam' else: output_label = 'Spam' # print the output label print(output_label)"},{"instruction":"Create a class in Python to represent a rational number.","output":"class Rational: def __init__(self, numerator, denominator): self.numerator = numerator self.denominator = denominator def __str__(self): return f\\"{self.numerator}/{self.denominator}\\" def __add__(self, other): new_numerator = self.numerator * other.denominator + other.numerator * self.denominator new_denominator = self.denominator * other.denominator return Rational(new_numerator, new_denominator)"},{"instruction":"Create a lambda expression in Python to return the largest number from a list of numbers.","output":"largestNum = lambda a: max(a)"},{"instruction":"Create a textbased adventure game in Python where the user must navigate through a world of obstacles. The user is in a dark dungeon and must find the exit.","output":"print(\\"You find yourself in a dark dungeon with no apparent exit. What do you do? Enter 'walk left', 'walk right', 'walk straight' or 'look around'\\") move = input() if move == 'walk left': print(\\"You walk to the left and find a door with a lock. What do you do?\\") elif move == 'walk right': print(\\"You walk to the right and find a secret passage leading through the wall. What do you do?\\") elif move == 'walk straight': print(\\"You walk straight and come to a dead end. What do you do?\\") elif move == 'look around': print(\\"You look around and see a lever on the wall. What do you do?\\")"},{"instruction":"Write a Python function that takes a list of words and removes all words that are not equal to the given word. word = 'Hello' words = ['Hi', 'there', 'Hello', 'Goodbye']","output":"def remove_words(word, words): return [w for w in words if w == word]"},{"instruction":"Generate a Python program for finding the most common element in a given list. data=[1, 1, 3, 5, 8, 8]","output":"data=[1, 1, 3, 5, 8, 8] # create empty dictionary to store the counts of each element element_counts={} # loop through the list for element in data: # add value to dictionary if it does not exist, or increase count if it does exist element_counts[element]=element_counts.get(element, 0) + 1 # find the element with the highest count max_count=0 max_element=None for element, count in element_counts.items(): if count>max_count: max_count=count max_element=element # print out the result print(f\\"The most common element is {max_element} with {max_count} occurences\\")"},{"instruction":"Generate a Python function to generate a sequence of numbers based on a given interval. Start: 2, End: 5","output":"def generate_sequence(start, end): return list(range(start, end + 1))"},{"instruction":"Design a Python code to encrypt a given password argument with AES encryption.","output":"from Crypto.Cipher import AES def encrypt_password(password): key = b'Sixteen byte key' cipher = AES.new(key,AES.MODE_EAX) nonce = cipher.nonce ciphertext, tag = cipher.encrypt_and_digest(password.encode('utf-8')) return [ciphertext, tag, nonce] if __name__ == '__main__': password = \\"abc123\\" print(encrypt_password(password))"},{"instruction":"The given code defines two functions. To use the first function, RowChanger, call it with four arguments: row (a string to search for in the file), textToSearch (a string to search for in the file), textToReplace (a string to replace textToSearch with), and fileToSearch (the file to search and replace in). To use the second function, ModSpec, call it with no arguments. This function will modify a spec file and compile it into an executable file.","output":"def RowChanger(row,textToSearch,textToReplace,fileToSearch): a=1 import fileinput tempFile = open( fileToSearch, 'r+' ) for line in fileinput.input( fileToSearch ): if row in line : print('done yet') a=0 if a: if textToReplace==\\"0\\": textToReplace = textToSearch+\\"n\\"+row #fileToSearch = 'D:dummy1.txt' tempFile = open( fileToSearch, 'r+' ) for line in fileinput.input( fileToSearch ): if textToSearch in line : print('done now') tempFile.write(line.replace(textToSearch,textToReplace)) tempFile.close() #http://pythoncentral.io/pyinstaller-package-python-applications-windows-mac-linux/ def ModSpec(): print(\\"modddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\\") import os print(os.path.basename(os.path.dirname(os.path.realpath(__file__)))) #nome=os.path.basename(os.path.dirname(os.path.realpath(__file__))) nome=\\"kivy_matplotlib\\" icon=1 onefile=0 executive=0 vuoimettereunimmagine=0 altrecartelle=0 versionfile=0 nomepy=nome+\\".py\\" nomespec=nome+\\".spec\\" nomecart=\\"\\"+nome+\\"\\" nomeIcon=\\"icon.ico\\" import platform #windowsonly=\\"\\" if StringCnf(platform.system(),\\"Windows\\") else windowsonly=\\" -m \\" from calcolatrice.misuras import StringCnf if StringCnf(platform.system(),\\"Windows\\"): windowsonly=\\" -m \\" else: windowsonly=\\"\\" if onefile: vuoifareunfile=\\" --onefile\\" else: vuoifareunfile=\\"\\" if vuoimettereunimmagine: nomeimmagine=\\"logo.png\\" else: nomeimmagine=\\"\\" if icon: iconStr=\\" --icon \\"+nomeIcon+\\" \\" else: iconStr=\\"\\" #compilatore a=\\"\\"#\\"\\"+os.getcwd() posizione=a+nomepy if versionfile: versionfile=\\" --version-file=version.txt \\" else: versionfile=\\"\\" pythonpath=\\"!python \\"#\\"C:UsersVon BraunDownloadsWinPython-64bit-3.5.2.3Qt5python-3.5.2.amd64Scriptspyinstaller.exe \\" #pythonpath=\\"path='\\"+a+\\"'\\" #pythonpath= \\"C:UsersVon BraunDownloadsWinPython-64bit-3.5.2.3Qt5python-3.5.2.amd64python.exe \\" pyinstallerpath=\\"PyInstaller \\" #pyinstallerpath=\\"C:UsersVon BraunDownloadsWinPython-64bit-3.5.2.3Qt5python-3.5.2.amd64Libsite-packagesPyInstallerbuildingmakespec.py \\" #http://stackoverflow.com/questions/8663046/how-to-install-a-python-package-from-within-ipython #%%!python -m PyInstaller --onefile --name nome --icon icon.ico kivy_matplotlib.py print(\\"nn ATTENDI.....POTRESTI DOVER ASPETTARE MOLTO TEMPOnn\\") creaspecfile=pythonpath+windowsonly+pyinstallerpath+posizione+vuoifareunfile+\\" --windowed \\"+\\" --name \\"+nome+iconStr+versionfile print(creaspecfile) print(\\"nn\\") if executive and 0: #from IPython import get_ipython #ipython = get_ipython() #ipython.magic(exec(creaspecfile)) #run(creaspecfile) #exec(input(\\"inserisci la frase di soprann\\")) import PyInstaller.__main__ specpath=\\"--specpath \\" +os.getcwd() #/opt/bk/spec distpath=\\"--distpath \\" +os.getcwd()+\\"dist\\" #/opt/bk/dist workpath=\\"--workpath \\" +os.getcwd()+\\"build\\" #/opt/bk/build print(specpath) print(distpath) print(workpath) #import PyInstaller.utils.cliutils.makespec #'C:UsersVon BraunGoogle Drivemat2pylabProgettoTesi3.86hello' #'C:UsersVon BraunDownloadsWinPython-64bit-3.5.2.3Qt5settings' #pathex=['C:UsersVon BraunDownloadsWinPython-64bit-3.5.2.3Qt5python-3.5.2.amd64Libsite-packagesPyInstaller'] #PyInstaller.__main__.run_makespec([nomepy,pathex]) PyInstaller.__main__.run([\\"-y\\", \\"-w\\",nomepy]) #exec(creaspecfile) if 1: import os.path esistelospec=os.path.isfile(nomespec) if esistelospec==0: from sys import exit exit() print(\\"ncreazione dello spec completata\\") #add this lines to the spec fil #http://stackoverflow.com/questions/17140886/how-to-search-and-replace-text-in-a-file-using-python print(\\"modifica dello spec in corsonn\\") import fileinput riga=\\"from kivy.deps import sdl2, glew\\" textToSearch = \\"# -*- mode: python -*-\\" NomeFile = nome+\\".spec\\" #fileToSearch = 'D:dummy1.txt' RowChanger(riga,textToSearch,\\"0\\",NomeFile) if altrecartelle: nuova=\\"Tree('..\\"+nomecart+\\"'),\\" textToSearch=\\"coll = COLLECT(exe,\\" textSub=textToSearch+nuova RowChanger(nuova,textToSearch,textSub,NomeFile) #if icona: # modIcon=\\" \\"+\\"icon='icon.ico',\\" # cerca=\\"exe = EXE(pyz,\\" # Modificatore(modIcon,cerca,\\"0\\",NomeFile) cerca2=\\"a.datas,\\" modText2=\\" \\"+\\"*[Tree(p) for p in (sdl2.dep_bins + glew.dep_bins)],\\" RowChanger(modText2,cerca2,\\"0\\",NomeFile) print(\\"spec file completed\\") print(\\"modddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\\") #coll = COLLECT(exe, Tree('examples-pathdemotouchtracer'), #--onefile print(\\"nnsta per iniziare la compilazione, attendi fino a che non avrà finito, troverai il file exe nella cartella DISTn\\") compilaspecfile=pythonpath+windowsonly+pyinstallerpath+nomespec print(compilaspecfile) if executive: #ipython = get_ipython() #exec(input(\\"inserisci la frase di soprann\\")) import PyInstaller.__main__ PyInstaller.__main__.run([\\"-y\\", \\"-w\\",\\"kivy_matplotlib.py\\"]) #run(exec(creaspecfile)) print(\\"ncompilation complete\\") \\"\\"\\" if args.filenames[0].endswith('.spec'): spec_file = args.filenames[0] else: spec_file = run_makespec(**vars(args)) print(\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\") a=os.getcwd() print(a) #os.chdir(\\"C:UsersVon BraunGoogle Drivemat2pylabProgettoTesi4.00\\") print(spec_file) from compilatore import ModSpec ModSpec() os.chdir(a) print(\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\") run_build(pyi_config, spec_file, **vars(args)) \\"\\"\\""},{"instruction":"Produce a logic in Python to truncate a given string after the given number of characters. String = Hello World, length = 4","output":"def string_truncate(string, length): if length > len(string): return string else: return string[:length] + '...'"},{"instruction":"Complete the code to print Hello, World! using Python.","output":"print(\\"Hello, World!\\")"},{"instruction":"Generate a python program to compute the nth fibonacci number in the sequence. 7","output":"def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2) # compute the 7th fibonacci number print(fibonacci(7)) # Output: 13"},{"instruction":"Create a Python program to replace all occurance of a target string in a sentence with a replacement string. Sentence: “Hello world, this is a sample text. We needed to replace the word “world” with “Earth” Target: world Replacement: Earth","output":"sentence = \\"Hello world, this is a sample text. We needed to replace the word “world' with “Earth”\\" target = \\"world\\" replacement = \\"Earth\\" def replace_string(sentence, target, replacement): return sentence.replace(target, replacement) updated_sentence = replace_string(sentence, target, replacement) print(updated_sentence) # Output: Hello Earth, this is a sample text. We needed to replace the word “world' with “Earth”"},{"instruction":"Specify a quick sort algorithm in Python to sort the given array of numbers. [9, 6, 5, 3, 4, 7, 4, 1]","output":"def quick_sort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] mid = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + mid + quick_sort(right) print(quick_sort([9, 6, 5, 3, 4, 7, 4, 1]))"},{"instruction":"Create a new Python list with only the odd numbers from the following list. [1, 2, 3, 4, 5, 6, 7, 8, 9]","output":"odd_numbers = [num for num in [1, 2, 3, 4, 5, 6, 7, 8, 9] if num % 2 != 0]"},{"instruction":"Edit the Python code to print the sum of two given numbers. a = 1 b = 2","output":"a = 1 b = 2 sum = a + b print(sum) # 3"},{"instruction":"Write a Python program to combine two dictionaries into one. dict1 = {'a': 1, 'b': 2} dict2 = {'c': 3, 'd': 4}","output":"dict1 = {'a': 1, 'b': 2} dict2 = {'c': 3, 'd': 4} # Create a new dictionary new_dict = {} # Add each key-value pair from dict1 for key, value in dict1.items(): new_dict[key] = value # Add each key-value pair from dict2 for key, value in dict2.items(): new_dict[key] = value print(new_dict) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}"},{"instruction":"Generate a Python code to classify the given text into three categories The input can be a sentence or a paragraph describing a product For example: This phone is great for streaming videos and taking selfies.","output":"class ClassifyText: def __init__(self, text): self.text = text def classify(self): if \\"streaming videos\\" in self.text: return \\"video\\" elif \\"taking selfies\\" in self.text: return \\"selfie\\" else: return \\"other\\""},{"instruction":"What is the most efficient way to reverse a singly linked list in 7 lines of Python code?","output":"# Definition for singly-linked list. class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseList(head): prev = None current = head while current is not None: nxt = current.next current.next = prev prev = current current = nxt head = prev return head"},{"instruction":"Create a loop in Python that executes 100 iterations.","output":"for i in range(100): # do something"},{"instruction":"Create a function in Python that takes in two dictionaries. The output should be a dictionary that contains the two original dictionaries combined, with the intersection of keys merged. d1 = { 'key1': 'value1', 'key2': 'value2', 'key3': 'value3' } d2 = { 'key4': 'value4', 'key2': 'value5', 'key5': 'value6' }","output":"def merge_dicts(d1, d2): result = d1.copy() for k, v in d2.items(): if k in result: result[k] = (result[k], v) else: result[k] = v return result merge_dicts(d1, d2) # Output: # {'key1': 'value1', # 'key2': ('value2', 'value5'), # 'key3': 'value3', # 'key4': 'value4', # 'key5': 'value6'}"},{"instruction":"Create a python program to calculate the Fibonacci number at a particular index","output":"\\"\\"\\" Program to calculate the Fibonacci number at a particular index \\"\\"\\" def fibonacci_at_index(index): \\"\\"\\"Returns the Fibonacci number at a given index. Args: index (int): The index of the Fibonacci number to be returned Returns: int: The Fibonacci number at the given index \\"\\"\\" if index <= 0: return 0 if index == 1: return 1 return fibonacci_at_index(index - 1) + fibonacci_at_index(index - 2) if __name__ == '__main__': index = int(input()) print(fibonacci_at_index(index))"},{"instruction":"Develop a Python routine that takes a string, separates words and prints the first word. Hello, World!","output":"def print_first_word(sentence): words = sentence.split(' ') print(words[0]) sentence = \\"Hello, World!\\" print_first_word(sentence)"},{"instruction":"Generate a python program to build a REST API to perform CRUD operations on a database table named 'products'.","output":"import flask from flask import request, jsonify import sqlite3 app = flask.Flask(__name__) app.config[\\"DEBUG\\"] = True def dict_factory(cursor, row): d = {} for idx, col in enumerate(cursor.description): d[col[0]] = row[idx] return d @app.route('/', methods=['GET']) def home(): return '''<h1>Products REST API</h1> <p>A prototype API for products.</p>''' @app.route('/api/v1/resources/products/all', methods=['GET']) def api_all(): conn = sqlite3.connect('products.db') conn.row_factory = dict_factory cur = conn.cursor() all_products = cur.execute('SELECT * FROM products;').fetchall() return jsonify(all_products) @app.route('/api/v1/resources/products/create', methods=['POST']) def api_create(): data = request.get_json() name = data['name'] price = data['price'] description = data['description'] conn = sqlite3.connect('products.db') cur = conn.cursor() cur.execute('INSERT INTO products (name, price, description) VALUES (?, ?, ?)', (name, price, description)) conn.commit() return jsonify({'status': 'success'}) @app.route('/api/v1/resources/products/update/<int:id>', methods = ['PUT']) def api_update(id): data = request.get_json() name = data['name'] price = data['price'] description = data['description'] conn = sqlite3.connect('products.db') cur = conn.cursor() cur.execute('UPDATE products SET name=?, price=?, description=? where id=?', (name, price, description, id)) conn.commit() return jsonify({'status': 'success'}) @app.route('/api/v1/resources/products/delete/<int:id>', methods = ['DELETE']) def api_delete(id): conn = sqlite3.connect('products.db') cur = conn.cursor() cur.execute('DELETE FROM products WHERE id=?', (id, )) conn.commit() return jsonify({'status': 'success'}) app.run()"},{"instruction":"Build a Python model to predict if a customer will churn or not based on their past transaction data. Features: [age, recency, frequency, monetary_value, no_of_products] Target: binary (1 – will churn, 0 – will not churn)","output":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Load the data data = pd.read_csv('transaction_data.csv') # Separate input features (X) and target variable (y) X = data[['age', 'recency', 'frequency', 'monetary_value', 'no_of_products']] y = data['churn'] # Split the dataset into training and testing set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1) # Create a logistic regression model log_reg = LogisticRegression() # Train the model on the training set log_reg.fit(X_train, y_train) # Output the predictions on the test set y_pred = log_reg.predict(X_test) # Compute and print the accuracy score acc = accuracy_score(y_test,y_pred) print('Model accuracy score:', acc)"},{"instruction":"Create a function that takes two strings as its inputs and returns true if one of the two strings is a substring of the other. python, java","output":"def is_substring(string1, string2): for i in range(len(string1)): for j in range(len(string2)): if string1[i] == string2[j]: return True return False result = is_substring(\\"python\\", \\"java\\") print(result)"},{"instruction":"Create a program in Python that reads in a tictactoe board of size n x n as an input and does intelligent moves to win the game. [['X', 'O', 'X'], ['X', ' ', 'O'], ['O', 'O', 'X']]","output":"def play_game(board): board_size = len(board) winning_indices = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]] for indices in winning_indices: a = indices[0] b = indices[1] c = indices[2] x_count = 0 o_count = 0 for i in range(3): if board[a//board_size][a%board_size] == 'X': x_count += 1 elif board[a//board_size][a%board_size] == 'O': o_count += 1 if board[b//board_size][b%board_size] == 'X': x_count += 1 elif board[b//board_size][b%board_size] == 'O': o_count += 1 if board[c//board_size][c%board_size] == 'X': x_count += 1 elif board[c//board_size][c%board_size] == 'O': o_count += 1 if o_count == 2 and board[a//board_size][a%board_size] == '': board[a//board_size][a%board_size] = 'O' return board elif x_count == 2 and board[a//board_size][a%board_size] == '': board[a//board_size][a%board_size] = 'X' return board for x in range(board_size): for y in range(board_size): if board[x][y] == ' ': board[x][y] = 'O' return board return board"},{"instruction":"Write a Python program to query a SQL database and display the results in a table. SELECT * FROM User","output":"import sqlite3 # create connection conn = sqlite3.connect('database.db') # establish cursor cur = conn.cursor() # execute the query cur.execute(\\"SELECT * FROM Users\\") # fetch the rows rows = cur.fetchall() # print table print('-'*50) print('|{:^8}|{:^20}|{:^20}|'.format('ID', 'User Name', 'Country')) print('-'*50) for row in rows: print('|{:^8}|{:^20}|{:^20}|'.format(row[0], row[1], row[2])) print('-'*50) # close the connection conn.close()"},{"instruction":"Create a Python program that reads in an unsorted array of integers and prints the array in sorted order. [3, 2, 5, 1, 7, 4]","output":"def sort_array(arr): arr.sort() return arr arr = [3, 2, 5, 1, 7, 4] sorted_arr = sort_array(arr) print(sorted_arr) # [1, 2, 3, 4, 5, 7]"},{"instruction":"Create a Python script to sort a list of tuples by the second element in the tuple in ascending order. myList = [('Tom',7),('Harry',5),('Bob',8)]","output":"def sortList(myList): # sort list by second element myList.sort(key = lambda x: x[1]) # printing the sorted list print (\\"The sorted list in ascending order is : \\") for i in range(len(myList)): print(myList[i]), myList = [('Tom',7),('Harry',5),('Bob',8)] sortList(myList)"},{"instruction":"Create a python code for linear search of an item in a list.","output":"def linear_search(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -1"},{"instruction":"Using regular expression in Python, write a program to extract any birthday dates from a text. This is a text where I am talking about my birthday 4th October 2020","output":"import re text = 'This is a text where I am talking about my birthday 4th October 2020' pattern = r'd{1,2}s[A-Z][a-z]{2,8}sd{4}' match = re.search(pattern, text) if match: print(match.group())"},{"instruction":"Create a web API in Python Flask that returns the factorial of the provided number. 5","output":"from flask import Flask, request app = Flask(__name__) @app.route('/factorial', methods=['POST']) def factorial(): num = request.json['num'] result = 1 for i in range(2, num + 1): result *= i return { 'factorial': result } if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Generate a correct Python program to compute the reverse of the given string string = hello","output":"def reverse_string(string): output = \\"\\" for i in range(len(string)): output += string[len(string)-1-i] return output"},{"instruction":"Write a Python program to update the values in a nested dictionary based on a given value. my_dict = { 'list1': { 'list1_1': 10, 'list1_2': 20 }, 'list2': { 'list2_1': { 'list2_1_1': 30 } 'list2_2': 40 } } value = 25","output":"my_dict = { 'list1': { 'list1_1': 25, 'list1_2': 25 }, 'list2': { 'list2_1': { 'list2_1_1': 25 } 'list2_2': 25 } } def update_values(dictionary, value): for key, value in dictionary.items(): if isinstance(value, dict): update_values(value, value) else: dictionary[key] = value update_values(my_dict, value)"},{"instruction":"Convert the string Hello World to lowercase using Python.","output":"\\"hello world\\".lower()"},{"instruction":"Optimize a Python code to search for an item in a list efficiently using binary search. Not applicable","output":"def binary_search(lst, target): left = 0 right = len(lst) - 1 while left <= right: mid = (right + left) // 2 if lst[mid] == target: return mid elif lst[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"instruction":"Visualize the number of sales a retail shop has made over the last 3 months in Python. Quantity of Sales in each Month","output":"import matplotlib.pyplot as plt # Data for plotting month1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] sales1 = [10, 40, 20, 30, 45, 55, 36, 27, 28, 20] month2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] sales2 = [2, 32, 15, 12, 18, 50, 46, 34, 28, 25] month3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] sales3 = [20, 15, 18, 17, 33, 55, 65, 64, 45, 35] # Visualizing data fig, ax = plt.subplots(1, 1) ax.plot(month1, sales1, color='blue', label='Month 1') ax.plot(month2, sales2, color='red', label='Month 2') ax.plot(month3, sales3, color='green', label='Month 3') plt.title('Retail Shop Sales Data') plt.xlabel('Month') plt.ylabel('Quantity of Sales') plt.legend() plt.show()"},{"instruction":"Generate code to identify the type of data stored in a given variable in Python. val1 = [Hello, 10, 3.14]","output":"# Identify the type of data stored in given variable def identify_data_type(val): for item in val: data_type = type(item).__name__ print(f\\"Data type of {item} is {data_type}\\") val1 = [\\"Hello\\", 10, 3.14] identify_data_type(val1) # Output # Data type of Hello is str # Data type of 10 is int # Data type of 3.14 is float"},{"instruction":"Develop a Python program to count the total characters from a given list of words. [Apple, Banana, Orange]","output":"words = [\\"Apple\\", \\"Banana\\", \\"Orange\\"] total_chars = 0 for word in words: total_chars += len(word) print(total_chars) # Output: 15"},{"instruction":"Create a Python class named 'Song' with an attribute 'title', a constructor, and a method 'play' that prints the title of the song.","output":"class Song: def __init__(self, title): self.title = title def play(self): print(self.title)"},{"instruction":"Design a data pipeline in Python that loads a CSV dataset and performs feature engineering. A CSV datase","output":"import pandas as pd # Load the dataset dataset = pd.read_csv('dataset.csv') # Perform feature engineering dataset['feature_1'] = dataset['column_1'] + dataset['column_2'] dataset['feature_2'] = dataset['column_3'] / dataset['column_4'] dataset['feature_3'] = dataset['column_5'] - dataset['column_6'] # Save the transformed dataset dataset.to_csv('dataset_transformed.csv')"},{"instruction":"Optimize this list sorting algorithm in Python. def sort_list(arr): for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i]","output":"def sort_list(arr): for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j # Check if the minimum index is found to be at i-th position, then no need to swap if min_idx != i: arr[i], arr[min_idx] = arr[min_idx], arr[i]"},{"instruction":"Construct a Python script to filter the elements of a given list which are divisible by 3. [1,2,3,4,5,6,7,8,9]","output":"my_list = [1,2,3,4,5,6,7,8,9] filtered_list = list(filter(lambda x: x % 3 == 0, my_list)) print(filtered_list)"},{"instruction":"Generate a piece of code, using Python, which would generate a random password string that contains only lowercase, uppercase, numerical and special characters.","output":"import string import random def generate_password(): chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation return ''.join(random.choice(chars) for _ in range(8)) print(generate_password())"},{"instruction":"Write a Python program to convert a given solution to a different programming language. Solution: def is_palindrome(word): return word == word[::1] Target language: Jav","output":"def convert_to_java( solution): target_language = \\"Java\\" java_solution = \\"\\" if target_language == \\"Java\\": java_solution += \\"public static boolean is_palindrome(String word) { n\\" java_solution += \\" return word.equals(new StringBuilder(word).reverse().toString()); n\\" java_solution += \\"}\\" return java_solution"},{"instruction":"mplement an algorithm in Python to classify a given dataset into different target classes. dataset.csv","output":"import pandas as pd from sklearn.neighbors import KNeighborsClassifier import numpy as np # Load dataset data = pd.read_csv('dataset.csv') X = data.iloc[:, :-1] y = data.iloc[:, -1] # Create and fit classifier classifier = KNeighborsClassifier(n_neighbors=5) classifier.fit(X, y) # Make predictions predictions = classifier.predict(X) print(np.mean(predictions == y))"},{"instruction":"Create a Python program to extract data from webpages using the BeautifulSoup library. Not applicable","output":"from bs4 import BeautifulSoup import requests # Get the page url = 'http://example.com' page = requests.get(url) # Use BeautifulSoup for parsing soup = BeautifulSoup(page.content, 'html.parser') # Get the data data = soup.find_all('div', class_='datacontainer') # Print the data for item in data: print(item.text)"},{"instruction":"Write a Python program to search through a list of strings and find the longest common prefix string. [ panel, panda, paint, panther ]","output":"def longest_common_prefix(words): # Sort the strings in the list # so that the first string is the shortest words.sort(key=len) # Initialize a prefix to empty string prefix = \\"\\" # Loop until length of prefix is less # than the length of the shortest string while len(prefix) < len(words[0]): # Set the current character to # the character at i-th index of # the shortest string current = words[0][len(prefix)] # Check if the character is present # in the substring of all other strings for i in range(1, len(words)): # Loop through all the words # starting from the second string if words[i][len(prefix)] != current: # Return the prefix if the character # is not present in the rest of the strings return prefix # Add the current character to the prefix prefix += current # Return the longest prefix return prefix"},{"instruction":"Develop a Python program to flatten a 2D list. list_2d = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","output":"def flatten_2d_list(list_2d): # Initialize an empty list flat_list = [] # Loop through the list for row in list_2d: for item in row: # Add the item to the flat list flat_list.append(item) # Return the flattened list return flat_list"},{"instruction":"Given an array of integers, write a Python program to classify each number as even or odd. [10, 27, 32, 11]","output":"def classify_number(arr): result = [] for num in arr: if num % 2 == 0: result.append(\\"even\\") else: result.append(\\"odd\\") return result print(classify_number([10, 27, 32, 11]))"},{"instruction":"Create a python script to generate a tree representation for a given array of numbers. [3, 5, 1, 8, 2]","output":"class TreeNode: def __init__(self, data): self.data = data self.left = None self.right = None def generate_tree(arr): root = TreeNode(arr[0]) for i in range(1, len(arr)): curr = root while True: if arr[i] < curr.data: if curr.left is None: curr.left = TreeNode(arr[i]) break else: curr = curr.left elif arr[i] > curr.data: if curr.right is None: curr.right = TreeNode(arr[i]) break else: curr = curr.right return root result = generate_tree([-3, 5, 1, 8, 2])"},{"instruction":"Write a code for a threadsafe timer in Python.","output":"import threading import time class ThreadSafeTimer(object): def __init__(self, interval, function, args=[], kwargs={}): self.interval = interval self.function = function self.args = args self.kwargs = kwargs self.timer = None def start(self): self.timer = threading.Timer(self.interval, self.function, *self.args, **self.kwargs) self.timer.daemon = True self.timer.start() def stop(self): self.timer.cancel() self.timer = None if __name__ == '__main__': def callback(): print('Timer called') t = ThreadSafeTimer(2.0, callback) t.start()"},{"instruction":"Use Python to generate a random password that is 20 characters long and contains symbols, numbers, and letters. Not applicable","output":"import string import random length = 20 password = '' for c in range(length): password += random.choice(string.ascii_letters + string.digits + string.punctuation) print(password)"},{"instruction":"Create a gradient descent algorithm in Python that minimizes a cost function. Not applicable","output":"def gradient_descent(cost_function, x_values, learning_rate): # Set the initial values for parameters cost = cost_function(x_values) x_t = x_values # Calculate gradients grad = cost_function.gradient(x_t) # Update the parameters while grad.norm() > 0.00001: x_t = x_t - learning_rate * grad cost = cost_function(x_t) grad = cost_function.gradient(x_t) return x_t"},{"instruction":"Debug the given python program to output b2 instead of a3. a1 = 6 a2 = 3 b1 = a1 // a2 a3 = b1 * a2","output":"a1 = 6 a2 = 3 b1 = a1 // a2 b2 = a1 % a2"},{"instruction":"Create a binary tree in Python with the given data. [ 1, 2, 3, 4, 5, 7, 8]","output":"class Node(object): def __init__(self, data): self.data = data self.left = None self.right = None class BinaryTree(object): def __init__(self): self.root = None def insert(self, data): if self.root == None: self.root = Node(data) else: self._insert(data, self.root) def _insert(self, data, node): if data < node.data: if node.left == None: node.left = Node(data) else: self._insert(data, node.left) else: if node.right == None: node.right = Node(data) else: self._insert(data, node.right) # Create binary tree tree = BinaryTree() data_list = [1, 2, 3, 4, 5, 7, 8] for data in data_list: tree.insert(data)"},{"instruction":"Write a Python program that display news headlines from a news site in an interactive way. The program should ask the user for the news categories they are interested in and display the news headlines related to these categories in separate feeds. Not applicable","output":"import requests # Ask user for the categories they are interested in categories = input('What categories of news would you like to see? ').split(',') # Create an empty dictionary of news headlines headlines = {} for category in categories: # Request news data from a news website news_response = requests.get(f'https://example.com/data/{category}') headlines[category] = news_response.json() # Print out the news headlines for category, news_data in headlines.items(): print(f'n{category.title()} Newsn------------------') for headline in news_data: print(headline['title'])"},{"instruction":"Write a python script to detect duplicate words in a sentence. Sentence: She was driving, driving down the road.","output":"sentence = 'She was driving, driving down the road.' list_words = sentence.split(\\" \\") duplicates = {i for i, x in enumerate(list_words) if list_words.count(x) > 1} print(\\"Duplicate words in the sentence are: \\", end=\\"\\") for duplicate in duplicates: print(list_words[duplicate], end=\\" \\")"},{"instruction":"Create a Python program to solve a Sudoku puzzle. A puzzle of the form: 8 0 0 0 0 0 0 0 0 0 0 3 6 0 0 0 0 0 0 7 0 0 9 0 2 0 0 0 5 0 0 0 7 0 0 0 0 0 0 0 4 5 7 0 0 0 0 0 1 0 0 0 3 0 0 0 1 0 0 0 0 6 8 0 0 8 5 0 0 0 1 0 0 9 0 0 0 0 4 0 0","output":"import numpy as np #solve a sudoku puzzle def solve(puzzle): #create a puzzle matrix puzzle_matrix=np.array(puzzle).reshape(9,9) #check if the empty cell is in the row def row(row_index,num): return num in puzzle_matrix[row_index] #check if the empty cell is in the column def col(col_index,num): return num in puzzle_matrix[:,col_index] #check if the empty cell is in the 3x3 grid def grid(row_index,col_index,num): row_start,row_end=row_index//3*3,row_index//3*3+3 col_start,col_end=col_index//3*3,col_index//3*3+3 return num in puzzle_matrix[row_start:row_end,col_start:col_end] #find the empty cell for row_index in range(9): for col_index in range(9): if puzzle_matrix[row_index][col_index]==0: #check numbers from 1-9 for num in range(1,10): if not row(row_index,num) and not col(col_index,num) and not grid(row_index,col_index,num): puzzle_matrix[row_index][col_index]=num solve(puzzle_matrix) puzzle_matrix[row_index][col_index]=0 #backtrack if no valid solution is found return print(puzzle_matrix) #input a sudoku puzzle puzzle = [[8,0,0,0,0,0,0,0,0], [0,0,3,6,0,0,0,0,0], [0,7,0,0,9,0,2,0,0], [0,5,0,0,0,7,0,0,0], [0,0,0,0,4,5,7,0,0], [0,0,0,1,0,0,0,3,0], [0,0,1,0,0,0,0,6,8], [0,0,8,5,0,0,0,1,0], [0,9,0,0,0,0,4,0,0]] solve(puzzle)"},{"instruction":"Create an application in Python that performs sentiment analysis on a sentence. The application should take in a sentence and return a score representing the sentiment of the sentence. Not applicable","output":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_score(sentence): nltk.download('vader_lexicon') analyser = SentimentIntensityAnalyzer() score = analyser.polarity_scores(sentence) return score sentiment_score('This is an example sentence.')"},{"instruction":"Make a class in Python for a car with these attributes: color, year, make, model.","output":"class Car: def __init__(self, color, year, make, model): self.color = color self.year = year self.make = make self.model = model"},{"instruction":"Develop a Python script to count the number of strings where the string length is 2 or more and the first and last characters are the same. ['abc', 'xyz', 'aba', '1221']","output":"# Define a function to count the strings def count_strings(lst): count = 0 # Iterate through the list for s in lst: # Check if string length is greater than 2 and first and last character is same if len(s) >= 2 and s[0] == s[-1]: count += 1 return count # Driver Code lst = ['abc', 'xyz', 'aba', '1221'] print(count_strings(lst))"},{"instruction":"Create a python module that reads the sentiment of a given text. Nothing","output":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_score(text): sentiment_scores = SentimentIntensityAnalyzer().polarity_scores(text) return sentiment_scores[\\"compound\\"]"},{"instruction":"Design a reinforcement learning agent in Python that can play tictactoe and beat humans. Not applicable","output":"import random import numpy as np #Create the board board = np.zeros((3,3)) #Rewards #To avoid tie scores 1 reward for winning -1 reward for loosing #Adaptive learning rate, in this case we will use greedy q-learning epsilon = 0.2 #Discount Factor gamma = 0.9 #Reward reward = 0 #Backtracking the best move def bestMove(board): bestScore = 0 for i in range(3): for j in range(3): if board[i][j] == 0: board[i][j] = 1 score = minimax(board, False) board[i][j] = 0 if score > bestScore: bestScore = score move = [i, j] return move #Game Logic def minimax(board, isMaximizing): #Check if it is a winning board if checkWin(board): return reward #Play the game if isMaximizing: bestScore = -float(\\"inf\\") for i in range(3): for j in range(3): if board[i][j] == 0: board[i][j] = 1 score = minimax(board, False) board[i][j] = 0 bestScore = max(score, bestScore) return bestScore #Minimizing else: bestScore = float(\\"inf\\") for i in range(3): for j in range(3): if board[i][j] == 0: board[i][j] = -1 score = minimax(board, True) board[i][j] = 0 bestScore = min(score, bestScore) return bestScore #Check win def checkWin(board): #Horizontal for i in range(3): if board[i][0] == board[i][1] and board[i][1] == board[i][2] and board[i][0] != 0: return board[i][0] #Vertical for i in range(3): if board[0][i] == board[1][i] and board[1][i] == board[2][i] and board[0][i] != 0: return board[0][i] #Diagonal Top-Left to Bottom-Right if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[0][0] != 0: return board[0][0] #Diagonal Top-Right to Bottom-Left if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[0][2] != 0: return board[0][2] return 0"},{"instruction":"Write a Python code snippet to obtain the average of the elements in a given list. list = [2, 3, 5, 4]","output":"def average(list): total = 0 for num in list: total += num return total / len(list) print(average([2, 3, 5, 4]))"},{"instruction":"Understand the meaning of the given data and create a classification model in Python. x1 = [1 ,2 ,3, 4, 5] y = [1, 2, 1, 2, 1]","output":"# Import necessary library from sklearn import svm # Create a feature and label array X = [[1], [2], [3], [4], [5]] Y = [1,2,1,2,1] # Set up the svm model clf = svm.SVC(kernel='linear') # Train the model clf.fit(X, Y) # Test the model predictions = clf.predict([[3]]) print(predictions)"},{"instruction":"Compile a list of popular Python libraries and their uses.","output":"1. Scikit-learn: Machine learning library for predictive analysis. 2. Numpy: Library for scientific computing with large multi-dimensional arrays and matrices. 3. Pandas: Library for data manipulation and analysis. 4. Matplotlib: 2D plotting library. 5. TensorFlow: Library for building machine learning applications. 6. Django: Web framework for building web applications. 7. Keras: Library for deep learning applications. 8. NLTK: Natural language processing library. 9. Scipy: Library for scientific computing with linear algebra, integration, optimization, and statistics methods. 10. Flask: Micro web framework for building web applications."},{"instruction":"Create a Python program to check if given inputs are anagrams. Input 1: 'listen' Input 2: 'silent'","output":"def is_anagram(input1, input2): # turn the strings into sets s1 = set(input1) s2 = set(input2) # Compare the size of the sets if len(s1) != len(s2): return False # Iterate through the sets and compare the contents for element in s1: if element not in s2: return False # If all the conditions pass, then the strings are anagrams return True # Sample inputs input1 = 'listen' input2 = 'silent' # Check if the strings are anagrams if is_anagram(input1, input2): print(\\"{} and {} are anagrams.\\".format(input1, input2)) else: print(\\"{} and {} are not anagrams.\\".format(input1, input2)) # Output # listen and silent are anagrams."},{"instruction":"Write a Python script to input a string and display it in reverse. Hello world!","output":"!dlrow olleH"},{"instruction":"Create a Python script that prints all the combinations of a string. String: ABC","output":"def combinations(s): # Get the length of the string n = len(s) # A loop to pick starting point of substring for i in range(n): # Pick ending point of substring for j in range(i,n): # Print the substring for k in range(i,j+1): print(s[k], end=\\"\\") print() combinations(\\"ABC\\")"},{"instruction":"Write a Python program to convert a given time in 12 hour format to 24 hour format. 12:05 PM","output":"def convert_to_24(time): if time[-2:] == \\"PM\\" and time[:2] != \\"12\\": return str(int(time[:2])+12)+time[2:-2] elif time[-2:] == \\"AM\\" and time[:2] == \\"12\\": return \\"00\\"+time[2:-2] else: return time[:-2]"},{"instruction":"This code defines a Python class for creating and manipulating ipkg packages. To use it, create a Package object, set its attributes (such as package name, version, architecture, maintainer, dependencies, and description), and then call the write_package() method to generate the ipkg file. The Packages class is currently unimplemented.","output":"#!/usr/bin/env python # Copyright (C) 2001 Alexander S. Guy <a7r@andern.org> # Andern Research Labs # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2, or (at your option) # any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 59 Temple Place - Suite 330, # Boston, MA 02111-1307, USA. */ # # Copyright 2001, Russell Nelson <ipkg.py@russnelson.com> # Added reading in of packages. # Added missing package information fields. # Changed render_control() to __repr__(). # # Current Issues: # The API doesn't validate package information fields. It should be # throwing exceptions in the right places. # Executions of tar could silently fail. # Executions of tar *do* fail, and loudly, because you have to specify a full filename, # and tar complains if any files are missing, and the ipkg spec doesn't require # people to say \\"./control.tar.gz\\" or \\"./control\\" when they package files. # It would be much better to require ./control or disallow ./control (either) # rather than letting people pick. Some freedoms aren't worth their cost. import tempfile import os import sys import glob import md5 import re import string import commands from stat import ST_SIZE class Package: \\"\\"\\"A class for creating objects to manipulate (e.g. create) ipkg packages.\\"\\"\\" def __init__(self, fn=None): self.package = None self.version = None self.architecture = None self.maintainer = None self.source = None self.description = None self.depends = None self.provides = None self.replaces = None self.conflicts = None self.recommends = None self.suggests = None self.section = None self.filename_header = None self.file_list = [] self.md5 = None self.size = None self.installed_size = None self.filename = None self.isdeb = 0 if fn: # see if it is deb format f = open(fn, \\"r\\") magic = f.read(4) f.close() if (magic == \\"!<ar\\"): self.isdeb = 1 # compute the MD5. f = open(fn, \\"r\\") sum = md5.new() while 1: data = f.read(1024) if not data: break sum.update(data) f.close() if sys.version[:1] > '2': # when using Python 2.0 or newer self.md5 = sum.hexdigest() else: self.md5 = string.join(map((lambda x:\\"%02x\\" % ord(x)),sum.digest()),'') stat = os.stat(fn) self.size = stat[ST_SIZE] self.filename = os.path.basename(fn) sys.stderr.write(\\" extracting control.tar.gz from %sn\\"% (fn,)) if self.isdeb: control = os.popen(\\"ar p \\"+fn+\\" control.tar.gz | tar xfzO - --wildcards '*control'\\",\\"r\\") else: control = os.popen(\\"tar xfzO \\"+fn+\\" --wildcards '*control.tar.gz' | tar xfzO - --wildcards '*control'\\",\\"r\\") line = control.readline() while 1: if not line: break line = string.rstrip(line) lineparts = re.match(r'([w-]*?):s*(.*)', line) if lineparts: name = string.lower(lineparts.group(1)) value = lineparts.group(2) while 1: line = control.readline() if not line: break if line[0] != ' ': break line = string.rstrip(line) value = value + 'n' + line # don't allow package to override its own filename if name == \\"filename\\": self.filename_header = value else: if self.__dict__.has_key(name): self.__dict__[name] = value else: line = control.readline() control.close() if self.isdeb: data = os.popen(\\"ar p \\"+fn+\\" data.tar.gz | tar tfz -\\",\\"r\\") else: data = os.popen(\\"tar xfzO \\"+fn+\\" --wildcards '*data.tar.gz' | tar tfz -\\",\\"r\\") while 1: line = data.readline() if not line: break self.file_list.append(string.rstrip(line)) data.close() self.scratch_dir = None self.file_dir = None self.meta_dir = None def read_control(self, control): import os line = control.readline() while 1: if not line: break line = string.rstrip(line) lineparts = re.match(r'([w-]*?):s*(.*)', line) if lineparts: name = string.lower(lineparts.group(1)) value = lineparts.group(2) while 1: line = control.readline() if not line: break if line[0] != ' ': break value = value + 'n' + line if name == 'size': self.size = int(value) elif self.__dict__.has_key(name): self.__dict__[name] = value if line[0] == 'n': return # consumes one blank line at end of package descriptoin else: line = control.readline() pass return def _setup_scratch_area(self): self.scratch_dir = \\"%s/%sipkg\\" % (tempfile.gettempdir(), tempfile.gettempprefix()) self.file_dir = \\"%s/files\\" % (self.scratch_dir) self.meta_dir = \\"%s/meta\\" % (self.scratch_dir) os.mkdir(self.scratch_dir) os.mkdir(self.file_dir) os.mkdir(self.meta_dir) def set_package(self, package): self.package = package def get_package(self): return self.package def set_version(self, version): self.version = version def get_version(self): return self.version def set_architecture(self, architecture): self.architecture = architecture def get_architecture(self): return self.architecture def set_maintainer(self, maintainer): self.maintainer = maintainer def get_maintainer(self): return self.maintainer def set_source(self, source): self.source = source def get_source(self): return self.source def set_description(self, description): self.description = description def get_description(self): return self.description def set_depends(self, depends): self.depends = depends def get_depends(self, depends): return self.depends def set_provides(self, provides): self.provides = provides def get_provides(self, provides): return self.provides def set_replaces(self, replaces): self.replaces = replaces def get_replaces(self, replaces): return self.replaces def set_conflicts(self, conflicts): self.conflicts = conflicts def get_conflicts(self, conflicts): return self.conflicts def set_suggests(self, suggests): self.suggests = suggests def get_suggests(self, suggests): return self.suggests def set_section(self, section): self.section = section def get_section(self, section): return self.section def get_file_list(self): return self.file_list def write_package(self, dirname): buf = self.render_control() file = open(\\"%s/control\\" % self.meta_dir, 'w') file.write(buf) self._setup_scratch_area() cmd = \\"cd %s ; tar cvfz %s/control.tar.gz control\\" % (self.meta_dir, self.scratch_dir) cmd_out, cmd_in, cmd_err = os.popen3(cmd) while cmd_err.readline() != \\"\\": pass cmd_out.close() cmd_in.close() cmd_err.close() bits = \\"control.tar.gz\\" if self.file_list: cmd = \\"cd %s ; tar cvfz %s/data.tar.gz\\" % (self.file_dir, self.scratch_dir) cmd_out, cmd_in, cmd_err = os.popen3(cmd) while cmd_err.readline() != \\"\\": pass cmd_out.close() cmd_in.close() cmd_err.close() bits = bits + \\" data.tar.gz\\" file = \\"%s_%s_%s.ipk\\" % (self.package, self.version, self.architecture) cmd = \\"cd %s ; tar cvfz %s/%s %s\\" % (self.scratch_dir, dirname, file, bits) cmd_out, cmd_in, cmd_err = os.popen3(cmd) while cmd_err.readline() != \\"\\": pass cmd_out.close() cmd_in.close() cmd_err.close() def __repr__(self): out = \\"\\" # XXX - Some checks need to be made, and some exceptions # need to be thrown. -- a7r if self.package: out = out + \\"Package: %sn\\" % (self.package) if self.version: out = out + \\"Version: %sn\\" % (self.version) if self.depends: out = out + \\"Depends: %sn\\" % (self.depends) if self.provides: out = out + \\"Provides: %sn\\" % (self.provides) if self.replaces: out = out + \\"Replaces: %sn\\" % (self.replaces) if self.conflicts: out = out + \\"Conflicts: %sn\\" % (self.conflicts) if self.suggests: out = out + \\"Suggests: %sn\\" % (self.suggests) if self.recommends: out = out + \\"Recommends: %sn\\" % (self.recommends) if self.section: out = out + \\"Section: %sn\\" % (self.section) if self.architecture: out = out + \\"Architecture: %sn\\" % (self.architecture) if self.maintainer: out = out + \\"Maintainer: %sn\\" % (self.maintainer) if self.md5: out = out + \\"MD5Sum: %sn\\" % (self.md5) if self.size: out = out + \\"Size: %dn\\" % int(self.size) if self.installed_size: out = out + \\"InstalledSize: %dn\\" % int(self.installed_size) if self.filename: out = out + \\"Filename: %sn\\" % (self.filename) if self.source: out = out + \\"Source: %sn\\" % (self.source) if self.description: out = out + \\"Description: %sn\\" % (self.description) out = out + \\"n\\" return out def __del__(self): # XXX - Why is the \`os' module being yanked out before Package objects # are being destroyed? -- a7r pass class Packages: \\"\\"\\"A currently unimplemented wrapper around the ipkg utility.\\"\\"\\" def __init__(self): self.packages = {} return def add_package(self, pkg): package = pkg.package arch = pkg.architecture name = (\\"%s:%s\\" % (package, arch)) if (not self.packages.has_key(name)): self.packages[name] = pkg (s, outtext) = commands.getstatusoutput(\\"ipkg-compare-versions %s '>' %s\\" % (pkg.version, self.packages[name].version)) if (s == 0): self.packages[name] = pkg return 0 else: return 1 def read_packages_file(self, fn): f = open(fn, \\"r\\") while 1: pkg = Package() pkg.read_control(f) if pkg.get_package(): self.add_package(pkg) else: break f.close() return def write_packages_file(self, fn): f = open(fn, \\"w\\") names = self.packages.keys() names.sort() for name in names: f.write(self.packages[name].__repr__()) return def keys(self): return self.packages.keys() def __getitem__(self, key): return self.packages[key] if __name__ == \\"__main__\\": package = Package() package.set_package(\\"FooBar\\") package.set_version(\\"0.1-fam1\\") package.set_architecture(\\"arm\\") package.set_maintainer(\\"Testing <testing@testing.testing>\\") package.set_depends(\\"libc\\") package.set_description(\\"A test of the APIs.\\") print \\"<\\" sys.stdout.write(package) print \\">\\" package.write_package(\\"/tmp\\")"},{"instruction":"Define and create a class in Python to represent a student. The student should have properties for first name, last name, student ID and a GPA. Not applicable","output":"class Student: def __init__(self, first_name, last_name, student_id, gpa): self.first_name = first_name self.last_name = last_name self.student_id = student_id self.gpa = gpa student = Student('John', 'Doe', '12345', 3.5)"},{"instruction":"Use NLP to build a sentiment analysis pipeline in Python. The pipeline should take in text as input, and output a sentiment score as either positive or negative. Not applicable","output":"import pandas as pd import nltk nltk.download('punkt') nltk.download('averaged_perceptron_tagger') nltk.download('stopwords') from nltk import word_tokenize from nltk.sentiment.vader import SentimentIntensityAnalyzer # Load data df = pd.read_csv('data.csv') # Extract text column text = df['text'] # Preprocess text tokenized_text = [word_tokenize(text) for text in text] stop_words = nltk.corpus.stopwords.words('english') tokenized_text = [word for word in tokenzed_text if word not in stop_words] #Feature extraction pos_tokens = [word for (word, tag) in nltk.pos_tag(tokenized_text) if tag.startswith('N') or tag.startswith('J')] #Sentiment analysis sid = SentimentIntensityAnalyzer() scores = [sid.polarity_scores(pos_token) for pos_token in pos_tokens] df['sentiment'] = [score['compound'] for score in scores] #Output print(df)"},{"instruction":"Create a program to Reverse Engineer a given binary tree. a / b c / / d e f g","output":"# Python3 Program to print Postorder traversal # from given Inorder and Preorder traversals # Function to print postorder traversal def printPostOrder(inOrder, preOrder, n): # The first element in preOrder[] # is always root, search it in # inOrder[] to find left and # right subtrees root = preOrder[0]; # Iterate through inOrder[], # find the index of root rootIndex = 0 for i in range(0, n): if (inOrder[i] == root): rootIndex = i break # Use index in Inorder to divide # inOrder array in two parts # Left Subtree and Right Subtree if (rootIndex != 0): # Recur for left subtree printPostOrder(inOrder[0 : rootIndex], preOrder[1 : rootIndex + 1], rootIndex) # Recur for right subtree if (rootIndex != n - 1): printPostOrder(inOrder[rootIndex + 1 : n], preOrder[rootIndex + 1 : n], n - rootIndex - 1) print( root, end = \\" \\") # Driver code if __name__ == '__main__': inOrder = ['d','b','e','a','f','c','g'] preOrder = ['a','b','d','e','c','f','g'] n = len(inOrder) # Print PostOrder Traversal printPostOrder(inOrder, preOrder, n) # Output: # d e b f g c a"},{"instruction":"Create a Python function that takes in a string of text and returns it with all its vowels capitalized. amazing","output":"def capitalize_vowels(s): # Converting string to list. s_list = list(s) # Defining a set of vowels vowels = {'a', 'e', 'i', 'o', 'u'} # Iterate over list and capitalize vowels for i in range(0, len(s_list)): if s_list[i] in vowels: s_list[i] = s_list[i].upper() # Joining list to string return ''.join(s_list) text = 'amazing' capitalized = capitalize_vowels(text) print(capitalized) # Output: \\"AmAzIng\\""},{"instruction":"Create a prototype of a bubble sort function in Python.","output":"def bubbleSort(arr): for i in range(len(arr)): for j in range(0, len(arr)-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"instruction":"w can you improve the following python function to make it run more quickly? def find_target(numbers, target): for number in numbers: if number == target: return True return False","output":"def find_target(numbers, target): \\"\\"\\"This function returns True if the target is present in the given list of numbers.\\"\\"\\" # Use set to improve the lookup performance num_set = set(numbers) if target in num_set: return True return False"},{"instruction":"This code is a Python class that processes OptionROM generation from INF statement. To use this code, import the required modules and create an instance of the OptRomInfStatement class. Then call the GenFfs() method to generate the FFS file. The __GetOptRomParams() method can be used to parse the INF file and get the OptionROM related parameters. The __GenSimpleFileSection__() and __GenComplexFileSection__() methods can be used to generate the section files.","output":"@file # process OptionROM generation from INF statement # # Copyright (c) 2007, Intel Corporation. All rights reserved.<BR> # # This program and the accompanying materials # are licensed and made available under the terms and conditions of the BSD License # which accompanies this distribution. The full text of the license may be found at # http://opensource.org/licenses/bsd-license.php # # THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN \\"AS IS\\" BASIS, # WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED. # # Import Modules # import RuleSimpleFile import RuleComplexFile import Section import OptionRom import Common.GlobalData as GlobalData from Common.DataType import * from Common.String import * from FfsInfStatement import FfsInfStatement from GenFdsGlobalVariable import GenFdsGlobalVariable # # class OptRomInfStatement (FfsInfStatement): The constructor # # @param self The object pointer # def __init__(self): FfsInfStatement.__init__(self) self.OverrideAttribs = None __GetOptRomParams() method # # Parse inf file to get option ROM related parameters # # @param self The object pointer # def __GetOptRomParams(self): if self.OverrideAttribs == None: self.OverrideAttribs = OptionRom.OverrideAttribs() if self.OverrideAttribs.NeedCompress == None: self.OverrideAttribs.NeedCompress = self.OptRomDefs.get ('PCI_COMPRESS') if self.OverrideAttribs.NeedCompress is not None: if self.OverrideAttribs.NeedCompress.upper() not in ('TRUE', 'FALSE'): GenFdsGlobalVariable.ErrorLogger( \\"Expected TRUE/FALSE for PCI_COMPRESS: %s\\" %self.InfFileName) self.OverrideAttribs.NeedCompress = self.OverrideAttribs.NeedCompress.upper() == 'TRUE' if self.OverrideAttribs.PciVendorId == None: self.OverrideAttribs.PciVendorId = self.OptRomDefs.get ('PCI_VENDOR_ID') if self.OverrideAttribs.PciClassCode == None: self.OverrideAttribs.PciClassCode = self.OptRomDefs.get ('PCI_CLASS_CODE') if self.OverrideAttribs.PciDeviceId == None: self.OverrideAttribs.PciDeviceId = self.OptRomDefs.get ('PCI_DEVICE_ID') if self.OverrideAttribs.PciRevision == None: self.OverrideAttribs.PciRevision = self.OptRomDefs.get ('PCI_REVISION') # InfObj = GenFdsGlobalVariable.WorkSpace.BuildObject[self.PathClassObj, self.CurrentArch] # RecordList = InfObj._RawData[MODEL_META_DATA_HEADER, InfObj._Arch, InfObj._Platform] # for Record in RecordList: # Record = ReplaceMacros(Record, GlobalData.gEdkGlobal, False) # Name = Record[0] GenFfs() method # # Generate FFS # # @param self The object pointer # @retval string Generated .efi file name # def GenFfs(self): # # Parse Inf file get Module related information # self.__InfParse__() self.__GetOptRomParams() # # Get the rule of how to generate Ffs file # Rule = self.__GetRule__() GenFdsGlobalVariable.VerboseLogger( \\"Packing binaries from inf file : %s\\" %self.InfFileName) #FileType = Ffs.Ffs.ModuleTypeToFileType[Rule.ModuleType] # # For the rule only has simpleFile # if isinstance (Rule, RuleSimpleFile.RuleSimpleFile) : EfiOutputList = self.__GenSimpleFileSection__(Rule) return EfiOutputList # # For Rule has ComplexFile # elif isinstance(Rule, RuleComplexFile.RuleComplexFile): EfiOutputList = self.__GenComplexFileSection__(Rule) return EfiOutputList __GenSimpleFileSection__() method # # Get .efi files according to simple rule. # # @param self The object pointer # @param Rule The rule object used to generate section # @retval string File name of the generated section file # def __GenSimpleFileSection__(self, Rule): # # Prepare the parameter of GenSection # OutputFileList = [] if Rule.FileName != None: GenSecInputFile = self.__ExtendMacro__(Rule.FileName) OutputFileList.append(GenSecInputFile) else: OutputFileList, IsSect = Section.Section.GetFileList(self, '', Rule.FileExtension) return OutputFileList __GenComplexFileSection__() method # # Get .efi by sections in complex Rule # # @param self The object pointer # @param Rule The rule object used to generate section # @retval string File name of the generated section file # def __GenComplexFileSection__(self, Rule): OutputFileList = [] for Sect in Rule.SectionList: if Sect.SectionType == 'PE32': if Sect.FileName != None: GenSecInputFile = self.__ExtendMacro__(Sect.FileName) OutputFileList.append(GenSecInputFile) else: FileList, IsSect = Section.Section.GetFileList(self, '', Sect.FileExtension) OutputFileList.extend(FileList) return OutputFileList"},{"instruction":"Create a Python 3 function that takes a list of integers as an input and output the maximum sum of an increasing subsequence of the list. [10, 12, 4, 6, 5, 3]","output":"def max_inc_subseq_sum(arr): n = len(arr) max_sum = [0]*n for i in range(n): max_sum[i] = arr[i] for i in range(1, n): for j in range(i): if arr[i] > arr[j] and max_sum[i] < max_sum[j] + arr[i]: max_sum[i] = max_sum[j] + arr[i] return max(max_sum) print(max_inc_subseq_sum([10, 12, 4, 6, 5, 3])) # Output: 22 (4 + 6 + 12)"},{"instruction":"Debug the following python code snippet so that it returns a list of even numbers from the given list of numbers. ls = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","output":"ls = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] result = [] for num in ls: if num % 2 == 0: result.append(num) print(result) # prints [2, 4, 6, 8, 10]"},{"instruction":"Explain the concept of recursion with an example in Python.","output":"Recursion is a programming concept which involves a function invoking itself. Instead of using loops, recursion makes use of a function calling itself with a different input value each time. An example of recursive function in Python is the factorial function, defined as follows: def factorial(x): if x == 1: return 1 else: return x * factorial(x-1) The function factorial(x) takes a single parameter x and returns x multiplied by the factorial of x-1. This recursive process will continue until it reaches the base case, which is x==1, where the function returns the value 1."},{"instruction":"Generate a database schema for a given set of sample data. [{Name: John, Skills: Python, HTML, CSS, Location: Europe}, {Name: Jim, Skills: Java, Bash, Go, Location: Asia}]","output":"CREATE TABLE IF NOT EXISTS users ( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, skills TEXT NOT NULL, location TEXT NOT NULL ); INSERT INTO users (name, skills, location) VALUES ('John', 'Python, HTML, CSS', 'Europe'), ('Jim', 'Java, Bash, Go', 'Asia');"},{"instruction":"Generate a Python program to multiply each element in a given list by a given number.","output":"def multiply_list(lst, num): res = [] for item in lst: res.append(item*num) return res"},{"instruction":"Write a Python program to find the number of different ways to express n as the sum of 1, 3 and 4. Number: 8","output":"def countWays(n): if (n == 0): return 1 elif (n < 0): return 0 else: return countWays(n-1) + countWays(n-3) + countWays(n-4) n = 8 result = countWays(n) print(\\"The number of different ways to express\\", n, \\"as the sum of 1, 3 and 4 is:\\", result)"},{"instruction":"Design a program in Python to remove the middle character of a string. coding","output":"def removeMiddleChar (word): middle = len(word)//2 # length of the substring # which is to be removed length = 1 # to make sure the middle character is removed # check the character's index if len(word) % 2 == 0: length = 2 # slicing the word of middle value word = word[:middle] + word[middle + length:] return word"},{"instruction":"Generate a valid python program to identify the longest subsequence in a given list. [2, 3, 7, 4, 9, 6]","output":"def longest_seq(nums): longest_seq = [] current_seq = [nums[0]] for n in nums[1:]: if n > current_seq[-1]: current_seq.append(n) if len(current_seq) > len(longest_seq): longest_seq = current_seq else: current_seq = [n] return longest_seq longest = longest_seq([2, 3, 7, 4, 9, 6]) print(longest)"},{"instruction":"Design a Python class for implementing a stack data structure.","output":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def is_empty(self): return self.items == [] def peek(self): if not self.is_empty(): return self.items[-1] def get_stack(self): return self.items"},{"instruction":"Write a python script to get the filename from the given path /Users/john/Documents/Github/myproject/myfile.py","output":"import os def get_filename_from_path(path): return os.path.basename(path) filename = get_filename_from_path('/Users/john/Documents/Github/myproject/myfile.py') print(filename)"},{"instruction":"mplement a solution in Python that finds the number of strings from the given set whose sum of ASCII values is divisible by 3 {wonder,woman,man}","output":"def count_strings_by_sum_of_ascii(strings): count = 0 for string in strings: ascii_sum = 0 for char in string: ascii_sum += ord(char) if ascii_sum % 3 == 0: count += 1 return count"},{"instruction":"The given code is a Python script that sets up and orchestrates various services required to run a test. To use this script, import the necessary modules and create an instance of the ExecutionEngine class. Then, call the set_up() method to start all the required services and configure the Selenium driver. After that, use the provided methods to interact with the app and test its functionality. Finally, call the tear_down() method to shut down all the services.","output":"from subprocess import call from os import path import hitchpostgres import hitchselenium import hitchpython import hitchserve import hitchredis import hitchtest import hitchsmtp # Get directory above this file PROJECT_DIRECTORY = path.abspath(path.join(path.dirname(__file__), '..')) class ExecutionEngine(hitchtest.ExecutionEngine): \\"\\"\\"Engine for orchestating and interacting with the app.\\"\\"\\" def set_up(self): \\"\\"\\"Ensure virtualenv present, then run all services.\\"\\"\\" python_package = hitchpython.PythonPackage( python_version=self.settings['python_version'] ) python_package.build() call([ python_package.pip, \\"install\\", \\"-r\\", path.join(PROJECT_DIRECTORY, \\"requirements/local.txt\\") ]) postgres_package = hitchpostgres.PostgresPackage() postgres_package.build() redis_package = hitchredis.RedisPackage() redis_package.build() self.services = hitchserve.ServiceBundle( project_directory=PROJECT_DIRECTORY, startup_timeout=float(self.settings[\\"startup_timeout\\"]), shutdown_timeout=float(self.settings[\\"shutdown_timeout\\"]), ) postgres_user = hitchpostgres.PostgresUser(\\"project_soa\\", \\"password\\") self.services['Postgres'] = hitchpostgres.PostgresService( postgres_package=postgres_package, users=[postgres_user, ], databases=[hitchpostgres.PostgresDatabase(\\"project_soa\\", postgres_user), ] ) self.services['HitchSMTP'] = hitchsmtp.HitchSMTPService(port=1025) self.services['Django'] = hitchpython.DjangoService( python=python_package.python, port=8000, settings=\\"project_soa.settings.local\\", needs=[self.services['Postgres'], ], env_vars=self.settings['environment_variables'], ) self.services['Redis'] = hitchredis.RedisService( redis_package=redis_package, port=16379, ) self.services['Firefox'] = hitchselenium.SeleniumService( xvfb=self.settings.get(\\"xvfb\\", False), no_libfaketime=True, ) # import hitchcron # self.services['Cron'] = hitchcron.CronService( # run=self.services['Django'].manage(\\"trigger\\").command, # every=1, # needs=[ self.services['Django'], ], # ) self.services.startup(interactive=False) # Docs : https://hitchtest.readthedocs.org/en/latest/plugins/hitchselenium.html self.driver = self.services['Firefox'].driver self.webapp = hitchselenium.SeleniumStepLibrary( selenium_webdriver=self.driver, wait_for_timeout=5, ) # Add selenium steps self.click = self.webapp.click self.wait_to_appear = self.webapp.wait_to_appear self.wait_to_contain = self.webapp.wait_to_contain self.wait_for_any_to_contain = self.webapp.wait_for_any_to_contain self.click_and_dont_wait_for_page_load = self.webapp.click_and_dont_wait_for_page_load # Configure selenium driver self.driver.set_window_size(self.settings['window_size']['width'], self.settings['window_size']['height']) self.driver.set_window_position(0, 0) self.driver.implicitly_wait(2.0) self.driver.accept_next_alert = True def pause(self, message=None): \\"\\"\\"Stop. IPython time.\\"\\"\\" if hasattr(self, 'services'): self.services.start_interactive_mode() self.ipython(message) if hasattr(self, 'services'): self.services.stop_interactive_mode() def load_website(self): \\"\\"\\"Navigate to website in Firefox.\\"\\"\\" self.driver.get(self.services['Django'].url()) self.click(\\"djHideToolBarButton\\") def fill_form(self, **kwargs): \\"\\"\\"Fill in a form with id=value.\\"\\"\\" for element, text in kwargs.items(): self.driver.find_element_by_id(element).send_keys(text) def confirm_emails_sent(self, number): \\"\\"\\"Count number of emails sent by app.\\"\\"\\" assert len(self.services['HitchSMTP'].logs.json()) == int(number) def click_on_link_in_last_email(self, which=1): \\"\\"\\"Click on the nth link in the last email sent.\\"\\"\\" self.driver.get( self.services['HitchSMTP'].logs.json()[-1]['links'][which - 1] ) def wait_for_email(self, containing=None): \\"\\"\\"Wait for, and return email.\\"\\"\\" self.services['HitchSMTP'].logs.out.tail.until_json( lambda email: containing in email['payload'] or containing in email['subject'], timeout=25, lines_back=1, ) def time_travel(self, days=\\"\\"): \\"\\"\\"Make all services think that time has skipped forward.\\"\\"\\" self.services.time_travel(days=int(days)) def on_failure(self): \\"\\"\\"Stop and IPython.\\"\\"\\" if not self.settings['quiet']: if self.settings.get(\\"pause_on_failure\\", False): self.pause(message=self.stacktrace.to_template()) def on_success(self): \\"\\"\\"Pause on success if enabled.\\"\\"\\" if self.settings.get(\\"pause_on_success\\", False): self.pause(message=\\"SUCCESS\\") def tear_down(self): \\"\\"\\"Shut down services required to run your test.\\"\\"\\" if hasattr(self, 'services'): self.services.shutdown()"},{"instruction":"Generate a Python code for replicating an output after switching the contents of two strings. Given two strings, ‘str1’ and ‘str2’, swap the contents of the two strings. For example, if the two strings are ‘Hello’ and ‘World’, the output after swtiching the contents should be ‘Worlh’ and ‘Hello’","output":"str1, str2 = 'Hello', 'World' str1, str2 = str2, str1 print(\\"After swapping: str1 =\\", str1, \\"and str2 =\\", str2)"},{"instruction":"What is the code for using the Python Requests module to post data to the server? URL: http://example.com/data","output":"import requests url = \\"http://example.com/data\\" data = {\\"name\\":\\"John Doe\\",\\"age\\":30} response = requests.post(url, data = data)"},{"instruction":"Generate a data structure in Python that stores a list of flagged emails, and that provides a method to unflag them all.","output":"class FlaggedEmails: def __init__(self): self.flagged_emails = [] def add_email(self, email): self.flagged_emails.append(email) def unflag_all(self): while self.flagged_emails: self.flagged_emails.pop()"},{"instruction":"Design an objectoriented Python class to represent a vehicle.","output":"class Vehicle: def __init__(self, make, model, year): self.make = make self.model = model self.year = year def getMake(self): return self.make def getModel(self): return self.model def getYear(self): return self.year"},{"instruction":"Create a python program to input two numbers and then swap their values. x = 4 y = 3","output":"x = 3 y = 4 temp = x x = y y = temp print(\\"x =\\", x) print(\\"y =\\", y)"},{"instruction":"Develop a Python program to count the frequency of each word in a given string. string = This is a string","output":"def countFreq(str): # break the string into words str = str.split(\\" \\") # Count each word using Dictionary freq = {} for word in str: if word in freq: freq[word] += 1 else: freq[word] = 1 return freq"},{"instruction":"Create a Python script to calculate total electricity bill Oneoff membership fee: 25.00 Night rate(17 p.m 7 am): 0.20 per kWh Standard rate: 0.30 per kWh Total electricity used: 350 kWh","output":"def calc_elec_bill(one_off, night_rate, standard_rate, total_kwh): one_off_fee = one_off night_rate_fee = night_rate * total_kwh standard_rate_fee = standard_rate * total_kwh return one_off_fee + night_rate_fee + standard_rate_fee one_off = 25.00 night_rate = 0.20 standard_rate = 0.30 total_kwh = 350.00 print(\\"Total electricity bill: \\"+str(calc_elec_bill(one_off, night_rate, standard_rate, total_kwh)))"},{"instruction":"Generate a Python program which can produce the sum of all even numbers between 0 and n, including zero.","output":"def sum_even_nums(n): sum = 0 for i in range(0, n+1): if i%2 == 0: sum += i return sum"},{"instruction":"Generate a 20 Hz sine wave sample using Python.","output":"import matplotlib.pyplot as plt import numpy as np sampling_rate = 100 sine_frequency = 20 time_period = 1.0/sampling_rate x_values = np.arange(0, 1, time_period) y_values = np.sin(2 * np.pi * sine_frequency * x_values) plt.plot(x_values, y_values) plt.xlabel('Time') plt.ylabel('Amplitude') plt.show()"},{"instruction":"Create a Python web scraper to extract job postings from Indeed.com. Not applicable","output":"import requests from bs4 import BeautifulSoup def scrape_indeed(url): jobs = [] page = requests.get(url).content soup = BeautifulSoup(page, 'html.parser') job_cards = soup.find_all('div', class_='jobsearch-SerpJobCard unifiedRow row result clickcard') for job_card in job_cards: title = job_card.find('div', class_='title').text company = job_card.find('span', class_='company').text location = job_card.find('div', class_='location').text link = 'https://www.indeed.com/' + job_card.find('a').get('href') job = { 'title': title, 'company': company, 'location': location, 'link': link } jobs.append(job) return jobs if __name__ == '__main__': jobs = scrape_indeed('https://www.indeed.com/jobs?q=web+developer&l=San+Francisco%2C+CA') print(jobs)"},{"instruction":"Create a web server using Python's Flask framework to render a page containing a form asking for user information. Not applicable","output":"from flask import Flask, render_template app = Flask(__name__) @app.route('/', methods=['GET']) def main_page(): return render_template('userinfoForm.html') @app.route('/user-info', methods=['POST']) def get_user_info(): # get user info from form name = request.form.get('name') email = request.form.get('email') address = request.form.get('address') occupation = request.form.get('occupation') return render_template('success.html', name=name, email=email, address=address, occupation=occupation) if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Create a Python function that validates a given string is a valid email address.","output":"def validate_email(email): # check if the email address is valid or not if '@' not in email: return False if '.' not in email: return False username = email.split('@')[0] domain = email.split('@')[1] if username == \\"\\" or domain == \\"\\": return False return True"},{"instruction":"Create a web scraping program in Python that fetches live stock prices on a given URL URL: http://finance.yahoo.com/quote/AAPL/","output":"import requests from bs4 import BeautifulSoup # Get the page url = 'http://finance.yahoo.com/quote/AAPL/' page = requests.get(url) # Parse the content soup = BeautifulSoup(page.content, 'html.parser') # Find the element which contains the stock price price_element = soup.find('span', class_=\\"Fl(end) Ta(end) Fw(b) Fz(36px) Mb(-4px)\\") # Extract and print the stock price print(price_element.text)"},{"instruction":"Create a python program that takes a list of userdefined objects as input and prints a summary of the objects. [{'name': 'John', 'age': 23}, {'name': 'Mary', 'age': 35}]","output":"def print_summary(object_list): for object in object_list: print('Name: {}nAge: {}n'.format(object['name'], object['age'])) print_summary([{'name': 'John', 'age': 23}, {'name': 'Mary', 'age': 35}])"},{"instruction":"Generate a Python dictionary of given word frequencies. [('cat', 2), ('dog', 5), ('bird', 3)]","output":"wordFrequencies = { 'cat': 2, 'dog': 5, 'bird': 3 }"},{"instruction":"Create a class in Python to handle the following Student object. Name: John Age: 20 Marks: [80, 90, 85, 100]","output":"class Student: def __init__(self, name, age, marks): self.name = name self.age = age self.marks = marks def get_name(self): return self.name def get_age(self): return self.age def get_total_marks(self): return sum(self.marks)"},{"instruction":"Create a simple Python script for a Sudoku solving algorithm. The script should accept an unsolved Sudoku board as input and output the solved board. input_board = [ [7,8,0,4,0,0,1,2,0], [6,0,0,0,7,5,0,0,9], [0,0,0,6,0,1,0,7,8], [0,0,7,0,4,0,2,6,0], [0,0,1,0,5,0,9,3,0], [9,0,4,0,6,0,0,0,5], [0,7,0,3,0,0,0,1,2], [1,2,0,0,0,7,4,0,0], [0,4,9,2,0,6,0,0,7] ]","output":"output_board = [ [7,8,5,4,3,9,1,2,6], [6,1,2,8,7,5,3,4,9], [4,9,3,6,2,1,5,7,8], [8,5,7,9,4,3,2,6,1], [2,6,1,7,5,8,9,3,4], [9,3,4,1,6,2,7,8,5], [5,7,6,3,9,4,8,1,2], [1,2,8,5,8,7,4,9,6], [3,4,9,2,1,6,5,7,7] ]"},{"instruction":"Create an algorithm in Python to sort an array using selection sort. [4, 1, 6, 5, 7, 2, 0]","output":"def selection_sort(arr): for i in range(len(arr)): min_index = i for j in range(i + 1, len(arr)): if arr[min_index] > arr[j]: min_index = j arr[i], arr[min_index] = arr[min_index], arr[i] return arr arr = [4, 1, 6, 5, 7, 2, 0] print(selection_sort(arr))"},{"instruction":"Use automated refactoring to make Python code more readable. def concat(str1, str2): output = str1 + str2 return outpu","output":"def concat(str1: str, str2: str) -> str: \\"\\"\\"Concatenate two strings. Args: str1: The first string str2: The second string Returns: str: The concatenated string \\"\\"\\" return str1 + str2"},{"instruction":"Create a code solution in Python to generate a random grid of characters. Not applicable","output":"import random # Generate grid of characters grid_rows = 3 grid_cols = 5 grid = [] for row in range(grid_rows): row_data = [] for col in range(grid_cols): row_data.append(random.choice(\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\")) grid.append(row_data) print(grid)"},{"instruction":"Create a Python script to get the values of a key from a given dictionary. {name: John, age: 35, city: New York}","output":"d = {\\"name\\": \\"John\\", \\"age\\": 35, \\"city\\": \\"New York\\"} value = d.get(\\"age\\") print(value)"},{"instruction":"Can you develop an ML model to predict the next number in a Fibonacci sequence using Python?","output":"# import required packages import numpy as np from keras.models import Sequential from keras.layers import Dense # define Fibonacci sequence def fibonacci_sequence(length): fibonacci_nums = [1,1] for i in range(length-2): fibonacci_nums.append(fibonacci_nums[i]+fibonacci_nums[i+1]) return np.array(fibonacci_nums) # define model model = Sequential() model.add(Dense(1, input_dim=len(fibonacci_sequence(8)), activation='linear')) # compile model model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy']) # fit model model.fit(fibonacci_sequence(8).reshape(7,1), fibonacci_sequence(9)[1:], epochs=500, batch_size=2, verbose=0) #predict next number next_num = model.predict(fibonacci_sequence(10).reshape(9,1)) # print the result print('The next number from the Fibonacci sequence is: ', next_num[-1][0])"},{"instruction":"Write a code to identify if two strings are anagrams using Python. str1 = 'listen' str2 = 'silent'","output":"def is_anagram(str1, str2): \\"\\"\\" Check if two strings are anagrams. Parameters: str1 (str): First string str2 (str): Second string Returns: bool: True if the strings are anagrams, False other wise \\"\\"\\" str1 = str1.lower().replace(\\" \\", \\"\\") str2 = str2.lower().replace(\\" \\", \\"\\") if sorted(str1) == sorted(str2): return True else: return False if __name__ == '__main__': s1 = 'listen' s2 = 'silent' print(is_anagram(s1, s2)) # True"},{"instruction":"Create a GUI application in Python that displays Welcome to our application.","output":"import tkinter window = tkinter.Tk() window.title('My Application') window.geometry('200x200') lbl = tkinter.Label(window,text=\\"Welcome to our application!\\") lbl.pack() window.mainloop()"},{"instruction":"Write a python code to replace all the occurences of an element in a list with a given number. [1,2,3,3], 3, 0","output":"def replace_elem_in_list(data, elem, val): return [val if x==elem else x for x in data] print(replace_elem_in_list([1,2,3,3], 3, 0)) # Output: [1, 2, 0, 0]"},{"instruction":"Given an array of strings, build an algorithm in Python to determine the index of the element that contains the smallest number of characters. [Hello, World, Python, is, Fun]","output":"def min_length_index(arr): min = float('infinity') min_i = 0 for i in range(len(arr)): if len(arr[i]) < min: min = len(arr[i]) min_i = i return min_i print(min_length_index([\\"Hello\\", \\"World\\", \\"Python\\", \\"is\\", \\"Fun\\"])) # 3"},{"instruction":"Write a Python program to find the armstrong numbers in a given range. An armstrong number is a number with the sum of its digits each raised to the power of its own number of digits.","output":"def armstrong_numbers(start, end): armstrong_numbers = [] for number in range(start, end + 1): digits = [int(d) for d in str(number)] sum_of_digits = 0 for digit in digits: sum_of_digits += digit**len(digits) if sum_of_digits == number: armstrong_numbers.append(number) return armstrong_numbers"},{"instruction":"Create a Python script to parse the given HTML page. <html> <head> <title>Parsing example</title> </head> <body> <h1>Heading</h1> <ul> <li>Item 1</li> <li>Item 2</li> </ul> <p>This is a paragraph.</p> </body> </html>","output":"from bs4 import BeautifulSoup html_doc = \\"\\"\\" <html> <head> <title>Parsing example</title> </head> <body> <h1>Heading</h1> <ul> <li>Item 1</li> <li>Item 2</li> </ul> <p>This is a paragraph.</p> </body> </html> \\"\\"\\" soup = BeautifulSoup(html_doc, 'html.parser') heading = soup.find(\\"h1\\").get_text() items = soup.find_all(\\"li\\") para = soup.find(\\"p\\").get_text() print(\\"Heading: \\" + heading) print(\\"Items:\\") for item in items: print(\\"- \\" + item.get_text()) print(\\"Paragraph: \\" + para)"},{"instruction":"Develop a function in Python that converts Celsius to Fahrenheit.","output":"def celsiusToFahrenheit(celsius): return (celsius * 1.8) + 32"},{"instruction":"Create an algorithm in Python to find the longest increasing subsequence from a given set of numbers. [1, 10, 4, 2, 6, 12, 15]","output":"def longest_increasing_subsequence(arr): n = len(arr) dp = [1] * n for i in range(1, n): max_length_so_far = 0 for j in range(i): if arr[j] < arr[i]: max_length_so_far = max(max_length_so_far, dp[j]) dp[i] = max_length_so_far + 1 return max(dp) arr = [1, 10, 4, 2, 6, 12, 15] result = longest_increasing_subsequence(arr) print(result) # Output: 5"},{"instruction":"Create a Python function that takes a list of numbers and returns the maximum difference between any two elements. [3, 14, 5, 2, 9]","output":"def getMaxDifference(elementList): maxDifference = 0 for i in range(len(elementList)): for j in range(i + 1, len(elementList)): if (elementList[j] - elementList[i] > maxDifference): maxDifference = elementList[j] - elementList[i] return maxDifference list = [3, 14, 5, 2, 9] print (getMaxDifference(list))"},{"instruction":"Write Python code to include exception handling in this code. a = 1 b = 0 c = a / b print (c)","output":"try: a = 1 b = 0 c = a / b print(c) except ZeroDivisionError: print(\\"Cannot divide by zero\\")"},{"instruction":"Generate a Python code snippet for sorting an array of strings in ascending alphabetical order. [apple, banana, orange, kiwi]","output":"def sort_words(words): # Sort the list in ascending alphabetical order. sorted_words = sorted(words) # Return the sorted list. return sorted_words words = [\\"apple\\", \\"banana\\", \\"orange\\", \\"kiwi\\"] sorted_words = sort_words(words) print(sorted_words)"},{"instruction":"Create an AI chatbot in Python that can answer queries related to the stock market. Not applicable","output":"# Import libraries import numpy as np import tensorflow as tf import keras from keras.preprocessing.text import one_hot from keras.preprocessing.sequence import pad_sequences from keras.models import Sequential from keras.layers import Dense, Flatten, Embedding # Set up the corpus of data corpus = [] with open('data.txt', encoding='utf8') as f: for line in f.readlines(): corpus.append(line.strip().lower()) # Create one-hot representations of the data vocab_size=5000 encoded_docs=[one_hot(d,vocab_size) for d in corpus] max_length=1 padded_docs=pad_sequences(encoded_docs,maxlen=max_length,padding='post') # Set up the model model=Sequential() model.add(Embedding(vocab_size,8,input_length=max_length)) model.add(Flatten()) model.add(Dense(1000,activation='relu')) model.add(Dense(1000,activation='relu')) model.add(Dense(1,activation='sigmoid')) # Compile the model model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy']) # Fit the model model.fit(padded_docs,labels,epochs=50,verbose=1)"},{"instruction":"Build an AI model in Python that can accurately predict the future stock prices of a company. The stock's historical closing prices for the past month","output":"import numpy as np import pandas as pd from sklearn.linear_model import LinearRegression #load the historical data data = pd.read_csv('stock-data.csv') #prepare the feature and target variables X = data.iloc[:, :-1] y = data['Close'] #fit the linear regression model model = LinearRegression() model.fit(X, y) #make predictions X_test = 'Input the stock's historical closing prices for the future month here' predictions = model.predict(X_test) #display the predictions print(predictions)"},{"instruction":"Create a Python program to classify the words in a sentence into verbs and nouns. Sentence = The cat is playing with a ball.","output":"sentence = \\"The cat is playing with a ball.\\" words = sentence.split() verbs = [] nouns = [] for word in words: if word in [\\"is\\", \\"playing\\"]: verbs.append(word) elif word in [\\"The\\", \\"cat\\", \\"a\\", \\"ball\\"]: nouns.append(word) print(\\"Verbs:\\", verbs) print(\\"Nouns:\\", nouns)"},{"instruction":"Develop an algorithm in Python to identify a subsequence in a larger given sequence.","output":"def subsequence(seq, sub): if sub == \\"\\": return True sub_index = 0 sequence_length = len(seq) sub_length = len(sub) for index in range(sequence_length): if sub[sub_index] == seq[index]: sub_index +=1 if sub_index == sub_length: return True return False"},{"instruction":"Create a Python generator to iterate over the strings in the list ['cat', 'dog', 'bird']. ['cat', 'dog', 'bird']","output":"def string_generator(strings): for string in strings: yield string for string in string_generator(['cat', 'dog', 'bird']): print(string)"},{"instruction":"Create a Python program that will find the longest palindrome in a string and print it out. Input String: “The racecar stopped to rest, so we can start again.”","output":"def longest_palindrome(string): longest_str = \\"\\" for i in range(len(string)): for j in range(i, len(string)): cur_str = string[i:j+1] if cur_str == cur_str[::-1] and len(cur_str) > len(longest_str): longest_str = cur_str return longest_str print(longest_palindrome(\\"The racecar stopped to rest, so we can start again.\\")) # Output: racecar"},{"instruction":"Using the input, create a Python program which generates a random array of length n filled with binary values. n = 10","output":"import random def random_binary_array(n): \\"\\"\\"Return a random array of length n with binary values.\\"\\"\\" array = [] for i in range(n): array.append(random.choice([0, 1])) return array"},{"instruction":"Create a Python program that will generate a random password from the given set of characters.","output":"import random def generate_random_password(characters=\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#%^&*()_+{}:\\"): password = \\"\\" for _ in range(8): password += random.choice(characters) return password"},{"instruction":"Design a linear search algorithm for a given list in Python. arr = [10, 20, 80, 30, 60, 50, 110, 100, 130, 170] value = 110","output":"def linearSearch(arr, value): for i in range(len(arr)): if arr[i] == value: return i return -1 arr = [10, 20, 80, 30, 60, 50, 110, 100, 130, 170] value = 110 idx = linearSearch(arr, value) if idx != -1: print(\\"Element is present at index\\", idx) else: print(\\"Element is not present in the array\\")"},{"instruction":"Assemble a Python program to measure similarity Compute the similarity between two strings.","output":"def compute_similarity(s1, s2): len1 = len(s1) len2 = len(s2) max_len = max(len1, len2) count = 0 for i in range(max_len): if i >= len1 or i >= len2: break if s1[i] == s2[i]: count += 1 return count / max_len"},{"instruction":"Generate a Python program to copy all elements of one list into another list. source = [0, 1, 2]","output":"source = [0, 1, 2] dest = [] for item in source: dest.append(item) print(dest)"},{"instruction":"Create a Python program to increase a number by 5.","output":"def increase_number(number): return number + 5"},{"instruction":"Write a Python program to check if a number is prime by eliminating the multiples of all numbers from 2 to the square root of the number. n = 99","output":"import math def is_prime(n): for i in range(2, int(math.sqrt(n))+1): if n % i == 0: return False return True print(is_prime(n))"},{"instruction":"Can you explain the concept of quicksort in Python?","output":"Quicksort is a divide-and-conquer algorithm that works by recursively partitioning a list into two sublists of items based on a pivot value. The left sublist contains all items less than the pivot value and the right sublist contains all items greater than the pivot value. The quicksort algorithm then recursively sorts these sublists and combines them back together to form the final sorted list. In Python, one implementation of the quicksort algorithm is as follows: def quicksort(arr): if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"instruction":"Create a python script to generate a random password consisting of a combination of 10 alphabetic characters, 9 digits and the symbols @, # and .","output":"import random import string def randomPasswordGenerator(length): # Generate a random password consisting of 10 alphabet characters, 9 digits and the symbols @, # and generated_password = ''.join(random.choice( string.ascii_letters + string.digits + \\"@#\\") for i in range(length)) return generated_password length = 10 print(\\"Random Password:\\", randomPasswordGenerator(length))"},{"instruction":"Come up with a creative way to optimise the given code in Python. # This code filters a list of numbers and prints out only the even ones numbers = [1,2,3,4,5,6,7,8] for num in numbers: if num % 2 == 0: print(num)","output":"# This code filters a list of numbers and prints out only the even ones numbers = [1,2,3,4,5,6,7,8] # Use list comprehension to filter the list even_numbers = [x for x in numbers if x % 2 == 0] # Print out the even numbers for num in even_numbers: print(num)"},{"instruction":"Generate a binary tree with 4 levels in Python. Not applicable","output":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None def generateTree(root, level): if level == 1: root.left = Node(2*level) root.right = Node(2*level + 1) else: root.left = Node(2*level) root.right = Node(2*level + 1) generateTree(root.left, level-1) generateTree(root.right, level-1) root = Node(0) level = 4 generateTree(root, level)"},{"instruction":"Create a questionanswering system using Python and Natural Language Processing.","output":"import nltk, numpy from nltk.stem.lancaster import LancasterStemmer stemmer = LancasterStemmer() # importing our intents file import json with open('intents.json') as json_data: intents = json.load(json_data) # tokenizing patterns words = [] classes = [] documents = [] ignore_words = ['?'] # loop through each sentence in our intents patterns for intent in intents['intents']: for pattern in intent['patterns']: # tokenize each word in the sentence w = nltk.word_tokenize(pattern) # add to our words list words.extend(w) # add to documents in our corpus documents.append((w, intent['tag'])) # add to our classes list if intent['tag'] not in classes: classes.append(intent['tag']) # stem and lower each word and remove duplicates words = [stemmer.stem(w.lower()) for w in words if w not in ignore_words] words = sorted(list(set(words))) # remove duplicates classes = sorted(list(set(classes))) # create our training data training = [] output = [] # create an empty array for our output output_empty = [0] * len(classes) # training set, bag of words for each sentence for doc in documents: # initialize our bag of words bag = [] # list of tokenized words for the pattern pattern_words = doc[0] # stem each word pattern_words = [stemmer.stem(word.lower()) for word in pattern_words] # create our bag of words array for w in words: bag.append(1) if w in pattern_words else bag.append(0) training.append(bag) # output is a '0' for each tag and '1' for current tag output_row = list(output_empty) output_row[classes.index(doc[1])] = 1 output.append(output_row) # sample training/output i = 0 w = documents[i][0] print ([stemmer.stem(word.lower()) for word in w]) print (training[i]) print (output[i]) # import tensorflow import numpy import tflearn import tensorflow as tf import random # seed random.seed(1) # transform as a numpy array training = numpy.array(training) output = numpy.array(output) # build deep neural network net = tflearn.input_data(shape=[None, len(training[0])]) net = tflearn.fully_connected(net, 8) net = tflearn.fully_connected(net, 8) net = tflearn.fully_connected(net, len(output[0]), activation=\\"softmax\\") net = tflearn.regression(net) # define model and setup tensor board model = tflearn.DNN(net, tensorboard_dir='tflearn_logs') # start training (apply gradient descent algorithm) model.fit(training, output, n_epoch=1000, batch_size=8, show_metric=True) model.save('model.tflearn') import pickle pickle.dump( {'words':words, 'classes':classes, 'train_x':training, 'train_y':output}, open( \\"training_data\\", \\"wb\\" ) )"},{"instruction":"Produce Python source code that evaluates whether a humangiven string follows a number pattern, such as 1 2 3 3 3 4 4 4 4 5 5 5 5 1 2 3 3 3 4 4 4 4 5 5 5 5","output":"def check_pattern(string): nums = string.split() nums = [int(num) for num in nums] curr = nums[0] count = 1 for num in nums[1:]: if num == curr: count += 1 else: if count > 1: if count - 1 != curr: return False curr = num count = 1 if count > 1: if count - 1 != curr: return False return True if __name__ == \\"__main__\\": string = \\"1 2 3 3 3 4 4 4 4 5 5 5 5\\" print(check_pattern(string))"},{"instruction":"Formulate a python expression to determine the average of a given list of numbers. [1,2,3,4]","output":"sum(lst)/len(lst) # This is equivalent to (1+2+3+4)/4 = 2.5"},{"instruction":"Enhance the following Python code for saving a webpage to a local directory. import urllib.request def save_webpage(url, path): urllib.request.urlretrieve(url, path)","output":"import urllib.request from urllib.parse import urlparse import os def save_webpage(url, path): parsed_url = urlparse(url) path = os.path.join(path, parsed_url.netloc + parsed_url.path) if not os.path.exists(os.path.dirname(path)): os.makedirs(os.path.dirname(path)) urllib.request.urlretrieve(url, path)"},{"instruction":"Write a python script that sorts a list of strings by length. ['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']","output":"def sort_strings_by_length(strings): # Sort strings by length in ascending order strings.sort(key=len) return strings"},{"instruction":"Write a Python program to replace all the occurences of a substring in a string with a new substring. String: This is a string Old substring: is New substring: w","output":"new_string = string.replace('is', 'was')"},{"instruction":"Create a python script to generate a set of randomized numbers. The script should take two parameters: an integer n representing the number of numbers to generate, and an integer m representing the values for each of the random numbers (which should range between 0 and m). n = 10 m = 6","output":"import random def generate_random(n, m): random_numbers = [] for i in range(n): random_number = random.randint(0, m) random_numbers.append(random_number) return random_numbers random_numbers = generate_random(n, m) print(random_numbers)"},{"instruction":"Create a Python list comprehension to return all numbers divisible by 3 and 5 that are smaller than 10","output":"[number for number in range(10) if number % 3 == 0 and number % 5 == 0]"},{"instruction":"Write a Python function to sort a dictionary (key: value) by its values in descending order. my_dict = {1: 4, 2: 3, 3: 2, 4: 1}","output":"def desc_sort_dict(my_dict): return {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1], reverse=True)}"},{"instruction":"Optimize the following function in Python to improve its efficiency. def Fibonacci(n): var1, var2 = 0, 1 while var1 < n: print(var1, end=' ') var1, var2 = var2, var1 + var2","output":"def Fibonacci(n): var1, var2 = 0, 1 while var1 < n: print(var1, end=' ') var1, var2 = var2, var1 + var2 return def FibonacciFast(n): result = [] var1, var2 = 0, 1 while var1 < n: result.append(var1) var1, var2 = var2, var1 + var2 return result"},{"instruction":"Write a Python program to remove duplicate characters from an input string.","output":"def remove_duplicates(input_string): characters = set() output_string = \\"\\" for character in input_string: if character not in characters: output_string += character characters.add(character) return output_string"},{"instruction":"Create a machine learning model in Python using scikitlearn to classify fruits into oranges and apples. Not applicable","output":"from sklearn.ensemble import RandomForestClassifier # Create a random forest classifier clf = RandomForestClassifier(n_estimators=100) # Train the model using the training sets clf.fit(X_train, y_train) # Create predictions y_pred = clf.predict(X_test) # Evaluate the model print('Accuracy Score :', accuracy_score(y_test, y_pred))"},{"instruction":"Generate a Python function that takes an input string and counts the number of occurrence of each letter.","output":"def letter_frequency(str): freq = {} for letter in str: if letter in freq: freq[letter] += 1 else: freq[letter] = 1 return freq result = letter_frequency(\\"Hello World\\") print(result)"},{"instruction":"Write a command line script in Python to print the current day's date.","output":"import datetime datetime_object = datetime.datetime.now() print(datetime_object.strftime(\\"%A, %B %d, %Y\\"))"},{"instruction":"Write a python program to sort words in alphabetical order. words = [software, engineering, programming]","output":"def sort_words(words): words.sort() return words words = [\\"software\\", \\"engineering\\", \\"programming\\"] print(sort_words(words))"},{"instruction":"Generate a Python script to evaluate the expression (5 22 ) +18","output":"# Evaluate the expression (5 - 22 ) +18 result = (5 - 22) + 18 print(\\"The result is:\\", result)"},{"instruction":"Write a Python program that will create a random destination and print out the coordinates and the country. Not applicable","output":"import requests import json url = 'https://random-places.p.rapidapi.com/v1/get' querystring = {'language': 'en-US', 'size': '1', 'types': 'city'} headers = { 'x-rapidapi-host': 'random-places.p.rapidapi.com', 'x-rapidapi-key': <Your RapidAPI Key> } response = requests.request('GET', url, headers=headers, params=querystring) data = json.loads(response.text) destination = data['data'][0] print(f'Destination: {destination[\\"name\\"]}, {destination[\\"country\\"]}') print(f'Coordinates: {destination[\\"lat\\"]}, {destination[\\"lng\\"]}')"},{"instruction":"mplement a function in Python that takes in a list of integers and returns a new list where the elements are reversed. Input list: [1, 2, 3, 4, 5]","output":"def reverse_list(arr): return arr[::-1] Input_list = [1, 2, 3, 4, 5] print(\\"Original List:\\", Input_list) Rev_list = reverse_list(Input_list) print(\\"Reversed List:\\", Rev_list)"},{"instruction":"Write a python program to convert a number into a list of its digits 235","output":"def number_to_digits(number): digits = [] while (number>0): digits.append(number % 10) number = number // 10 digits.reverse() return digits"},{"instruction":"Create a SQL query to find the names of all web pages that have the term Python in their title.","output":"SELECT name FROM pages WHERE title LIKE '%Python%';"},{"instruction":"Build an object oriented program in Python to play a game of tictactoe. Not applicable","output":"# An array to store the board board = ['_', '_', '_', '_', '_', '_', '_', '_', '_'] # Variable to keep track of the turn turn = 'X' # Variable to check if the game is over game_is_over = False while not game_is_over: # Check if the game is over if turn == 'X': player = 'X' else: player = 'O' # Print out the board print('------------') for i in range(len(board)): print(board[i], end=' ') if i == 2 or i == 5 or i == 8: print() print('------------') # Ask for position board_position = int(input('Player ' + player + ' where do you want to move? ')) # Place the piece board[board_position - 1] = turn # Switch the turn if turn == 'X': turn = 'O' else: turn = 'X' # Check if there is a winner if board[0] == board[1] == board[2] or board[3] == board[4] == board[5] or board[6] == board[7] == board[8]: print('Player ' + player + ' won!') game_is_over = True # Check if the board is full counter = 0 for n in board: if n != '_': counter += 1 if counter == 9: print('Draw!') game_is_over = True"},{"instruction":"Construct a web crawler in python and count the number of words in a web page.","output":"import requests from bs4 import BeautifulSoup # url of the website to crawl URL = \\"https://www.example.com/\\" # get the whole page content in # the form of text page = requests.get(URL).text # number of words in the page word_count = 0 # create a Beautiful Soup parsable string soup = BeautifulSoup(page, 'html.parser') # find all the tags of type p paragraphs = soup.find_all('p') for para in paragraphs: words = para.text.split() word_count += len(words) # print the word count print(\\"Total words in the page:\\", word_count)"},{"instruction":"Develop a function in python to delete all the vowels in a string. string = B e a u t iful","output":"def remove_vowels(string): vowels = 'aeiou' new_string = '' for c in string: if c.lower() not in vowels: new_string += c return new_string if __name__ == '__main__': string = \\"Beau tiful\\" print(remove_vowels(string))"},{"instruction":"Create a function to parse JSON input in Python. Not applicable","output":"import json def parse_json(input_string): data = json.loads(input_string) return data"},{"instruction":"What is the best way to optimize the following Python code which prints the first and last letters of an array of strings? words = [cat, dog, snake, elephant]","output":"# optimized version words = [\\"cat\\", \\"dog\\", \\"snake\\", \\"elephant\\"] first_letters = [word[0] for word in words] # list of first letters last_letters = [word[-1] for word in words] # list of last letters # print the results print(first_letters) print(last_letters)"},{"instruction":"Create a python program to wrap a given text at a maximum of 80 characters.","output":"import textwrap def wrap(text): return textwrap.fill(text, 80)"},{"instruction":"Write a python program to calculate the sum of the squares of the odd numbers between the given two numbers. n1 = 10 n2 = 20","output":"def sum_square_odd(n1, n2): sum = 0 for i in range(n1, n2+1): if i % 2 != 0: sum += i*i return sum sum = sum_square_odd(n1, n2) print(sum)"},{"instruction":"Create an algorithm in Python to search a given list for a specific value. [1, 4, 6, 8, 10], 8","output":"def search(lst, target): for i in range(len(lst)): if lst[i] == target: return i return -1 search([1, 4, 6, 8, 10], 8) # Output: 3"},{"instruction":"Automate the given workflow using a Python script. Input Workflow: 1. Read .csv file 2. Process data 3. Store results in a database 4. Generate repor","output":"import csv import sqlite3 # Read .csv file data = csv.reader(open('example.csv'), delimiter=',') # Connect to database conn = sqlite3.connect('example.db') # Process and store data in database for row in data: conn.execute('INSERT INTO table (column1, column2, column3) VALUES (?, ?, ?)', row) conn.commit() # Generate report cursor = conn.execute('SELECT * FROM table') report = open('report.txt', 'w') for row in cursor: row = ' '.join(row) report.write(row) report.close()"},{"instruction":"Create a Bash script to run a python program in the background. myscript.py","output":"#!/bin/bash # Run the python program in the background python myscript.py & # Print the process id echo \\"Process id: !\\" # Wait for a keypress read -p \\"Press any key to exit\\" # Kill the process kill !"},{"instruction":"Create a Python function to extract the largest prime factor from a given number. number = 35","output":"def largest_prime_factor(number): largest_factor = 1 for i in range(2, number+1): while number % i == 0: largest_factor = i number //= i return largest_factor largest_prime_factor(35) # Output: 5"},{"instruction":"Generate a code snippet in Python to convert a string with the following format to a dictionary. (name1=123&name2=456&name3=789). name1=123&name2=456&name3=789","output":"inp = \\"name1=123&name2=456&name3=789\\" kv = inp.split(\\"&\\") d = {} for i in kv: k,v = i.split(\\"=\\") d[k] = v print(d)"},{"instruction":"Write an optimized Python code snippet to reverse the words in a given string. Hello, World!","output":"def reverse_words(string): words = string.split(\\" \\") words.reverse() output_string = \\" \\".join(words) return output_string print(reverse_words(\\"Hello, World!\\")) # Output: \\"World! Hello,\\""},{"instruction":"mplement a Python program to find the maximum and minimum of a list. [3, 2, 8, 9, 5]","output":"# Function to find the maximum and minimum of a list def find_max_min(nums): max = nums[0] min = nums[0] for num in nums: if num > max: max = num if num < min: min = num return (max, min) # Test program nums = [3, 2, 8, 9, 5] max, min = find_max_min(nums) print('Maximum:', max) print('Minimum:', min)"},{"instruction":"Program a Python script to convert a given temperature in degree Fahrenheit to degree Celsius. F = 100","output":"def f_to_c(F): C = (F - 32) * 5/9 return C"},{"instruction":"Create a Python program to retrieve data from a given URL. url = https://example.com/index.html","output":"# Import the built-in \\"requests\\" package import requests # Set the URL url = \\"https://example.com/index.html\\" # Retrieve the data data = requests.get(url) # Output the retrieved data print(data.text)"},{"instruction":"Construct a Python script to classify some data according to the given conditions. data = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'] conditions = [['A','B','C'],[ 'D','E','F'],[ 'G', 'H', 'I'],[ 'J'] ]","output":"import itertools def classify_data(data, conditions): # using itertools to create a list of # all possible combinations combinations = list(itertools.chain( *[itertools.combinations(x, r = 1) for x in conditions])) # initializing the result # with an empty list result = [] # traversing over the combinations # and finding the corresponding data for combination in combinations: # initializing a list to store # the data corresponding_data = [] # traversing over the given data for char in data: # if a character is present in # the combination, add it to # the corresponding_data if char in combination: corresponding_data.append(char) # inserting the corresponding data # inside the result and remove # the data from the data list result.append(corresponding_data) data[:] = [x for x in data if x not in corresponding_data] # returning the result return result # Driver Code data = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'] conditions = [['A','B','C'],[ 'D','E','F'],[ 'G', 'H', 'I'],[ 'J'] ] print(classify_data(data, conditions))"},{"instruction":"Write a Python program to parse a string of JSON data and display each entry on the command line. {name: John, age: 30, city: New York}","output":"import json data = '{\\"name\\": \\"John\\", \\"age\\": 30, \\"city\\": \\"New York\\"}' data_dict = json.loads(data) for key, value in data_dict.items(): print(f'{key}: {value}')"},{"instruction":"Use Python to create a dictionary that stores the names of five fruits and a corresponding numerical value for each fruit.","output":"fruits = { 'apple': 1, 'banana': 2, 'grape': 3, 'orange': 4, 'strawberry': 5 }"},{"instruction":"Generate a 10 digit random phone number using Python.","output":"import random def get_random_phone_number(): \\"\\"\\"Generates a 10 digit random phone number\\"\\"\\" phone_number = '' for i in range(10): phone_number += str(random.randint(0, 9)) return phone_number print(get_random_phone_number())"},{"instruction":"Create a Python program to calculate the total cost of an item given its price, number of pieces, and tax rate. Tax rate: 0.1 Price: 10 Pieces: 4","output":"def calc_cost(price, pieces, tax_rate): cost = price * pieces cost += cost * tax_rate return cost price = 10 pieces = 4 tax_rate = 0.1 total_cost = calc_cost(price, pieces, tax_rate) print('Total cost:', total_cost)"},{"instruction":"Write a python class called Car which has attributes like model, color and year.","output":"class Car(object): \\"\\"\\"A car object with attributes like model, colour and year\\"\\"\\" def __init__(self, model, colour, year): self.model = model self.colour = colour self.year = year # Example my_car = Car(\\"Ford Mustang\\", \\"Red\\", 2016)"},{"instruction":"Create a statistical anomaly detection system in Python using Scikitlearn to detect fraudulent credit card transactions. Not applicable","output":"from sklearn.ensemble import IsolationForest # Create an Isolation Forest model model = IsolationForest(contamination=0.1) # Train the model model.fit(X_train) # Make predictions y_pred = model.predict(X_test) # Label the predictions y_pred[y_pred == 1] = 0 y_pred[y_pred == -1] = 1 # Evaluate predictions from sklearn.metrics import confusion_matrix cm = confusion_matrix(y_test, y_pred) print(cm)"},{"instruction":"Write a Python program to compare two strings to determine which string would appear first in alphabetical order. string1 = hello string2 = world","output":"string1 = \\"hello\\" string2 = \\"world\\" if string1 < string2: print(string1 + \\" comes before \\" + string2 + \\" alphabetically\\") else: print(string2 + \\" comes before \\" + string1 + \\" alphabetically\\")"},{"instruction":"Create a function in Python which takes a list of numbers and returns the sum of squares of those numbers. [3, 4, 5]","output":"def sum_squares(nums): result = 0 for num in nums: result += num*num return result nums = [3, 4, 5] result = sum_squares(nums) print(result)"},{"instruction":"Write a Python script for combining two dictionaries. dict1 = { a : 1, b : 2 } dict2 = { c : 3, d : 4 }","output":"def combine_dicts(dict1, dict2): new_dict = dict1.copy() new_dict.update(dict2) return new_dict dict1 = { \\"a\\" : 1, \\"b\\" : 2 } dict2 = { \\"c\\" : 3, \\"d\\" : 4 } print(combine_dicts(dict1, dict2))"},{"instruction":"Create a class in Python that encapsulates the following bank account: it should have a name, an opening balance, a withdraw method to take out money and a deposit method to add money.","output":"class BankAccount: def __init__(self, name, opening_balance): self.name = name self.balance = opening_balance def withdraw(self, amount): self.balance -= amount return self.balance def deposit(self, amount): self.balance += amount return self.balance"},{"instruction":"Write a Python program to impute the NaN values in the given dataset with the mean of the corresponding column. import numpy as np data = np.array([[1, np.nan, 3], [4, 5, np.nan], [np.nan, 7, 8]])","output":"def impute_nan(dataset, strategy=\\"mean\\"): for row in range(dataset.shape[0]): for col in range(dataset.shape[1]): if np.isnan(dataset[row, col]): if strategy == \\"mean\\": dataset[row, col] = dataset[:, col].mean() return dataset"},{"instruction":"Given a string, write a Python program to check if the characters in the string form a palindrome. string = racecar","output":"def is_palindrome(string): return string == string[::-1] result = is_palindrome(string) print(result) # True"},{"instruction":"Create a Python script to scrape a website for text.","output":"import requests from bs4 import BeautifulSoup url = 'example.com' page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') scraped_text = soup.find_all(text=True) for txt in scraped_text: print(txt)"},{"instruction":"Create a basic chatbot in Python using spaCy for understanding natural language and responding to user queries. None.","output":"import spacy nlp = spacy.load('en') # Define a function to respond to user queries def respond(user_input): doc = nlp(user_input) response = [] # Identify the intent of the user input for token in doc: if token.dep_ == \\"ROOT\\": intent = token.text # Respond based on the intent if intent == \\"hello\\": response.append(\\"Hi there!\\") elif intent == \\"goodbye\\": response.append(\\"Nice to talk to you. Bye!\\") else: response.append(\\"I'm sorry. I didn't understand.\\") return response user_input = 'hello' response = respond(user_input) print(response)"},{"instruction":"Write a Python script that prints out all the numbers from 1 to 100, with the following exceptions: If the number is a multiple of 3, print Fizz instead of the number. If the number is a multiple of 5, print Buzz instead of the number. If the number is a multiple of both 3 and 5, print FizzBuzz instead of the number. Not applicable","output":"for num in range(1,101): if num % 3 == 0 and num % 5 == 0: print('FizzBuzz') elif num % 3 == 0: print('Fizz') elif num % 5 == 0: print('Buzz') else: print(num)"},{"instruction":"Write a Python program to generate a list with the first 25 odd numbers.","output":"def print_odd_numbers(): result = [] for num in range(1, 51): if num % 2 != 0: result.append(num) return result list_odd_numbers = print_odd_numbers() print(list_odd_numbers)"},{"instruction":"Write a Python function to check if an element exists in a list.","output":"def check_list(list_, element): return element in list_"},{"instruction":"mplement a sorting algorithm in Python for an array of 10 numbers. [4, 2, 9, 6, 1, 7, 10, 5, 8, 3]","output":"def sort(arr): #loop over the array and compare every item for i in range(len(arr)): minIdx = i # Compare with each element after current item for j in range(i + 1, len(arr)): if arr[j] < arr[minIdx]: minIdx = j # Swap the found minimum element with current minimum arr[i], arr[minIdx] = arr[minIdx], arr[i] return arr print(sort([4, 2, 9, 6, 1, 7, 10, 5, 8, 3]))"},{"instruction":"Create a classification program using Python to classify the given dataset. Data set containing details about various cars like car name, color, and price.","output":"#Import libraries import pandas as pd from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier #Load dataset data = pd.read_csv('cars.csv') #Split data X = data.iloc[:, 0:2] y = data.iloc[:, 2] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1) #Build the model model = DecisionTreeClassifier() model.fit(X_train, y_train) #Test the model accuracy = model.score(X_test, y_test) #Print accuracy print(\\"Accuracy:\\", accuracy*100, \\"%\\")"},{"instruction":"Generate a random fourdigit number in Python.","output":"import random rand_num = random.randint(1000, 9999)"},{"instruction":"Create a Python program to classify a text document into one of five categories (news, sports, health, politics, and entertainment). Document tex","output":"import nltk import string from nltk.corpus import stopwords from nltk.tokenize import word_tokenize # Data for model training categories = [\\"news\\", \\"sports\\", \\"health\\", \\"politics\\", \\"entertainment\\"] data = { \\"news\\": [[\\"This is a news article.\\"], [\\"An event occurred in the news today.\\"]], \\"sports\\": [[\\"A huge basketball game was played today.\\"], [\\"The Lakers won the basketball game.\\"]], \\"health\\": [[\\"Someone ate an unhealthy snack today.\\"], [\\"The doctor said to exercise every day.\\"]], \\"politics\\": [[\\"The President is holding a meeting today.\\"], [\\"The senators are discussing a bill.\\"]], \\"entertainment\\": [[\\"A new movie came out this week.\\"], [\\"A famous celebrity was seen at the premiere.\\"]] } # Tokenize the text def tokenize_doc(doc): tokens = word_tokenize(doc) tokens = [word.lower() for word in tokens if word not in string.punctuation] tokens = [word for word in tokens if word not in stopwords.words('english')] return tokens # Vectorize the tokens def vectorize_tokens(tokens): vec = {} for token in tokens: if token in vec: vec[token] += 1 else: vec[token] = 1 return vec # Train the model training_data = [(vectorize_tokens(tokenize_doc(doc)), category) for category in data for doc in data[category]] # Classify the text def classify_doc(doc): tokens = tokenize_doc(doc) vec = vectorize_tokens(tokens) best_category = None best_score = 0 for (category, v) in training_data: score = 0 for token, count in vec.items(): if token in v: score += v[token] if score > best_score: best_score = score best_category = category return best_category # Sample data text = \\"A famous celebrity was seen today.\\" predicted_category = classify_doc(text) print(\\"Predicted category:\\", predicted_category) # Output # Predicted category: entertainment"},{"instruction":"Write a Python program to automatically scrape product prices from WalMart.com Not applicable","output":"from bs4 import BeautifulSoup import requests URL = 'https://www.walmart.com/browse/electronics' page = requests.get(URL) soup = BeautifulSoup(page.content, 'html.parser') # Get all elements of class 'price-group' price_group = soup.find_all('span', attrs={'class': 'price-group'}) # Iterate over all elements and extract prices for pg in price_group: price = pg.find('span', attrs={'class': 'price-characteristic'}).text # Convert to float price = float(price) print(\\"Price: {}\\".format(price))"},{"instruction":"Design a program in Python that takes two positive integers and returns their greatest common divisor. 25, 15","output":"def gcd(a, b): while(b): a, b = b, a % b return a result = gcd(25, 15) print(result)"},{"instruction":"Create a python script to generate the product of all elements in a sequence. [2,4,6]","output":"def product_of_sequence(sequence): product = 1 for num in sequence: product *= num return product seq = [2,4,6] print(product_of_sequence(seq))"},{"instruction":"Create a program in Python to generate all permutations of a given list. list = [1, 2, 3]","output":"def generate_permutations(list): \\"\\"\\" Generates all permutations of a given list :param list: List of elements :return: List of permutations \\"\\"\\" permutations = [] if len(list) == 1: permutations.append(list) return permutations for i in range(len(list)): sub_list = list[:i] + list[i+1:] for permutation in generate_permutations(sub_list): sub_permutation = [list[i]] + permutation permutations.append(sub_permutation) return permutations if __name__ == '__main__': print(generate_permutations(list))"},{"instruction":"Design a python program to convert a given number of days into years, months, and days.","output":"# convert days def convert_days(days): years = days // 365 months = (days % 365) // 30 days = (days % 365) % 30 return (years, months, days) # test days = 900 years, months, days = convert_days(days) print(\\"Number of years =\\", years) print(\\"Number of months =\\", months) print(\\"Number of days =\\", days)"},{"instruction":"Create a Python code to calculate the speed of an object at a given time. position = 50 time = 10","output":"def calculate_speed(position, time): speed = position / time return speed if __name__ == '__main__': position = 50 time = 10 speed = calculate_speed(position, time) print(speed)"},{"instruction":"Write a Python function that accepts an integer as an argument and returns its factorial.","output":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"instruction":"Compose a code in Python that counts the number of positive integers in a list. numbers = [1, 2, 3, 4, 5]","output":"def count_positive_numbers(numbers): count = 0 for num in numbers: if num > 0: count += 1 return count"},{"instruction":"Write a Python function which, when given a string of text and a n number, returns a list of all ngrams within that string. string = 'this is a simple string' n = 3","output":"def n_grams(string, n): tokens = string.split() n_grams = [] for i in range(len(tokens)-n+1): n_grams.append(tokens[i:i+n]) return n_grams"},{"instruction":"Complete the Python function below to return all the permutations of a given string, sorted lexicographically. def permutations(s): # TODO: return all permutations sorted lexicographically","output":"def permutations(s): # base case if len(s) == 1: return [s] # recursive case permutations = [] for i, letter in enumerate(s): # Get all the permutations of the substring without the current letter. sub_permutations = permutations(s[:i] + s[i+1:]) for sub_permutation in sub_permutations: permutations.append(letter + sub_permutation) # Sort the permutations. permutations.sort() return permutations"},{"instruction":"Train a neural network model in Python to identify whether a given animal is a cat or a dog.","output":"import keras from keras.models import Sequential from keras.layers import Dense, MaxPool2D, Conv2D, Flatten from keras.preprocessing.image import ImageDataGenerator # Setting up the parameters img_width, img_height = 150, 150 batch_size = 32 epochs = 10 # Create the model model = Sequential() model.add(Conv2D(32, (3,3), activation='relu', input_shape=(img_width, img_height, 3))) model.add(MaxPool2D(pool_size=(2,2))) model.add(Conv2D(32, (3,3), activation='relu')) model.add(MaxPool2D(pool_size=(2,2))) model.add(Flatten()) model.add(Dense(256, activation='relu')) model.add(Dense(1, activation='sigmoid')) model.compile(loss=\\"binary_crossentropy\\", optimizer=\\"rmsprop\\", metrics=['accuracy']) # Data preprocessing train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True) train_generator = train_datagen.flow_from_directory('data/train', target_size=(150,150), batch_size=batch_size, class_mode='binary') test_datagen = ImageDataGenerator(rescale=1./255) test_generator = test_datagen.flow_from_directory('data/test', target_size=(150,150), batch_size=batch_size, class_mode='binary') # Training the model model.fit_generator( train_generator, steps_per_epoch=500, epochs=epochs, validation_data=test_generator, validation_steps=100 )"},{"instruction":"Describe the differences between objects and classes in Python.","output":"Objects are instances of classes and are used to store data and behavior. Class is a blueprint or template for objects. It defines the attributes and methods of an object. Classes are typically used to represent real world objects or concepts and encapsulate both data and behavior. Objects are essentially specific instances of a class and can be created by instantiating the class. Objects are used to interact with the user and manipulate data. They are also used to create relationships between objects and between classes."},{"instruction":"Create a function that takes a list of strings (words or phrases) as an argument and returns the longest string in the list. [“javascript”, “python”, “ruby”]","output":"function findLongestString(strList) { let longestStr = ''; strList.forEach(str => { if (str.length > longestStr.length) { longestStr = str; } }) return longestStr; } let longestWord = findLongestString(['javascript', 'python', 'ruby']); console.log(longestWord); // Output: 'javascript'"},{"instruction":"Write a Python program to classify a given set of inputs into clusters using kmeans algorithm data_points = [[2, 2], [5, 5], [2, 4], [5, 4], [6, 2], [7, 3]]","output":"from sklearn.cluster import KMeans import numpy as np data_points = np.array(data_points) kmeans = KMeans(n_clusters=2,random_state=0).fit(data_points) clusters = kmeans.labels_ print(clusters)"},{"instruction":"Write a python program to filter a list of numbers and remove those that are divisible by 3. nums = [12, 14, 16, 18, 20, 21, 24]","output":"def filter_list(nums): return [num for num in nums if num % 3 != 0] print(filter_list(nums)) # Output: [12, 14, 20, 21]"},{"instruction":"Write a Python class for a book library. The class should have two methods: one for adding books to the library, and one for searching for books by title. Not applicable","output":"class BookLibrary: def __init__(self): self.books = [] def add_book(self, book): self.books.append(book) def search_by_title(self, title): return [book for book in self.books if book.title.lower() == title.lower()]"},{"instruction":"Create a Python program that accepts a sentence as an input and prints out the number of vowels present in that sentence. This is a sentence.","output":"def count_vowels(sentence): vowels = \\"aeiouAEIOU\\" count = 0 for character in sentence: if character in vowels: count += 1 return count sentence = input(\\"Enter a sentence: \\") vowel_count = count_vowels(sentence) print(f\\"Number of vowels in the sentence is {vowel_count}\\")"},{"instruction":"Create a Python 3 function to calculate the length of a string. string = 'hello, world!'","output":"def get_str_length(string): return len(string) print(get_str_length(string)) # outputs 13"},{"instruction":"Write a function in Python that takes two parameters n and k and returns the number of ways to jump k steps, starting from 0, taking 1 or 2 steps at a time, and not going beyond n. n = 4, k = 4","output":"def steps(n, k): if k == 0 or n == k: return 1 if n > k: return steps(n-1, k-1) + steps(n-2, k-1) else: return 0"},{"instruction":"Write a method in Python to calculate the sum of two numbers without using any builtin functions. 3, 5","output":"def sum_two_numbers(a, b): result = 0 for i in range(b): result += a return result a = 3 b = 5 print(sum_two_numbers(a, b))"},{"instruction":"Build logic in Python for validating a standard credit card number. 4556 6849 0002 2321","output":"import re # validates a credit card number def validateCreditCardNumber(num): # check the length is 16 digits if len(num) != 16: return False # use a regex to match the input pattern = \\"^([0-9]{4})([0-9]{4})([0-9]{4})([0-9]{4})\\" if re.match(pattern, num): return True return False # testing print(validateCreditCardNumber('4556 6849 0002 2321')) # True print(validateCreditCardNumber('123456789')) # False"},{"instruction":"Create an API endpoint in Python that can accept a POST request containing a JSON object. Not applicable","output":"from flask import Flask, request, jsonify app = Flask(name) @app.route('/api/endpoint', methods=['POST']) def endpoint(): data = request.get_json() # Do something with data return jsonify({'message': 'Success'}) if name == 'main': app.run(debug=True)"},{"instruction":"Generate an efficient implementation of quicksort in Python. No input.","output":"def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) result = quicksort([3,6,8,10,1,2,1]) print(result)"},{"instruction":"What is the code to shuffle an array in Python?","output":"import random array = [1,2,3,4,5] random.shuffle(array)"},{"instruction":"Create a Python program which takes a list of numbers and adds them together. [1, 2, 3, 4, 5]","output":"def sum_list(nums): total = 0 for num in nums: total += num return total nums = [1, 2, 3, 4, 5] print(sum_list(nums)) # 15"},{"instruction":"Develop a machine learning model in Python to predict house prices based on square footage, number of rooms, and location. Not applicable","output":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split # Load and preprocess the data df = pd.read_csv('house_data.csv') X = df[['sqft', 'rooms', 'loc']] y = df['price'] # Split the data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # Train the model model = LinearRegression() model.fit(X_train, y_train) # Predict values for test set y_pred = model.predict(X_test) # Evaluate the model score = model.score(X_test, y_test) print(\\"The model accuracy is:\\", score)"},{"instruction":"Create a function in Python to remove the given element from any list if it is present. Not applicable","output":"def remove_item(lst, item): try: lst.remove(item) return lst except ValueError: return lst"},{"instruction":"Create a Python program for classifying an array of numbers into one of three classes (low, medium, or high). Example array: [5, 0, 2, 10, 15]","output":"def classify(arr): output = [] for n in arr: if n < 0: output.append('low') elif n < 5: output.append('medium') else: output.append('high') return output # Example Usage example_array = [-5, 0, 2, 10, 15] result = classify(example_array) print(result) # ['low', 'medium', 'medium', 'high', 'high']"},{"instruction":"Generate a Python class to check whether a string contains all the vowels or not.","output":"class CheckVowel(): def __init__(self, string): self.string = string def check_vowel(self): vowels = \\"aeiouAEIOU\\" for char in self.string: if char not in vowels: return False return True"},{"instruction":"Construct a class in Python to implement a queue.","output":"class Queue(object): def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def enqueue(self, item): self.items.insert(0, item) def dequeue(self): return self.items.pop() def size(self): return len(self.items)"},{"instruction":"Edit the given Python program to handle a KeyError. my_dict = { 'key1' : 'value1', 'key2': 'value2' } value2 = my_dict['key3']","output":"my_dict = { 'key1' : 'value1', 'key2': 'value2' } try: value2 = my_dict['key3'] except KeyError: print(f\\"The key 'key3' does not exist in the dictionary.\\")"},{"instruction":"Generate a Python program to find the index of an item in the given list. arr = [3,7,2,5]","output":"def find_index(arr, item): for i, value in enumerate(arr): if item == value: return i return -1"},{"instruction":"Create a program that can generate anagrams from a set of words. ['python', 'coding', 'programming']","output":"\\"\\"\\" Create a program to generate anagrams from a set of words. # Importing libraries import itertools def anagrams(words): # Generate all permutations of the given words anagram_list = [''.join(permutation) for permutation in itertools.permutations(words)] # Return the list of anagrams return anagram_list # Sample input words = ['python', 'coding', 'programming'] # Function call anagram_list = anagrams(words) # Printing output print(anagram_list) \\"\\"\\""},{"instruction":"Create a Python program to implement the Tower of Hanoi problem.","output":"def tower_of_hanoi(source, dest, aux, n): if n == 1: print('Move Disk 1 from %s to %s' %(source, dest)) return tower_of_hanoi(source, aux, dest, n-1) print('Move Disk %d from %s to %s' %(n, source, dest)) tower_of_hanoi(aux, dest, source, n-1) n = 4 tower_of_hanoi('A', 'C', 'B', n)"},{"instruction":"Create a python program which takes the input of a sentence and outputs the frequency of each alphabet in the sentence. This is a test sentence.","output":"def get_char_frequency(sentence): freq_dict = {} for ch in sentence: if ch in freq_dict: freq_dict[ch] += 1 else: freq_dict[ch] = 1 return freq_dict # main if __name__ == '__main__': sentence = \\"This is a test sentence.\\" freq_dict = get_char_frequency(sentence) for ch in freq_dict: print(f\\"{ch}: {freq_dict[ch]}\\")"},{"instruction":"Create a Python program that can generate a dictionary of the frequency of words in a given phrase.","output":"def word_count(phrase): word_dict = {} words = phrase.split() for word in words: if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 return word_dict"},{"instruction":"Explain the concept of tail recursion with an example in Python.","output":"A tail call is a kind of call in which the calling function does not perform any further computation after calling the function. A function is said to be tail recursive if the recursive call is in the tail position of the function. Consider the following example of a tail recursive function to calculate the nth Fibonacci number using Python: def Fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return Fibonacci(n-1) + Fibonacci(n-2) In this example, no computation is performed after the recursive call and the recursive call is present at the end of the function which makes this function a tail recursive function and optimization of tail recursion is possible."},{"instruction":"Refactor the following Python function to use list comprehensions. def square_numbers(nums): result = [] for num in nums: result.append(num ** 2) return resul","output":"def square_numbers(nums): return [num ** 2 for num in nums]"},{"instruction":"Rewrite the following code snippet from JavaScript to Python, taking into account any changes in syntax or function calls. let array = [1, 2, 3, 4, 5]; console.log(array);","output":"array = [1, 2, 3, 4, 5] print(array)"},{"instruction":"Design a function in Python to create a dictionary object mapping the letters of the alphabet to their corresponding numerals.","output":"def create_alphabet_mapping(): alphabet = \\"abcdefghijklmnopqrstuvwxyz\\" code = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26] alphabet_mapping = dict(zip(alphabet, code)) return alphabet_mapping # Test print(create_alphabet_mapping())"},{"instruction":"Write a Python script that sorts an array of strings in alphabetical order case insensitively. [Apple, Banana, orange]","output":"def sort_array(arr): arr.sort(key = lambda x: x.lower()) return arr # driver code arr = [\\"Apple\\", \\"Banana\\", \\"orange\\"] print(sort_array(arr)) # Output: ['Apple', 'Banana', 'orange']"},{"instruction":"Write a Python program to convert a list of lists into a dictionary. list = [[1, 'a', 'A'], [2, 'b', 'B'], [3, 'c', 'C'], [4, 'd', 'D']]","output":"dictionary = dict(list)"},{"instruction":"Develop an algorithm in Python to store a set of objects in the most efficient data structure. Objects: [1, 2, 3, 4, 5]","output":"def store_elements(elements): store = [] for i in elements: store.append(i) return store objects = [1, 2, 3, 4, 5] storage = store_elements(objects) print(storage)"},{"instruction":"Write a function to remove every other element in a Python list in place. [1, 2, 3, 4, 5, 6]","output":"def remove_other_list_elements_inplace(list_elements): list_elements[:] = [element for index, element in enumerate(list_elements) if (index + 1) % 2 == 1] return list_elements sample_list = [1,2,3,4,5,6] print(\\"Original List:\\", sample_list) remove_other_list_elements_inplace(sample_list) print(\\"Modified List:\\", sample_list)"},{"instruction":"Write a Python algorithm to find out whether a number is a palindrome or not.","output":"def is_palindrome(n): n_str = str(n) rev_str = n_str[::-1] if n_str == rev_str: return True else: return False"},{"instruction":"Design and implement an artificial intelligence agent in Python using the Qlearning algorithm to solve a gridworld environment with 8x16 cells. 8x16 Gridworld Environme","output":"import numpy as np # define the environment class GridWorld: def __init__(self, rows, cols, start): self.rows = rows self.cols = cols self.i = start[0] self.j = start[1] def set(self, rewards, actions): # rewards should be a dict of: (i, j): r (row, col): reward # actions should be a dict of: (i, j): A (row, col): list of possible actions self.rewards = rewards self.actions = actions def set_state(self, s): self.i = s[0] self.j = s[1] def current_state(self): return (self.i, self.j) def is_terminal(self, s): return s not in self.actions def move(self, action): # check if legal move first if action in self.actions[(self.i, self.j)]: if action == 'U': self.i -= 1 elif action == 'D': self.i += 1 elif action == 'R': self.j += 1 elif action == 'L': self.j -= 1 # return a reward (if any) return self.rewards.get((self.i, self.j), 0) def undo_move(self, action): # these are the opposite of what U/D/L/R should normally do if action == 'U': self.i += 1 elif action == 'D': self.i -= 1 elif action == 'R': self.j -= 1 elif action == 'L': self.j += 1 # raise an exception if we arrive somewhere we shouldn't be # should never happen assert(self.current_state() in self.all_states()) def game_over(self): # returns true if game is over, else false # true if we are in a state where no actions are possible return (self.i, self.j) not in self.actions def all_states(self): # possibly buggy but simple way to get all states # either a position that has possible next actions # or a position that yields a reward return set(self.actions.keys()) | set(self.rewards.keys()) def standard_grid(): # define a grid that describes the reward for arriving at each state # and possible actions at each state # the grid looks like this # x means you can't go there # s means start position # number means reward at that state # . . . 1 # . x . -1 # s . . . g = GridWorld(3,4,(2,0)) rewards = {(0,3):1, (1,3):-1} actions = { (0, 0): ('D', 'R'), (0, 1): ('L', 'R'), (0, 2): ('L', 'D', 'R'), (1, 0): ('U', 'D'), (1, 2): ('U', 'D', 'R'), (2, 0): ('U', 'R'), (2, 1): ('L', 'R'), (2, 2): ('L', 'R', 'U'), (2, 3): ('L', 'U'), } g.set(rewards, actions) return g def max_dict(d): # returns the argmax (key) and max (value) from a dictionary # put this into a function since we are using it so often max_key = None max_val = float('-inf') for k, v in d.items(): if v > max_val: max_val = v max_key = k return max_key, max_val def random_action(a, eps=0.1): # choose given a with probability 1 - eps + eps/|A| p = np.random.random() if p < (1 - eps): return a else: return np.random.choice(ALL_POSSIBLE_ACTIONS) def q_learning(env, num_episodes, discount_factor=1.0, alpha=0.7, epsilon=0.1): Q = defaultdict(lambda: np.zeros(env.action_space.n)) # keep track of useful statistics stats = plotting.EpisodeStats( episode_lengths=np.zeros(num_episodes), episode_rewards=np.zeros(num_episodes)) for i_episode in range(num_episodes): # Print out which episode we're on, useful for debugging. if (i_episode + 1) % 100 == 0: print(\\"rEpisode {}/{}.\\".format(i_episode + 1, num_episodes), end=\\"\\") sys.stdout.flush() # Reset the environment and pick the first action state = env.reset() action = random_action(env.action_space.sample(), epsilon) # one step in the environment for t in itertools.count(): # Take a step next_state, reward, done, _ = env.step(action) # Pick the next action next_action = random_action(env.action_space.sample(), epsilon) # Update statistics stats.episode_rewards[i_episode] += reward stats.episode_lengths[i_episode] = t # TD Update best_next_action = np.argmax(Q[next_state]) td_target = reward + discount_factor * Q[next_state][best_next_action] td_delta = td_target - Q[state][action] Q[state][action] += alpha * td_delta # done is True if episode terminated if done: break action = next_action state = next_state return Q, stats # run the q-learning algorithm Q, stats = q_learning(env, 500) # extract and print the optimal policy from the Q-table policy = np.array([np.argmax(Q[key]) if key in Q else -1 for key in np.arange(48)]).reshape((8,16)) # extract and print the value matrix from the Q-table V = np.array([np.max(Q[key]) if key in Q else 0 for key in np.arange(48)]).reshape((8,16)) # print the policy matrix print(\\"nPolicy (UP=0, DOWN=1, LEFT=2, RIGHT=3):\\") print(policy)"},{"instruction":"Slice and dice a given list in Python to filter out elements starting with the letter a. List: [apple, banana, orange, apricot]","output":"lst = [\\"apple\\", \\"banana\\", \\"orange\\", \\"apricot\\"] filtered_list = [ele for ele in lst if ele[0] == 'a'] # printing filtered elements print(\\"filtered list: \\", filtered_list)"},{"instruction":"Write a Python program that takes in two lists and returns a merged list with unique elements. list1 = [1, 2, 3] list2 = [2, 3, 4]","output":"list1 = [1, 2, 3] list2 = [2, 3, 4] merged_list = list(set(list1 + list2)) print(merged_list) #Output: [1, 2, 3, 4]"},{"instruction":"Generate Python code for printing the average of a list of numbers. [2, 5, 6, 7]","output":"list = [2, 5, 6, 7] sum = 0 for num in list: sum += num average = sum / len(list) print(\\"Average:\\", average)"},{"instruction":"mplement a linear search using Python. [1, 2, 3, 4 ,5], 4","output":"def linearSearch(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -1 arr = [1, 2, 3, 4, 5] x = 4 result = linearSearch(arr, x) if result == -1: print('There is no element with value {}'.format(x)) else: print(\\"The element {} is found at index {}\\".format(x, result))"},{"instruction":"Write a code snippet in Python to randomly generate a string of length 20 comprised of characters 0 9.","output":"import string import random def generate_random_string(string_length): random_string = ''.join(random.choices(string.digits, k=string_length)) return random_string print(generate_random_string(20))"},{"instruction":"Create a Python program tocreate a simple game of Hangman. The program should accept a single word as input and allow the user to guess characters of the word until the word is revealed or the user has exhausted all attempts. word = 'jupiter'","output":"word = 'jupiter' attempts = len(word) correct_guesses = [] # Welcome message print('Welcome to Hangman! You have %d attempts to guess the word.' % attempts) # Main game loop while attempts > 0: #show progress word_progress = ''.join([('_' if letter not in correct_guesses else letter) for letter in word]) print('Word: %s' % word_progress) # prompt for user guess guess = input('Guess a letter: ') if guess not in correct_guesses: correct_guesses.append(guess) #store correct guess for displaying progress if guess in word: print('Correct! The letter %s is in the word.' % guess) if not '_' in word_progress: # if the entire word is revealed, the user won print('Congratulations! You won!') break else: attempts = attempts - 1 print('Wrong. You have %d attempts remaining.' % attempts) if attempts == 0: print('Sorry! You lost. The word was %s' % word)"},{"instruction":"Write a Python program to find the missing number in a list of integers. [1,2,4,5,6,7,8]","output":"def find_missing_num(lst): expected_num = sum(range(lst[0],lst[-1]+1)) actual_sum = sum(lst) return expected_num - actual_sum lst = [1,2,4,5,6,7,8] missing_num = find_missing_num(lst) print(\\"The missing number is\\", missing_num)"},{"instruction":"Create a class for the 'customer' entity in Python, providing the following functionalities: get customer name and get customer phone number.","output":"class Customer: def __init__(self, name, phone_number): self.name = name self.phone_number = phone_number def get_name(self): return self.name def get_phone_number(self): return self.phone_number"},{"instruction":"Build a web application with Django and React. The React application should include user authentication, displaying posts, and a way to post new posts. Not applicable","output":"# Backend # Create Django Project django-admin startproject blog # Create Django App python manage.py startapp posts # Add app to INSTALLED_APPS # settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'posts.apps.PostsConfig', ] # Add authentication to URLs # urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), path('', include('posts.urls')) ] # Create Model # posts/models.py from django.db import models from django.contrib.auth.models import User class Post(models.Model): title = models.CharField(max_length=200) content = models.TextField() author = models.ForeignKey(User, on_delete=models.CASCADE) # Create Serializer # posts/serializers.py from rest_framework import serializers from .models import Post class PostSerializer(serializers.ModelSerializer): author = serializers.StringRelatedField() class Meta: model = Post fields = ['id', 'title', 'content', 'author'] # Create ViewSet # posts/views.py from rest_framework import viewsets from .serializers import PostSerializer from .models import Post class PostViewSet(viewsets.ModelViewSet): queryset = Post.objects.all() serializer_class = PostSerializer # Add URLs # posts/urls.py from django.urls import path from .views import PostViewSet urlpatterns = [ path('posts/', PostViewSet.as_view({'get': 'list'}), name='post-list'), path('posts/<int:pk>/', PostViewSet.as_view({'get': 'retrieve'}), name='post-detail'), path('posts/new/', PostViewSet.as_view({'post': 'create'})) ] # Frontend (React) # Create React App npx create-react-app blog-frontend # Install Axios npm install axios # Create Routes # src/routes.js import React, { useState } from 'react'; import { Route, useHistory, Switch } from 'react-router-dom'; // Components import Home from './pages/Home'; import Login from './pages/Login'; import Register from './pages/Register'; import PostList from './pages/PostList'; import PostCreate from './pages/PostCreate'; const Routes = () => { const history = useHistory(); return ( <Switch> <Route exact path=\\"/\\"> <Home/> </Route> <Route exact path=\\"/login\\" component={Login} /> <Route exact path=\\"/register\\" component={Register} /> <Route exact path=\\"/posts\\" component={PostList} /> <Route exact path=\\"/posts/create\\" component={PostCreate} /> </Switch> ); }; export default Routes;"},{"instruction":"Write a function in Python that takes a single argument, a list of numbers, and returns a single number the sum of all the numbers in the list. [1, 2, 3, 4, 5]","output":"def add_list(numbers): total = 0 for number in numbers: total += number return total"},{"instruction":"Generate a Python program to print all possible permutations of a given string. Input string: ABC","output":"from itertools import permutations # Get all permutations of length 2 # and length 2 perm = permutations(\\"ABC\\", 2) # Print the obtained permutations for i in list(perm): print(i) # Get all permutations of length 3 # and length 3 perm = permutations(\\"ABC\\") # Print the obtained permutations for i in list(perm): print(i)"},{"instruction":"Create a python function that takes two inputs as a string and returns their concatenated output. String a = 'Hello' String b = 'World'","output":"def concat(a,b): return a+b"},{"instruction":"Create a python function to generate 10 random numbers between 1 to 10.","output":"import random def generate_random_numbers(): numbers = [] for _ in range(10): numbers.append(random.randint(1,10)) return numbers random_numbers = generate_random_numbers() print(random_numbers)"},{"instruction":"Write a function in Python that takes three positive integers as arguments and returns the largest one.","output":"def get_largest(a, b, c): largest = a if b>largest: largest = b if c>largest: largest = c return largest print(get_largest(10, 20, 15))"},{"instruction":"Write a Python function that computes the average of a given array of numbers.","output":"def find_average(numbers): return sum(numbers) / len(numbers)"},{"instruction":"Develop a principle component analysis (PCA) algorithm in Python","output":"def pca(data): # center data data = data - np.mean(data, axis=0) # calculate covariance matrix of the data cov = np.cov(data, rowvar=False) # calculate eigenvectors & eigenvalues of the covariance matrix eig_vals, eig_vecs = np.linalg.eig(cov) # sort eigenvalue in decreasing order idx = np.argsort(eig_vals)[::-1] eig_vals = eig_vals[idx] eig_vecs = eig_vecs[:,idx] # select the first n eigenvectors (n is desired dimension of rescaled data array, or dims_rescaled_data) n_eig_vecs = eig_vecs[:, :dims_rescaled_data] # transform data in new subspace rescaled_data = np.dot(data, n_eig_vecs) return rescaled_data"},{"instruction":"Create a Python program to reverse a number without using any additional memory. 12345","output":"def reverseNumber(num): reverse = 0 while num > 0: remainder = num % 10 reverse = (reverse * 10) + remainder num = num // 10 return reverse print(reverseNumber(12345)) # 54321"},{"instruction":"Develop a Python class that represents a Date object.","output":"class Date: def __init__(self, day, month, year): self.day = day self.month = month self.year = year def get_date(self): return \\"{}/{}/{}\\".format(self.day, self.month, self.year) def set_date(self, day, month, year): self.day = day self.month = month self.year = year return self.get_date()"},{"instruction":"Design a Python class to represent a football team. The class should contain the ability to add player names to the team and to calculate the average age and the highest scorer of the team. Not applicable","output":"class FootballTeam: def __init__(self): self.players = [] def add_player(self, player): self.players.append(player) def average_age(self): total_age = 0 for player in self.players: total_age += player.age return total_age / len(self.players) def highest_scorer(self): highest_scorer = self.players[0] for player in self.players: if player.score > highest_scorer.score: highest_scorer = player return highest_scorer"},{"instruction":"Create a web service to fetch data from a database.","output":"A web service can be created using programming languages such as Python, JavaScript, etc. It will contain code to connect to the database, fetch the data, and return it in the appropriate format."},{"instruction":"Write an algorithm in Python to find the missing number in a given sequence of numbers [1, 2, 4, 5, 6, 7, 8]","output":"def findMissingNumber(input): n = len(input) + 1 # calculate the total numbers total = (n * (n+1)) / 2 # calculate the sum of numbers missing_num = total - sum(input) return missing_num # Driver code input = [1, 2, 4, 5, 6, 7, 8] missing_num = findMissingNumber(input) print(\\"The missing number is:\\", missing_num)"},{"instruction":"Generate a Python code snippet to convert a given Fahrenheit temperature to Celsius.","output":"def fahrenheit_to_celsius(fahrenheit): celsius = (fahrenheit - 32) * (5 / 9) return celsius"},{"instruction":"Write a Python function to add 5 to each of the numbers in a list. [1, 2, 3, 4, 5]","output":"def add_five(nums): return [num + 5 for num in nums] result = add_five([1, 2, 3, 4, 5]) print(result)"},{"instruction":"Create a Python program to print all the numbers between 1 and 5.","output":"for num in range(1, 6): print(num)"},{"instruction":"Write a Python program to calculate the sum of a series of odd numbers between the two pixel, with the first number being 1. pixel1 = 25; pixel2 = 50","output":"sum = 455 total = 0 for i in range(pixel1, pixel2): if i % 2 != 0: total += i print('sum =', total)"},{"instruction":"Provide an algorithm in python to calculate the power of an integer.","output":"def power_of_integer(x, n): if n == 0: return 1 if n % 2 == 0: return power_of_integer(x*x, n//2) else: return x * power_of_integer(x*x, (n-1)//2)"},{"instruction":"Optimize the following Python code to be as efficient as possible. def fun(N): result = 0 for i in range(1, N+1): for j in range(1, N+1): result += i + j return resul","output":"def fun(N): result = (N*(N+1))/2 result *= (2 * N + 1) result /= 3 return int(result)"},{"instruction":"Create a program in python to fulfill the following requirement: Given a binary tree, print it in level order (also known as breadthfirst search).","output":"def levelOrder(node): # Base Case if node is None: return # Create an empty queue for level order tarversal queue = [] # Enqueue Root and initialize height queue.append(node) while(len(queue) > 0): # Print front of queue and remove it from queue print(queue[0].data), node = queue.pop(0) #Enqueue left child if node.left is not None: queue.append(node.left) # Enqueue right child if node.right is not None: queue.append(node.right)"},{"instruction":"Create a Python program to calculate day of the week for a given date. (2020, 05, 22)","output":"import datetime day, month, year = (2020, 05, 22) weekdays = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] inpDate = datetime.date(year, month, day) dayOfWeek = inpDate.weekday() print(weekdays[dayOfWeek])"},{"instruction":"Write a Python script to optimize a machine learning model. The script should iterate over the hyperparameters and log the results for each iteration. Not applicable","output":"import numpy as np from sklearn.model_selection import RandomizedSearchCV def model_optimizer(model, param_grid, data, target): # determine number of hyperparameters n_params = len(param_grid.keys()) # initialize randomized search search = RandomizedSearchCV(estimator=model, param_distributions=param_grid, n_iter=10, verbose=1, cv=3) # perform randomized search search.fit(data, target) # report best configuration parameters best_params = search.best_params_ print('Best Parameters: {}'.format(best_params)) # report best score best_score = np.round(search.best_score_ * 100, 2) print('Best Score: {}%'.format(best_score))"},{"instruction":"Create a Python script to find the largest Fibonacci number which is less than a provided integer. n = 10","output":"def largestFibonacciNumber(n): # Initialize the starting two fibonacci numbers a = 0 b = 1 # Iterate over every index while b < n: temp = a a = b b = temp + b return a # Test Cases print(largestFibonacciNumber(10)) # output: 8 print(largestFibonacciNumber(50)) # output: 34"},{"instruction":"Generate a Python program that returns the kth smallest element from an unsorted array of size n, without changing the order of elements. n = 5, k = 3","output":"def kth_smallest(arr, k): n = len(arr) # Iterate through all elements for i in range(n): # Iterate from k till n for j in range(i+1, n): if arr[i] > arr[j] : arr[i], arr[j] = arr[j], arr[i] return arr[k-1] # Driver code n = 5 arr = [12, 3, 5, 7, 19] k = 3 print(kth_smallest(arr, k))"},{"instruction":"Create an algorithm in Python that takes a string and returns the longest palindromic substring in it. Not applicable","output":"# Function to find the longest palindromic substring def longestPalindrome(string): # Find the longest palindrome in the string n = len(string) start = 0 maxLength = 0 for i in xrange(1, n): # Case 1 start = i-1 end = i while start >= 0 and end < n and string[start] == string[end]: if end-start+1 > maxLength: maxLength = end-start+1 result = string[start:end+1] start -= 1 end += 1 # Case 2 start = i-1 end = i+1 while start >= 0 and end < n and string[start] == string[end]: if end-start+1 > maxLength: maxLength = end-start+1 result = string[start:end+1] start -= 1 end += 1 return result"},{"instruction":"Create a python script that takes a list of numbers, shuffles them and prints the list. [1, 2, 3, 4, 5]","output":"import random mylist = [1, 2, 3, 4, 5] random.shuffle(mylist) print(mylist)"},{"instruction":"Create a python for loop to print the elements of a given list l. l = [1, 2, 3, 4, 5, 6]","output":"for element in l: print(element)"},{"instruction":"Create a Python program to merge two lists into a new one.","output":"def merge_lists(list1, list2): result = [] for item in list1: result.append(item) for item in list2: result.append(item) return result"},{"instruction":"Write a simple Python program that takes as input a commaseparated list of numbers and outputs the sum of the numbers. 1,2,3,4,5","output":"# This program takes in a comma-separated list of numbers and outputs the sum def sum_of_numbers(lst): # Split the input string on the comma numbers = lst.split(',') # Convert the strings in the list to integers numbers = [int(number) for number in numbers] # Add up all the numbers in the list total = sum(numbers) # Return the sum return total # Get input lst = input(\\"Please enter a comma-separated list of numbers: \\") # Call the function total = sum_of_numbers(lst) # Print the output print(\\"The sum of the numbers is:\\", total)"},{"instruction":"Create a function to filter out strings that are longer than 10 characters. [Hello, World, Python, Programming]","output":"def filter_long_strings(arr): result = [] for word in arr: if len(word) <= 10: result.append(word) return result myArr = [\\"Hello\\", \\"World\\", \\"Python\\", \\"Programming\\"] print(filter_long_strings(myArr)) # Output: [\\"Hello\\", \\"World\\", \\"Python\\"]"},{"instruction":"Create a Python script to train a sentiment classifier with word vectors generated by a pretrained GloVe model. The classifier should output a score between 1 to 1. The sample training dataset consists of 500 movie reviews, each with a label for whether the review is postive or negative (1.0 and 1.0 respectively).","output":"import numpy as np from gensim.scripts.glove2word2vec import glove2word2vec from gensim.models.keyedvectors import KeyedVectors # GloVe model glove2word2vec(glove_input_file=\\"glove_path\\", word2vec_output_file=\\"glove_word2vec.txt\\") glove_w2v = KeyedVectors.load_word2vec_format(\\"glove_word2vec.txt\\") # Pre-process data reviews = np.array(500_reviews_data) reviews_vectors = [np.mean([glove_w2v[word] for word in review if word in glove_w2v] or [np.zeros(300)],axis=0) for review in reviews] # Labels labels = np.array(500_reviews_labels) # Train model model = LogisticRegression() model.fit(reviews_vectors, labels) # Generate score score = model.predict_proba(review_vector) score = (score[0] - 0.5)*2 # scale -1 to 1 print(score)"},{"instruction":"Create a function in Python that takes an integer input and prints all combinations of the numbers. 4","output":"def permutations(n): for i in range(n+1): for j in range(n+1): for k in range(n+1): for l in range(n+1): print(i,j,k,l) # Calling the function permutations(4)"},{"instruction":"Write a Python program to optimize a function for finding the minimum value using an evolutionary algorithm such as differential evolution. def function(x): return x**2 0.5 * x 2","output":"import random import numpy as np def differential_evolution(f, bounds, mut=0.8, crossp=0.7, popsize=20, its=1000): # Initialization dim = len(bounds) population = np.random.rand(popsize, dim) min_b, max_b = np.asarray(bounds).T diff = np.fabs(min_b - max_b) population_denorm = min_b + population * diff fitness = np.asarray([f(ind) for ind in population_denorm]) best_idx = np.argmin(fitness) best = population_denorm[best_idx] for i in range(its): for j in range(popsize): # Mutation idxs = [idx for idx in range(popsize) if idx != j] a, b, c = population[np.random.choice(idxs, 3, replace = False)] mutation = a + mut * (b - c) mutation = np.clip(mutation, 0, 1) # Crossover cross_points = np.random.rand(dim) < crossp if not np.any(cross_points): cross_points[np.random.randint(0, dim)] = True trial = np.where(cross_points, mutation, population[j]) trial_denorm = min_b + trial * diff # Selection f = f(trial_denorm) if f < fitness[j]: fitness[j] = f population[j] = trial if f < fitness[best_idx]: best_idx = j best = trial_denorm # Printing print(\\"Iteration: {}, Best Value: {:.4f}\\".format(i, f)) return best # Function to optimize def function(x): return x**2 - 0.5 * x - 2 # Search Space bounds = [(-10, 10)] # Run the optimization result = differential_evolution(function, bounds) print(\\"Optimized Value: {:.4f}\\".format(function(result)))"},{"instruction":"Write a Python program to optimize the given array such that its elements are in the range of 0 to 100. [3, 105, 10, 35, 120]","output":"def optimize_array(arr): for i in range(len(arr)): # If the element is less than 0 if arr[i] < 0: arr[i] = 0 # If the element is greater than 100 if arr[i] > 100: arr[i] = 100 return arr arr = [3, 105, -10, 35, 120] print(optimize_array(arr))"},{"instruction":"Edit the following line of code in Python to print out the result. print(3 + 5 x 2)","output":"print(3 + (5 * 2))"},{"instruction":"Write a Python program to find the number of ways to express n as the sum of 1, 3, and 4. 5","output":"def num_ways_sum(n): # base case if n == 0 or n == 1: return 1 # recursive case return num_ways_sum(n - 1) + num_ways_sum(n - 3) + num_ways_sum(n - 4) # example print(num_ways_sum(5))"},{"instruction":"Create a program in Python that performs basic functions on a linked list.","output":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None # Function to append a new node at the end def append(self, new_data): new_node = Node(new_data) #Check if the linked list is empty if self.head is None: self.head = new_node return # Otherwise, traverse till the last node current = self.head while current.next: current = current.next current.next = new_node # Function to insert a node at a specific position def insert(self, prev_node, new_data): #Check if the given prev_node is valid if prev_node is None: return new_node = Node(new_data) new_node.next = prev_node.next prev_node.next = new_node # Function to delete a node given the value def delete(self, data): if self.head is None: return current = self.head # Special case for head node if current and current.data == data: self.head = current.next current = None return # Also traverse the list to find the node we want to delete while current and current.data != data: prev_node = current current = current.next if current is None: return # Unlink the node from the list prev_node.next = current.next current = None"},{"instruction":"Write a Python code fragment to optimize the given function. def search(data, x): for element in data: if element == x: return True return False","output":"def search(data, x): if x in data: return True return False"},{"instruction":"Construct a python program that prints a multiplication table given two numbers (x and y). int x = 5; int y = 10;","output":"int x = 5; int y = 10; for i in range(1, y+1): for j in range(1, x+1): print('{} x {} = {}'.format(i, j, i*j))"},{"instruction":"Construct a python script to display the frequency of each words appearing in a document The text document contains the following content: The quick brown fox jumps over the lazy dog.","output":"from collections import Counter with open('text.txt', 'r') as f: data = f.read().lower().split() word_counter = Counter(data) # Print the sorted most common 10 words for word, count in word_counter.most_common(10): print('{}: {}'.format(word, count))"},{"instruction":"Use Python to modify a JSON object for specific keyvalue pairs. Object: {name: Tom, age: 25, occupation: Data Scientist, hobbies: [Reading, Badminton]}","output":"# Modify a JSON object import json object = {'name': 'Tom', 'age': 25, 'occupation': 'Data Scientist', 'hobbies': ['Reading', 'Badminton']} if 'occupation' in object: object['occupation'] = 'AI Engineer' if 'hobbies' in object: object['hobbies'].append('Cycling') print(json.dumps(object,indent=2))"},{"instruction":"Take a given Python dictionary and transform it to a standardized format using JSON. my_dict = { 'name': 'John Doe', 'age': 42, 'occupation': 'Programmer' }","output":"import json my_dict = { 'name': 'John Doe', 'age': 42, 'occupation': 'Programmer' } # Transform to JSON my_json = json.dumps(my_dict) print(my_json) # Output: {\\"name\\":\\"John Doe\\",\\"age\\":42,\\"occupation\\":\\"Programmer\\"}"},{"instruction":"Create a Python program to add twodimensional lists and display the sum in a formatted tabular form. Two 2Dimensional lists of equal size: list1 = [[1,2,3], [4,5,6], [7,8,9]] list2 = [[3,4,5], [6,7,8], [9,10,11]]","output":"list1 = [[1,2,3], [4,5,6], [7,8,9]] list2 = [[3,4,5], [6,7,8], [9,10,11]] sum = [] # Iterating each of the list for i in range(len(list1)): row_sum = [] for j in range(len(list1[0])): row_sum.append(list1[i][j] + list2[i][j]) sum.append(row_sum) # Printing the sum for i in range(len(sum)): for j in range(len(sum[0])): print(sum[i][j], end = \\" \\") print() # Output 4 6 8 10 12 14 16 18 20"},{"instruction":"Develop a Python program to calculate the sum of all the elements in an array. Array = [1,2,3,4,5]","output":"def calculateSum(arr, n): # Initialize result sum = 0 # using foreach loop to find sum for i in arr: sum += arr[i] return sum # Driver code arr = [1,2,3,4,5] n = len(arr) print(\\"Sum is\\",calculateSum(arr, n))"},{"instruction":"Given a 2D array in Python, write a code to calculate the sum of all elements. arr = [[1, 2, 3], [4, 5, 6], [7 , 8, 9]]","output":"total = 0 for row in arr: for num in row: total += num print(total) # 45"},{"instruction":"Compose a Python program to print the first hundred odd numbers. Not appliable","output":"# declaring an empty list odds = [] # looping for a range of 1 to 100 for n in range(1,101): # check if the number is odd if n % 2 != 0: # add the odd numbers to the list odds.append(n) # print the list print(odds)"},{"instruction":"Edit the following Python code to make it run without any errors def find_sum(x): sum = 0; for i in x: sum += i retur","output":"def find_sum(x): sum = 0 for i in x: sum += i return sum"},{"instruction":"Write a Python function to remove a specific element from a list. list = [10,20,30,40]","output":"def remove_element(list, element): for i in range(len(list)): if list[i] == element: del list[i] break return list list = remove_element(list,40)"},{"instruction":"Create an algorithm in Python to find the longest continuous sequence of zeros in a binary string. Example binary string: 1101011000","output":"def longestZeroSeq(inputStr): maxLength = 0 currentLength = 0 for c in inputStr: if c == '0': currentLength += 1 else: maxLength = max(maxLength, currentLength) currentLength = 0 maxLength = max(maxLength, currentLength) return maxLength"},{"instruction":"Create a function in Python that flattens a nested list.","output":"def flatten_list(lst): flattened = [] for i in lst: if type(i) == list: flattened += flatten_list(i) else: flattened.append(i) return flattened"},{"instruction":"Optimize a given program written in Python. def get_factorial(n): if n == 1 or n == 0: return 1 else: return n * get_factorial(n1)","output":"def get_factorial(n): result = 1 for i in range(1, n + 1): result *= i return result"},{"instruction":"Update the below Python code to the dynamic programming approach, for finding a maximum subarray of elements, given in an array. arr [2, 3, 6, 5, 1,1]","output":"def max_subarray(arr): n = len(arr) max_sum_so_far = arr[0] ending_here_max_sum = arr[0] for i in range(1, n): current_max_sum_with_last_element_i = max(arr[i], ending_here_max_sum + arr[i]) max_sum_so_far = max(max_sum_so_far, current_max_sum_with_last_element_i) ending_here_max_sum = current_max_sum_with_last_element_i return max_sum_so_far"},{"instruction":"Write an IPv4 address verification function in Python. 192.168.0.1","output":"def check_valid_ip(ip_addr): ip = ip_addr.split(\\".\\") if(len(ip) == 4 and int(ip[0]) <= 255 and int(ip[1]) <= 255 and int(ip[2]) <= 255 and int(ip[3]) <= 255): return True else: return False"},{"instruction":"Create a simple chatbot in Python using NLTK Not applicable","output":"import nltk from nltk.stem import WordNetLemmatizer lemmatizer = WordNetLemmatizer() import json import pickle import numpy as np from keras.models import Sequential from keras.layers import Dense, Activation, Dropout from keras.optimizers import SGD words=[] classes = [] documents = [] ignore_words = ['?', '!'] data_file = open('intents.json').read() intents = json.loads(data_file) # preprocessing data for intent in intents['intents']: for pattern in intent['patterns']: # tokenize each word w = nltk.word_tokenize(pattern) words.extend(w) # add documents in the corpus documents.append((w, intent['tag'])) # add to our classes list if intent['tag'] not in classes: classes.append(intent['tag']) # lemmaztize and lower each word and remove duplicates words = [lemmatizer.lemmatize(w.lower()) for w in words if w not in ignore_words] words = sorted(list(set(words))) # sort classes classes = sorted(list(set(classes))) # documents = combination between patterns and intents print (len(documents), \\"documents\\") # classes = intents print (len(classes), \\"classes\\", classes) # words = all words, vocabulary print (len(words), \\"unique lemmatized words\\", words) # create our training data training = [] output_empty = [0] * len(classes) for doc in documents: # initialize our bag of words bag = [] # list of tokenized words for the pattern pattern_words = doc[0] # lemmatize each word pattern_words = [lemmatizer.lemmatize(word.lower()) for word in pattern_words] # create our bag of words array with 1, if word match found in current pattern for w in words: bag.append(1) if w in pattern_words else bag.append(0) # output is a '0' for each tag and '1' for current tag (for each pattern) output_row = list(output_empty) output_row[classes.index(doc[1])] = 1 training.append([bag, output_row]) # shuffle our features and turn into np.array random.shuffle(training) training = np.array(training) # create train and test lists. X - patterns, Y - intents train_x = list(training[:,0]) train_y = list(training[:,1]) # Create model - 3 layers. First layer 128 neurons, second layer 64 neurons and 3rd output layer contains number of neurons # equal to number of intents to predict output intent with softmax model = Sequential() model.add(Dense(128, input_shape=(len(train_x[0]),), activation='relu')) model.add(Dropout(0.5)) model.add(Dense(64, activation='relu')) model.add(Dropout(0.5)) model.add(Dense(len(train_y[0]), activation='softmax')) # Compile model. Stochastic gradient descent with Nesterov accelerated gradient gives good results for this model sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True) model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy']) # fitting and saving the model hist = model.fit(np.array(train_x), np.array(train_y), epochs=200, batch_size=5, verbose=1) model.save('chatbot_model.h5', hist) print(\\"model created\\")"},{"instruction":"Generate a TensorFlow model in Python that uses the MNIST dataset to classify handwritten digits.","output":"import tensorflow as tf from tensorflow.keras.datasets import mnist from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense, Dropout, Flatten from tensorflow.keras.layers import Conv2D, MaxPooling2D # Load the data (x_train, y_train), (x_test, y_test) = mnist.load_data() # Build the model model = Sequential() model.add(Flatten(input_shape=(28, 28))) model.add(Dense(128, activation=\\"relu\\")) model.add(Dense(10, activation=\\"softmax\\")) # Compile the model model.compile(loss=\\"sparse_categorical_crossentropy\\", optimizer=\\"adam\\", metrics=[\\"accuracy\\"]) # Train the model model.fit(x_train, y_train, epochs=10) # Evaluate the model score = model.evaluate(x_test, y_test, verbose=0) print(\\"Test loss:\\", score[0]) print(\\"Test accuracy:\\", score[1])"},{"instruction":"Write a Python program to insert a new item into a given list at a specified index. my_list = [1, 3, 5, 7] new_item = 2 index = 1","output":"def insert_item(my_list, new_item, index): my_list.append(0) #add a placeholder to my_list for i in range(len(my_list)-2,index-1,-1): #from the last item, swap each item with the item on its right until the item at index-1 is reached my_list[i+1] = my_list[i] my_list[index] = new_item #insert the new item at index return my_list my_list = [1, 3, 5, 7] new_item = 2 index = 1 print(insert_item(my_list, new_item, index)) #prints [1, 2, 3, 5, 7]"},{"instruction":"Create a Python function to find the most common element in a given list of numbers. [1, 2, 3, 1, 3, 2, 2, 3, 3]","output":"def most_common_element(lst): count_dict = {} for num in lst: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 max_count = -1 max_element = None for key in count_dict.keys(): if count_dict[key] > max_count: max_count = count_dict[key] max_element = key return max_element print(most_common_element([1, 2, 3, 1, 3, 2, 2, 3, 3]))"},{"instruction":"Generate a Python program to update the value of a variable by given percentage. Given variable value = 25.22 Given percentage = 5","output":"value = 25.22 percent = 5 new_value = value + (value * (percent/100)) print(\\"The new value is: \\", new_value) # Output: The new value is: 26.496"},{"instruction":"Write a Python program to calculate the frequency of each word in a given string. This is a test test string","output":"def frequency_of_words(s): # split the string into words words = s.split(' ') # create a dictionary and initialize the frequency to 0 frequency = {} for word in words: if word not in frequency: # if this is a new word, then add it to the dictionary frequency[word] = 0 # increment the frequency of this word frequency[word] += 1 return frequency"},{"instruction":"Create a Python class that defines a Rectangle object that has two attributes length and breadth and a method to calculate the area of the rectangle.","output":"class Rectangle: def __init__(self, length, breadth): self.length = length self.breadth = breadth def find_area(self): return self.length * self.breadth rect = Rectangle(5, 10) area = rect.find_area() print(area)"},{"instruction":"Create a Python program to print out the following message and its variables. Name: Joh","output":"name = \\"John\\" print(\\"Hello \\" + name + \\"!\\") # Outputs: \\"Hello John!\\""},{"instruction":"Write a Python program that webscrapes data from a website and stores it in a structured format (e.g. JSON, CSV). Example Website: https://example.com","output":"import requests import json # Make a get request to get the data response = requests.get('https://example.com') # Store the data in a structured format data = json.loads(response.text) # Save the data to a json file with open('example.json', 'w') as f: json.dump(data, f)"},{"instruction":"Develop a Python program to create a frequency table for an array of integer elements. arr = [1,1,3,5,3,3,5]","output":"from collections import Counter def frequency(arr): \\"\\"\\" Develop a Python program to create a frequency table for an array of integer elements \\"\\"\\" return Counter(arr) if __name__ == '__main__': arr = [1,1,3,5,3,3,5] print(frequency(arr))"},{"instruction":"Create a function in Python that can tell if a string is a palindrome or not. civic","output":"def is_palindrome(word): reversed_word = word[::-1] if word == reversed_word: return True else: return False result = is_palindrome('civic') print(result)"},{"instruction":"dentify and correct code issues in the following snippet of Python code. def foo(x): if x > 0 return x else: return 0","output":"def foo(x): if x > 0: return x else: return 0"},{"instruction":"Create a server in Python that uses TCP to transmit messages between two clients.","output":"import socket import threading # Create a network socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Bind socket to port server_address = ('127.0.0.1', 10000) s.bind(server_address) # Wait for incoming connection s.listen() # Thread for handling incoming connection def client_thread(conn): while True: data = conn.recv(4096) conn.send(data) # Main thread loop while True: conn, addr = s.accept() print(\\"Connected to:\\", addr) # Start the client thread for handling incoming connection thread = threading.Thread(target=client_thread, args=(conn,)) thread.start()"},{"instruction":"Create a Python program to recommend books to users based on their ratings from 1 to 5. User ratings for 10 book","output":"from sklearn.cluster import KMeans from sklearn.metrics import pairwise_distances_argmin_min # Define user ratings user_ratings = [ [5, 4, 4, 0, 2, 1, 4, 4, 5, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0, 3], [4, 4, 0, 0, 4, 0, 4, 4, 4, 0], ] # Find the clusters model = KMeans(n_clusters=2, random_state=0).fit(user_ratings) # Find the most similar book to each user closest, _ = pairwise_distances_argmin_min(model.cluster_centers_, user_ratings) # Make recommendations for user_id in range(len(user_ratings)): print(\\"For user:\\", user_id) print(\\" Recommended book:\\", closest[user_id])"},{"instruction":"Develop a Python program to generate the first N Fibonacci numbers. N = 10","output":"def fibonacci_numbers(n): result = [] a, b = 0, 1 while a < n: result.append(a) a, b = b, a+b return result n = 10 fibonacci = fibonacci_numbers(n) print(fibonacci) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"},{"instruction":"Generate an XOR neural network in Python that has two input nodes and one output layer.","output":"import numpy as np def generate_xor_nn(): model = tf.keras.models.Sequential() model.add(tf.keras.layers.Dense(2, activation=\\"relu\\", input_dim=2)) model.add(tf.keras.layers.Dense(1, activation=\\"sigmoid\\")) model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy']) return model"},{"instruction":"Generate a Python algorithm that probes an array and attempts to select the majority element in the array.","output":"def find_majority_element(arr): # Use Moore's voting algorithm major_index = 0 count = 1 for i in range(len(arr)): if arr[i] == arr[major_index]: count += 1 else: count -= 1 if count == 0: major_index = i count = 1 # Check majority element return arr[major_index]"},{"instruction":"Design a simple class in Python that stores quiz scores of students.","output":"class QuizScores: def __init__(self): self.scores = {} def add_score(self, student_name, score): self.scores[student_name] = score def get_average(self): if len(self.scores) == 0: return 0 total_score = 0 for student, score in self.scores.items(): total_score += score return total_score / len(self.scores)"},{"instruction":"Create an algorithm in Python that takes in a string and returns the number of words in the string. Hello world","output":"def word_count(s): words = s.split() return len(words) s = \\"Hello world\\" print(word_count(s)) # 2"},{"instruction":"Can you make the following string lowercase using Python? This is a TEST string!","output":"\\"\\"\\" Make the given string lowercase using Python \\"\\"\\" test_string = \\"This is a TEST string!\\" lowercase_string = test_string.lower() print(lowercase_string) # prints \\"this is a test string!\\""},{"instruction":"Develop a python web scraper to extract data from a table on a web page. URL of the web page","output":"import requests from bs4 import BeautifulSoup # Enter the URL of the web page url = \\"Enter_URL_Here\\" # Scrape the page with BeautifulSoup response = requests.get(url) html = response.text soup = BeautifulSoup(html, 'html.parser') # Extract the required data from the table table = soup.find('table') table_rows = table.find_all('tr') header_row = table_rows[0] header_columns = header_row.find_all('th') headers = [header.text.strip() for header in header_columns] data = [] for row in table_rows[1:]: row_columns = row.find_all('td') row_data = [column.text.strip() for column in row_columns] data.append(dict(zip(headers,row_data))) print(data)"},{"instruction":"mplement the Knearest neighbor algorithm in Python to predict the category of an observation. features = [[3,2,1], [2,4,3], [4,6,5]] labels = [1, 0, 1] test_data = [4,2,4]","output":"import numpy as np def classify(features, labels, test_data): distances = [[np.sqrt(np.sum((test_data - features[i])**2)), i] for i in range(len(features))] sorted_distances = sorted(distances) k = 3 neighbors = sorted_distances[:k] num_ones = 0 num_zeros = 0 for neighbor in neighbors: if labels[neighbor[1]] == 1: num_ones += 1 else: num_zeros += 1 if num_ones > num_zeros: return 1 else: return 0 # Calling classify output = classify(features, labels, test_data) print(output)"},{"instruction":"Create a Python program which creates two thread, each printing the numbers 1 to 10 with a delay of 1 second. Not applicable","output":"import threading import time def printNumbers(): for x in range(1, 11): print(x) time.sleep(1) t1 = threading.Thread(target=printNumbers) t2 = threading.Thread(target=printNumbers) t1.start() t2.start() t1.join() t2.join()"},{"instruction":"Write a code to display prime numbers between two given numbers using python. start = 1 end = 10","output":"def displayPrime(start, end): for i in range(start, end + 1): if isPrime(i): print(i) def isPrime(n): if n <= 1: return False for i in range(2, n): if n % i == 0: return False return True if __name__ == '__main__': start = 1 end = 10 displayPrime(start, end) # 2, 3, 5, 7"},{"instruction":"Create a function in Python that takes a string as an argument and capitalizes the first letter of each word. String s = hello world","output":"def capitalize(s): return ' '.join(w.capitalize() for w in s.split())"},{"instruction":"Create a code snippet in Python that calculates the number of distinct items in a list.","output":"def distinct_items_in_list(input_list): distinct_items = set(input_list) return len(distinct_items)"},{"instruction":"Write an algorithm for detecting a cycle in a linked list in Python. Not applicable","output":"def detectLoop(head): # Base Case: List is empty if head is None: return False # Initialize slow and fast pointers slow = head fast = head while slow and fast and fast.next: slow = slow.next fast = fast.next.next # If slow and fast meet at same point then loop is found if slow == fast: return True return False"},{"instruction":"Generate a Python program to display a Christmas tree with the given number of levels. Number of levels: 5","output":"def print_tree(levels): #Print the top of the tree print(' ' * (levels - 1) + '*') #Print the middle of the tree for i in range(2, levels + 1): spaces = ' ' * (levels - i) stars = '*' * (2 * (i - 1) + 1) print(spaces + stars) #Print the bottom of the tree print(' ' * (levels - 1) + '|') # Print a tree with 5 levels print_tree(5)"},{"instruction":"Find the maximum element in an array using a Python program. [1, 4, 9, 3, 6]","output":"def findMax(arr): max = arr[0] for i in range(1,len(arr)): if arr[i] > max: max = arr[i] return max"},{"instruction":"Create a Python web scraper that extract data from a given URL, and store the data in a MongoDB database. URL: https://www.example.com/produc","output":"import requests from bs4 import BeautifulSoup import pymongo url = 'https://www.example.com/products' client = pymongo.MongoClient('localhost', 27017) db = client['scraper'] data = requests.get(url).text soup = BeautifulSoup(data, 'html.parser') products = soup.find_all('div', {'class': 'product'}) for product in products: title = product.find('h2', {'class': 'title'}).text price = product.find('span', {'class': 'price'}).text collection = db['products'] collection.insert_one({ 'title': title, 'price': price, }) print('Data stored in database!')"},{"instruction":"Create a class in Python that has 3 private variables and 3 public methods.","output":"class MyClass: def __init__(self): self.__var1 = 0 self.__var2 = 0 self.__var3 = 0 def set_var1(self, val): self.__var1 = val def get_var1(self): return self.__var1 def incr_var2(self): self.__var2 += 1 def get_var2(self): return self.__var2 def decr_var3(self): self.__var3 -= 1 def get_var3(self): return self.__var3"},{"instruction":"Output the sum of numbers in a list in Python. [1, 2, 3, 4, 5]","output":"def list_sum(inpList): sum = 0 for num in inpList: sum += num return sum print(list_sum([1, 2, 3, 4, 5]))"},{"instruction":"Write a Python program to create 8 random numbers between 1 and 100.","output":"import random # Create 8 random numbers rand_nums = [random.randint(1, 100) for _ in range(8)] print(rand_nums)"},{"instruction":"Create a function that takes a Python list of numbers as input, and returns the list sorted by the sum of its digits. [ 135, 590, 69, 127 ]","output":"def sortBySumOfDigits(lst): return sorted(lst, key=lambda x: sum(map(int, str(x)))) lst = [ 135, 590, 69, 127] sorted_list = sortBySumOfDigits(lst) print(sorted_list)"},{"instruction":"Write a Python program to take an integer n and return the nth most frequent element in a list.","output":"def find_nth_most_frequent(n, data): counts = {} for element in data: if element in counts: counts[element] += 1 else: counts[element] = 1 sorted_counts = sorted(counts.items(), key=lambda x: x[1]) return sorted_counts[-n][0]"},{"instruction":"Create a python script which takes two numbers as argument to calculate the LCM (Least Common Multiple)","output":"def lcm(x, y): lcm = (x*y)//gcd(x,y) return lcm # This function implements the Euclidian algorithm to find H.C.F. of two numbers def gcd(x, y): while(y): x, y = y, x % y return x # Driver program num1 = 12 num2 = 15 print(\\"The L.C.M. is\\", lcm(num1, num2))"},{"instruction":"Using the input, generate a python program to count the number of times a specific word appears in a sentence or a paragraph. sentence = 'My favorite color is blue' word = 'blue'","output":"def count_word(sentence, word): words = sentence.split(' ') return words.count(word)"},{"instruction":"Create a webapplication which monitors the stock market using Python. The application should display the current stock prices and chart prices for the past 7 days. Not applicable","output":"import flask from flask import Flask, request import pandas as pd import matplotlib.pyplot as plt import matplotlib.dates as mdates # Creating a Flask app app = Flask(__name__) # List of stocks stock_list = [\\"MSFT\\", \\"GOOGL\\", \\"AAPL\\", \\"AMZN\\", \\"INTC\\"] # API call to get data @app.route(\\"/stockdata\\", methods=['GET']) def stock_data(): stock_name = request.args.get(\\"stock\\") if stock_name in stock_list: url = \\"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\\" + stock_name + \\"&apikey=<your_api_key>\\" df = pd.read_json(url) df = df.iloc[1] # Plots a graph of data dates = df.index prices = df.values # Create figure fig, ax = plt.subplots() # Format date x-axis ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d')) # Plot data ax.plot(dates, prices) png = \\"static/graph.png\\" # Save image to static/ folder plt.savefig(png, bbox_inches='tight') # Return data data = {\\"date\\": dates.tolist(), \\"price\\": prices.tolist(), \\"graph\\": png} return flask.jsonify(data) # Main section if __name__ == \\"__main__\\": app.run()"},{"instruction":"Using the NumPy library, write a program in Python to find the nearest point in a (twodimensional) array. dist_matrix = [ [0.0, 2.0, 9.0], [1.0, 3.1, 8.2], [2.54, 6.25, 5.3], ] point = [1.5, 2.7]","output":"import numpy as np # Define distance matrix and point dist_matrix = [ [0.0, 2.0, 9.0], [1.0, 3.1, 8.2], [2.54, 6.25, 5.3], ] point = [1.5, 2.7] # Calculate distance to all points distances = np.linalg.norm(dist_matrix - point, axis=1) # Find index of the nearest point min_idx = np.argmin(distances) # Get the nearest point nearest_point = dist_matrix[min_idx] print('The nearest point is:', nearest_point)"},{"instruction":"Generate a Python algorithm to multiply two number. x = 8 y = 3","output":"def mul_numbers(x, y): return x*y"},{"instruction":"Contruct a python program that sorts an array of strings using BubbleSort algorithm. [Hello, World, Boo, Yay]","output":"def bubbleSort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"instruction":"Write a Python program to extract the first 100 characters from a given string. This is a test string","output":"def extract_first_100_chars(string): return string[:100]"},{"instruction":"Generate a correct Python program that implements a depthfirst search algorithm.","output":"def dfs(graph, node, visited): if node not in visited: visited.append(node) for n in graph[node]: dfs(graph, n, visited) return visited"},{"instruction":"Create a Python program to handle calendars and reminders. Not applicable","output":"import datetime # Sample reminder reminders = [ { \\"date\\": \\"2021-02-14\\", \\"title\\": \\"Valentine's Day\\", \\"description\\": \\"Buy a heart-shaped document for your beloved!\\", }, { \\"date\\": \\"2021-04-01\\", \\"title\\": \\"April Fool's Day\\", \\"description\\": \\"Camouflage pranks on the family!\\", }, ] # Function to add reminders def add_reminder(reminder): reminder['date'] = datetime.datetime.strptime(reminder['date'], '%Y-%m-%d').date() reminders.append(reminder) # Function to remove reminders def remove_reminder(index): reminders.pop(index) # Function to list reminders def list_reminders(): for index, reminder in enumerate(reminders): print(f\\"{index}. {reminder['title']} - {reminder['date']}: {reminder['description']}\\")"},{"instruction":"Create a Python class to send emails.","output":"import smtplib class Emailer: def __init__(self, server, email, password): self.server = smtplib.SMTP(server) self.email = email self.password = password self.server.starttls() self.server.login(self.email, self.password) def send_email(self, recipient, message): self.server.sendmail( self.email, recipient, message ) self.server.quit()"},{"instruction":"Build a web application using the Django web framework.","output":"# Create a virtual environment to start the project virtualenv venv # Activate the virtual environment source venv/bin/activate # Install the required dependencies for the Django web project pip install django # Create the Django project django-admin startproject mysite # Change to the mysite directory cd mysite # Create the database tables python manage.py migrate # Create a superuser python manage.py createsuperuser # Start the development server python manage.py runserver"},{"instruction":"Generate code for creating a Django web application.","output":"mkdir myproject cd myproject # Create a virtual environment to manage dependencies python3 -m venv env source env/bin/activate # Install Django pip install django # Create a new Django project called myproject django-admin startproject myproject cd myproject # Run migrations python manage.py migrate #Create an app called myapp python manage.py startapp myapp"},{"instruction":"Create a Python script to find the sum of all the even numbers in a list of integers. [1, 2, 3, 4, 5, 6, 7, 8, 9]","output":"def find_sum(lst): sum = 0 for num in lst: if num % 2 == 0: sum += num return sum lst = [1,2,3,4,5,6,7,8,9] print(find_sum(lst)) # Output: 20"},{"instruction":"Create a script in any language that will accept two variables and will swap their values.","output":"# Python def swap(a, b): temp = a a = b b = temp return (a, b) # JavaScript function swap(a, b) { let temp = a; a = b; b = temp; return [a, b]; }"},{"instruction":"Create a Python script to generate random passwords. The passwords should have at least 5 characters and should be able to contain uppercase, lowercase, numbers, and special characters. Not applicable","output":"import random import string def generate_password(): length = 5 chars = string.ascii_letters + string.digits + '!@#%^&*()' random.seed = (random.SystemRandom().random() * 1000000000) return ''.join(random.choice(chars) for i in range(length))"},{"instruction":"Design a data structure in Python to store information about a customer. name, phone, email, addre","output":"class Customer: def __init__(self, name, phone, email, address): self.name = name self.phone = phone self.email = email self.address = address customer = Customer(\\"John\\", \\"+123456789\\", \\"john@example.com\\", \\"456 Main Street\\")"},{"instruction":"mplement a Queue data structure in Python.","output":"class Queue: def __init__(self): self.items = [] def is_empty(self): return self.items == [] def enqueue(self, item): self.items.insert(0, item) def dequeue(self): return self.items.pop() def size(self): return len(self.items)"},{"instruction":"Design a Python program to reverse a string inplace.","output":"def reverse_string(string): left_pointer, right_pointer = 0, len(string) - 1 while left_pointer < right_pointer: string[left_pointer], string[right_pointer] = string[right_pointer], string[left_pointer] left_pointer += 1 right_pointer -= 1 return string"},{"instruction":"Design a program in Python to check if a given number is a palindrome 12321","output":"def check_number(num): # make a copy of the original number temp = num # initialize sum rev = 0 while temp > 0: rev = (rev * 10) + (temp % 10) temp = temp // 10 # Check if number is equal to its reverse if num == rev: return True else: return False # main function num = 12321 if check_number(num): print(\\"Given Number is Palindrome\\") else: print(\\"Given Number is not a Palindrome\\")"},{"instruction":"Create a forloop in Python to loop through the items in a list and print their elements. names = ['John', 'Kate', 'Mike', 'Alex']","output":"for name in names: print(name)"},{"instruction":"Write a Python script to sort a list of tuples by its third element. [(2, 3, 5), (7, 9, 8), (1, 0, 4)]","output":"def sort_by_third_element(input_list): sorted_list = sorted(input_list, key = lambda x: x[2]) return sorted_list"},{"instruction":"Write a Python program to compare two lists of strings and print unique values in each list. list1 = [cat, dog, bird] list2 = [dog, mouse, elephant]","output":"list1_unique = [] list2_unique = [] for a in list1: if a not in list2: list1_unique.append(a) for b in list2: if b not in list1: list2_unique.append(b) print(\\"Unique elements in List 1: \\", list1_unique) print(\\"Unique elements in List 2: \\", list2_unique)"},{"instruction":"Transform the following nested for loop into a list comprehension statement in Python. for i in range(2, 5): for j in range(3): print(i, j)","output":"[(i,j) for i in range(2,5) for j in range(3)]"},{"instruction":"Develop a classifier in Python to distinguish between different sounds.","output":"import librosa from tensorflow.keras.layers import Input, Dense from tensorflow.keras.models import Model # Get the data x_data, y_data = librosa.load('mySound.wav', sr=44100) # Preprocess the data x_data = librosa.util.normalize(x_data) # Reshape the data (optional) x_data = x_data.reshape((1, -1)) # Create a model inputs = Input(shape=(x_data.shape[1], )) x = Dense(512, activation='relu')(inputs) x = Dense(256, activation='relu')(x) predictions = Dense(1, activation='sigmoid')(x) model = Model(inputs=inputs, outputs=predictions) # Compile the model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) # Train the model model.fit(x_data, y_data, epochs=10)"},{"instruction":"Can you design an algorithm in Python to find the longest palindrome in a given string?","output":"def longest_palindrome(s): n = len(s) T = [[False for i in range(n)] for i in range(n)] maxLength = 0 # Find palindromes of single characters for i in range(n): T[i][i] = True # Find palindromes of double characters for i in range(n-1): if s[i] == s[i+1]: T[i][i+1] = True maxLength = 2 # Find palindromes of length greater than 2 for k in range(3, n+1): for i in range(n-k+1): j = i+k-1 if s[i] == s[j] and T[i+1][j-1]: T[i][j] = True maxLength = k #Find the start and end of the longest one startIndex=0 endIndex=0 for i in range(n): for j in range(n): if T[i][j] and j-i+1 >= maxLength: maxLength = j-i+1 startIndex = i endIndex = j longestPalindrome = s[startIndex:endIndex+1] return longestPalindrome"},{"instruction":"Generate a Python program to append a given element to the end of the list. [2, 3, 4], 6","output":"arr = [2, 3, 4] arr.append(6) print(arr)"},{"instruction":"Create a function in Python to filter out elements in a list that share the same value. mylist = [1, 2, 2, 3, 3, 3]","output":"def filter_same_value_elements(mylist): seen = set() for item in mylist: if item not in seen: yield item seen.add(item) filtered_list = list(filter_same_value_elements(mylist)) print(filtered_list) # [1, 2, 3]"},{"instruction":"Write a function in Python that takes an integer and returns an array of digits of the number except the last two digits. 8765","output":"def remove_last_two_digits(num): num = str(num) return [int(x) for x in num[:-2]]"},{"instruction":"Construct a Python dictionary to convert Celsius temperature values to their Fahrenheit equivalents","output":"celsius_to_fahrenheit = { 0 : 32, 10 : 50, 20 : 68, 30 : 86, 40 : 104, 50 : 122, 60 : 140, 70 : 158, 80 : 176, 90 : 194, 100 : 212 }"},{"instruction":"This code provides a class called BuildKernel that has two methods: compileNewKernel and upgradeKernel. To use this class, create an instance of BuildKernel and call the appropriate method with the required arguments. If you want to upgrade the kernel, call the upgradeKernel method. If you want to compile a new kernel, call the compileNewKernel method with the kernel type and init settings as arguments.","output":"#!/usr/bin/env python import fileinput import sys ///<summary> ///Provides a bunch of operations to format and manage hard disks. /// ///One cool thing that this class does is allow you to generate a fstab file ///based on disk formatting operations conducted earlier using this class. This ///is helpful when installing a new Gentoo installation. ///</summary> class BuildKernel: def compileNewKernel(self, kernelType, initSettings): f = fopen('/etc/superGentoo/kernel', 'w') f.write(kernelType + \\",\\" + initSettings) f.close() os.system(\\"emerge \\" + kernelType) os.system(\\"mv /usr/src/.config /usr/src/linux/.config\\") os.system(\\"touch /usr/src/linux/.config\\") os.system(\\"cd /usr/src/linux\\") os.system(\\"make\\") os.system(\\"make modules_install\\") os.system(\\"cp arch/x86_64/boot/bzImage /boot/kernel-\`find /usr/src -name linux-3* | awk -Flinux- '{print NF }'\`\\") def upgradeKernel(self): kernelData = open('/etc/superGentoo/kernel').read(1000).split(\\",\\") os.system(\\"emerge --update \\". kernelData[0]) os.system() //--------------------------------------------------------------------------// // MAIN FUNCTION //--------------------------------------------------------------------------// if __name__ == '__main__': bk = BuildKernel() if sys.argv[1] == \\"upgrade\\": bk.upgradeKernel() elif sys.argv[1] == \\"newKernel\\": bk.compileNewKernel(sys.argv[2], sys.argv[3])"},{"instruction":"Write a Python program to find the most visited webpage on a website. webpages.csv ID,PageName,PageURL 1,Home,http://example.com/ 2,About,http://example.com/about 3,Contact,http://example.com/contact 4,News,http://example.com/news 5,Help,http://example.com/help visitors.csv ID,PageID,IPAddress 1,1,192.168.1.1 2,1,192.168.1.2 3,1,192.168.1.3 4,2,192.168.1.4 5,3,192.168.1.5 6,2,192.168.1.6 7,3,192.168.1.7","output":"import csv webpages = {} with open(\\"webpages.csv\\", \\"r\\") as f: reader = csv.reader(f) for row in reader: webpages[row[0]] = (row[1], row[2]) visitors = {} with open(\\"visitors.csv\\", \\"r\\") as f: reader = csv.reader(f) for row in reader: visitors[row[2]] = row[1] most_visited = max(webpages, key=lambda x: len([i for i in visitors.values() if i==x])) print(f\\"Most visited page: {webpages[most_visited][0]} ({webpages[most_visited][1]})\\")"},{"instruction":"Create a Python program to perform the Levenshtein Distance calculation. Not applicable","output":"def levenshteinDistance(str1, str2): # base case # if one of the strings is empty # then the Levenshtein distance will be equal # to the length of the other string if str1 == \\"\\": return len(str2) if str2 == \\"\\": return len(str1) # initialize the variables m = len(str1) n = len(str2) cost = 0 # find the cost if str1[m-1] == str2[n-1]: cost = 0 else: cost = 1 # return the minimum of three possible operations return min( levenshteinDistance(str1[:-1], str2)+1, # delete levenshteinDistance(str1, str2[:-1])+1, # insert levenshteinDistance(str1[:-1], str2[:-1]) + cost # replace ) str1 = \\"kitten\\" str2 = \\"sitting\\" print(levenshteinDistance(str1, str2)) # 3"},{"instruction":"Write a Python script to generate a random unique 8 character ID.","output":"import string import random def generate_unique_id(length): random_id = ''.join([random.choice(string.ascii_letters + string.digits) for n in range(length)]) return random_id print(generate_unique_id(8)) # Output: AB2dCKsm"},{"instruction":"Create a Python script to print all entries of a data set in a table format? data_set = [['Name', 'Age', 'Location'], ['James', 30, 'London'], ['Mary', 25, 'New York'], ['John', 28, 'Toronto']]","output":"def print_table(data_set): col_width = max(len(word) for row in data_set for word in row) + 2 # padding for row in data_set: print(\\"\\".join(word.ljust(col_width) for word in row)) print_table(data_set) # Output Name Age Location James 30 London Mary 25 New York John 28 Toronto"},{"instruction":"Create a Python code snippet that prints the same output as Hello, world!","output":"print(\\"Hello, world!\\")"},{"instruction":"Generate a Python function to optimize a given function using a Gradient Descent algorithm.","output":"def optimize_function(f, learning_rate, iterations): weights = np.random.rand(f.shape[0]) for _ in range(iterations): grads = estimate_gradient(f, weights) weights -= learning_rate * grads return weights"},{"instruction":"Develop a code generator that can generate a specified code given a language and a set of instructions. Language: Python Instructions: print a Hello World!","output":"def code_generator(language, instructions): if language == 'Python': code_string = 'print(\\"Hello World!\\")' elif language == 'Java': code_string = 'System.out.println(\\"Hello World!\\");' return code_string"},{"instruction":"Create a Python program to generate a random password which satisfies the following criteria: • Must contain 8 – 16 characters. • Must contain upper and lowercase letters, numbers, and special characters such as *, #, @, etc","output":"import random import string def generate_random_password(length): # String of characters to choose from chars = string.ascii_letters + string.digits + '!@#%^&*()' # Randomly choose 4 characters from the list of characters random_chars = ''.join(random.choice(chars) for i in range(length)) # Generate password password = ''.join(random.sample(random_chars, length)) return password"},{"instruction":"Code up a web scraper in Python for a particular website. The website is https://www.example.com","output":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com' page = requests.get(url) soup = BeautifulSoup(page.text, 'html.parser') all_divs = soup.find_all('div') for div in all_divs: try: print(div['class']) except: print(div.text)"},{"instruction":"Generate a valid Python dictionary containing student names as keys and their age as values. John: 18 Maria: 20 Alex: 24","output":"student_dict = { 'John': 18, 'Maria': 20, 'Alex': 24 }"},{"instruction":"Write a Python program that implements gradient descent to find the minimum of a function. function = 3x² + 2x 10","output":"import numpy as np # Define the function def f(x): return (3 * (x**2)) + (2 * x) - 10 def grad_f(x): return (6 * x) + 2 # Gradient Descent x_old = 0 x_new = 4 # Arbitrary initial value epsilon = 0.01 # Stop criteria precision = 0.00001 max_iters = 1000 # Maximum number of iterations iters = 0 while abs(x_new - x_old) > epsilon and iters < max_iters: x_old = x_new # Calculate the gradient grad = grad_f(x_old) # Calculate the step size alpha = 0.01 # Take a step in the opposite direction of the gradient x_new = x_old - (alpha * grad) # Update iteration counter iters += 1 print(\\"Minimum at: \\", x_new)"},{"instruction":"Write a Python Function to check if a given string contains all the letters of the alphabet","output":"def check_alphabet(string): alphabet = \\"abcdefghijklmnopqrstuvwxyz\\" if set(string.lower()) >= set(alphabet): return True else: return False"},{"instruction":"Design a program in Python that prints out the binary equivalent of a given decimal number.","output":"def dec_to_bin(num): binary = \\"\\" while num > 0: remainder = num % 2 binary = str(remainder) + binary num = num // 2 return binary"},{"instruction":"Create a function in Python that takes in a string and a character, and returns the number of occurrances of the character in the string.","output":"def count_characters(string, char): count = 0 for c in string: if c == char: count += 1 return count"},{"instruction":"Edit a given Python program to make it bugfree. def foo(): i = 0 for x in range(10): i = i + x print(i) foo()","output":"def foo(): i = 0 for x in range(10): i = i + x return i print(foo())"},{"instruction":"Code a web scraper in Python to extract information from a mediumsize website The website to scrape is https://www.example.com/.","output":"# Import the necessary libraries import requests from bs4 import BeautifulSoup # Set the URL to scrape URL = 'https://www.example.com/' # Make the request r = requests.get(URL) # Parse the HTML response html_doc = r.text soup = BeautifulSoup(html_doc, 'html.parser') # Extract the desired information for link in soup.find_all('a'): print(link.get('href'))"},{"instruction":"Generate a program in Python to count the most frequent words in a string. This is a test string","output":"from collections import Counter def frequent_words(string): # Break the string into words words = string.split(\\" \\") # Count each word using Counter Method cnt = Counter(words) # Find the 5 most frequent words frequent_words = cnt.most_common(5) print(\\"The 5 most frequent words are : \\") for word, count in frequent_words: print('%s : %d' % (word, count)) # Driver Program string = \\"This is a test string\\" frequent_words(string) # Output: # The 5 most frequent words are : # This : 1 # is : 1 # a : 1 # test : 1 # string : 1"},{"instruction":"This code defines a class called Resources that handles the serialization of images and fonts in an ebook. To use it, create an instance of the class and call the add_resources method to add the images and fonts from the ebook's manifest. If you want to add additional images after calling add_resources, you can call the add_extra_images method. To serialize the resources, call the serialize method with a list to which the serialized resources will be appended, and a set of the images used in the ebook. The class also has a method called process_image that can be used to process an image before adding it to the resources.","output":"#!/usr/bin/env python # vim:fileencoding=UTF-8:ts=4:sw=4:sta:et:sts=4:ai from __future__ import (unicode_literals, division, absolute_import, print_function) __license__ = 'GPL v3' __copyright__ = '2012, Kovid Goyal <kovid@kovidgoyal.net>' __docformat__ = 'restructuredtext en' import imghdr from calibre.ebooks.mobi import MAX_THUMB_DIMEN, MAX_THUMB_SIZE from calibre.ebooks.mobi.utils import (rescale_image, mobify_image, write_font_record) from calibre.ebooks import generate_masthead from calibre.ebooks.oeb.base import OEB_RASTER_IMAGES PLACEHOLDER_GIF = b'GIF89ax01x00x01x00x80x00x00x00x00x00xffxffxff!xf9x04x01x00x00x00x00,x00x00x00x00x01x00x01x00@x02x01Dx00;' class Resources(object): def __init__(self, oeb, opts, is_periodical, add_fonts=False, process_images=True): self.oeb, self.log, self.opts = oeb, oeb.log, opts self.is_periodical = is_periodical self.process_images = process_images self.item_map = {} self.records = [] self.mime_map = {} self.masthead_offset = 0 self.used_image_indices = set() self.image_indices = set() self.cover_offset = self.thumbnail_offset = None self.add_resources(add_fonts) def process_image(self, data): if not self.process_images: return data return (mobify_image(data) if self.opts.mobi_keep_original_images else rescale_image(data)) def add_resources(self, add_fonts): oeb = self.oeb oeb.logger.info('Serializing resources...') index = 1 mh_href = None if 'masthead' in oeb.guide and oeb.guide['masthead'].href: mh_href = oeb.guide['masthead'].href self.records.append(None) index += 1 self.used_image_indices.add(0) self.image_indices.add(0) elif self.is_periodical: # Generate a default masthead data = generate_masthead(unicode(self.oeb.metadata['title'][0])) self.records.append(data) self.used_image_indices.add(0) self.image_indices.add(0) index += 1 cover_href = self.cover_offset = self.thumbnail_offset = None if (oeb.metadata.cover and unicode(oeb.metadata.cover[0]) in oeb.manifest.ids): cover_id = unicode(oeb.metadata.cover[0]) item = oeb.manifest.ids[cover_id] cover_href = item.href for item in self.oeb.manifest.values(): if item.media_type not in OEB_RASTER_IMAGES: continue try: data = self.process_image(item.data) except: self.log.warn('Bad image file %r' % item.href) continue else: if mh_href and item.href == mh_href: self.records[0] = data continue self.image_indices.add(len(self.records)) self.records.append(data) self.item_map[item.href] = index self.mime_map[item.href] = 'image/%s'%imghdr.what(None, data) index += 1 if cover_href and item.href == cover_href: self.cover_offset = self.item_map[item.href] - 1 self.used_image_indices.add(self.cover_offset) try: data = rescale_image(item.data, dimen=MAX_THUMB_DIMEN, maxsizeb=MAX_THUMB_SIZE) except: self.log.warn('Failed to generate thumbnail') else: self.image_indices.add(len(self.records)) self.records.append(data) self.thumbnail_offset = index - 1 self.used_image_indices.add(self.thumbnail_offset) index += 1 finally: item.unload_data_from_memory() if add_fonts: for item in self.oeb.manifest.values(): if item.href and item.href.rpartition('.')[-1].lower() in { 'ttf', 'otf'} and isinstance(item.data, bytes): self.records.append(write_font_record(item.data)) self.item_map[item.href] = len(self.records) def add_extra_images(self): ''' Add any images that were created after the call to add_resources() ''' for item in self.oeb.manifest.values(): if (item.media_type not in OEB_RASTER_IMAGES or item.href in self.item_map): continue try: data = self.process_image(item.data) except: self.log.warn('Bad image file %r' % item.href) else: self.records.append(data) self.item_map[item.href] = len(self.records) finally: item.unload_data_from_memory() def serialize(self, records, used_images): used_image_indices = self.used_image_indices | { v-1 for k, v in self.item_map.iteritems() if k in used_images} for i in self.image_indices-used_image_indices: self.records[i] = PLACEHOLDER_GIF records.extend(self.records) def __bool__(self): return bool(self.records) __nonzero__ = __bool__"},{"instruction":"Design a class in Python to store customer information for an ecommerce website.","output":"class Customer: def __init__(self, name, email, address, phone, credit_card_number): self.name = name self.email = email self.address = address self.phone = phone self.credit_card_number = credit_card_number def get_name(self): return self.name def set_name(self, name): self.name = name def get_email(self): return self.email def set_email(self, email): self.email = email def get_address(self): return self.address def set_address(self, address): self.address = address def get_phone(self): return self.phone def set_phone(self, phone): self.phone = phone def get_credit_card_number(self): return self.credit_card_number def set_credit_card_number(self, credit_card_number): self.credit_card_number = credit_card_number"},{"instruction":"Design an AI system in Python that can predict the stock price of a company given historical prices. Five days of historical stock price data: [100, 101, 102, 101, 100]","output":"import tensorflow as tf import numpy as np # Set up input data historical_prices = [100, 101, 102, 101, 100] x_data = [] for i in range(len(historical_prices)-1): x_data.append(historical_prices[i:i+2]) y_data = historical_prices[2:] # Build model model = tf.keras.Sequential([ tf.keras.layers.Dense(100, activation=tf.nn.relu, input_shape=(2,)), tf.keras.layers.Dense(1) ]) # Compile model model.compile( optimizer=\\"adam\\", loss=\\"mean_squared_error\\" ) # Fit (train) model model.fit(x_data, np.array(y_data), epochs=15) # Use model to predict stock price predicted_price = model.predict([historical_prices[-2:]])[0][0] # Output prediction print(f'The predicted price is {predicted_price}')"},{"instruction":"Develop a program in Python to detect whether an input string is a palindrome. input_string = level","output":"def check_palindrome(input_string): '''This function will check if the given string is palindrome or not.''' temp_string = input_string.lower() return temp_string == temp_string[::-1] input_string = \\"level\\" # check if the string is palindrome if check_palindrome(input_string): print(\\"The string is palindrome.\\") else: print(\\"The string is not palindrome.\\")"},{"instruction":"Write an algorithm in Python that identifies and removes duplicates from a given array. Array = [2, 3, 4, 3, 2]","output":"def removeDuplicates(array): result = [] for number in array: if number not in result: result.append(number) return result array = [2, 3, 4, 3, 2] print(removeDuplicates(array))"},{"instruction":"Create a Python program for extracting data from a list. The list should contain dictionaries with three fields: name (string), age (integer), and gender (string). The program should iterate over the list and output a new list containing only the names of people aged 18 or over. list_of_people = [ {'name': 'John', 'age': 15, 'gender': 'male'}, {'name': 'Sarah', 'age': 25, 'gender': 'female'}, {'name': 'Jack', 'age': 28, 'gender': 'male'}, {'name': 'Jane', 'age': 18, 'gender': 'female'} ]","output":"over_18_names = [] for person in list_of_people: if person['age'] >= 18: over_18_names.append(person['name']) print(over_18_names) # ['Sarah', 'Jack', 'Jane']"},{"instruction":"Generate a Python code snippet to sort a given list. list = [5, 4, 9, 2, 1]","output":"list.sort() print(list)"},{"instruction":"Write a python statement to extract the first element from a 3item tuple. Tuple: (3, 4, 5)","output":"first_element = (3, 4, 5)[0]"},{"instruction":"Classify an input sentence with a given set of labels in Python. The car is blue","output":"def classify_sentence(sentence): labels = [‘color’, ‘object’] features = sentence.split(' ') feature_dict = {} for f in features: if f == 'blue': feature_dict['color'] = 'blue' elif f == 'car': feature_dict['object'] = 'car' return feature_dict sentence = 'The car is blue' labels = [‘color’, ‘object’] print(classify_sentence(sentence, labels))"},{"instruction":"Develop a class in Python that prints a box to the screen using asterisks.","output":"class Box: def __init__(self, height, width): self.height = height self.width = width def print_box(self): for _ in range(self.height): for _ in range(self.width): print(\\"*\\", end=\\"\\") print(\\"\\")"},{"instruction":"Create a Python script to generate a random password with at least one uppercase, one lowercase and one number.","output":"import string import random def generate_password(): letters = string.ascii_letters + string.digits password = list(random.choice(letters) for i in range(8)) while not any(l.isupper() for l in password) or not any(l.islower() for l in password) or not any(l.isdigit() for l in password): password = list(random.choice(letters) for i in range(8)) return ''.join(password) password = generate_password() print(\\"Random password is:\\", password)"},{"instruction":"Create an algorithmic trading program using Python that executes buy/sell orders when certain criteria are met. Not applicable","output":"import pandas as pd import numpy as np # Set up the trading parameters buy_threshold = 0.1 sell_threshold = 0.1 # Load the dataset df = pd.read_csv('stock_data.csv', index_col=0) # Set up a \\"buy\\" flag and a \\"sell\\" flag df['buy'] = np.where(df.Close > (df.Open * (1 + buy_threshold)), 1, 0) df['sell'] = np.where(df.Close < (df.Open * (1 - sell_threshold)), 1, 0) # Loop through the dataset and execute buy/sell orders for i in range(len(df)): if df.buy[i] == 1: print('Executing buy order') if df.sell[i] == 1: print('Executing sell order')"},{"instruction":"Generate the code for a Python function that sorts an array containing integer values in descending order.","output":"def sort_array(arr): # Traverse through all array elements for i in range(len(arr)): # Last i elements are already in place for j in range(0, len(arr)-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] < arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"instruction":"Create a Python program to output the maximum number of vowels that can be combined with a given combination of consonants","output":"def max_vowels(consonants): num_consonants = len(consonants) max_vowels = 0 for i in range(1 << num_consonants): # Boolean array of consonants in a given combination bool_arr = [False for _ in range(num_consonants)] for j in range(num_consonants): if ((i & (1 << j)) > 0): # If a bit is set bool_arr[j] = True num_vowels = 0 # Count vowels in a given combination for j in range(num_consonants): if bool_arr[j] is False: # If a consonant is there # Count number of vowels that can follow after the consonant if j + 1 < num_consonants and bool_arr[j + 1] is False: num_vowels += 2 else: num_vowels += 1 # Update maximumnumber of vowels if (num_vowels > max_vowels): max_vowels = num_vowels return max_vowels"},{"instruction":"Please transform this Python list comprehension into a for loop. list_1 = [x for x in range(1, 10) if x % 2 == 0]","output":"list_1 = [] for x in range(1, 10): if x % 2 == 0: list_1.append(x)"},{"instruction":"Design python code to optimize the following function: ⅇ͏^(−𝐱^2)","output":"import math from scipy.optimize import minimize def objective(x): return math.exp(-x**2) x0 = 5 print('Initial objective: ' + str(objective(x0))) solution = minimize(objective, x0) print('Optimized objective: ' + str(objective(solution.x)))"},{"instruction":"Give a generic example for tryexceptfinally block in Python.","output":"try: # code goes here result = my_function() except Exception as e: # deal with errors print(\\"Error encountered: {}\\".format(e)) finally: # execute this block of code regardless print(\\"Done!\\")"},{"instruction":"Write an algorithm in Python to find the maximum and minimum elements in a given array of integers. [3, 5, 8, 1, 10]","output":"def findMinMax(arr): min = arr[0] max = arr[0] for i in range(1, len(arr)): if arr[i] < min: min = arr[i] elif arr[i] > max: max = arr[i] return min, max arr = [3, 5, 8, 1, 10] min_val, max_val = findMinMax(arr) print(min_val, max_val)"},{"instruction":"Develop a Python program to replace all the occurences of a substring in a given string.","output":"def replace_substring(string, substring, replacement): # Get all the indices of the substring indices = [] position = 0 while position < len(string): index = string.find(substring, position) # If substring not found, break if index == -1: break # Append the index indices.append(index) position = index + 1 # Construct the replaced string based on the indices replaced_string = '' start = 0 for i in indices: replaced_string += string[start:i] + replacement start = i + len(substring) replaced_string += string[start:] return replaced_string"},{"instruction":"Develop a machine learning model in Python using Logistic Regression to identify spam emails. A dataset consisting of 20000 emails and their labels as either 'spam' or 'not spam'.","output":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.linear_model import LogisticRegression # read in the dataset emails = pd.read_csv(\\"emails.csv\\") # split the emails into a training and testing set X_train, X_test, y_train, y_test = train_test_split(emails[\\"message\\"], emails[\\"label\\"], test_size=0.2, random_state=0) # extract features from the emails using a count vectorizer vectorizer = CountVectorizer() X_train_features = vectorizer.fit_transform(X_train) # create and train a logistic regression model model = LogisticRegression() model.fit(X_train_features, y_train) # test the model on the testing set X_test_features = vectorizer.transform(X_test) score = model.score(X_test_features, y_test) print(\\"Test accuracy: \\", score)"},{"instruction":"Suggest a web scraper API to extract tabular data from a website. <no input>","output":"A popular API for web scraping and extracting tabular data from websites is Scrapy. It provides an easy-to-use API for programming web crawlers in Python. It is also extensible, so it can be easily modified and extended to focus on more specific tasks."},{"instruction":"Design an algorithm in Python for solving the Travelling Salesman Problem with a cost matrix. Cost matrix = [[0, 4, 6, 8], [3, 0, 2, 7], [1, 6, 0, 5], [4, 3, 9, 0]]","output":"import numpy as np def solveTSP(cost_matrix): n = len(cost_matrix[0]) # matrix for storing intermediate results C = [[0 for i in range(n)] for j in range(1<<n)] # Administering initial values in matrix for i in range(n): C[1<<i][i] = cost_matrix[i][0] # Dp to fill the remaining entries for mask in range(1, 1<<n): for k in range(n): if (mask & (1<<k)) != 0: min_val = np.inf for m in range(n): if (mask & (1<<m)) != 0 and m != k: min_val = min(min_val, C[mask ^ (1<<k)][m] + cost_matrix[m][k]) C[mask][k] = min_val # find the minimum cost tour min_val = np.inf for k in range(n): min_val = min(min_val, C[(1<<n) - 1][k] + cost_matrix[k][0]) return min_val"},{"instruction":"Write a Python function to implement an algorithm. Algorithm: Given an array of positive and negative numbers, find the largest subarray with sum less than or equal to 0.","output":"def largestSubarray(arr): max_len = 0 curr_sum = 0 max_sum = 0 start = 0 end = 0 for i in range(len(arr)): curr_sum += arr[i] if max_sum < curr_sum: max_sum = curr_sum end = i if curr_sum < 0: curr_sum = 0 start = i + 1 if max_sum <= 0: curr_len = end - start + 1 if curr_len > max_len: max_len = curr_len return max_len"},{"instruction":"Create a Python class for a Person with name and age attributes.","output":"class Person: def __init__(self, name, age): self.name = name self.age = age"},{"instruction":"Compose a Python program that takes in a list of strings and returns a list with duplicate strings removed. [Hello, World, Hello, Goodbye, Goodbye, Welcome]","output":"def remove_duplicates(strs): new_strs = [] for i in strs: if i not in new_strs: new_strs.append(i) return new_strs # Driver Code strs = [\\"Hello\\", \\"World\\", \\"Hello\\", \\"Goodbye\\", \\"Goodbye\\", \\"Welcome\\"] print(remove_duplicates(strs))"},{"instruction":"Create a Python script to analyze a text document. The script should locate all words with three or more characters in a row and count their frequency in the document. The quick brown fox jumps over the lazy dog. The fox barked at the dog.","output":"from collections import defaultdict text = 'The quick brown fox jumps over the lazy dog. The fox barked at the dog.' words = defaultdict(int) for word in text.split(): if len(word) >= 3: words[word] += 1 print(words)"},{"instruction":"Generate code to generate a linear regression model in Python. Not applicable","output":"import numpy as np from sklearn.linear_model import LinearRegression # Create data x = np.array([[1, 2], [3, 4], [5, 6], [7, 8]]) y = np.array([1, 2, 3, 4]) # Create a Linear regression model model = LinearRegression() model.fit(x, y) # Print coefficients print('Coefficients: {}'.format(model.coef_)) # Predict x_test = np.array([[3, 4], [5, 6]]) y_pred = model.predict(x_test) print('Predictions: {}'.format(y_pred))"},{"instruction":"Design a data structure in Python to store flight information related to an airline. Not applicable","output":"class Flight: def __init__(self, airline, origin, destination, num_passengers, departure_time, arrival_time, flight_number): self.airline = airline self.origin = origin self.destination = destination self.num_passengers = num_passengers self.departure_time = departure_time self.arrival_time = arrival_time self.flight_number = flight_number def main(): # Create flight object flight1 = Flight(\\"Delta\\", \\"New York\\", \\"Los Angeles\\", 20, \\"4:00PM\\", \\"10:00PM\\", \\"DL123\\") if __name__== \\"__main__\\": main()"},{"instruction":"Create a python function that takes a commaseperated string and returns a list of dictionary objects. John, Smith, 25; Polly, King, 22","output":"def create_list(string): entries = string.split(\\";\\") result = [] for entry in entries: info = entry.split(\\", \\") person = { 'name': info[0], 'surname': info[1], 'age': info[2], } result.append(person) return result string = \\"John, Smith, 25; Polly, King, 22\\" result = create_list(string) print(result)"},{"instruction":"Create a Python program that can predict whether an email is spam or not using machine learning algorithms.","output":"import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.linear_model import LogisticRegression from sklearn.preprocessing import StandardScaler from sklearn.metrics import accuracy_score from sklearn.model_selection import train_test_split from sklearn.metrics import confusion_matrix # Read data data = pd.read_csv('/data/spam.csv') X = data.drop(['is_spam'], axis=1) y = data.is_spam # Preprocessing X = StandardScaler().fit_transform(X) # Split the dataset into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create a logistic regression model model = LogisticRegression() model.fit(X_train, y_train) # Predict y_pred = model.predict(X_test) # Evaluate the model score = accuracy_score(y_test, y_pred) print(score)"},{"instruction":"Optimize a function in Python that calculates the sum of numbers from 0 to n. def slow_sum(n): s = 0 for number in range(n+1): s += number return","output":"def fast_sum(n): return ((n+1)*n)/2"},{"instruction":"Edit the following Python program to make the execution time faster by using appropriate data structures and algorithms: def get_prime_numbers(n): prime_numbers = [] for i in range(1, n+1): is_prime = True for j in range(2, i): if i % j == 0: is_prime = False if is_prime: prime_numbers.append(i) return prime_number","output":"def get_prime_numbers(n): prime_numbers = [] is_prime = [True]*(n+1) for i in range(2, n+1): if is_prime[i] == True: prime_numbers.append(i) for j in range(i, n+1, i): is_prime[j] = False return prime_numbers"},{"instruction":"Develop a Python program to check if a given string contains any special characters.","output":"import re def hasSpecialChar(str): return bool(re.search(r'[^A-Za-z0-9]', str))"},{"instruction":"Generate a Python function to calculate windchill.","output":"def calc_windchill(temp, windspeed): \\"\\"\\"Calculates wind chill based on given temperature and wind speed. Args: temp (int, float): Temperature in Celsius windspeed (int, float): Wind speed in km/h Returns: Wind chill in Celsius (int, float) \\"\\"\\" if temp > 10 or windspeed < 4.8: return temp windchill = 13.12 + 0.6215 * temp - 11.37 * windspeed**0.16 + 0.3965 * temp * windspeed**0.16 return windchill"},{"instruction":"Design a class in Python that implements a stack No inpu","output":"class Stack: def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items)"},{"instruction":"Write an Python program to convert Celsius to Fahrenheit. Celsius = 100","output":"def celsius_to_fahrenheit(celsius): fahrenheit = celsius * 9/5 + 32 return fahrenheit celsius = 100 result = celsius_to_fahrenheit(celsius) print(result)"},{"instruction":"Classify the variable x in Python given the following: x = 2 + 4.","output":"x is an integer."},{"instruction":"Construct an AI model to predict stocks in Python.","output":"import pandas as pd import numpy as np import keras # Read the data df = pd.read_csv('stocks.csv') # Extract the features and target features = df.drop(['Name', 'symbol', 'Close'], axis=1).values target = df.Close.values # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42) # Construct a model model = keras.Sequential([ keras.layers.Dense(128, activation='relu'), keras.layers.Dense(32, activation='relu'), keras.layers.Dense(1, activation='linear'), ]) # Compile the model model.compile(optimizer='adam', loss='mse', metrics=['mae']) # Train model model.fit(X_train, y_train, epochs=10) # Evaluate the model test_loss, test_acc = model.evaluate(X_test, y_test) print('Test accuracy:', test_acc)"},{"instruction":"Create a Python script to calculate the sum of the numbers in a list given as input. list = [1, 5, 10, 30]","output":"def sum_list(list): total = 0 for i in list: total += i return total print sum_list(list)"},{"instruction":"Write an algorithm in Python to convert English words to Pig Latin.","output":"def pig_latin(word): vowels = ['a', 'e', 'i', 'o', 'u'] # If the word starts with a consonant, move it to the end, add 'ay' if word[0] not in vowels: return word[1:] + word[0] + 'ay' # If the word starts with a vowel, add 'way' else: return word + 'way' print(pig_latin('pig')) # igpay"},{"instruction":"Using a dictionary, write a program in Python to categorize each list item into a group of the same type. items = [1, 2, ‘a’, ‘b’, 4, 5, ‘c’, ‘d’, 7, 8]","output":"def categorize(items): groups = { 'numbers': [], 'strings': [] } for item in items: if type(item) == int or type(item) == float: groups['numbers'].append(item) else: groups['strings'].append(item) return groups"},{"instruction":"This code implements a BTree and a B+Tree data structure. To use the","output":"#!/usr/bin/env python # -*- coding: utf-8 -*- import bisect import itertools import operator import sys reload(sys) sys.setdefaultencoding('utf-8') class _BNode(object): __slots__ = [\\"tree\\", \\"contents\\", \\"children\\"] def __init__(self, tree, contents=None, children=None): self.tree = tree self.contents = contents or [] self.children = children or [] if self.children: assert len(self.contents) + 1 == len(self.children), \\"one more child than data item required\\" def __repr__(self): name = getattr(self, \\"children\\", 0) and \\"Branch\\" or \\"Leaf\\" return \\"<%s %s>\\" % (name, \\", \\".join(map(str, self.contents))) def lateral(self, parent, parent_index, dest, dest_index): if parent_index > dest_index: dest.contents.append(parent.contents[dest_index]) parent.contents[dest_index] = self.contents.pop(0) if self.children: dest.children.append(self.children.pop(0)) else: dest.contents.insert(0, parent.contents[parent_index]) parent.contents[parent_index] = self.contents.pop() if self.children: dest.children.insert(0, self.children.pop()) def shrink(self, ancestors): parent = None if ancestors: parent, parent_index = ancestors.pop() # try to lend to the left neighboring sibling if parent_index: left_sib = parent.children[parent_index - 1] if len(left_sib.contents) < self.tree.order: self.lateral( parent, parent_index, left_sib, parent_index - 1) return # try the right neighbor if parent_index + 1 < len(parent.children): right_sib = parent.children[parent_index + 1] if len(right_sib.contents) < self.tree.order: self.lateral( parent, parent_index, right_sib, parent_index + 1) return center = len(self.contents) // 2 sibling, push = self.split() if not parent: parent, parent_index = self.tree.BRANCH( self.tree, children=[self]), 0 self.tree._root = parent # pass the median up to the parent parent.contents.insert(parent_index, push) parent.children.insert(parent_index + 1, sibling) if len(parent.contents) > parent.tree.order: parent.shrink(ancestors) def grow(self, ancestors): parent, parent_index = ancestors.pop() minimum = self.tree.order // 2 left_sib = right_sib = None # try to borrow from the right sibling if parent_index + 1 < len(parent.children): right_sib = parent.children[parent_index + 1] if len(right_sib.contents) > minimum: right_sib.lateral(parent, parent_index + 1, self, parent_index) return # try to borrow from the left sibling if parent_index: left_sib = parent.children[parent_index - 1] if len(left_sib.contents) > minimum: left_sib.lateral(parent, parent_index - 1, self, parent_index) return # consolidate with a sibling - try left first if left_sib: left_sib.contents.append(parent.contents[parent_index - 1]) left_sib.contents.extend(self.contents) if self.children: left_sib.children.extend(self.children) parent.contents.pop(parent_index - 1) parent.children.pop(parent_index) else: self.contents.append(parent.contents[parent_index]) self.contents.extend(right_sib.contents) if self.children: self.children.extend(right_sib.children) parent.contents.pop(parent_index) parent.children.pop(parent_index + 1) if len(parent.contents) < minimum: if ancestors: # parent is not the root parent.grow(ancestors) elif not parent.contents: # parent is root, and its now empty self.tree._root = left_sib or self def split(self): center = len(self.contents) // 2 median = self.contents[center] sibling = type(self)( self.tree, self.contents[center + 1:], self.children[center + 1:]) self.contents = self.contents[:center] self.children = self.children[:center + 1] return sibling, median def insert(self, index, item, ancestors): self.contents.insert(index, item) if len(self.contents) > self.tree.order: self.shrink(ancestors) def remove(self, index, ancestors): minimum = self.tree.order // 2 if self.children: # find the smallest in the right subtree, exchange the value with the current node # then delete the smallest one, just like the idea in the binary search tree. # Note: only if len(descendent.contents) > minimum, we do this way in order to avoid 'grow' operation. # Or we will inspect the left tree and do it any way # all internal nodes have both left and right subtree. additional_ancestors = [(self, index + 1)] descendent = self.children[index + 1] while descendent.children: additional_ancestors.append((descendent, 0)) descendent = descendent.children[0] if len(descendent.contents) > minimum: ancestors.extend(additional_ancestors) self.contents[index] = descendent.contents[0] descendent.remove(0, ancestors) return # fall back to the left child, and exchange with the biggest, then delete the biggest anyway. additional_ancestors = [(self, index)] descendent = self.children[index] while descendent.children: additional_ancestors.append( (descendent, len(descendent.children) - 1)) descendent = descendent.children[-1] ancestors.extend(additional_ancestors) self.contents[index] = descendent.contents[-1] descendent.remove(len(descendent.children) - 1, ancestors) else: self.contents.pop(index) if len(self.contents) < minimum and ancestors: self.grow(ancestors) class _BPlusLeaf(_BNode): __slots__ = [\\"tree\\", \\"contents\\", \\"data\\", \\"next\\"] def __init__(self, tree, contents=None, data=None, next=None): self.tree = tree self.contents = contents or [] self.data = data or [] self.next = next assert len(self.contents) == len(self.data), \\"one data per key\\" def insert(self, index, key, data, ancestors): self.contents.insert(index, key) self.data.insert(index, data) if len(self.contents) > self.tree.order: self.shrink(ancestors) def lateral(self, parent, parent_index, dest, dest_index): if parent_index > dest_index: dest.contents.append(self.contents.pop(0)) dest.data.append(self.data.pop(0)) parent.contents[dest_index] = self.contents[0] else: dest.contents.insert(0, self.contents.pop()) dest.data.insert(0, self.data.pop()) parent.contents[parent_index] = dest.contents[0] def split(self): center = len(self.contents) // 2 median = self.contents[center - 1] sibling = type(self)( self.tree, self.contents[center:], self.data[center:], self.next) self.contents = self.contents[:center] self.data = self.data[:center] self.next = sibling return sibling, sibling.contents[0] def remove(self, index, ancestors): minimum = self.tree.order // 2 if index >= len(self.contents): self, index = self.next, 0 key = self.contents[index] # if any leaf that could accept the key can do so # without any rebalancing necessary, then go that route current = self while current is not None and current.contents[0] == key: if len(current.contents) > minimum: if current.contents[0] == key: index = 0 else: index = bisect.bisect_left(current.contents, key) current.contents.pop(index) current.data.pop(index) return current = current.next self.grow(ancestors) def grow(self, ancestors): minimum = self.tree.order // 2 parent, parent_index = ancestors.pop() left_sib = right_sib = None # try borrowing from a neighbor - try right first if parent_index + 1 < len(parent.children): right_sib = parent.children[parent_index + 1] if len(right_sib.contents) > minimum: right_sib.lateral(parent, parent_index + 1, self, parent_index) return # fallback to left if parent_index: left_sib = parent.children[parent_index - 1] if len(left_sib.contents) > minimum: left_sib.lateral(parent, parent_index - 1, self, parent_index) return # join with a neighbor - try left first if left_sib: left_sib.contents.extend(self.contents) left_sib.data.extend(self.data) parent.remove(parent_index - 1, ancestors) return # fallback to right self.contents.extend(right_sib.contents) self.data.extend(right_sib.data) parent.remove(parent_index, ancestors) class BTree(object): BRANCH = LEAF = _BNode def __init__(self, order): self.order = order self._root = self._bottom = self.LEAF(self) def _path_to(self, item): \\"\\"\\" \\"\\"\\" current = self._root ancestry = [] while getattr(current, \\"children\\", None): index = bisect.bisect_left(current.contents, item) ancestry.append((current, index)) if index < len(current.contents) and current.contents[index] == item: return ancestry current = current.children[index] index = bisect.bisect_left(current.contents, item) ancestry.append((current, index)) present = index < len(current.contents) present = present and current.contents[index] == item return ancestry def _present(self, item, ancestors): last, index = ancestors[-1] return index < len(last.contents) and last.contents[index] == item def insert(self, item): current = self._root ancestors = self._path_to(item) node, index = ancestors[-1] while getattr(node, \\"children\\", None): node = node.children[index] index = bisect.bisect_left(node.contents, item) ancestors.append((node, index)) node, index = ancestors.pop() node.insert(index, item, ancestors) def remove(self, item): current = self._root ancestors = self._path_to(item) if self._present(item, ancestors): node, index = ancestors.pop() node.remove(index, ancestors) else: raise ValueError(\\"%r not in %s\\" % (item, self.__class__.__name__)) def __contains__(self, item): return self._present(item, self._path_to(item)) def __iter__(self): def _recurse(node): if node.children: for child, item in zip(node.children, node.contents): for child_item in _recurse(child): yield child_item yield item for child_item in _recurse(node.children[-1]): yield child_item else: for item in node.contents: yield item for item in _recurse(self._root): yield item def __repr__(self): def recurse(node, accum, depth): accum.append((\\" \\" * depth) + repr(node)) for node in getattr(node, \\"children\\", []): recurse(node, accum, depth + 1) accum = [] recurse(self._root, accum, 0) return \\"n\\".join(accum) @classmethod def bulkload(cls, items, order): tree = object.__new__(cls) tree.order = order leaves = tree._build_bulkloaded_leaves(items) tree._build_bulkloaded_branches(leaves) return tree def _build_bulkloaded_leaves(self, items): minimum = self.order // 2 leaves, seps = [[]], [] for item in items: if len(leaves[-1]) < self.order: leaves[-1].append(item) else: seps.append(item) leaves.append([]) if len(leaves[-1]) < minimum and seps: last_two = leaves[-2] + [seps.pop()] + leaves[-1] leaves[-2] = last_two[:minimum] leaves[-1] = last_two[minimum + 1:] seps.append(last_two[minimum]) return [self.LEAF(self, contents=node) for node in leaves], seps def _build_bulkloaded_branches(self, (leaves, seps)): minimum = self.order // 2 levels = [leaves] while len(seps) > self.order + 1: items, nodes, seps = seps, [[]], [] for item in items: if len(nodes[-1]) < self.order: nodes[-1].append(item) else: seps.append(item) nodes.append([]) if len(nodes[-1]) < minimum and seps: last_two = nodes[-2] + [seps.pop()] + nodes[-1] nodes[-2] = last_two[:minimum] nodes[-1] = last_two[minimum + 1:] seps.append(last_two[minimum]) offset = 0 for i, node in enumerate(nodes): children = levels[-1][offset:offset + len(node) + 1] nodes[i] = self.BRANCH(self, contents=node, children=children) offset += len(node) + 1 levels.append(nodes) self._root = self.BRANCH(self, contents=seps, children=levels[-1]) class BPlusTree(BTree): LEAF = _BPlusLeaf def _get(self, key): node, index = self._path_to(key)[-1] if index == len(node.contents): if node.next: node, index = node.next, 0 else: return while node.contents[index] == key: yield node.data[index] index += 1 if index == len(node.contents): if node.next: node, index = node.next, 0 else: return def _path_to(self, item): path = super(BPlusTree, self)._path_to(item) node, index = path[-1] while hasattr(node, \\"children\\"): node = node.children[index] index = bisect.bisect_left(node.contents, item) path.append((node, index)) return path def get(self, key, default=None): try: return self._get(key).next() except StopIteration: return default def getlist(self, key): return list(self._get(key)) def insert(self, key, data): path = self._path_to(key) node, index = path.pop() node.insert(index, key, data, path) def remove(self, key): path = self._path_to(key) node, index = path.pop() node.remove(index, path) __getitem__ = get __setitem__ = insert __delitem__ = remove def __contains__(self, key): for item in self._get(key): return True return False def iteritems(self): node = self._root while hasattr(node, \\"children\\"): node = node.children[0] while node: for pair in itertools.izip(node.contents, node.data): yield pair node = node.next def iterkeys(self): return itertools.imap(operator.itemgetter(0), self.iteritems()) def itervalues(self): return itertools.imap(operator.itemgetter(1), self.iteritems()) __iter__ = iterkeys def items(self): return list(self.iteritems()) def keys(self): return list(self.iterkeys()) def values(self): return list(self.itervalues()) def _build_bulkloaded_leaves(self, items): minimum = self.order // 2 leaves, seps = [[]], [] for item in items: if len(leaves[-1]) >= self.order: seps.append(item) leaves.append([]) leaves[-1].append(item) if len(leaves[-1]) < minimum and seps: last_two = leaves[-2] + leaves[-1] leaves[-2] = last_two[:minimum] leaves[-1] = last_two[minimum:] seps.append(last_two[minimum]) leaves = [self.LEAF( self, contents=[p[0] for p in pairs], data=[p[1] for p in pairs]) for pairs in leaves] for i in xrange(len(leaves) - 1): leaves[i].next = leaves[i + 1] return leaves, [s[0] for s in seps] def main(): bt = BTree(2) l = range(20, 0, -1) bt.insert('박씨') bt.insert('정씨') bt.insert('김씨') bt.insert('이씨') bt.insert('황씨') BP = BPlusTree(bt) BP.insert('박', '박씨') for i in range(0,5): print list(bt)[i] print BP.values()[0] print BP.keys()[0] print BP.items()[0] print BP.get('박씨') #for i, item in enumerate(l): # bt.insert(item) # print list(bt) if __name__ == '__main__': #unittest.main() main()"},{"instruction":"Convert the following pseudocode to a program in Python: If price > 50 Print Expensive Else Print Cheap Not applicable","output":"price = 45 if price > 50: print(\\"Expensive\\") else: print(\\"Cheap\\")"},{"instruction":"Create a recursive Python function to calculate the Fibonacci sequence up to the given number n.","output":"def fibonacci(n): if n <= 1: return n else: return fibonacci(n-1) + fibonacci(n-2)"},{"instruction":"Generate a function in Python to remove the characters within the parentheses. String: 'It was a (big) surprise!'","output":"def remove_parentheses(string): string_list = list(string) is_in_parentheses = False for i in range (len(string_list)): if string_list[i] == '(': is_in_parentheses = True elif string_list[i] == ')': is_in_parentheses = False elif is_in_parentheses: string_list[i] = '' return ''.join(string_list)"},{"instruction":"Generate a python program to generate a random password","output":"import string import random def generate_password(length): password = [] chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + '@#%&*' for i in range(length): password.append(random.choice(chars)) return ''.join(password) if __name__ == '__main__': length = int(input('Enter password length: ')) print(generate_password(length))"},{"instruction":"The given code defines a Python class called RLC that contains methods to draw various circuit elements. To draw a bipole, resistor, potentiometer, capacitor, or inductor, call the corresponding method with the desired parameters. The methods take a parent object, position, value, label, angleDeg, flagVolt, voltName, flagCurr, currName, invertArrows, and convention as parameters. The methods return a group object containing the drawn element.","output":"#!/usr/bin/python import inkscapeMadeEasy_Base as inkBase import inkscapeMadeEasy_Draw as inkDraw class RLC(inkBase.inkscapeMadeEasy): # --------------------------------------------- def drawBipoleGeneral(self, parent, position=[0, 0], value='Z', label='Bipole', angleDeg=0, flagVolt=True, voltName='v', flagCurr=True, currName='i', invertArrows=False, convention='passive'): \\"\\"\\" draws a generic bipole with a rectangle parent: parent object position: position [x,y] value: string with resistor value. (default 'Z') label: label of the object (it can be repeated) angleDeg: rotation angle in degrees counter-clockwise (default 0) flagVolt: indicates whether the voltage arrow must be drawn (default: true) voltName: voltage drop name (default: v) flagCurr: indicates whether the current arrow must be drawn (default: true) currName: current drop name (default: i) invertArrows: invert V/I arrow directions (default: False) convention: passive/active sign convention. available types: 'passive' (default) , 'active' \\"\\"\\" group = self.createGroup(parent, label) elem = self.createGroup(group) inkDraw.line.relCoords(elem, [[15.5, 0]], position) inkDraw.line.relCoords(elem, [[19, 0], [0, -6], [-19, 0], [0, 6]], [position[0] + 15.5, position[1] + 3]) inkDraw.line.relCoords(elem, [[15.5, 0]], [position[0] + 34.5, position[1]]) pos_text = [position[0] + 25, position[1] - 3 - self.textOffset] if inkDraw.useLatex: value = '' + value + '' inkDraw.text.latex(self, group, value, pos_text, fontSize=self.fontSize, refPoint='bc', preambleFile=self.preambleFile) if angleDeg != 0: self.rotateElement(group, position, angleDeg) if flagVolt: if convention == 'passive': self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor, angleDeg=angleDeg, invertArrows=not invertArrows) if convention == 'active': self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor, angleDeg=angleDeg, invertArrows=invertArrows) if flagCurr: self.drawCurrArrow(group, [position[0] + 40, position[1] - 5], name=currName, color=self.currentColor, angleDeg=angleDeg, invertArrows=invertArrows) return group # --------------------------------------------- def drawResistor(self, parent, position=[0, 0], value='R', label='Resistor', angleDeg=0, flagVolt=True, voltName='v', flagCurr=True, currName='i', invertArrows=False, convention='passive'): \\"\\"\\" draws a resistor parent: parent object position: position [x,y] value: string with resistor value. If it ends with 'ohm', 'OHM' or 'Ohm', proper Ohm symbol will be added. (Default 'R') label: label of the object (it can be repeated) angleDeg: rotation angle in degrees counter-clockwise (default 0) flagVolt: indicates whether the voltage arrow must be drawn (default: true) voltName: voltage drop name (default: v) flagCurr: indicates whether the current arrow must be drawn (default: true) currName: current drop name (default: i) invertArrows: invert V/I arrow directions (default: False) convention: passive/active sign convention. available types: 'passive' (default) , 'active' \\"\\"\\" group = self.createGroup(parent, label) elem = self.createGroup(group) inkDraw.line.relCoords(elem, [[15.5, 0], [2, 3], [3, -6], [3, 6], [3, -6], [3, 6], [3, -6], [2, 3], [15.5, 0]], position) pos_text = [position[0] + 25, position[1] - 3 - self.textOffset] if inkDraw.useLatex: value = '' + value + '' inkDraw.text.latex(self, group, value, pos_text, fontSize=self.fontSize, refPoint='bc', preambleFile=self.preambleFile) if angleDeg != 0: self.rotateElement(group, position, angleDeg) if flagVolt: if convention == 'passive': self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor, angleDeg=angleDeg, invertArrows=not invertArrows) if convention == 'active': self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor, angleDeg=angleDeg, invertArrows=invertArrows) if flagCurr: self.drawCurrArrow(group, [position[0] + 40, position[1] - 5], name=currName, color=self.currentColor, angleDeg=angleDeg, invertArrows=invertArrows) return group # --------------------------------------------- def drawPotentiometer(self, parent, position=[0, 0], value='R', label='Potentiometer', angleDeg=0, flagVolt=True, voltName='v', flagCurr=True, currName='i', invertArrows=False, is3T=False, convention='passive'): \\"\\"\\" draws a potentiometer parent: parent object position: position [x,y] value: string with resistor value. label: label of the object (it can be repeated) angleDeg: rotation angle in degrees counter-clockwise (default 0) flagVolt: indicates whether the voltage arrow must be drawn (default: true) voltName: voltage drop name (default: v) flagCurr: indicates whether the current arrow must be drawn (default: true) currName: current drop name (default: i) invertArrows: invert V/I arrow directions (default: False) is3T: indicates the drawPotentiometer has 3 terminals (default:false) convention: passive/active sign convention. available types: 'passive' (default) , 'active' \\"\\"\\" group = self.createGroup(parent, label) elem = self.createGroup(group) # build arrow marker colorBlack = inkDraw.color.defined('black') L_arrow = 2.5 markerPath = 'M 0,0 l -%f,%f l 0,-%f z' % (L_arrow * 1.2, L_arrow / 2.0, L_arrow) markerArrow = inkDraw.marker.createMarker(self, 'BJTArrow', markerPath, RenameMode=1, strokeColor=colorBlack, fillColor=colorBlack, lineWidth=0.6, markerTransform='translate (1,0)') lineStyleArrow = inkDraw.lineStyle.set(lineWidth=1, lineColor=colorBlack, markerEnd=markerArrow) inkDraw.line.relCoords(elem, [[15.5, 0], [2, 3], [3, -6], [3, 6], [3, -6], [3, 6], [3, -6], [2, 3], [15.5, 0]], position) # 2-terminal Potentiometer if is3T: inkDraw.line.relCoords(elem, [[0, -10]], [position[0] + 25, position[1] + 15], lineStyle=lineStyleArrow) pos_text = [position[0] + 25, position[1] - 3 - self.textOffset] else: inkDraw.line.relCoords(elem, [[20, -12]], [position[0] + 15, position[1] + 6], lineStyle=lineStyleArrow) pos_text = [position[0] + 25, position[1] - 6 - self.textOffset] if inkDraw.useLatex: value = '' + value + '' inkDraw.text.latex(self, group, value, pos_text, fontSize=self.fontSize, refPoint='bc', preambleFile=self.preambleFile) if angleDeg != 0: self.rotateElement(group, position, angleDeg) if flagVolt: if is3T: pos = [position[0] + 25, position[1] - 13] invertCurvature = True else: pos = [position[0] + 25, position[1] + 8] invertCurvature = False if convention == 'passive': self.drawVoltArrowSimple(group, pos, name=voltName, color=self.voltageColor, angleDeg=0, invertArrows=invertArrows, invertCurvatureDirection=invertCurvature) if convention == 'active': self.drawVoltArrowSimple(group, pos, name=voltName, color=self.voltageColor, angleDeg=0, invertArrows=not invertArrows, invertCurvatureDirection=invertCurvature) if flagCurr: if is3T: pos = [position[0] + 40, position[1] - 5] else: pos = [position[0] + 42, position[1] - 5] self.drawCurrArrow(group, pos, name=currName, color=self.currentColor, angleDeg=angleDeg, invertArrows=invertArrows) return group # --------------------------------------------- def drawCapacitor(self, parent, position=[0, 0], value='C', label='Capacitor', flagPol=False, angleDeg=0, flagVolt=True, voltName='v', flagCurr=True, currName='i', invertArrows=False, convention='passive'): \\"\\"\\" draws a capacitor parent: parent object position: position [x,y] value: string with value. label: label of the object (it can be repeated) flagPol: draw sign for polarized capacitor angleDeg: rotation angle in degrees counter-clockwise (default 0) flagVolt: indicates whether the voltage arrow must be drawn (default: true) voltName: voltage drop name (default: v) flagCurr: indicates whether the current arrow must be drawn (default: true) currName: current drop name (default: i) invertArrows: invert V/I arrow directions (default: False) convention: passive/active sign convention. available types: 'passive' (default) , 'active' \\"\\"\\" group = self.createGroup(parent, label) elem = self.createGroup(group, label) inkDraw.line.relCoords(elem, [[23, 0]], position) inkDraw.line.relCoords(elem, [[-23, 0]], [position[0] + 50, position[1]]) inkDraw.line.relCoords(elem, [[0, -14]], [position[0] + 23, position[1] + 7]) inkDraw.line.relCoords(elem, [[0, -14]], [position[0] + 27, position[1] + 7]) pos_text = [position[0] + 25, position[1] - 8 - self.textOffset] if inkDraw.useLatex: value = '' + value + '' inkDraw.text.latex(self, group, value, pos_text, fontSize=self.fontSize, refPoint='bc', preambleFile=self.preambleFile) if flagPol: inkDraw.text.write(self, '+', [position[0] + 31, position[1] - 3], group, self.textStyle, fontSize=5) if angleDeg != 0: self.rotateElement(group, position, angleDeg) if flagVolt: if convention == 'passive': self.drawVoltArrow(group, [position[0] + 25, position[1] + 9], name=voltName, color=self.voltageColor, angleDeg=angleDeg, invertArrows=not invertArrows) if convention == 'active': self.drawVoltArrow(group, [position[0] + 25, position[1] + 9], name=voltName, color=self.voltageColor, angleDeg=angleDeg, invertArrows=invertArrows) if flagCurr: self.drawCurrArrow(group, [position[0] + 40, position[1] - 5], name=currName, color=self.currentColor, angleDeg=angleDeg, invertArrows=invertArrows) return group # --------------------------------------------- def drawInductor(self, parent, position=[0, 0], value='L', label='Inductro', angleDeg=0, flagVolt=True, voltName='v', flagCurr=True, currName='i', invertArrows=False, convention='passive'): \\"\\"\\" draws an inductor parent: parent object position: position [x,y] value: string with resistor value. If it ends with 'ohm', 'OHM' or 'Ohm', proper Ohm symbol will be added. (Default 'R') label: label of the object (it can be repeated) angleDeg: rotation angle in degrees counter-clockwise (default 0) flagVolt: indicates whether the voltage arrow must be drawn (default: true) voltName: voltage drop name (default: v) flagCurr: indicates whether the current arrow must be drawn (default: true) currName: current drop name (default: i) invertArrows: invert V/I arrow directions (default: False) convention: passive/active sign convention. available types: 'passive' (default) , 'active' \\"\\"\\" group = self.createGroup(parent, label) elem = self.createGroup(group, label) inkDraw.line.relCoords(elem, [[13, 0]], position) inkDraw.line.relCoords(elem, [[-13, 0]], [position[0] + 50, position[1]]) inkDraw.arc.centerAngStartAngEnd(elem, [position[0] + 16, position[1]], 3.0, 0.0, 180.0, [0, 0], flagOpen=True, largeArc=False) inkDraw.arc.centerAngStartAngEnd(elem, [position[0] + 22, position[1]], 3.0, 0.0, 180.0, [0, 0], flagOpen=True, largeArc=False) inkDraw.arc.centerAngStartAngEnd(elem, [position[0] + 28, position[1]], 3.0, 0.0, 180.0, [0, 0], flagOpen=True, largeArc=False) inkDraw.arc.centerAngStartAngEnd(elem, [position[0] + 34, position[1]], 3.0, 0.0, 180.0, [0, 0], flagOpen=True, largeArc=False) pos_text = [position[0] + 25, position[1] - self.textOffset] if inkDraw.useLatex: value = '' + value + '' inkDraw.text.latex(self, group, value, pos_text, fontSize=self.fontSize, refPoint='bc', preambleFile=self.preambleFile) if angleDeg != 0: self.rotateElement(group, position, angleDeg) if flagVolt: if convention == 'passive': self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor, angleDeg=angleDeg, invertArrows=not invertArrows) if convention == 'active': self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor, angleDeg=angleDeg, invertArrows=invertArrows) if flagCurr: self.drawCurrArrow(group, [position[0] + 40, position[1] - 5], name=currName, color=self.currentColor, angleDeg=angleDeg, invertArrows=invertArrows) return group"},{"instruction":"Design a program in Python that prints out characters of the alphabet AZ in reverse order.","output":"import string alphabet = string.ascii_uppercase for letter in alphabet[::-1]: print(letter)"},{"instruction":"Create a web crawler to search for the given keywords. List of keywords: web crawler, python, programming","output":"import requests from bs4 import BeautifulSoup # Specify a list of keywords keywords = [\\"web crawler\\", \\"python\\", \\"programming\\"] # Loop through the list of keywords for keyword in keywords: page = requests.get(f\\"https://www.google.com/search?q={keyword}\\") # Parse the response using BeautifulSoup soup = BeautifulSoup(page.content, 'html.parser') # Search for the given keyword result_div = soup.find_all('div', attrs = {'class': 'g'}) # Print the results for item in result_div: title = item.find(\\"h3\\").text link = item.find(\\"a\\").get(\\"href\\") print(f\\"Title: {title}\\") print(f\\"Link: {link}\\") print()"},{"instruction":"Create a Python program to generate a random subsample of a given list of items. List: [1,2,3,4,5,6,7,8,9] Sample Size: 4","output":"import random def random_sample(items, sample_size): sample = random.sample(items, sample_size) return sample result = random_sample([1,2,3,4,5,6,7,8,9], 4) print(result)"},{"instruction":"Develop a Python program that takes an array of strings, and returns an object that contains the frequency of each string in the array. [‘a’, ‘a’, ‘b’, ‘a’, ‘c’, ‘a’]","output":"def count_frequency(arr): freq_dict = {} for ele in arr: if ele in freq_dict: freq_dict[ele] += 1 else: freq_dict[ele] = 1 return freq_dict arr = ['a', 'a', 'b', 'a', 'c', 'a'] result = count_frequency(arr) print(result) # Output: {'a': 4, 'b': 1, 'c': 1}"},{"instruction":"Generate a Python program to read in an array of integers and print out the largest two integers. [2, 10, 5, 8, 1]","output":"array = [2, 10, 5, 8, 1] array.sort() print(\\"The largest two integers are:\\") print(array[-1], array[-2])"},{"instruction":"Given two strings, write a Python program to check if one is an anagram of other. listen and sile","output":"def isAnagram(str1, str2): str1_sorted = sorted(str1) str2_sorted = sorted(str2) # Compare sorted strings if str1_sorted == str2_sorted: return True else: return False str1 = \\"listen\\" str2 = \\"silent\\" print(isAnagram(str1, str2))"},{"instruction":"Write a Python function for converting a Fahrenheit temperature to Celsius.","output":"def fahrenheit_to_celsius(temperature): celsius = (temperature - 32) * 5/9 return celsius"},{"instruction":"Create a Python program to aggregate multiple lists containing strings into a single list. [[Apple, Banana, Orange], [Carrots, Broccoli], [Dog, Cat, Rabbit, Fish]]","output":"\\"\\"\\" Aggregate multiple lists containing strings into a single list \\"\\"\\" def aggregate_lists(lists): agg_list = [] for l in lists: agg_list += l return agg_list if __name__ == '__main__': lists = [ [\\"Apple\\", \\"Banana\\", \\"Orange\\"], [\\"Carrots\\", \\"Broccoli\\"], [\\"Dog\\", \\"Cat\\", \\"Rabbit\\", \\"Fish\\"] ] print(aggregate_lists(lists))"},{"instruction":"Create a program in Python that generates a random sequence of 1s and 0s of length 10. Not applicable","output":"import random # Generate a random sequence of 0s and 1s n = 10 random_sequence = \\"\\".join([str(random.randint(0, 1)) for x in range(n)]) print (random_sequence)"},{"instruction":"Generate a python program that implements the insertion sort algorithm. Not applicable","output":"def insertionSort(arr): # Traverse through 1 to len(arr) for i in range(1, len(arr)): key = arr[i] j = i-1 while j >=0 and key < arr[j] : arr[j+1] = arr[j] j -= 1 arr[j+1] = key # Driver code to test above arr = [12, 11, 13, 5, 6] insertionSort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (str(arr[i]) +\\" \\")"},{"instruction":"Given the list of numbers, create a Python program that counts the number of even numbers in the list. [1,2,3,4,5]","output":"def count_evens(nums): count = 0 for n in nums: if n % 2 == 0: count += 1 return count nums = [1,2,3,4,5] print(count_evens(nums)) # prints 2"},{"instruction":"Build a mini classifier model in Python to predict whether a given string is palindrome or not. 'level'","output":"class Palindrome: def __init__(self, str): self.str = str def is_palindrome(self): return self.str == self.str[::-1] palindrome = Palindrome(\\"level\\") if palindrome.is_palindrome(): print(\\"The string is a palindrome\\") else: print(\\"The string is not a palindrome\\")"},{"instruction":"Create a loop in Python to print every permutation of a list of strings. [Hello, World, Foo, Bar]","output":"import itertools # list of strings list_of_strings = [\\"Hello\\", \\"World\\", \\"Foo\\", \\"Bar\\"] # using itertools # to get the permutations permutations = itertools.permutations(list_of_strings) # printing permutations for i in list(permutations): print(i)"},{"instruction":"Write a Python program to return the first prime number greater than 5.","output":"def prime_number(num): while True: is_prime = True for i in range(2,num): if (num % i == 0): is_prime = False if is_prime: return num num += 1 x = prime_number(5) print(x)"},{"instruction":"Create an algorithm in Python to evaluate the performance of a trading strategy. The data input to the algorithm will be a list of closing prices of a stock in the past.","output":"def evaluate_strategy(prices): # Calculate the returns as the ratio of current price to the previous price returns = [] for i in range(1, len(prices)): return_value = (prices[i]/prices[i-1])-1 returns.append(return_value) # Calculate the average return average_return = 0 for i in range(len(returns)): average_return += returns[i] average_return = average_return/len(returns) # Calculate Sharpe Ratio volatility = 0 for i in range(len(returns)): volatility += (returns[i]-average_return)**2 volatility = volatility/(len(returns)-1) volatility = np.sqrt(volatility) sharpe_ratio = average_return/volatility #Calculate Maximum Drawdown max_drawdown = 0 for i in range(1, len(prices)): max_drawdown = max(prices[i]-min(prices[:i+1]), max_drawdown) return average_return, sharpe_ratio, max_drawdown"},{"instruction":"Create a Python plugin that utilizes a machine learning model to improve search results.","output":"import json import numpy as np from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.metrics.pairwise import cosine_similarity class SearchPlugin: def __init__(self, saved_model): \\"\\"\\" Initializes search plugin by loading the saved machine learning model. Parameters ---------- saved_model: str String path of the saved machine learning model. \\"\\"\\" self.model = json.loads(open(saved_model, 'r').read()) def search(self, query): \\"\\"\\" Utilizes the saved machine learning model to improve user query search results. Parameters ---------- query: str String representing user query. Returns ------- results: list List of most relevant search results. \\"\\"\\" # create vector representation of query query_vector = TfidfVectorizer(vocabulary=self.model).transform([query]).toarray() # calculate cosine similarity between query and previously indexed search results sims = cosine_similarity(query_vector, self.model['vector']) # sort results based on cosine similarity sims_sorted_indices = np.argsort(-sims) # return most relevant search results return self.model['result'][sims_sorted_indices]"},{"instruction":"Write an algorithm in Python for finding the minimum element in an array. [3, 4, 12, 19, 5, 17]","output":"def findMin(arr): min = arr[0] for i in range(1, len(arr)): if arr[i] < min: min = arr[i] return min arr = [3, 4, 12, 19, 5, 17] print(findMin(arr))"},{"instruction":"Create a REST API in Python for managing a book library. This API should have endpoints to retrieve all books, find a book by id, create a new book, update an existing book, and delete a book. Not applicable","output":"import flask from flask import Flask, jsonify, request app = Flask(__name__) books = [ {'id': 0, 'title': 'The Lord of the Rings', 'author': 'J. R. R. Tolkien'}, {'id': 1, 'title': 'The Alchemist', 'author': 'Paulo Coelho'}, {'id': 2, 'title': 'The Catcher in the Rye', 'author': 'J. D. Salinger'}, ] @app.route('/books', methods=['GET']) def get_all_books(): return jsonify(books) @app.route('/books/<int:book_id>', methods=['GET']) def get_book_by_id(book_id): book = books[book_id] return jsonify(book) @app.route('/books', methods=['POST']) def create_book(): new_book = { 'id': request.json['id'], 'title': request.json['title'], 'author': request.json['author'] } books.append(new_book) return jsonify(books) @app.route('/books/<int:book_id>', methods=['PUT']) def update_book(book_id): book = books[book_id] book['title'] = request.json['title'] book['author'] = request.json['author'] return jsonify(book) @app.route('/books/<int:book_id>', methods=['DELETE']) def delete_book(book_id): del books[book_id] return jsonify(books) if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Can you write an optimized Python program that multiplies two matrices? A = [[1,2,3], [4,5,6], [7,8,9]] B = [[9,8,7], [6,5,4], [3,2,1]]","output":"def matrixMultiplication(a, b): # Matrix result matrix result = [[0 for x in range(len(a))] for y in range(len(b[0]))] # Iterates through rows and columns of a and b for i in range(len(a)): for j in range(len(b[0])): for k in range(len(b)): # Multiply and add result[i][j] += a[i][k] * b[k][j] return result A = [[1,2,3], [4,5,6], [7,8,9]] B = [[9,8,7], [6,5,4], [3,2,1]] # Prints out the result matrix print(matrixMultiplication(A, B)) # Output: [[30, 24, 18], [84, 69, 54], [138, 114, 90]]"},{"instruction":"Design an API in Python to identify whether a given number is prime or not. Not applicable","output":"def is_prime(n): \\"\\"\\" This function takes a positive integer as an argument and returns a boolean value determining if the number is a prime number or not. \\"\\"\\" if n <= 1: return False for i in range(2, int(n**0.5) + 1): # Use square root optimization if n % i == 0: return False return True"},{"instruction":"Generate a Python function to convert a given time in 24hour format to 12hour AM/PM format.","output":"def convert_time_format(time): \\"\\"\\" Converts a given time in 24-hour format to 12-hour AM/PM format. Args: time (str): The time in 24-hour format. Return: str: The converted time in 12-hour AM/PM format. \\"\\"\\" # Extract the hour and minutes hour, minutes = int(time.split(':')[0]), int(time.split(':')[1]) # Check for Edge Cases if hour > 12: hour -= 12 pm = True elif hour == 0: hour = 12 pm = False elif hour == 12: pm = True else: pm = False # Format the time if minutes < 10: time_formatted = '{}:0{} '.format(hour, minutes) else: time_formatted = '{}:{} '.format(hour, minutes) # Add the PM/AM marker if pm: time_formatted += 'PM' else: time_formatted += 'AM' return time_formatted"},{"instruction":"Write Python code to find the sum of the factorial of a given number. 3","output":"def find_sum_factorial_number(n): sum_num = 0 for i in range(1, n + 1): sum_num += math.factorial(i) return sum_num if __name__ == '__main__': n = int(input('Input a number: ')) print(find_sum_factorial_number(n))"},{"instruction":"Write a function to parse an http header to a python dictionary. http_header = 'Accept: application/jsonnContentType: text/htmlnContentLength: 15n'","output":"\\"\\"\\" Write a function to parse an http header to a python dictionary. \\"\\"\\" # Get the input string http_header = 'Accept: application/jsonnContent-Type: text/htmlnContent-Length: 15n' # Parse the header string to a dictionary def parse_http_header(header): header_dict = {} definition_list = header.split('n') for definition in definition_list: # Skip invalid definitions (ex: \\"\\") if definition == '': continue # Split definition field into key and value (key, value) = definition.split(': ') # Update dictionary header_dict[key] = value return header_dict # Output the result header_dict = parse_http_header(http_header) print(header_dict)"},{"instruction":"Modify the given Python code to be more efficient. def my_function(N): list1 = [] for i in range(N): list2 = [] for j in range(N): list2.append(i+j) list1.append(list2) retur","output":"def my_function(N): list1 = [[i+j for j in range(N)] for i in range(N)] return list1"},{"instruction":"Write a Python program to detect emotion from text. Text = I am so excited about this project","output":"import nltk import numpy as np from nltk.sentiment.vader import SentimentIntensityAnalyzer sentiment_analyzer = SentimentIntensityAnalyzer() test_text = \\"I am so excited about this project\\" scores = sentiment_analyzer.polarity_scores(test_text) emotion = max(scores, key=lambda k: scores[k]) if emotion == 'pos': print('The sentiment conveys positive emotion.') elif emotion == 'neg': print('The sentiment conveys negative emotion.') elif emotion == 'neu': print('The sentiment conveys neutral emotion.') else: print('Unable to detect emotion.')"},{"instruction":"w would you set up a tree structure in Python with three levels and the ability to add nodes to the structure?","output":"class TreeNode: def __init__(self, data): self.data = data self.children = [] def add_child(self, child): self.children.append(child) root = TreeNode(1) level_one = TreeNode(2) level_two = TreeNode(3) root.add_child(level_one) level_one.add_child(level_two)"},{"instruction":"Write a Python program that returns the index of a given item in a given list.","output":"def find_index(item, array): for i in range(len(array)): if array[i] == item: return i"},{"instruction":"Design a function in Python to find the most frequently occurring value in a given array. An array of integers.","output":"def most_frequent_value(array): counter_dict = {} for val in array: if val in counter_dict: counter_dict[val] += 1 else: counter_dict[val] = 1 max_count = 0 frequent_val = 0 for key,val in counter_dict.items(): if val > max_count: max_count = val frequent_val = key return frequent_val"},{"instruction":"Write a Python program to generate a dictionary that contains numbers (between 1 and n) in the form (x, x*x). n = 8","output":"nums = {x: x*x for x in range(1, n+1)} print(nums)"},{"instruction":"The given code is a Python class \`ProcHelper\` that provides a helper for executing processes and commands. To use it, create an instance of the class with the command to execute and any additional arguments. The \`wait\` method can be called on the instance to wait for the process to complete and return the exit code, stdout, and stderr. The \`exec_with_wrapper\` function can be used to execute a command with a wrapper, such as \`cabal exec\` or \`stack exec\`. The \`get_source_dir\` function can be used to get the root of \`hssourcedirs\` for a given filename in a project.","output":"# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- # ProcHelper: Process execution helper class. # -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- import errno import subprocess import os import os.path import SublimeHaskell.sublime_haskell_common as Common import SublimeHaskell.internals.logging as Logging import SublimeHaskell.internals.settings as Settings import SublimeHaskell.internals.utils as Utils import SublimeHaskell.internals.which as Which import SublimeHaskell.internals.cabal_cfgrdr as CabalConfigRdr import SublimeHaskell.internals.cabal_reader as CabalReader class ProcHelper(object): \\"\\"\\"Command and tool process execution helper.\\"\\"\\" # Augmented PATH for the subprocesses and locating executables. augmented_path = None def __init__(self, command, **popen_kwargs): \\"\\"\\"Open a pipe to a command or tool.\\"\\"\\" if ProcHelper.augmented_path is None: ProcHelper.augmented_path = ProcHelper.make_augmented_path() Necessary evil: Don't cache the environment, just update the PATH in the current environment. Why? Because someone could (like me) change os.environ via the ST console and those changes would never make it here. Use case: settting http_proxy so that stack can fetch packages. proc_env = dict(os.environ) proc_env['PATH'] = ProcHelper.augmented_path + os.pathsep + proc_env.get('PATH', '') self.process = None self.process_err = None if Utils.is_windows(): startupinfo = subprocess.STARTUPINFO() startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW popen_kwargs['startupinfo'] = startupinfo # Allow caller to specify something different for stdout or stderr -- provide # the default here if unspecified. popen_kwargs['stdout'] = popen_kwargs.get('stdout', subprocess.PIPE) popen_kwargs['stderr'] = popen_kwargs.get('stderr', subprocess.PIPE) try: normcmd = Which.which(command, proc_env['PATH']) if normcmd is not None: self.process = subprocess.Popen(normcmd, stdin=subprocess.PIPE, env=proc_env, **popen_kwargs) else: self.process = None self.process_err = \\"SublimeHaskell.ProcHelper: {0} was not found on PATH!\\".format(command[0]) except OSError as os_exc: self.process_err = 'n'.join([\\"SublimeHaskell: Problem executing '{0}'\\".format(' '.join(command)) , 'Operating system error: {0}'.format(os_exc) ]) if os_exc.errno == errno.EPIPE: # Most likely reason: subprocess output a usage message stdout, stderr = self.process.communicate() exit_code = self.process.wait() self.process_err = self.process_err + 'n'.join(['' , 'Process exit code: {0}'.format(exit_code) , '' , \\"output:\\" , stdout if stdout else \\"--no output--\\" , '' , 'error:' , stderr if stderr else \\"--no error output--\\"]) self.process = None else: self.process = None raise os_exc # 'with' statement support: def __enter__(self): return self def __exit__(self, _type, _value, _traceback): self.cleanup() return False def cleanup(self): if self.process is not None: self.process.stdin.close() self.process.stdout.close() if self.process.stderr is not None: # stderr can be None if it is tied to stdout (i.e., 'stderr=subprocess.STDOUT') self.process.stderr.close() def wait(self, input_str=None): \\"\\"\\"Wait for subprocess to complete and exit, collect and decode \`\`stdout\`\` and \`\`stderr\`\`, returning the tuple \`\`(exit_code, stdout, stderr)\`\`\`\\"\\"\\" if self.process is not None: stdout, stderr = self.process.communicate(Utils.encode_bytes(input_str if input_str else '')) exit_code = self.process.wait() # Ensure that we reap the file descriptors. self.cleanup() return (exit_code, Utils.decode_bytes(stdout), Utils.decode_bytes(stderr)) return (-1, '', self.process_err or \\"?? unknown error -- no process.\\") # Update the augmented environment when \`add_to_PATH\` or \`add_standard_dirs\` change. @staticmethod def update_environment(_key, _val): # Reinitialize the tool -> path cache: Which.reset_cache() ProcHelper.augmented_path = ProcHelper.make_augmented_path() @staticmethod def make_augmented_path(): ''' Generate the augmented PATH for subprocesses: adds the appropriate cabal/stack local install directory (HOME/.local/bin for *nix, %APPDATA%/local/bin for Windows) and updates PATH with \`add_to_PATH\` extras. ''' std_places = [] if Settings.PLUGIN.add_standard_dirs: std_places.append(\\"HOME/.local/bin\\" if not Utils.is_windows() else \\"%APPDATA%/local/bin\\") if Utils.is_macosx(): std_places.append('HOME/Library/Haskell/bin') std_places += CabalConfigRdr.cabal_config() std_places = [dir for dir in [Utils.normalize_path(path) for path in std_places] if os.path.isdir(dir)] add_to_path = list(filter(os.path.isdir, map(Utils.normalize_path, Settings.PLUGIN.add_to_path))) Logging.log(\\"std_places = {0}\\".format(std_places), Logging.LOG_INFO) Logging.log(\\"add_to_PATH = {0}\\".format(add_to_path), Logging.LOG_INFO) return os.pathsep.join(add_to_path + std_places) @staticmethod def get_extended_path(): if ProcHelper.augmented_path is None: ProcHelper.augmented_path = ProcHelper.make_augmented_path() return ProcHelper.augmented_path + os.pathsep + (os.environ.get('PATH', '')) @staticmethod def run_process(command, input_string='', **popen_kwargs): \\"\\"\\"Execute a subprocess, wait for it to complete, returning a \`\`(exit_code, stdout, stderr)\`\`\` tuple.\\"\\"\\" with ProcHelper(command, **popen_kwargs) as proc: return proc.wait(input_string) def exec_wrapper_cmd(exec_with, cmd_list): wrapper = [] if exec_with == 'cabal': wrapper = ['cabal', 'exec', cmd_list[0]] elif exec_with == 'cabal-new-build': wrapper = ['cabal', 'new-run', 'exe:' + cmd_list[0]] elif exec_with == 'stack': wrapper = ['stack', 'exec', cmd_list[0]] else: errmsg = 'ProcHelper.exec_wrapper_cmd: Unknown execution prefix '{0}''.format(exec_with) raise RuntimeError(errmsg) return wrapper + ['--'] + cmd_list[1:] if cmd_list[1:] else wrapper def exec_with_wrapper(exec_with, install_dir, cmd_list): '''Wrapper function for inserting the execution wrapper, e.g., 'cabal exec' or 'stack exec' :returns: Process object from ProcHelper. ''' proc_args = {} if exec_with is not None: cmd_list = exec_wrapper_cmd(exec_with, cmd_list) if install_dir is not None: proc_args['cwd'] = Utils.normalize_path(install_dir) else: raise RuntimeError('ProcHelper.exec_with_wrapper: invalid install_dir (None)') else: cmd = Which.which(cmd_list[0], ProcHelper.get_extended_path()) if cmd is not None: cmd_list[0] = cmd Logging.log('ProcHelper.exec_with_wrapper: {0} in {1}'.format(cmd_list, proc_args.get('cwd')), Logging.LOG_DEBUG) return ProcHelper(cmd_list, **proc_args) def get_source_dir(filename): '''Get root of hs-source-dirs for filename in project. ''' if not filename: return os.path.expanduser('~') cabal_dir, cabal_proj = Common.locate_cabal_project(filename) if not cabal_dir: # No cabal file -> Punt and assume the source directory for the file and project is the same as the file. return os.path.dirname(filename) else: proj_info = CabalReader.CabalProjectReader(cabal_dir, cabal_proj) cabal_info = proj_info.cabal_info dirs = ['.'] executables = cabal_info.get('executable', {}) dirs.extend([sdir.strip() for exe in executables for sdirs in executables[exe].get('hs-source-dirs', []) for sdir in sdirs.split(',')]) dirs.extend([sdir.strip() for sdirs in cabal_info.get('library', {}).get('hs-source-dirs', []) for sdir in sdirs.split(',')]) paths = [os.path.abspath(os.path.join(cabal_dir, srcdirs)) for srcdirs in set(dirs)] paths.sort(key=lambda p: -len(p)) for path in paths: if filename.startswith(path): return path return os.path.dirname(filename)"},{"instruction":"Write a function in Python to count how many words are in the given string. Do not stand at my grave and weep","output":"def count_words(string): words = string.split(' ') return len(words) sentence = \\"Do not stand at my grave and weep\\" count = count_words(sentence) print(\\"The given string has {} words.\\".format(count))"},{"instruction":"Design a Python program to detect if two strings have the same characters.","output":"def same_chars(str1, str2): if len(str1) != len(str2): return False for i in range(len(str1)): if str1[i] != str2[i]: return False return True"},{"instruction":"Given two strings A and B, construct a Python program to determine if B is a substring of A. A = I am here B = here","output":"def is_substring(A, B): if B in A: return True else: return False"},{"instruction":"Write a commandline program in Python to accept user input and display the sum of all numbers entered. Not applicable","output":"import sys total = 0 for num in sys.argv[1:]: total += int(num) print('The sum of all numbers entered is:', total)"},{"instruction":"Design and implement a Binary Search Tree data structure in Python.","output":"class Node(): def __init__(self, val): self.left = None self.right = None self.val = val class BinaryTree: def __init__(self): self.root = None def addNode(self, val): if self.root == None: self.root = Node(val) else: self._add(val, self.root) def _add(self, val, node): if val < node.val: if node.left is not None: self._add(val, node.left) else: node.left = Node(val) else: if node.right is not None: self._add(val, node.right) else: node.right = Node(val)"},{"instruction":"Write a Python class which implements the QuickSort algorithm.","output":"class QuickSort(object): def __init__(self, array): self.array = array def partition(self, low, high): i = low - 1 pivot = self.array[high] for j in range(low, high): if self.array[j] <= pivot: i = i + 1 self.array[i], self.array[j] = self.array[j], self.array[i] self.array[i + 1], self.array[high] = self.array[high], self.array[i + 1] return i + 1 def quick_sort(self, low, high): if low < high: partition_index = self.partition(low, high) self.quick_sort(low, partition_index - 1) self.quick_sort(partition_index + 1, high)"},{"instruction":"Create a Python script to extract the title of a web page. <url>","output":"import requests from bs4 import BeautifulSoup # Function to extract the title of a web page def extract_title(url): response = requests.get(url) html = response.text soup = BeautifulSoup(html, 'html.parser') return soup.title.string url = 'https://www.example.com' title = extract_title(url) print(title) # Output 'Example Domain'"},{"instruction":"Edit a given Python program such that it returns the optimal solution of a given problem. def solve_problem(input): solution = 0 for i in range(input): solution += input return solutio","output":"def solve_problem(input): solution = 0 for i in range(input): if input < 0: break solution += input input -= 1 return solution"},{"instruction":"Generate a Python program to find all the common elements of two given lists. [1, 2, 3], [3, 4, 5]","output":"def find_common_elements(list1, list2): return list(set(list1).intersection(set(list2))) result = find_common_elements([1, 2, 3], [3, 4, 5]) print(result)"},{"instruction":"Given a list of strings, create a Python program to find the longest common substring strings = [cat,car,hat]","output":"def find_longest_common_substring(strings): if len(strings) == 0: return '' elif len(strings) == 1: return strings[0] else: # sort the strings strings.sort(key=len) # take the first string as longest longest = strings[0] for s in strings: # check if the first string is a substring of the next string if longest in s: # if so, keep the longest longest = s else: # if not, find the longest substring for i in range(len(longest)): if longest[0:len(longest) - i] in s: longest = longest[0:len(longest) - i] break return longest"},{"instruction":"Write a Python program that takes a user input of a number and prints out the corresponding character from the ASCII table. 76","output":"# Python program to get ASCII value of a character c = input('Enter a character: ') # ord() function to get the ASCII value print('The ASCII value of ' + c + ' is', ord(c))"},{"instruction":"Write a Python program that sorts a list of integers in ascending order without using the builtin sort() method. [4, 5, 13, 2, 9, 7]","output":"def selection_sort(arr): n = len(arr) for i in range(n): min_idx = i for j in range(i+1, n): if arr[min_idx] > arr[j]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] arr = [4, 5, 13, 2, 9, 7] selection_sort(arr) print(arr) # Output: [2, 4, 5, 7, 9, 13]"},{"instruction":"mplement an Artificial Neural Network (ANN) model for text classification in Python. Not applicable","output":"import keras from keras.layers import Embedding, SimpleRNN, Dense, Flatten from keras.models import Sequential vocab_size = 5000 # for example embedding_dim = 32 # for example model = Sequential() model.add(Embedding(vocab_size, embedding_dim)) model.add(SimpleRNN(32)) # for example model.add(Dense(1, activation='sigmoid')) model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc']) model.fit(x_train, y_train, epochs=10, batch_size=32)"},{"instruction":"Write a Python program to iterate through a given list of integers and output the maximum value. [1,5,2,3,8,9]","output":"max_value = 0 for value in [1,5,2,3,8,9]: if value > max_value: max_value = value print(max_value) # Output: 9"},{"instruction":"Generate a Python program that will take two lists of integers as input and return a new list with the pairwise sums of the two inputs. List 1: 1,2,3,4 List 2: 4,5,6,7","output":"def pairwise_sum(l1, l2): result = [] for x, y in zip(l1, l2): result.append(x + y) return result #Example Usage list_1 = [1,2,3,4] list_2 = [4,5,6,7] sums = pairwise_sum(list_1, list_2) print(sums) # [5,7,9,11]"},{"instruction":"Write a Python program to find the sum of all values in a nested dictionary. d = {a:1, b:2, c:{d:3, e: 4}}","output":"def get_sum(data): \\"\\"\\"get the sum of all values in a nested dictionary\\"\\"\\" sum = 0 for key, value in data.items(): if type(value) is int: sum += value else: sum += get_sum(value) return sum d = {\\"a\\":1, \\"b\\":2, \\"c\\":{\\"d\\":3, \\"e\\": 4}} print(get_sum(d)) # Output: 10"},{"instruction":"Create a python program to rotate a list of numbers by a given number. [1,2,3,4,5]","output":"def rotate_list(nums, n): return nums[n:] + nums[:n]"},{"instruction":"mplement a Python class that calculates factorial of a number.","output":"class Factorial: def __init__(self,n): self.n=n def fact(self): f=1 while self.n>0: f*=self.n self.n-=1 return f num =int(input('Enter the number: ')) obj = Factorial(num) print('Factorial of ',num,' is: ',obj.fact())"},{"instruction":"Assuming a Python class Point for representing a point in a two dimensional plane with x and y as its field variables, write a method to calculate the distance from a point to the origin. class Point: def __init__(self, x=0, y=0): self.x = x self.y = y","output":"class Point: def __init__(self, x=0, y=0): self.x = x self.y = y def distance_from_origin(self): return ((self.x ** 2) + (self.y ** 2)) ** 0.5"},{"instruction":"Create a Python program to generate a random password with at least 8 characters, of which at least one lowercase, one uppercase, one numeric, and one special character. Not applicable","output":"import string import random def generate_password(): characters = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(characters) for i in range(8)) lowercase = [c for c in password if c.islower()] uppercase = [c for c in password if c.isupper()] digits = [c for c in password if c.isdigit()] special = [c for c in password if c in string.punctuation] if len(lowercase) == 0 or len(uppercase) == 0 or len(digits) == 0 or len(special) == 0: return generate_password() return password print(generate_password())"},{"instruction":"Design a function in Python that takes a string and a search term and returns the count of matches of the search term within the target string. targetString = the quick brown fox jumped over the lazy dog searchTerm = the","output":"def countSearchTerm(targetString, searchTerm): count = 0 currentIndex = targetString.find(searchTerm) while (currentIndex != -1): count += 1 currentIndex = targetString.find(searchTerm, currentIndex + len(searchTerm)) return count"},{"instruction":"Generate a class in Python to represent a circle with radius and diameter properties.","output":"class Circle: def __init__(self, radius): self.radius = radius self.diameter = 2 * self.radius @property def radius(self): return self.__radius @radius.setter def radius(self, radius): self.__radius = radius self.diameter = 2 * self.radius"},{"instruction":"Create a web API in Python Flask to compare two numerical values and return the greater one. value1 = 10 value2 = 20","output":"from flask import Flask, jsonify, request app = Flask(__name__) @app.route('/compare', methods=['POST']) def compare(): data = request.get_json() value1 = data['value1'] value2 = data['value2'] greater_value = max(value1, value2) return jsonify({'greater_value': greater_value}) if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Write a Python program to efficiently delete all items from a set that are in another set. A = {1, 2, 3, 4, 5} B = {2, 4}","output":"A = {1, 2, 3, 4, 5} B = {2, 4} A -= B"},{"instruction":"Write a Python program to find the sum of all odd numbers up to a given number.","output":"def find_sum(n): sum = 0 for i in range(1, n + 1): if i % 2 != 0: sum += i return sum n = 10 print(\\"Sum of odd numbers from 1 to\\", n, \\"is\\", find_sum(n))"},{"instruction":"Create a web scraper using Python that can scrape a simple, singlepage website and return the data. https://www.example.com/","output":"from urllib.request import Request, urlopen from bs4 import BeautifulSoup request = Request('https://www.example.com/') response = urlopen(request) html_doc = response.read() soup = BeautifulSoup(html_doc, 'html.parser') # Get the title of the web page title_tag = soup.find('title') print('Title:', title_tag.string) # Get the list of headlines headline_tags = soup.find_all('h2') headlines = [headline_tag.string for headline_tag in headline_tags] print('Headlines:', headlines) # Get the list of links link_tags = soup.find_all('a') links = [link_tag['href'] for link_tag in link_tags] print('Links:', links)"},{"instruction":"Create an application in Python which will take an array of numbers and returns the median. [3, 4, 9, 6, 5]","output":"def get_median(arr): arr.sort() n = len(arr) if n % 2 == 0: return (arr[n//2] + arr[n//2 - 1])/2 else: return arr[n//2] if name == \\"main\\": arr = [3, 4, 9, 6, 5] print(get_median(arr)) # Output -> 5.5"},{"instruction":"Write a function in Python to find the top k words in a given document. This is a document it contains some words and a lot of phrases. k = 2","output":"from collections import Counter def topKWords(doc, k): words = doc.split() counts = Counter(words).most_common(k) return [word for word,_ in counts] doc = \\"This is a document it contains some words and a lot of phrases.\\" k = 2 print(topKWords(doc, k))"},{"instruction":"Develop a Python function that performs bubble sort to sort an array of numbers","output":"def bubble_sort(array): n = len(array) for i in range(n): for j in range(0, n - i - 1): if array[j] > array[j + 1]: array[j], array[j + 1] = array[j + 1], array[j] return array"},{"instruction":"Create a Python file and import the following modules: math, PIL.Image, PIL.ImageDraw, django.http.HttpResponse, django.http.Http404, and django.shortcuts.render_to_response. Define a variable named google_dist and set it equal to 20037508.34. Define a function named leaflet_polygon_options that takes a boundary argument. Inside the function, count the number of Leaflet objects that have a leafletconstituency__constituency__boundary attribute equal to the boundary argument and store it in a variable named n. Return a dictionary with keys fill and outline and values that are the result of calling the leaflet_colour function with the n argument and (0,0,0,170), respectively. Define a function named leaflet_popup that takes a boundary argument. Inside the function, create a list of tuples named party_list where each tuple has a Party object and a queryset of Leaflet objects that have a leafletconstituency__constituency__boundary attribute equal to the boundary argument and a publisher_party attribute equal to the Party object. Use a list comprehension to generate the Party objects by filtering the Party model for objects that have a leaflet__leafletconstituency__constituency__boundary attribute equal to the boundary argument, then sort the resulting queryset by the name attribute, and remove duplicates using the distinct method. Append to the party_list a tuple with a dictionary with a name key and Uncategorised value and a queryset of Leaflet objects that have a leafletconstituency__constituency__boundary attribute equal to the boundary argument and a publisher_party attribute equal to None if there are any such Leaflet objects. Return a tuple with a string boundaries/leaflets.html and a dictionary with keys constituency and party_list and values equal to the boundary.constituency attribute and the party_list variable, respectively. Define a function named leaflet_colour that takes an n argument. Inside the function, calculate a logarithm of n+1 with base 2 and store it in a variable named r. Return a tuple of four integers that are the result of applying mathematical operations to r and constants. Define a function named leaflet_keyvalues that returns a list of integers. Define a dictionary named maps with a key leaflets and a value that is a dictionary with keys polygon_options, template, colour, and keyvalues and values that are the leaflet_polygon_options function, a tuple with a string boundaries/leaflets.html and the leaflet_popup function, the leaflet_colour function, and the leaflet_keyvalues function, respectively. Define a function named getDBzoom that takes a z argument. Inside the function, check if the integer value of z is greater than 10. If it is, return 10. Otherwise, return the integer value of z. Define a function named view_key that takes a request, mapname, n, x, and y arguments. Inside the function, create an Image object with RGBA mode and dimensions equal to x and y arguments, and a color that is the result of calling the colour function of the maps[mapname] dictionary with the integer value of n argument. Create an HttpResponse object with image/png mimetype. Save the Image object to the HttpResponse object with PNG format and return the HttpResponse object. Define a function named view_map that takes a request and mapname arguments. Inside the function, import the settings module from the django.conf package. Return a render_to_response function with a string boundaries/map.html and a dictionary with keys MEDIA_URL, mapname, and keyvalues and values that are the settings.MEDIA_URL attribute, the mapname argument, and the keyvalues attribute of the maps[mapname] dictionary, respectively. Define a function named tile that takes a request, mapname, tz, tx, ty, tilex, and tiley arguments. Inside the function, get the options attribute of the maps[str(mapname)] dictionary. Calculate the west, south, east, and north coordinates of the tile using the getTileRect function with tx, ty, and tz arguments. Calculate the zoom variable as 2 to the power of the float value of tz argument. Create an Image object with RGBA mode and dimensions equal to (256, 256) and a color that is a tuple of four integers that represent a transparent color. Create an ImageDraw object with the Image object. Calculate the dbz variable as the result of calling the getDBzoom function with the integer value of tz argument. Filter the Boundary model for objects that have a zoom attribute equal to dbz variable and south, north, east, and west attributes that satisfy certain conditions. Iterate over the resulting queryset and for each object, get the polygon_options attribute of the options dictionary by calling the polygon_options function with the Boundary object as an argument. Evaluate the boundary attribute of the Boundary object and store it in a variable named coords. Create an empty list named l. Iterate over the coords variable and for each tuple of coordinates, calculate the x and y variables using mathematical operations and append a tuple of two integers to the l list. Draw a polygon with the l list and the polygon_options attribute of the options dictionary using the ImageDraw object. Delete the ImageDraw object. Create an HttpResponse object with image/png mimetype. Save the Image object to the HttpResponse object with PNG format and return the HttpResponse object. Define a function named popup that takes a request, mapname, x, y, and z arguments. Inside the function, get the options attribute of the maps[str(mapname)] dictionary. Calculate the x and y variables as float values of x and y arguments, respectively. Calculate the dbz variable as the result of calling the getDBzoom function with the z argument. Filter the Boundary model for objects that have a zoom attribute equal to the integer value of dbz argument and south, north, east, and west attributes that satisfy certain conditions. Iterate over the resulting queryset and for each object, evaluate the boundary attribute and store it in a variable named coords. Create a boolean variable named inside and set it to False. Iterate over the coords variable and for each pair of consecutive tuples of coordinates, check if the y variable is between the vy0 and vy1 variables of the tuples and if the x variable is less than a certain value calculated using mathematical operations. If the conditions are satisfied, toggle the inside variable. If the inside variable is True, return a render_to_response function with arguments that are the result of calling the template attribute of the options dictionary with the Boundary object as an argument. Raise an Http404 exception if the inside variable is False after iterating over all the objects. Define a function named to_google that takes x and tilesAtThisZoom arguments. Inside the function, calculate a certain value using mathematical operations and return it. Define a function named getTileRect that takes xt, yt, and zoomt arguments. Inside the function, calculate the zoom, x, and y variables as integer values of zoomt, xt, and yt arguments, respectively. Calculate the tilesAtThisZoom variable as 2 to the power of zoom variable. Calculate the west, south, east, and north coordinates of the tile using the to_google function with x, tilesAtThisZoom arguments and certain mathematical operations. Return a tuple of four float values that represent the west, south, east, and north coordinates of the tile.","output":"import math from PIL import Image, ImageDraw from django.http import HttpResponse, Http404 from django.shortcuts import render_to_response from boundaries.models import Boundary from parties.models import Party from leaflets.models import Leaflet google_dist = 20037508.34 def leaflet_polygon_options(boundary): n = Leaflet.objects.filter(leafletconstituency__constituency__boundary = boundary).count() return {\\"fill\\": leaflet_colour(n), \\"outline\\": (0,0,0,170)} def leaflet_popup(boundary): party_list = [( p, Leaflet.objects.filter( leafletconstituency__constituency__boundary=boundary, publisher_party = p)) for p in Party.objects.filter( leaflet__leafletconstituency__constituency__boundary=boundary) .distinct().order_by('name')] unclassified_leaflets = Leaflet.objects.filter( leafletconstituency__constituency__boundary=boundary, publisher_party = None) if unclassified_leaflets: party_list = party_list + [({\\"name\\": \\"Uncategorised\\"}, unclassified_leaflets)] return \\"boundaries/leaflets.html\\", {\\"constituency\\": boundary.constituency, \\"party_list\\": party_list } def leaflet_colour(n): r = math.log((n+1), 2) return (int(50 + r * 16), int(255 - r * 32), int(100 + r * 16), int(32 + r * 32)) def leaflet_keyvalues(): return [0,2,5,10,20,50,100,200] maps = {\\"leaflets\\": {\\"polygon_options\\": leaflet_polygon_options, \\"template\\": leaflet_popup, \\"colour\\": leaflet_colour, \\"keyvalues\\": leaflet_keyvalues()} } def getDBzoom(z): if int(z) > 10: return 10 else: return int(z) def view_key(request, mapname=None, n=None, x=None, y=None): image = Image.new(\\"RGBA\\", (int(x), int(y)), maps[mapname][\\"colour\\"](int(n))) response = HttpResponse(mimetype=\\"image/png\\") image.save(response, \\"PNG\\") return response def view_map(request, mapname): from django.conf import settings return render_to_response(\\"boundaries/map.html\\", {\\"MEDIA_URL\\":settings.MEDIA_URL, \\"mapname\\": mapname, \\"keyvalues\\":maps[mapname][\\"keyvalues\\"]}) def tile(request, mapname, tz=None, tx=None, ty=None, tilex=256, tiley = 256): options = maps[str(mapname)] west, south, east, north = getTileRect(tx, ty, tz) zoom = 2 ** float(tz) tx = float(tx) ty = float(ty) image = Image.new(\\"RGBA\\", (256, 256), (0, 0, 0, 0)) draw = ImageDraw.Draw(image) dbz = getDBzoom(tz) boundaries_within = Boundary.objects.filter(zoom=dbz, south__lt=north, north__gt=south, east__gt=west, west__lt=east) for boundary in boundaries_within: polygon_options = options[\\"polygon_options\\"](boundary) coords = eval(boundary.boundary) l = [] for lng, lat in coords: x = 256 * (lng - west) / (east - west) y = 256 * (lat - north) / (south - north) l.append((int(x), int(y))) draw.polygon(l, **polygon_options) del draw response = HttpResponse(mimetype=\\"image/png\\") image.save(response, \\"PNG\\") return response def popup(request, mapname, x=None, y=None, z=None): options = maps[str(mapname)] x = float(x) y = float(y) dbz = getDBzoom(z) possible_boundaries = Boundary.objects.filter(zoom=int(dbz), south__lt=y, north__gt=y, east__gt=x, west__lt=x) for boundary in possible_boundaries: coords = eval(boundary.boundary) inside = False for (vx0, vy0), (vx1, vy1) in zip(coords, coords[1:] + coords[:1]): if ((vy0>y) != (vy1>y)) and (x < (vx1-vx0) * (y-vy0) / (vy1-vy0) + vx0): inside = not(inside) if inside: return render_to_response(*options[\\"template\\"](boundary)) raise Http404 def to_google(x, tilesAtThisZoom): return google_dist * (1 - 2 * float(x) / tilesAtThisZoom) def getTileRect(xt, yt, zoomt): zoom = int(zoomt) x = int(xt) y = int(yt) tilesAtThisZoom = 2 ** zoom return (-to_google(x, tilesAtThisZoom), to_google(y + 1, tilesAtThisZoom), -to_google(x + 1, tilesAtThisZoom), to_google(y, tilesAtThisZoom))"},{"instruction":"Write a Python program using the SciPy library to solve the given equation. 3x 2y + z = 5","output":"from scipy.optimize import fsolve #define the equation def equation(p): x, y, z = p return (3*x - 2*y + z - 5) #solve the equation result = fsolve(equation, (1, 1, 1)) #Print the result print(result)"},{"instruction":"Generate a Python function for computing the maximum value of two numbers.","output":"def find_max_value(num1, num2): if num1 > num2: return num1 else: return num2"},{"instruction":"Create a script in Python to replace all occurrences of a character in a string with another character. string = This is an example","output":"def replace_char(string, char1, char2): new_string = \\"\\" for char in string: if char == char1: new_string += char2 else: new_string += char return new_string string = \\"This is an example\\" new_string = replace_char(string, \\"s\\", \\"z\\") print(new_string) # Output: Thiz iz an example"},{"instruction":"Optimize the following python code to make it run faster. def sum_of_squares(n): s = 0 for i in range(n): s += i * i return","output":"def sum_of_squares(n): # Use summation formula to optimize the code return (n * (n + 1) * (2 * n + 1)) // 6"},{"instruction":"Write a Python function to take the given list and return its elements joined into a single string.","output":"def join_list(lst): return \\" \\".join(lst)"},{"instruction":"Construct an objectoriented Python program for the following purpose. Create a program to convert currency from one form to another.","output":"class Converter: def __init__(self, base_currency): self.base_currency = base_currency self.rates = self.get_rates() def get_rates(self): # code to get the exchange rates from a web API def convert(self, target_currency, amount): return amount / self.rates[target_currency] * self.rates[self.base_currency] if __name__ == '__main__': converter = Converter(\\"USD\\") converted_amount = converter.convert(\\"EUR\\", 100) print(converted_amount)"},{"instruction":"Generate a python statements to insert an item at a specific index in a list. list = [1, 2, 4, 5] item = 3 index = 2","output":"list.insert(index, item)"},{"instruction":"Can you write a python program to identify the last index of a given element in a list? The list [2, 5, 9, 2, 4] and the element 2","output":"# Define the list list_ = [2, 5, 9, 2, 4] # Find the last index of element 2 last_index = len(list_) - list_[::-1].index(2) - 1 # Print the result print(last_index)"},{"instruction":"Generate a Python script to detect the most frequent word in a sentence.","output":"def most_frequent_word(s): words = s.split() freq_word = words[0] freq_count = 1 for i in range(1, len(words)): if words[i] == freq_word: freq_count += 1 else: if freq_count > 1: freq_word = words[i] freq_count = 1 return freq_word"},{"instruction":"Design a Python program to convert text to Pig Latin Hello, world!","output":"def textToPigLatin(text): words = text.split() new_words = [] for word in words: if word[0] in 'aeiou': new_word = word + 'ay' else: new_word = word[1:] + word[0] + 'ay' new_words.append(new_word) return \\" \\".join(new_words) print(textToPigLatin(\\"Hello, world!\\"))"},{"instruction":"Given a list of integer values, write a Python program to find the number of consecutive values that are increasing. numbers = [1, 2, 3, 4, 9, 8, 7, 6]","output":"count = 0 for i in range(len(numbers) - 1): if numbers[i] < numbers[i + 1]: count += 1 print(count)"},{"instruction":"Develop an AI prediction model for a given dataset in Python. dataset.csv columns=[X1,X2....Xn, Y]","output":"import pandas as pd import numpy as np # Read data from csv data = pd.read_csv('dataset.csv') # Separate features and target X = data.iloc[:, 0:-1].values Y = data.iloc[:, -1].values # Train-test split from sklearn.model_selection import train_test_split X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.20, random_state=0) # Feature Scaling from sklearn.preprocessing import StandardScaler sc_X = StandardScaler() X_train = sc_X.fit_transform(X_train) X_test = sc_X.transform(X_test) # Train a model from sklearn.linear_model import LinearRegression regressor = LinearRegression() regressor.fit(X_train, Y_train) # predict Y_pred = regressor.predict(X_test)"},{"instruction":"Given an email list, write a python program to sort the list alphabetically ['bob@example.com', 'alice@example.com', 'jane@google.com', 'mary@example.com']","output":"def sort_list(list_of_emails): list_of_emails.sort() return list_of_emails print(sort_list(['bob@example.com', 'alice@example.com', 'jane@google.com', 'mary@example.com']))"},{"instruction":"Compose a Python program that reads in a string and finds the position of the longest alphabetical substring abcbcd","output":"def longest_alphabet(string): max_length = 0 start_pos = 0 for x in range(len(string)): current_start_pos = x current_length = 0 for y in range(x, len(string)): if string[y] >= string[y-1]: current_length += 1 else: break if current_length > max_length: max_length = current_length start_pos = current_start_pos return start_pos"},{"instruction":"Given a list, write a Python function to separate the odd numbers from the even numbers. numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","output":"def separate_odd_even(numbers): odd_numbers = [] even_numbers = [] for num in numbers: if num % 2 == 0: even_numbers.append(num) else: odd_numbers.append(num) return odd_numbers, even_numbers"},{"instruction":"Create a Python script that prints the number of unique characters in a given string and their frequency. Hello World","output":"inputString = \\"Hello World\\" freq = {} for ch in inputString: if ch in freq: freq[ch] += 1 else: freq[ch] = 1 for key, value in freq.items(): print (key + \\" has a frequency of \\" + str(value))"},{"instruction":"Create an Objectoriented Python program that can accept a user’s name and salary as input and return the corresponding tax to be paid. Name: John Doe Salary: 45000","output":"class User: def __init__(self, name, salary): self.name = name self.salary = salary def get_tax(self): if self.salary < 12500: return 0 elif self.salary >= 12500 and self.salary < 50000: return (self.salary - 12500) * 0.2 else: return (self.salary - 50000) * 0.45 + 7500 user_name = input('Name: ') salary = int(input('Salary: ')) user = User(user_name, salary) print('Tax to be paid: %s' % user.get_tax())"},{"instruction":"Write a Python program to identify the elements in a list that are present in another given list. list1 = [1, 4, 5, 6, 7] list2 = [2, 3, 5, 6, 7]","output":"def identifyElements(list1, list2): # create a set from list1 set1 = set(list1) # create a set from list2 set2 = set(list2) # store the common elements in result result = [] # check for each element of list2 if it is present in set1 for element in set2: if element in set1: result.append(element) return result list1 = [1, 4, 5, 6, 7] list2 = [2, 3, 5, 6, 7] result = identifyElements(list1, list2) print(\\"Common Elements :\\",result) # Output: Common Elements: [5, 6, 7]"},{"instruction":"Create a Python script to play a game of Noughts and Crosses. Not applicable","output":"# Constants for the game X = \\"X\\" O = \\"O\\" EMPTY = None class NoughtsAndCrosses: def __init__(self): self.board = [[EMPTY, EMPTY, EMPTY], [EMPTY, EMPTY, EMPTY], [EMPTY, EMPTY, EMPTY]] # Player X goes first self.turn = X # Total number of moves played self.count = 0 def move(self, row, col): # Validate move if self.board[row][col] != EMPTY: return # Apply move self.board[row][col] = self.turn # Update turn and move count if self.turn == X: self.turn = O else: self.turn = X self.count += 1 def game_over(self): # Check for a draw if self.count == 9: return True # Check for a winner for i in range(0, 3): # Check Horizontal if self.board[i][0] == self.board[i][1] == self.board[i][2] != EMPTY: return True # Check Vertical if self.board[0][i] == self.board[1][i] == self.board[2][i] != EMPTY: return True # Check Diagonal if self.board[0][0] == self.board[1][1] == self.board[2][2] != EMPTY: return True if self.board[0][2] == self.board[1][1] == self.board[2][0] != EMPTY: return True return False # Print board def display_board(self): print('---' * 3) for row in self.board: print('|', end=\\" \\") for cell in row: if cell == EMPTY: print(' ', end=\\" | \\") elif cell == X: print('X', end=\\" | \\") else: print('O', end=\\" | \\") print('') print('---' * 3) game = NoughtsAndCrosses() # Game loop while not game.game_over(): game.display_board() row = int(input(\\"Row: \\")) col = int(input(\\"Column: \\")) game.move(row, col) print(\\"Game over!\\") game.display_board()"},{"instruction":"Write a Python program to extract the text from an HTML document. <h2>Hello World!</h2>","output":"from bs4 import BeautifulSoup html = '<h2>Hello World!</h2>' soup = BeautifulSoup(html, 'html.parser') text = soup.find('h2').text print(text) # Hello World!"},{"instruction":"Create a Python script that creates a report for analysis. data = [1,2,3,4,5]","output":"def create_report(data): \\"\\"\\" Creates a report for analysis. Args: data: the data to use for analysis. Returns: report: the generated report. \\"\\"\\" report = \\"\\" report += \\"Data Analysis Reportnn\\" report += \\"Data Points: {}nn\\".format(data) report += \\"Average: {}n\\".format(sum(data)/len(data)) report += \\"Maximum: {}n\\".format(max(data)) report += \\"Minimum: {}n\\".format(min(data)) return report data = [1,2,3,4,5] report = create_report(data) print(report)"},{"instruction":"Generate a complete python code to print the output shown. I love Pytho","output":"print(\\"I love Python\\")"},{"instruction":"Write an algorithm using Python that calculates the prime factors of an input number.","output":"def prime_factorize(x): if x == 1: return [] i = 2 prime_factors = [] while x > 1: if x % i == 0: prime_factors.append(i) x= x / i else: i += 1 return prime_factors prime_factorize(10) # Output: [2, 5]"},{"instruction":"Write a Python program to find the optimal route for a delivery person given a set of delivery stops. Stops = [(0, 0), (1, 2), (3, 1), (3, 4)]","output":"import itertools def find_optimal_route(stops): # Create a list of all possible routes routes = list(itertools.permutations(stops)) # Calculate the distance for each route distances = [] for route in routes: total_distance = 0 # Compute the distance from i to i+1 for i in range(len(route) - 1): x1, y1 = route[i] x2, y2 = route[i+1] total_distance += ((x1-x2)**2 + (y1-y2)**2) ** 0.5 distances.append(total_distance) # Return the route with the minimum distance min_index = distances.index(min(distances)) return routes[min_index] stops = [(0, 0), (1, 2), (3, 1), (3, 4)] optimal_route = find_optimal_route(stops) # [(0, 0), (3, 1), (1, 2), (3, 4)]"},{"instruction":"Construct an algorithm in Python to compute the sum of a array of numbers. [3,5,1,2]","output":"def compute_sum(arr): # Initialize sum sum = 0 # Compute sum for num in arr: sum += num # Return the sum return sum # Testing arr = [3,5,1,2] print(compute_sum(arr))"},{"instruction":"Given a list of integers, write a Python program to compute the maximum difference between any two numbers of the list? [4, 8, 2, 10, 6]","output":"def max_difference(numbers): max_diff = 0 for i in range(len(numbers)-1): for j in range(i+1, len(numbers)): cur_diff = abs(numbers[i] - numbers[j]) if cur_diff > max_diff: max_diff = cur_diff return max_diff result = max_difference([4, 8, 2, 10, 6]) print(result)"},{"instruction":"This code is a terminal tool to make time interval measures using the Tektronix FCA3103. To use it, run the main function and provide the following arguments: function or f: Measuring Function, choose between 'mtint' and 'tint' interval or t: Time between samples, an integer samples or s: Number of samples, an integer, default is 1 debug or d: Enable debug output, a boolean, default is False device or l: Device port, an integer, default is 1 output or o: Output data file, a string ref or r: Input channel for the reference, an integer, choose between 1 and 2, default is 1 trigl or g: Input trigger level, a float, default is 1.5 skip or i: Ignore values far from mean plus error, an integer, default is 0 tstamp or x: Add timestamping for each measure, a boolean, default is False.","output":"#! /usr/bin/env python3 # -*- coding: utf-8 -* ''' Terminal tool to make Time Interval measures using the Tektronix FCA3103 @file @date Created on Sep. 16, 2015 @author Felipe Torres (torresfelipex1<AT>gmail.com) @copyright LGPL v2.1 ''' # ----------------------------------------------------------------------------| # GNU LESSER GENERAL PUBLIC LICENSE | # ------------------------------------ | # This source file is free software; you can redistribute it and/or modify it | # under the terms of the GNU Lesser General Public License as published by the| # Free Software Foundation; either version 2.1 of the License, or (at your | # option) any later version. This source is distributed in the hope that it | # will be useful, but WITHOUT ANY WARRANTY; without even the implied warrant | # of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser | # General Public License for more details. You should have received a copy of | # the GNU Lesser General Public License along with this source; if not, | # download it from http://www.gnu.org/licenses/lgpl-2.1.html | # ----------------------------------------------------------------------------| # ----------------------------------------------------------------------------- # Import -- # ----------------------------------------------------------------------------- import datetime import argparse as arg from subprocess import check_output from FCA3103 import FCA3103 def main() : ''' Tool for automatize the control of Tektronix FCA3103 Timer/Counter ''' parser = arg.ArgumentParser(description='Tektronix FCA3103 tool') parser.add_argument('--function', '-f', help='Measuring Function', choices=['mtint','tint'], required=True) parser.add_argument('--interval', '-t', help='Time between samples', type=int) parser.add_argument('--samples', '-s', help='Number of samples', type=int, default=1) parser.add_argument('--debug', '-d', help=\\"Enable debug output\\", action=\\"store_true\\", default=False) parser.add_argument('--device', '-l', help=\\"Device port\\", type=int, default=1) parser.add_argument('--output', '-o', help='Output data file', type=str) parser.add_argument('--ref', '-r', help='Input channel for the reference',type=int, choices=[1,2],default=1) parser.add_argument('--trigl','-g',help='Input trigger level', type=float, default=1.5) parser.add_argument('--skip','-i',help='Ignore values far from mean plus error',type=int, default=0) parser.add_argument('--tstamp','-x', help='Add timestamping for each measure',action=\\"store_true\\", default=False) args = parser.parse_args() valid_port = False ports = check_output([\\"\\"\\"ls /dev | grep usbtmc\\"\\"\\"],shell=True)[:-1] for p in ports.splitlines(): p = p.decode('utf-8') if int(p[-1]) == args.device: valid_port = True if not valid_port: print(\\"No device found at /dev/usbtmc%d\\" % (args.device)) exit(6) # No such device or address device = FCA3103(args.device, args.ref, 2 if args.ref == 1 else 1) device.show_dbg = args.debug device.t_samples = args.interval device.n_samples = args.samples device.skip_values = True if args.skip > 0 else False device.error = args.skip # TODO: Add de posibility of using different trigger values for the inputs device.trig_level[0] = device.trig_level[1] = args.trigl # try: if args.function == 'mtint': print(\\"Measuring Mean Time Interval between the inputs (%d secs)...\\" % (args.samples)) mean = device.mean_time_interval(args.samples, args.interval) print(\\"Mean Time Interval for %d samples: %g\\" % (args.samples, mean)) elif args.function == 'tint': print(\\"Measuring Time Interval between the inputs (%d secs)...\\" % (args.samples+10)) values = device.time_interval(args.samples, tstamp=args.tstamp) if args.output: with open(args.output,'a+') as file: file.write(\\"# Time Interval Measurement (%d samples) with Tektronix FCA3103 (50ps)n\\" % args.samples) file.write(\\"# %sn\\" % datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S')) for v in values: if args.tstamp: file.write(\\"%gt%gn\\" % (v[0], v[1])) else: file.write(str(v)) file.write(\\"n\\") print(\\"Output writed to '%s'\\" % (args.output)) else: print(\\"Time Interval Measurement (%d samples) with Tektronix FCA3103 (50ps)\\" % args.samples) print(\\"%sn\\" % datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S')) for v in values: print(v) # except Exception as e: # print(e) if __name__ == \\"__main__\\" : main()"},{"instruction":"Create a python class which will contain all the necessary methods to implement the str method.","output":"class MyClass: def __init__(self, *args): self.args = args def __str__(self): return 'MyClass({})'.format(', '.join(str(arg) for arg in self.args))"},{"instruction":"Can you write a Python program that takes a list of strings as an argument and returns the list with all elements sorted by their length? ['Cat','Dog','Elephant','Horse']","output":"def sort_by_length(strings): return sorted(strings, key=len)"},{"instruction":"Write a Python program to store a dataset of students with their name, age, and grade. [{'Name':'Bob','Age': 18, 'Grade':'A'}, {'Name':'Alice','Age': 17, 'Grade':'B'}]","output":"students = [{'Name':'Bob','Age': 18, 'Grade':'A'}, {'Name':'Alice','Age': 17, 'Grade':'B'}] class Student: def __init__(self,name, age, grade): self.name = name self.age = age self.grade = grade def setName(self,name): self.name = name def setAge(self,age): self.age = age def setGrade(self,grade): self.grade = grade def getName(self): return self.name def getAge(self): return self.age def getGrade(self): return self.grade def storeDataSet(students): data_set = [] for student in students: s = Student(student['Name'],student['Age'],student['Grade']) data_set.append(s) return data_set data = storeDataSet(students)"},{"instruction":"Create a neural network in Python that can recognize handwritten numbers.","output":"import tensorflow as tf # Build the model model = tf.keras.Sequential() model.add(tf.keras.layers.Conv2D(filters=16, kernel_size=(3,3), activation='relu', input_shape=(28, 28, 1))) model.add(tf.keras.layers.MaxPooling2D(2,2)) model.add(tf.keras.layers.Dropout(0.2)) model.add(tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu')) model.add(tf.keras.layers.MaxPooling2D(2,2)) model.add(tf.keras.layers.Dropout(0.2)) model.add(tf.keras.layers.Flatten()) model.add(tf.keras.layers.Dense(64, activation='relu')) model.add(tf.keras.layers.Dropout(0.2)) model.add(tf.keras.layers.Dense(10, activation='softmax')) # Compile the model model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"},{"instruction":"Create an asynchronous function in Python for processing a list of tasks. The task should complete one item from the list, and then pass that item to another function to be processed. Not applicable","output":"async def process_tasks(tasks, fn): for task in tasks: await fn(task) def process_task(task): # Do something with task print(task) my_tasks = ['task_1', 'task_2', 'task_3'] asyncio.run(process_tasks(my_tasks, process_task))"},{"instruction":"Modify the following Python program to make it run faster by optimizing the code. # This code takes a list of integers and finds the 2nd biggest def find_2nd_largest(l): biggest = 1 2nd_biggest = 1 for i in l: if i > biggest: 2nd_biggest = biggest biggest = i elif i > 2nd_biggest: 2nd_biggest = i return 2nd_bigge","output":"def find_2nd_largest(l): biggest = max(l) l.remove(biggest) 2nd_biggest = max(l) return 2nd_biggest"},{"instruction":"Create a todo list for programming tasks for the next week.","output":"1. Complete pending assignments. 2. Review algorithms. 3. Update the portfolio website. 4. Attend a programming workshop. 5. Start working on a Machine Learning project. 6. Read some articles on JavaScript. 7. Create a web application using Node.js. 8. Practice solving programming puzzles. 9. Write a program for sorting an array. 10. Research on different AI technologies. 11. Write a blog post on recent web development trends. 12. Participate in hackathons. 13. Build a basic chatbot using Python. 14. Try to implement a Genetic Algorithm. 15. Learn a new programming language. 16. Make an interactive website using HTML, CSS and JavaScript. 17. Update skills by working on an open source project. 18. Create a machine learning model to classify images. 19. Work on an Android application."},{"instruction":"Find a way to split the string below into an array of length 3. string = Python is a great language","output":"string = \\"Python is a great language\\" arr = string.split(' ', 3) print(arr)"},{"instruction":"Create a data visualization dashboard for a Stock Market prediction application using Python and D3.js. Not applicable","output":"import pandas as pd import numpy as np from bokeh.plotting import figure, show, output_file from bokeh.models import ColumnDataSource, Div from bokeh.embed import components # read the data df = pd.read_csv('Data.csv') # create a ColumnDataSource source = ColumnDataSource(data=df) # create a figure and add the line graph with markers p = figure(plot_width=1000, plot_height=600) p.line('x', 'y', source=source, line_width=2, color='blue') p.circle('x', 'y', source=source, size=7, color='orange') # create a Div object to add the title div = Div(text='<h1>Stock Market Prediction Dashboard</h1>') # finally show the p and the div components p.add_layout(Div) show(p) # generate the script and div html elements script, div = components(p)"},{"instruction":"Provide a Python program that sorts a list of strings based on the length of the strings. [banana, apple, watermelon]","output":"my_list = [\\"banana\\", \\"apple\\", \\"watermelon\\"] my_list.sort(key=len) # my_list is now [\\"apple\\", \\"banana\\", \\"watermelon\\"]"},{"instruction":"Design an algorithm in Python that will allow a user to input 1 or more numbers and then returns the smallest number. 12, 24, 9","output":"# define the algorithm def find_min_num(nums): # declare a variable to hold the minimum number min_num = float('inf') # iterate over the numbers for num in nums: # if the number is smaller than the current minimum if num < min_num: # replace it min_num = num # once out of the loop, return the minimum number return min_num # call the algorithm min_num = find_min_num([12, 24, 9]) print(min_num) # output: 9"},{"instruction":"Design a class in Python that can be used to store the data of a book in a library.","output":"class Book: def __init__(self, title, author, pages): self.title = title self.author = author self.pages = pages self.available = True def checkout(self): self.available = False def return_book(self): self.available = True"},{"instruction":"Create a Python program to calculate the Fibonacci sequence upto the nth term.","output":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b"},{"instruction":"Generate a valid python program to calculate the frequency of occurrence of a character in a given string. Hello World!","output":"def char_frequency(string): frequencies = {} for char in string: if char in frequencies: frequencies[char] += 1 else: frequencies[char] = 1 return frequencies freq = char_frequency(\\"Hello World!\\") print(freq)"},{"instruction":"Generate a function in Python that takes a list of strings and a integer, and returns a new list with the strings that have length greater than or equal to the given integer. [Java, C++, Swift, Python, Kotlin], 4","output":"def filter_within_length(strings, length): result = [] for string in strings: if len(string) >= length: result.append(string) return result strings = [\\"Java\\", \\"C++\\", \\"Swift\\", \\"Python\\", \\"Kotlin\\"] result = filter_within_length(strings, 4) print(result)"},{"instruction":"Create a Python script that detects a cycle in a linked list. head > 1 > 2 > 3 > 4 > 5 > 6 > 3","output":"def detect_cycle(head): # Use two pointers, one slow and one fast, to detect a cycle slow = fast = head # Init with head while slow and fast and fast.next: slow = slow.next # Move slow one node ahead fast = fast.next.next # Move fast two node ahead if slow == fast: # Detect cycle return True return False"},{"instruction":"Generate a correct python program to classify a dataset using kmeans. Dataset contains eight features with 600 data points.","output":"import numpy as np from sklearn.cluster import KMeans # Read data points data_points = np.genfromtxt('data.csv', delimiter=',') # Create a k-means object kmeans_model = KMeans(n_clusters=3, random_state=0) # Fit the model kmeans_model.fit(data_points) # Get the labels labels = kmeans_model.labels_ # Print the labels for each data point for label in labels: print(label)"},{"instruction":"Develop a Python program to join two given sets.","output":"def union_sets(set_one, set_two): union_set = set_one | set_two return union_set"},{"instruction":"Develop a function in Python to perform linear search on a given array and return the position of the target element. arr = [10, 50, 30, 20, 11], target = 20","output":"def linear_search(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 arr = [10, 50, 30, 20, 11] target = 20 index = linear_search(arr, target) if index != -1: print(\\"Element found at index\\", index) else: print(\\"Element is not present in the array\\")"},{"instruction":"Create a custom sorting algorithm in Python that sorts a list of integers from highest to lowest. int_list = [8, 5, 9, 3, 4, 6]","output":"def custom_sort(int_list): for i in range(len(int_list)): for j in range(i+1, len(int_list)): if int_list[i] < int_list[j]: int_list[i], int_list[j] = int_list[j], int_list[i] return int_list int_list = [8, 5, 9, 3, 4, 6] sorted_list = custom_sort(int_list) print(\\"Sorted list: \\", sorted_list)"},{"instruction":"mplement a binary search algorithm in Python.","output":"def binary_search(array, target): left = 0 right = len(array) - 1 while left <= right: middle = (left + right) // 2 if array[middle] == target: return middle elif array[middle] < target: left = middle + 1 else: right = middle - 1 return -1"},{"instruction":"Create a class in Python that will take two parameters (a, b) and return a * b.","output":"class Multiplier: def __init__(self, a, b): self.a = a self.b = b def calculate(self): return self.a * self.b multiplier = Multiplier(8, 11) print(multiplier.calculate())"},{"instruction":"Utilize an existing ML algorithm in Python to classify a given dataset.","output":"#Import necessary packages from sklearn.svm import SVC from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score #Split data into X and y X = dataset[:,:-1] y = dataset[:,-1] #Split data into test and train X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) #Initiate and fit the algorithm clf = SVC(kernel=\\"linear\\") clf.fit(X_train, y_train) #Make predictions with the trained model y_pred = clf.predict(X_test) #Calculate accuracy of the algorithm accuracy = accuracy_score(y_test, y_pred) print(\\"Accuracy: {}\\".format(accuracy))"},{"instruction":"Create a Python program that can generate random passwords using the given criteria? Password length: 8 Include at least one lowercase character Include at least one uppercase character Include at least one number","output":"import random def generate_password(length): upper_case_characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' lower_case_characters = 'abcdefghijklmnopqrstuvwxyz' numbers = '0123456789' chars = upper_case_characters + lower_case_characters + numbers password = '' secure_random = random.SystemRandom() for c in range(length): password += secure_random.choice(chars) return password print(generate_password(8))"},{"instruction":"Write a Python script to find out the sum of all the divisors of a given number. 16","output":"def divisor_sum(n): sum = 0 for i in range(1, n+1): if n % i == 0: sum += i return sum n = 16 result = divisor_sum(n) print(result)"},{"instruction":"Write a Python code that would solve a sudoku puzzle using Python.","output":"def sudoku(board): # Check if the board is full if not any(None in sublist for sublist in board): return True # Find empty cells for i in range(len(board)): for j in range(len(board[0])): if board[i][j]==None: for k in range(1,10): board[i][j]=k # Try to solve the board if sudoku(board): return True # Backtrack and try with different # values board[i][j]=None return False"},{"instruction":"Create a CLI program in Python that takes two arguments, multiplies them together and prints out the result. Not applicable","output":"import argparse parser = argparse.ArgumentParser() parser.add_argument('number1', type=int, help='First number to multiply') parser.add_argument('number2', type=int, help='Second number to multiply') args = parser.parse_args() result = args.number1 * args.number2 print(result)"},{"instruction":"Create a Python program to remove all whitespaces from a string. This is a string with whitespaces","output":"def remove_whitespace(s): return s.replace(\\" \\", \\"\\") print(remove_whitespace(\\"This is a string with whitespaces\\"))"},{"instruction":"Design a class in Python to represent a grocery store.","output":"class GroceryStore: def __init__(self, name, products, location): self.name = name self.products = products self.location = location def get_all_products(self): return self.products def get_location(self): return self.location"},{"instruction":"Generate a program to find all the prime numbers between 1100 and 1300 in Python.","output":"def is_prime(n): if n==2 or n==3: return True if n%2==0 or n<2: return False for i in range(3,int(n**0.5)+1,2): if n%i==0: return False return True def find_prime_numbers(start, end): primes = [] for num in range(start,end + 1): if is_prime(num): primes.append(num) return primes print(find_prime_numbers(1100, 1300)) # Output: [1103, 1105, 1107, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297]"},{"instruction":"Write a Python program that automates the process of password validation.","output":"def password_validation(password): if(len(password) < 8): return False elif not any(char.isdigit() for char in password): return False elif not any(char.isupper() for char in password): return False elif not any(char.islower() for char in password): return False else: return True"},{"instruction":"Build a Python program that takes two numbers as inputs and prints the summation of both numbers. 3 and 4","output":"# Python program to add two numbers # This function adds two numbers def add_two_numbers(num1, num2): return num1 + num2 # Take input from the user number1 = 3 number2 = 4 # Add two numbers sum = add_two_numbers(number1, number2) # Print the sum print(\\"Sum of the two numbers is:\\", sum)"},{"instruction":"Write a script in Python that can determine if a year is a leap year or not.","output":"def is_leap(year): if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0: return True else: return False"},{"instruction":"Create a Python program to parse a CSV string and print each row in a readable format. CSVString = John Doe, 22, ABC Street, 07777nMary Smith, 26, XYZ Street, 02222","output":"import csv csvString = \\"John Doe, 22, ABC Street, 07777nMary Smith, 26, XYZ Street, 02222\\" # Convert CSV String to List csvList = csvString.split('n') # Print each Row of CSV for row in csvList: print(row)"},{"instruction":"Write a Python program to find the common elements between two lists list1: [2, 4, 6, 8] list2: [4, 6, 10, 12]","output":"def common_elements(list1, list2): # Make a copy of list list_copy = list2[:] # Iterate the original list for item in list1: if item in list_copy: list_copy.remove(item) # Return the common elements return list(set(list1) & set(list2))"},{"instruction":"mplement a simple ML algorithm in Python for binary classification. Not applicable","output":"import numpy as np # Define sigmoid function def sigmoid(x): return 1 / (1 + np.exp(-x)) # Define input data X = np.array([[1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]) # Define output data y = np.array([[1], [0], [0], [1]]) # Initialize weights randomly weights = np.random.rand(3,1) # Define learning rate learning_rate = 0.1 # Preparing variables for gradient descent m = len(y) predictions = sigmoid(np.dot(X, weights)) # Calculate cost cost = (- 1 / m) * np.sum(y * np.log(predictions) + (1 - y) * (np.log(1 - predictions))) # Calculate gradient gradient = (1 / m) * np.dot(X.T, (predictions - y)) # Update weights weights -= learning_rate * gradient # Make predictions predictions = np.round(sigmoid(np.dot(X, weights))) # Print predictions print(predictions)"},{"instruction":"Write a classifier model in Python that predicts the age group of a given person by taking the date of birth as the input 05/07/2000","output":"import datetime class AgeClassifierModel: def __init__(self): self.young_age_threshold = 19 self.adult_age_threshold = 44 def predict(self, dob): today = datetime.date.today() age = today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day)) if age < self.young_age_threshold: return \\"Young\\" elif age < self.adult_age_threshold: return \\"Adult\\" else: return \\"Senior\\" if __name__ == '__main__': dob = datetime.date(2000, 7, 5) model = AgeClassifierModel() print(model.predict(dob))"},{"instruction":"Suggest a completion for the following Python code so that it prints the characters in a string in reverse order. my_str = Hello World for i","output":"my_str = \\"Hello World\\" for i in range(len(my_str)-1, -1, -1): print(my_str[i], end=\\"\\")"},{"instruction":"Compose an editor program, in Python code, to remove all the duplicate words from a given sentence. sentence = This is a a random sentence with with repeated words","output":"def remove_duplicates(sentence): words = sentence.split() words_without_duplicates = [] for i in words: if i not in words_without_duplicates: words_without_duplicates.append(i) return \\" \\".join(words_without_duplicates)"},{"instruction":"Create a program to print the following pattern using nested for loops in Python.","output":"for i in range(5): for j in range(i): print(\\"*\\", end=\\"\\") print(\\"\\")"},{"instruction":"Write a Python program to generate a digital clock using the curses library. Not applicable","output":"import curses def main(screen): clock = curses.newwin(5, 40, 0, 0) clock.box() while True: clock.addstr(1, 1, time.ctime()) clock.refresh() time.sleep(1) curses.wrapper(main)"},{"instruction":"Create a function in Python to delete all elements from a list which are divisible by 5. [1, 10, 15, 20, 25]","output":"def delete_divisible_by_5(my_list): new_list = [] for i in my_list: if i % 5 != 0: new_list.append(i) return new_list # Test my_list = [1, 10, 15, 20, 25] new_list = delete_divisible_by_5(my_list) print(\\"List after deletion: \\" + str(new_list))"},{"instruction":"Generate a program written in Python that takes in two numbers from the user and prints out the greatest common divisor of the two. Not applicable","output":"def GCD(a, b): # base case if (a == 0): return b if (b == 0): return a # a is greater if (a > b): return GCD(a % b, b) else: return GCD(a, b % a) # Driver Program a = 98 b = 56 if(GCD(a, b)): print('GCD of', a, 'and', b, 'is', GCD(a, b)) else: print('not found')"},{"instruction":"mprove the security of an existing Python web application by implementing a tokenbased authentication system. An example of an existing Python web application.","output":"import uuid import hashlib # Example of an existing Python web application. class User: def __init__(self, username, password): self.username = username self.password = self.__encrypt_password(password) self.token = None def __encrypt_password(self, password): return hashlib.sha256(password.encode('utf-8')).hexdigest() def generate_token(self): self.token = uuid.uuid4().hex return self.token # Authentication system class Authentication: def __init__(self, users): self.users = users def validate_user(self, username, token): user = self.__find_user_by_username(username) return user.token == token def __find_user_by_username(self, username): for user in self.users: if user.username == username: return user \`\`\`"},{"instruction":"Write a Python program to find the most common element in an array. [3, 4, 2, 3, 5, 3, 2, 3]","output":"def most_common_element(arr): frequency = 0 most_common = None for element in arr: count = arr.count(element) if count > frequency: frequency = count most_common = element return most_common print(most_common_element([3, 4, 2, 3, 5, 3, 2, 3]))"},{"instruction":"Create a Python script to detect if a number is prime. 10","output":"def is_prime(n): if n <= 1: return False for i in range(2, n): if n % i == 0: return False return True if __name__ == \\"__main__\\": n = 10 if is_prime(n): print(\\"{} is a prime number\\".format(n)) else: print(\\"{} is not a prime number\\".format(n))"},{"instruction":"Create a Python 3 program that prints out the numbers from 1 to 10 in reverse order.","output":"for i in range(10, 0, -1): print(i)"},{"instruction":"Generate a class in Python, implementing the __init__ and __str__ methods to initialize a variable and print its value. name = John Doe","output":"class Person: def __init__(self, name): self.name = name def __str__(self): return self.name p = Person('John Doe') print(p)"},{"instruction":"Write a function in Python that takes in a string and returns the number of uppercase and lowercase letters. This Is A Test String","output":"def count_uppercase_lowercase(s): lowercase_count = 0 uppercase_count = 0 for c in s: if c.isupper(): uppercase_count+=1 elif c.islower(): lowercase_count+=1 return uppercase_count, lowercase_count uppercase_count, lowercase_count = count_uppercase_lowercase(\\"This Is A Test String\\") print(\\"Number of Uppercase letters : \\", uppercase_count) print(\\"Number of Lowercase letters : \\", lowercase_count)"},{"instruction":"Create a Python dictionary that stores the number of occurrences of each character in a string. s = Hello World!","output":"def countCharacters(s): # Create empty dictionary chars_dict = {} # Iterate over each character in the string for char in s: # If the character is not in the dictionary, set the value to 1 if char not in chars_dict: chars_dict[char] = 1 # Otherwise, increment the value else: chars_dict[char] += 1 return chars_dict"},{"instruction":"Design a python class that contains an array of objects.","output":"class ArrayObjects: def __init__(self): self.obj_array = [] # Adds an object to array. def add_object(self, obj): self.obj_array.append(obj) # Deletes an object from array. def delete_object(self, obj): self.obj_array.remove(obj) # Indexes an object in array. def index_object(self, index): return self.obj_array[index] # Returns the size of the array. def array_size(self): return len(self.obj_array)"},{"instruction":"Create a GPT model that takes a Python program and outputs a C# program with the same functionality. Not applicable","output":"The GPT model could be used to convert between programming languages, such as from Python to C#. The model would be trained on pairs of programs written in two different languages with the same functionality. The model would then be used to automatically convert a Python program into the equivalent in C#."},{"instruction":"Write a Python program to generate all the prime numbers between two given numbers.","output":"def prime_num_generator(start, end): prime_list = [] for num in range(start, end + 1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: prime_list.append(num) return prime_list"},{"instruction":"Create an API using Python Flask that returns a list of customer data fetched from a database. The API should be able to handle requests with query parameters to filter the results based on customer name. Not applicable","output":"\\"\\"\\" Flask API to return customer data \\"\\"\\" import sqlite3 from flask import Flask, jsonify, request, g DATABASE = 'customer_database.db' app = Flask(__name__) def get_db(): db = getattr(g, '_database', None) if db is None: db = g._database = sqlite3.connect(DATABASE) return db @app.teardown_appcontext def close_connection(exception): db = getattr(g, '_database', None) if db is not None: db.close() @app.route('/customers', methods=['GET']) def get_customers(): query_parameters = request.args sqlCursor = get_db().cursor().execute(\\"SELECT * FROM customers\\") customers = [dict(zip([key[0] for key in sqlCursor.description], row)) for row in sqlCursor.fetchall()] if len(query_parameters) > 0: customers = filter_customers(customers, query_parameters) return jsonify(customers) def filter_customers(customers, query_parameters): filtering_params = {} for param in query_parameters: if param not in ['name']: return \\"Input not valid\\" filtering_params[param] = query_parameters[param] filtered_customers = [] for customer in customers: for key in filtering_params.keys(): if customer[key] == filtering_params[key]: filtered_customers.append(customer) return filtered_customers if __name__ == \\"__main__\\": app.run(host=\\"localhost\\", port=5000, debug=True)"},{"instruction":"Using Python, write a script to detect any outliers in the given dataset. Data points: [3, 5, 7, 8, 9, 2, 10, 11, 12, 60]","output":"import numpy as np def detect_outliers(data): outliers = [] data = np.array(data) mean = np.mean(data) std = np.std(data) for i in data: z_score = (i - mean) / std if np.abs(z_score) > 3: outliers.append(i) return outliers"},{"instruction":"Write a Python function that joins two lists of different sizes in an alternating fashion. list1 = [1, 3, 5, 7, 9] list2 = [2, 4, 6, 8]","output":"def joinLists(list1, list2): mergedList = [] for i in range(max(len(list1), len(list2))): if i < len(list1): mergedList.append(list1[i]) if i < len(list2): mergedList.append(list2[i]) return mergedList"},{"instruction":"Develop a program to convert JSON objects to Python dictionaries.","output":"import json def json_to_dict(json_obj): return json.loads(json_obj)"},{"instruction":"Create a Python program to convert a currency from one denomination to another. amount: 27 source: USD destination: USD","output":"def convert_currency(amount, source, destination): source_rate = 1.00 destination_rate = 1.00 result = 0.0 # Get exchange rates from external API # ... result = (source_rate * amount) / destination_rate return result amount = 27 source = 'USD' destination = 'EUR' result = convert_currency(amount, source, destination) print(result) # Output: 23.838 EUR"},{"instruction":"Create a Python function that takes two parameters, an array and a search query and returns the indices of the array where the element matches with the search query. arr = [1, 2, 5, 3, 4] searchQuery = 3","output":"def searchIndex(arr, searchQuery): indices = [] for i in range(len(arr)): if arr[i] == searchQuery: indices.append(i) return indices arr = [1, 2, 5, 3, 4] searchQuery = 3 result = searchIndex(arr, searchQuery) print(result)"},{"instruction":"Build a python program to extract only the unique words from the following sentence. sentence = I like to play soccer and i like to play basketball","output":"def extract_unique_words(sentence): words_list = sentence.split() unique_words_list = set(words_list) return unique_words_list"},{"instruction":"Create a basic Python program to generate a random password. The program should generate a password with 8 characters that includes at least 1 uppercase letter, 1 lowercase letter, 1 number and 1 symbol of your choosing. Not applicable","output":"import random import string def generate_password(): upper_case = list(string.ascii_uppercase) lower_case = list(string.ascii_lowercase) symbols = ['!', '@', '#', '', '%', '^', '&', '*'] numbers = list(range(10)) chars = upper_case + lower_case + symbols + numbers password = '' for _ in range(8): password += random.choice(chars) return password password = generate_password() print(password)"},{"instruction":"Develop an algorithm to recognize a palindrome string.","output":"#!/usr/bin/env python def isPalindrome(str): # Loop through the string # and check for the characters # from the beginning and end. for i in range(0, int(len(str)/2)): if str[i] != str[len(str)-i-1]: return False return True # Driver Code s = \\"level\\" a = isPalindrome(s) if a == 1: print(\\" Yes, it is Palindrome\\") else: print(\\"No, it is not palindrome\\")"},{"instruction":"Create a python code to classify the given dataset into two classes based on the income. import pandas as pd df = pd.DataFrame({'salary':[45000, 48000, 50000, 55000, 60000], 'education':[1, 1, 2, 2, 3]})","output":"import pandas as pd from sklearn.svm import SVC df = pd.DataFrame({'salary':[45000, 48000, 50000, 55000, 60000], 'education':[1, 1, 2, 2, 3]}) # Define the features and target X = df[['salary', 'education']] y = [0, 0, 0, 1, 1] # Train the classifier clf = SVC() clf.fit(X, y) # Predict a sample sample = [[49000, 1], [59000,3]] print(clf.predict(sample))"},{"instruction":"Write a python program to evaluate the expressions of the form x op y (op is any of the +,,*,/,%)","output":"def evaluate_expr(expr): op, x, y = expr.split() if op == '+' : return float(x) + float(y) if op == '-' : return float(x) - float(y) if op == '*' : return float(x) * float(y) if op == '/' : return float(x) / float(y) if op == '%': return float(x) % float(y)"},{"instruction":"Refactor a Python program to concatenate two strings without using the string.concat() function // Python program str1 = Hello str2 = World result = str1.concat(str2) print(Concatenated string: , result)","output":"str1 = \\"Hello \\" str2 = \\"World\\" result = str1 + str2 print(\\"Concatenated string: \\", result)"},{"instruction":"Create a program in Python to convert a given number of days to years, months and days.","output":"def convert_to_ymd(days): years = days // 365 months = (days % 365) // 30 days = (days % 365) % 30 return years, months, days"},{"instruction":"Create a program in Python that takes a collection of numbers as input and calculates their mean. [1, 4, 6, 8, 12]","output":"def calculate_mean(nums): mean = 0 for num in nums: mean += num mean /= len(nums) return mean"},{"instruction":"Can you construct a python program to generate the Fibonacci series of size 10?","output":"def generateFibonacciSeries(n): # Create an array with 0 and 1 fibArray =[0, 1] counter = 2 while counter < n: fibArray.append(fibArray[counter-1] + fibArray[counter-2]) counter+=1 return fibArray n = 10 print(generateFibonacciSeries(n))"},{"instruction":"Create a Python program to iterate through a dictionary and print out all the values. {a:1, b:2, c:3, d:4}","output":"my_dict = {\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4} for key, value in my_dict.items(): print(value)"},{"instruction":"Create a string reverse function in Python.","output":"def string_reverse(string): return string[::-1] print(string_reverse(\\"Hello world!\\"))"},{"instruction":"Write a Python class to represent a person and it should have attributes such as name, age, and gender.","output":"class Person: def __init__(self,name,age,gender): self.name = name self.age = age self.gender = gender def get_name(self): return self.name def get_age(self): return self.age def get_gender(self): return self.gender"},{"instruction":"Write a Python program to parse a JSON response and extract the data. { employees: [ { id: 1, firstName: John, lastName: Doe }, { id: 2, firstName: Jane, lastName: Doe } ] }","output":"import json data = '{\\"employees\\":[ {\\"id\\":1,\\"firstName\\":\\"John\\",\\"lastName\\":\\"Doe\\"}, {\\"id\\":2,\\"firstName\\":\\"Jane\\",\\"lastName\\":\\"Doe\\"} ]}' # Parse the JSON parsed = json.loads(data) # Extract the data employees = parsed['employees'] # Print the results for employee in employees: print(employee['firstName'], employee['lastName'])"},{"instruction":"Create a program in Python that will filter a list of numbers by removing any number divisible by 3. [2, 4, 7, 8, 10, 12, 15, 20]","output":"def filter_by_three(numbers): filtered_numbers = [] for num in numbers: if num % 3 != 0: filtered_numbers.append(num) return filtered_numbers print(filter_by_three([2, 4, 7, 8, 10, 12, 15, 20]))"},{"instruction":"Build a Python class that can generate a random password of length 10 with at least 1 uppercase character, 1 lowercase character, 1 digit and 1 special character.","output":"import random import string class PasswordGenerator: def __init__(self, length=10): self.length = length def generate_password(self): chars = string.ascii_letters + string.digits + '!@#%^&*()?' random_chars = ''.join(random.sample(chars, self.length)) uppercase_chars = [char for char in random_chars if char.isupper()] lowercase_chars = [char for char in random_chars if char.islower()] digits = [char for char in random_chars if char.isdigit()] special_chars = [char for char in random_chars if not char.isalnum()] if len(uppercase_chars) >=1 and len(lowercase_chars) >=1 and len(digits) >= 1 and len(special_chars) >= 1: return random_chars else: return self.generate_password()"},{"instruction":"Write a Python program to format a specified string to limit the number of characters to 6. Hello World","output":"def limit_string(s): if len(s) >= 6: return s[:6] else: return s result = limit_string(\\"Hello World\\") print(result)"},{"instruction":"Python, write a program to generate the Fibonacci series up to nth term. n = 10","output":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b # Driver Program nterms = n # check if the number of terms is valid if nterms <= 0: print(\\"Please enter a positive integer\\") else: print(\\"Fibonacci sequence:\\") for i in range(nterms): print(fibonacci(i))"},{"instruction":"Write a python script which reformats the json string below data = '{name:Jason,age:42,favorite_food:Lasagna}'","output":"import json def reformat_json(data): data = json.loads(data) return json.dumps(data, indent=4) data = '{\\"name\\":\\"Jason\\",\\"age\\":42,\\"favorite_food\\":\\"Lasagna\\"}' updated_data = reformat_json(data) print(updated_data) # {\\"name\\": \\"Jason\\", # \\"age\\": 42, # \\"favorite_food\\": \\"Lasagna\\"}"},{"instruction":"Create a Python class to represent a Rectangle with two properties: length and width.","output":"class Rectangle: def __init__(self, length, width): self.length = length self.width = width def area(self): return self.length * self.width"},{"instruction":"This code is a Django management command for renaming a book. To use it, run the command with the name of the book as an argument, and specify any of the following options: owner: set the new owner of the book newbooktitle: set the new title of the book newbookurl: set the new URL of the book For example, to rename a book called old_name with a new title of new_title and a new URL of new_url and a new owner of new_owner, run the command: python manage.py rename_book old_name newbooktitle=new_title newbookurl=new_url owner=new_owner","output":"# This file is part of Booktype. # Copyright (c) 2012 Aleksandar Erkalovic <aleksandar.erkalovic@sourcefabric.org> # # Booktype is free software: you can redistribute it and/or modify # it under the terms of the GNU Affero General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # Booktype is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU Affero General Public License for more details. # # You should have received a copy of the GNU Affero General Public License # along with Booktype. If not, see <http://www.gnu.org/licenses/>. from django.core.management.base import BaseCommand, CommandError from optparse import make_option from django.contrib.auth.models import User from booki.editor import common from booki.editor import models from django.conf import settings class Command(BaseCommand): args = \\"<book name>\\" help = \\"Rename book.\\" option_list = BaseCommand.option_list + ( make_option('--owner', action='store', dest='owner', default=None, help='Set new owner of the book.'), make_option('--new-book-title', action='store', dest='new_book_title', default=None, help='Set new book title.'), make_option('--new-book-url', action='store', dest='new_book_url', default=None, help='Set new book url name.'), ) requires_model_validation = False def handle(self, *args, **options): if len(args) != 1: raise CommandError(\\"You must specify book name.\\") try: book = models.Book.objects.get(url_title__iexact=args[0]) except models.Book.DoesNotExist: raise CommandError('Book \\"%s\\" does not exist.' % args[0]) if options['new_book_title']: book.title = options['new_book_title'] if options['new_book_url']: import os os.rename('%s/books/%s' % (settings.DATA_ROOT, book.url_title), '%s/books/%s' % (settings.DATA_ROOT, options['new_book_url'])) book.url_title = options['new_book_url'] # TODO: test this n = len(settings.DATA_ROOT)+len('books/')+1 for attachment in models.Attachment.objects.filter(version__book=book): name = attachment.attachment.name j = name[n:].find('/') newName = '%s/books/%s%s' % (settings.DATA_ROOT, book.url_title, name[n:][j:]) attachment.attachment.name = newName attachment.save() if options['owner']: try: user = User.objects.get(username=options['owner']) except User.DoesNotExist: raise CommandError('User \\"%s\\" does not exist. Can not finish import.' % options['owner']) book.owner = user book.save()"},{"instruction":"Write a Python script to calculate the sum of two numbers. num1 = 5 num2 = 10","output":"num1 = 5 num2 = 10 total = num1 + num2 print(total)"},{"instruction":"Create a web scraping program in Python to extract text from a website","output":"import requests from bs4 import BeautifulSoup # provide the url of the website you want to scrape url = 'https://example.com' # send request to the server and get the html content r = requests.get(url) # parse the html content soup = BeautifulSoup(r.content, 'html.parser') # extract text text = soup.find_all(text=True) for t in text: print(t.strip())"},{"instruction":"Generate a Python library for linear algebra operations.","output":"import numpy as np def add(x, y): # adds two matrices x and y return np.add(x, y) def subtract(x, y): # subtracts two matrices x and y return np.subtract(x, y) def multiply(x, y): # multiplies two matrices x and y return np.matmul(x, y) def transpose(x): # transpose a matrix x return np.transpose(x) def determinant(x): # finds the determinant of a matrix x return np.linalg.det(x) def inverse(x): # finds the inverse of a matrix x return np.linalg.inv(x)"},{"instruction":"Write a Python program to generate a report of average speeds for all roads a given city. This report should include the name, direction, and average speed of each road in the city. An example of a dataset of roads in a city with relevant information like road name, direction, and speed lim","output":"import csv road_data = [] # read the roads data into the list with open('roads.csv', 'r') as f: reader = csv.reader(f) next(reader) for row in reader: data = {'name': row[0], 'direction': row[1], 'speed_limit': int(row[2])} road_data.append(data) # compute the average speed average_speeds = {} for road in road_data: name = road['name'] direction = road['direction'] if name not in average_speeds: average_speeds[name] = {} if direction not in average_speeds[name]: average_speeds[name][direction] = 0 average_speeds[name][direction] += road['speed_limit'] # report the average speeds print('Report of average speeds for all roads:') for name, directions in average_speeds.items(): for direction, speed in directions.items(): print(f'{name} ({direction}): {speed / len(directions)}')"},{"instruction":"Write a Python program that implements a generic sorting algorithm. The program should accept a list as an input and generate a sorted list as an output. Input list: [2, 7, 5, 4, 1]","output":"def sort(input_list): for index in range(len(input_list)-1): min_index = index for i in range(index+1, len(input_list)): if input_list[i] < input_list[min_index]: min_index = i if min_index != index: input_list[min_index], input_list[index] = input_list[index], input_list[min_index] return input_list #Example list = [2, 7, 5, 4, 1] sort(list) # Output [1, 2, 4, 5, 7]"},{"instruction":"Create a Python program that takes a number of words, and prints out the frequency of each word. [hello, world, hello, I, am, here, hello, world]","output":"words = [\\"hello\\", \\"world\\", \\"hello\\", \\"I\\", \\"am\\", \\"here\\", \\"hello\\", \\"world\\"] # create an empty dictionary to store word and its frequency freq = {} # count frequency of each word for word in words: if word in freq: freq[word] += 1 else: freq[word] = 1 # print the frequency for k, v in freq.items(): print(k, \\":\\", v)"},{"instruction":"Create a Python script to parse a JSON response into readable values. Not applicable","output":"import json # Sample json response json_response = { “name\\": “John Doe\\", \\"age\\": 25, \\"hobbies\\": [“hiking\\", \\"swimming\\", \\"fishing\\"] } # Parse json parsed_json = json.loads(json_response) # Print values print(\\"Name: {}\\".format(parsed_json[\\"name\\"])) print(\\"Age: {}\\".format(parsed_json[\\"age\\"])) print(\\"Hobbies: {}\\".format(\\", \\".join(parsed_json[\\"hobbies\\"]))) # Output: # Name: John Doe # Age: 25 # Hobbies: hiking, swimming, fishing"},{"instruction":"Create a function in Python that takes two integers as arguments and print the sum of them.","output":"def add_numbers(a, b): \\"\\"\\"Returns the sum of two numbers\\"\\"\\" return a + b if __name__ == '__main__': print(add_numbers(2, 3))"},{"instruction":"Create a function in Python that shuffles the order of the items in a list. [1,2,3,4,5]","output":"import random def shuffle_list(arr): # Shuffle given list random.shuffle(arr) return arr # Driver function arr = [1,2,3,4,5] print(\\"Initial list: n\\",arr) print(\\"nFinal list: n\\",shuffle_list(arr))"},{"instruction":"Transform string of format ‘YYYYMMDD’ to date type in Python date_str = 20200430","output":"import datetime def date_string_to_datetime(date_str): return datetime.datetime.strptime(date_str, \\"%Y-%m-%d\\").date()"},{"instruction":"Develop a python program to solve the 01 Knapsack Problem values = [20, 5, 10, 40, 15, 25] weights = [1, 2, 3, 8, 7, 4] capacity = 10","output":"# A Dynamic Programming based # Python program for 0-1 Knapsack problem # Returns th maximum value that can # be put in a knapsack of capacity W def knapSack(W, wt, val, n): # Base Case if n == 0 or W == 0: return 0 # If weight of the nth item is more than Knapsack of capacity # W, then this item cannot be included in the optimal solution if wt[n-1] > W: return knapSack(W, wt, val, n-1) # return the maximum of two cases: # (1) nth item included # (2) not included else: return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), knapSack(W, wt, val, n-1)) # Driver program to test above function values = [20, 5, 10, 40, 15, 25] weights = [1, 2, 3, 8, 7, 4] capacity = 10 n = len(values) print(knapSack(capacity, weights, values, n))"},{"instruction":"Build a web API in Python to find all books from a given author. Author name: J.K. Rowling","output":"import flask from flask import Flask, jsonify app = Flask(__name__) @app.route('/books/author/<author_name>', methods=['GET']) def get_books_by_author(author_name): books = [ {'name': 'Harry Potter and the Philosopher's Stone', 'author': 'J.K. Rowling'}, {'name': 'Harry Potter and the Chamber of Secrets', 'author': 'J.K. Rowling'}, {'name': 'Harry Potter and the Prisoner of Azkaban', 'author': 'J.K. Rowling'}, {'name': 'Harry Potter and the Goblet of Fire', 'author': 'J.K. Rowling'} ] books_by_author = [book for book in books if book['author'] == author_name] return jsonify({'books': books_by_author}) if __name__ == '__main__': app.run()"},{"instruction":"Write a script to benchmark performance of different sorting algorithms in Python. Not applicable","output":"import random import time MAX_NUMBER = 100 def selection_sort(array): for i in range(len(array) - 1): #Find the minimum element in the unsorted array min_index = i for j in range(i+1, len(array)): if array[min_index] > array[j]: min_index = j #Swap with the first element array[i], array[min_index] = array[min_index], array[i] def bubble_sort(array): for i in range(len(array)-1): for j in range(len(array)-i-1): if array[j] > array[j+1]: array[j], array[j+1] = array[j+1], array[j] def insertion_sort(array): for i in range(1, len(array)): key = array[i] j = i-1 while j>= 0 and key < array[j]: array[j+1] = array[j] j -= 1 array[j+1] = key # Generate random list of integers random_list = [random.randint(0, MAX_NUMBER) for _ in range(MAX_NUMBER)] # Make copies of random list selection_sort_list = random_list.copy() bubble_sort_list = random_list.copy() insertion_sort_list = random_list.copy() # Compute the time taken for each sorting algorithm start = time.time() selection_sort(selection_sort_list) end = time.time() print(\\"Selection sort time taken: %f\\" % (end - start)) start = time.time() bubble_sort(bubble_sort_list) end = time.time() print(\\"Bubble sort time taken: %f\\" % (end - start)) start = time.time() insertion_sort(insertion_sort_list) end = time.time() print(\\"Insertion sort time taken: %f\\" % (end - start))"},{"instruction":"Create an algorithm in Python to solve the knapsack problem. weights = [10, 20, 30] values = [60, 100, 120] capacity = 50","output":"# Construct a 2D array to store the results # of subproblems values_size = len(values) result_matrix = [[0 for x in range(capacity + 1)] for y in range(values_size + 1)] # Fill matrix in bottom up manner for i in range(values_size + 1): for j in range(capacity + 1): # Base condition if i == 0 or j == 0: result_matrix[i][j] = 0 # Item can be included elif weights[i - 1] <= j: result_matrix[i][j] = max(values[i - 1] + result_matrix[i - 1][j - weights[i - 1]], result_matrix[i - 1][j]) # Ignore the item else: result_matrix[i][j] = result_matrix[i - 1][j] # Maximum value of the matrix maximum_value = result_matrix[values_size][capacity]"},{"instruction":"Create an Optimizer function in Python to optimize a given function f(x) for x in [4, 4]. Function f(x): f(x) = x^2 3x + 2","output":"import numpy as np from scipy.optimize import minimize # Function to optimize def f(x): return x**2 - 3*x + 2 # Optimize optimized = minimize(f, [-4, 4], method=\\"L-BFGS-B\\") # Print result print(\\"Optimized value of the function: \\", optimized.fun) # prints -3.999999999999997 print(\\"Optimized value of x: \\", optimized.x) # prints [-4.]"},{"instruction":"Create a Python procedure to determine if two numbers are divisible. 14 and 7","output":"def divisible(x, y): if x % y == 0: return True else: return False"},{"instruction":"Develop a function in Python that converts the temperature from Celsius to Fahrenheit given the Celsius parameter.","output":"def celsius_to_fahrenheit(celsius): \\"\\"\\"Converts a temperature in Celsius to Fahrenheit\\"\\"\\" return celsius * 9/5 + 32"},{"instruction":"Design a code for clustering data using Python and the Kmeans algorithm.","output":"import numpy as np from sklearn.cluster import KMeans # Load the data data = np.loadtxt('data.txt') #Train Clustering Model kmeans = KMeans(n_clusters=3, random_state=0) kmeans.fit(data) #Make Predictions labels = kmeans.predict(data) #Print the labels print(labels)"},{"instruction":"Design a function in Python that takes in two numbers and outputs their sum. 2, 3","output":"def sumTwo(a, b): return a + b print(sumTwo(2, 3))"},{"instruction":"Write a python program that extracts key phrases from a given text using TextRank algorithm. This is an example tex","output":"import nltk from nltk.tokenize import sent_tokenize from nltk.corpus import stopwords from sklearn.metrics.pairwise import cosine_similarity import networkx as nx text = \\"This is an example text\\" sentences = sent_tokenize(text) words = [nltk.word_tokenize(sentence) for sentence in sentences] stop_words = set(stopwords.words(\\"english\\")) words_filtered = [] for i in words: words_filtered.append([w for w in i if not w in stop_words]) sim_matrix = cosine_similarity(words_filtered) nx_graph = nx.from_numpy_array(sim_matrix) scores = nx.pagerank(nx_graph) ranked_sentences = sorted(zip(scores, sentences), reverse=True) line = len(ranked_sentences)*[0] for i in range(0, len(ranked_sentences)): line[i] = ranked_sentences[i][1] # Output print(\\"TextRank Phrases: \\", line)"},{"instruction":"Write a Python program to calculate the tax for an item given a set of tax rates. Tax Brackets: [0.01, 0.05, 0.1, 0.15, 0.2], Item Price: 110","output":"def calculate_tax(brackets, price): taxamount = 0 for i in range(len(brackets)): if price>=100*(i+1): taxamount += 100*brackets[i] else: taxamount += (price%100)*brackets[i] break return taxamount tax_brackets = [0.01, 0.05, 0.1, 0.15, 0.2] item_price = 110 tax = calculate_tax(tax_brackets, item_price) print(tax)"},{"instruction":"Create an algorithm to solve the traveling salesman problem in Python with the provided inputs. [ (1, 2, 10), (1, 3, 15), (2, 3, 10), (2, 4, 25), (3, 4, 20), ]","output":"#import necessary libraries import numpy as np #define inputs inputs = np.array([ (1, 2, 10), (1, 3, 15), (2, 3, 10), (2, 4, 25), (3, 4, 20), ]) #define distances matrix dist_mat = np.zeros((inputs.shape[0], inputs.shape[0])) for i in range(inputs.shape[0]): for j in range(inputs.shape[0]): if i != j: dist_mat[i, j] = inputs[i, 2] + inputs[j, 2] #define start and end points start = inputs[0, 0] end = inputs[-1, 1] #define pathfinder algorithm def tsp_finder(start, end, dist_mat): #initialize a matrix to track visited nodes visited = np.zeros_like(dist_mat, dtype = bool) #the first node will be marked as visited visited[start] = True #initialize curr with start value curr = start #initialize min_dist with infinity min_dist = float(\\"inf\\") #initialize the optimal path opt_path = [curr] #loop until the end node is reached while curr != end: #update all unvisited nodes for node in range(dist_mat.shape[0]): if visited[node] == False: #if the distance from the current node to the node is less than the minimum distance if dist_mat[curr, node] < min_dist: #update the minimum distance min_dist = dist_mat[curr, node] #update the optimal path opt_path.append(node) #update the current node curr = node #mark curr as visited visited[curr] = True #add the end node to the optimal path opt_path.append(end) #return the optimal path return opt_path #find the optimal path optimal_path = tsp_finder(start, end, dist_mat) print(\\"Optimal Path:\\", optimal_path)"},{"instruction":"Write a code in Python to parse a JSON string. { name: James, age: 27 }","output":"import json json_string = '{\\"name\\": \\"James\\",\\"age\\": 27}' data = json.loads(json_string) print(data[\\"name\\"], data[\\"age\\"])"},{"instruction":"Write a Python script that sorts a list of tuples in descending order based on the second element of each tuple. [('a', 3), ('b', 1), ('c', 4)]","output":"def sortTupleListInDescendingOrder(tuple_list): tuple_list.sort(key=lambda tup: tup[1], reverse=True) return tuple_list sorted_list = sortTupleListInDescendingOrder([('a', 3), ('b', 1), ('c', 4)]) print(sorted_list)"},{"instruction":"Create a script in Python that reads a dataset of airline passenger data and outputs the average fare per class. Passenger_class Age Fare 1 18 272 2 21 209 1 23 246 2 20 101","output":"import pandas as pd data = pd.read_csv(\\"data.csv\\") # Calculate the average fare for each passenger class fare_by_class = data.groupby('Passenger_class')['Fare'].mean() # Output the average fare per class for class_id, avg_fare in fare_by_class.iteritems(): print(f\\"Average fare for class {class_id}: {avg_fare:.2f}\\")"},{"instruction":"Write a Python program to divide two numbers and print the quotient and the remainder. Number1: 15 Number2: 4","output":"def divide(num1, num2): quotient = num1 // num2 remainder = num1 % num2 return quotient, remainder quotient, remainder = divide(15, 4) print(\\"Quotient :\\", quotient) print(\\"Remainder :\\", remainder)"},{"instruction":"Design a Python program to print a triangle of numbers.","output":"def triangle_of_nums(n): k = 0 for i in range(1, n + 1): # inner loop to handle number of columns for j in range(0, i): # printing numbers print(k, end=\\" \\") # incrementing k k = k + 1 # ending line after each row print(\\"r\\") n = 4 triangle_of_nums(n) # Output: # 0 # 1 2 # 3 4 5 # 6 7 8 9"},{"instruction":"Write a Python program to create a tictactoe game.","output":"# define a function to draw the board def draw_board(): print(\\"n\\") print(\\" --- | --- | --- \\") print(\\" 7 | 8 | 9 \\") print(\\" --- | --- | --- \\") print(\\" 4 | 5 | 6 \\") print(\\" --- | --- | --- \\") print(\\" 1 | 2 | 3 \\") print(\\" --- | --- | --- \\") # define a function to check if position is empty def check_position(position, board): return board[position] == ' ' # define a function to check if board is full and return boolean def is_board_full(board): for i in range(1, 10): if check_position(i, board): return False return True"},{"instruction":"Design a web service using the Flask framework and Python. This service should have an API endpoint to accept POST requests with JSON input. The endpoint should take in a JSON input of numbers and send back the sum of the numbers in the response. [1, 2, 3]","output":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/sum_numbers', methods=['POST']) def sum_numbers(): data = request.get_json() numbers = data.get('numbers', []) total = 0 for n in numbers: total += n return jsonify({'sum': total}) if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Write a Python function to compare two strings and check if they are equal. Compare 'Hello' and 'World'","output":"def str_compare(str1, str2): return str1 == str2 str_compare('Hello', 'World')"},{"instruction":"Creating a Python dictionary comprehension, generate a new dictionary with keys from the first dictionary and values multiplied by 2. {'a': 1, 'b': 2, 'c': 3,}","output":"my_dict = {'a': 1, 'b': 2, 'c': 3} new_dict = {k:v*2 for k, v in my_dict.items()} print(new_dict) # {'a':2, 'b':4, 'c':6}"},{"instruction":"Create a Python script that takes in two strings and returns a value representing their similarity. string1 = Hello World! string2 = Goodbye World!","output":"def string_similarity(string1, string2): # Create dictionary for storing character frequencies char_freq_dict = dict() for char in string1: if char in char_freq_dict: char_freq_dict[char] += 1 else: char_freq_dict[char] = 1 # Count number of matching characters matches = 0 for char in string2: if char in char_freq_dict and char_freq_dict[char] > 0: matches += 1 char_freq_dict[char] -= 1 # Calculate similarity similarity = (matches/len(string1)) * 100 return similarity"},{"instruction":"Create a Python script to read data from a database. Table Name: 'customers'","output":"import psycopg2 connection = psycopg2.connect(database='dbname', user='user', password='password', host='localhost', port='5432') cursor = connection.cursor() cursor.execute('SELECT * FROM customers') rows = cursor.fetchall() for row in rows: print(row) cursor.close()"},{"instruction":"Generate a machine learning model in Python for predicting the rating for a provided list of attractions. List of attractions: 1. Harbour Bridge 2. Opera House 3. Bondi Beach","output":"import pandas as pd import numpy as np import matplotlib.pyplot as plt from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error #importing the dataset attractions = ['Harbour Bridge', 'Opera House', 'Bondi Beach'] ratings = [5, 4, 4.5] #generating the model model = LinearRegression() model.fit(attractions, ratings) #testing the model predicted = model.predict([['Harbour Bridge']]) print('Predicted rating for Harbour Bridge is ' + str(predicted[0]))"},{"instruction":"Create a Python program to generate a random word between 8 and 16 characters.","output":"import random def generate_random_word(length): letters = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\\" return ''.join(random.choice(letters) for i in range(length)) length = random.randint(8, 16) word = generate_random_word(length) print(\\"Random word of length\\", length, \\"is:\\", word)"},{"instruction":"Create a Python program that sorts a list of integers in increasing order.","output":"def sort_integers(nums): for i in range(len(nums)): for j in range(i+1, len(nums)): if nums[i] > nums[j]: nums[i], nums[j] = nums[j], nums[i] return nums"},{"instruction":"Create a Python script to detect if a certain item is in a given list of items. The script should work for any type of item. items = [1,2,3,4,5]","output":"def detect_item(items, item): if item in items: return True else: return False"},{"instruction":"mplement this algorithms in Python. Algorithm: Depthfirst Search","output":"def dfs(graph, start): visited = [] stack = [start] while stack: vertex = stack.pop() if vertex not in visited: visited.append(vertex) for node in graph[vertex]: stack.append(node) return visited"},{"instruction":"Write a Python script to convert temperatures from Fahrenheit to Celsius.","output":"def fahrenheit_to_celsius(fahrenheit): celsius = (fahrenheit - 32) * 5/9 return celsius"},{"instruction":"Write a Python program to print a Welcome message for the user. Username: Joh","output":"print(\\"Welcome John!\\")"},{"instruction":"The code is a Python function named \`probe\` that takes a multiline text as input and parses it into a dictionary. To use the function, call it with a string of text generated by \`ffprobe\` or \`avprobe\`. The output will be a dictionary containing the parsed data.","output":"# coding: utf-8 \\"\\"\\" Copyright (c) 2013 João Bernardo Vianna Oliveira This file is part of Discoder. Discoder is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. Discoder is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with Discoder. If not, see <http://www.gnu.org/licenses/>. \\"\\"\\" __author__ = 'jb' from discoder.lib import Obj import re class ParseError(Exception): pass tag = Obj( # Regex for parsing the markup language generated by ffprobe or avprobe open = re.compile(r'^[(w+)]'), close = re.compile(r'^[/(w+)]'), value = re.compile(r'^(w+)(?::(w+))?=(.*)') ) def probe(text): \\"\\"\\" Parse multiline text generated by \`ffprobe\` or \`avprobe\` Command line: ffprobe -v quiet [-show_format] [-show_streams] filename :type text: str Input: ------ [TAG] data_x=1 data_y=2 INFO:data_z=3 [/TAG] Output: ------- {'tag': [{'data_x': 1, 'data_y': 2, 'info': {'data_z': 3}}]} \\"\\"\\" blocks = Obj() this = None for i, line in enumerate(text.splitlines()): if not line.strip(): continue open_block = tag.open.match(line) if open_block: if this is not None: raise ParseError('Opened block without closing last one: {0}: {1}'.format(i, line)) this = Obj() name = open_block.group(1).lower() if name == 'stream': name += 's' # compatibility with json output if name != 'format': # \\"format\\" only has one element. blocks.setdefault(name, []).append(this) else: blocks[name] = this else: if this is None: raise ParseError(\\"There's no block to insert data or close: {0}: {1}\\".format(i, line)) if tag.close.match(line): this = None else: name, sub, val = tag.value.match(line).groups() if not sub: this[name] = val else: attr = this.setdefault(name.lower(), Obj()) attr[sub] = val return blocks"},{"instruction":"Optimize a Python code to calculate the sum of digits in a number. n = 123","output":"def digit_sum(n): if n == 0: return 0 return (n % 10) + digit_sum(n // 10) n = 123 print(digit_sum(n))"},{"instruction":"Create a Python program to count the occurrence of each character in a given string and return a dictionary object.","output":"def count_characters(string): chars = {} for char in string: if char in chars: chars[char] += 1 else: chars[char] = 1 return chars"},{"instruction":"Create a machine learning model in Python to predict the direction a stock price will go (up or down), given the previous day's closing and opening prices. Not applicable","output":"# import necessary libraries import pandas as pd import numpy as np # create the feature and target vectors feature_vector = np.array([stock_closing_price, stock_opening_price]) target_vector = np.array(stock_price_direction) # initialize the model model = LinearRegression() # fit the model model.fit(feature_vector, target_vector) # prediction prediction = model.predict([[41.50, 41.75]]) # classify the prediction if prediction > 0: print('The stock price is expected to go up.') else: print('The stock price is expected to go down.')"},{"instruction":"Create a function in Python that takes in a list of integers, calculates the mean, and returns a formatted string with the value. [1,3,5,7,9]","output":"def calculate_mean(numbers): \\"\\"\\"A function to calculate the mean of a list of integers and returns a string of the mean value. Parameters: numbers (list): a list of integers Returns: str: the mean value formatted as a string \\"\\"\\" mean = sum(numbers)/len(numbers) return 'The mean is {}'.format(mean)"},{"instruction":"Create a Python class for a bank account with background threads for printing the balance every minute.","output":"import threading class BankAccount: def __init__(self): self.balance = 0 self.lock = threading.Lock() threading.Thread(target = self.print_balance, args = (), daemon = True).start() def withdraw(self, amount): with self.lock: self.balance -= amount def deposit(self, amount): with self.lock: self.balance += amount def print_balance(self): while True: print(\\"Balance = \\", self.balance) time.sleep(60)"},{"instruction":"w would you code a function in Python to rotate elements of an array?","output":"def rotate_array(array, n): ''' This function takes in an array and an integer n and rotates the elements of the array by n positions. ''' return array[n:] + array[:n]"},{"instruction":"Generate a Python program to generate a list of all the prime numbers in given range [n,m], where n and m are input parameters. n = 5, m = 20","output":"def generatePrimes(n, m): primes = [] for i in range(n, m + 1): isPrime = True for j in range(2,i): if i % j == 0: isPrime = False break if isPrime: primes.append(i) return primes n = 5 m = 20 primes = generatePrimes(n, m) print(primes) #Output: [5, 7, 11, 13, 17, 19]"},{"instruction":"From a Python data type, generate a json string. person = { name: John Doe, age: 30, hobbies:[reading, playing chess, hiking] }","output":"import json json_str = json.dumps(person)"},{"instruction":"Create a program to find the minimum depth of a binary tree using Python. 3 / 9 20 / 15 7","output":"def minDepth(root): if root is None: return 0 if root.left is None and root.right is None: return 1 elif root.left is None: return minDepth(root.right) + 1 elif root.right is None: return minDepth(root.left) + 1 else: return min(minDepth(root.left), minDepth(root.right)) + 1"},{"instruction":"Write a Python program to sort given array in ascending order with bubble sorting algorithm [2, 8, 12, 18, 5, 7, 1]","output":"def bubble_sort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] #Driver Code arr = [2, 8, 12, 18, 5, 7, 1] bubble_sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i])"},{"instruction":"Generate a python code to create a list containing tuples of two elements each. Number of tuples: 5","output":"my_list = [(x, y) for x in range(5) for y in range(5)] print(my_list)"},{"instruction":"Create a Python script that normalizes a given list of strings. Input List: ['Red', 'red', 'WhITE', 'white', 'bLUE', 'blue']","output":"\\"\\"\\" Normalize a given list of strings \\"\\"\\" def normalize(lst): output = [] for item in lst: output.append(item.lower()) return output if __name__ == '__main__': input_list = ['Red', 'red', 'WhITE', 'white', 'bLUE', 'blue'] print(normalize(input_list))"},{"instruction":"Generate an algorithm in Python that finds the number of times an element is present in an array. arr = [4, 5, 2, 4, 2] x = 2","output":"def countOccurrences(arr, x): count = 0 for i in range(len(arr)): if (x == arr[i]): count = count + 1 return count arr = [4, 5, 2, 4, 2] x = 2 print(countOccurrences(arr, x))"},{"instruction":"Create a vector of 10 random numbers using Python NumPy. Not applicable","output":"import numpy as np np.random.seed(123) vector = np.random.rand(10) print(vector) # Output: # [0.69646919 0.28613933 0.22685145 0.55131477 0.71946897 0.42310646 # 0.9807642 0.68482974 0.4809319 0.39211752]"},{"instruction":"Write a Python program that takes a number from the user and prints whether the number is prime or not.","output":"def is_prime(n): if n <= 1: return False i = 2 while i*i <= n: if n % i == 0: return False i += 1 return True if __name__ == \\"__main__\\": num = int(input(\\"Enter a number: \\")) if is_prime(num): print(\\"The number is a prime number.\\") else: print(\\"The number is not a prime number.\\")"},{"instruction":"Write a Python program to create a list containing all the possible combinations of two or more lists. list1 = [1, 2, 3] list2 = ['a', 'b', 'c'] list3 = [7, 8]","output":"combined_list = [[1, 'a', 7], [1, 'a', 8], [1, 'b', 7], [1, 'b', 8], [1, 'c', 7], [1, 'c', 8], [2, 'a', 7], [2, 'a', 8], [2, 'b', 7], [2, 'b', 8], [2, 'c', 7], [2, 'c', 8], [3, 'a', 7], [3, 'a', 8], [3, 'b', 7], [3, 'b', 8], [3, 'c', 7], [3, 'c', 8]] combined_list = list(itertools.product(list1, list2, list3))"},{"instruction":"Create a Python program to reverse a string. Hello","output":"def reverse_string(string): reversed_string = \\"\\" for c in string: reversed_string = c + reversed_string return reversed_string string = \\"Hello\\" print(reverse_string(string))"},{"instruction":"Develop a Python program to generate a Fibonacci series up to nth element, where n is an input. 10","output":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b # Driver Program print(fibonacci(10))"},{"instruction":"Create a game such as hangman in Python","output":"# This is necessary to display the game import turtle # Set some necessary variables word = “hangman” hangman_board = [ “——————-“, “| |”, “| ”, “| ”, “| ”, “| ”, “——————-“] # Create a turtle canvas canvas = turtle.Screen() # Define functions for printing the Hangman board def draw_hangman(hangman_board): flower = turtle.Turtle() flower.speed(0) for piece in hangman_board: flower.hideturtle() flower.penup() x = -100 y = 180 flower.setpos(x,y) flower.write(piece, font=('Arial', 27, 'normal')) y = y - 50 flower.setpos(x,y) # Print the initial board draw_hangman(hangman_board) # Get user input and update the board while word != “”: guess = input(“Guess a letter: ”) if guess in word: print(“That letter is in the word!”) else: print(“That letter is not in the word!”) word = word.replace(guess,””) print(“You have guessed the word. You have won!”)"},{"instruction":"Opitmize a Python program to search a list of numbers for a given target number. list = [10,20,30,40,50] target = 40","output":"def search(list, target): for i in range(len(list)): if list[i] == target: return i return -1 list = [10,20,30,40,50] target = 40 # linear search in list index = search(list, target) if index != -1: print(\\"Element found at index :\\", index) else: print(\\"Element not found\\")"},{"instruction":"Develop a Python program to optimize the given linear equation using the simplex method. Maximise: 2x + 4y Subject to: x + 2y ≤ 14 3x – 4y ≤ 18 x ≥ 0, y ≥ 0","output":"def simplex(resultMatrix): n = len(resultMatrix[0]) - 1 c = [] for i in range(n): c.append(resultMatrix[0][i]) a = [] for i in range(1, len(resultMatrix)): a.append(resultMatrix[i][:n]) b = [] for i in range(1, len(resultMatrix)): b.append(resultMatrix[i][n]) # Initialize the basic and non-basic variables basic_variables = [n + i for i in range(len(b))] non_basic_variables = [i for i in range(n)] iteration_count = 0 optimal = True while optimal is True: iteration_count += 1 # Compute the coefficient of the objective function coef = [-c[i] for i in non_basic_variables] # Compute the column index of the entering variable entering_var = non_basic_variables[coef.index(max(coef))] # Compute the vector of reduced costs red_cost = [b[i]/a[i][entering_var] for i in range(len(b))] # Compute the leaving variable # If any reduced cost is negative, then the current solution is unbounded min_red_cost = min(red_cost) if min_red_cost <= 0: return \\"unbounded\\" # Compute the leaving variable # If all reduced costs are positive, the solution is optimal and iteration stops leaving_var = basic_variables[red_cost.index(min_red_cost)] if min_red_cost > 0: optimal = False break # Compute the new table for i in range(len(b)): row = [] for j in range(len(c) + 1): if j == entering_var: row.append(a[i][j]) elif j == leaving_var: row.append(0) else: row.append(a[i][j] - (a[i][entering_var] * a[i][j])/a[i][entering_var]) a[i] = row # Compute the objective function obj_func = 0 for i in range(len(c)): obj_func += c[i] * resultMatrix[0][i] for i in range(len(b)): obj_func += b[i] * resultMatrix[i + 1][-1] resultMatrix[0][-1] = obj_func # Compute the basic and non-basic variables basic_variables[red_cost.index(min_red_cost)] = entering_var non_basic_variables[coef.index(max(coef))] = leaving_var print(\\"Objective function on the optimal solution: \\", resultMatrix[0][-1]) print(\\"Optimal solution: \\") for i in range(len(b)): print(\\"x{0} = {1}\\".format(basic_variables[i], a[i][-1])) simplex([[2, 4], [1, 2, 14], [3, -4, 18]])"},{"instruction":"Write a Python program to encrypt a given sentence using Ceaser Cipher. sentence = Sentry is the best","output":"# Ceasar Cipher def encrypt(text,s): result = \\"\\" # transverse the plain text for i in range(len(text)): char = text[i] # Encrypt uppercase characters if (char.isupper()): result += chr((ord(char) + s-65) % 26 + 65) # Encrypt lowercase characters else: result += chr((ord(char) + s - 97) % 26 + 97) return result # Check the above function text = \\"Sentry is the best\\" s = 4 print(\\"Plain Text : \\" + text) print(\\"Shift pattern : \\" + str(s)) print(\\"Cipher: \\" + encrypt(text,s))"},{"instruction":"Write a Python function to check whether the number is prime or not. num: 97","output":"# Python program to check whether the number is prime or not def is_prime(num): \\"\\"\\" Function to check whether the number is prime or not \\"\\"\\" # Check whether the given number is greater than 1 if num > 1: # Iterate through the range of numbers to check if any number is a multiple of the given number for i in range(2,num): # If there is any multiple, the number is not prime if (num % i) == 0: return False # If there are no multiples, the number is prime else: return True # Call the function num = 97 print(is_prime(num)) # Output: # True"},{"instruction":"Write a Python class to represent a 3D vector in a 3D coordinate system. Not applicable","output":"class Vector: def __init__(self, x, y, z): self.x = x self.y = y self.z = z def magnitude(self): return (self.x**2 + self.y **2 + self.z**2)**0.5 def normalize(self): mag = self.magnitude() return Vector(self.x/mag, self.y/mag, self.z/mag) def __add__(self, other): return Vector(self.x + other.x, self.y + other.y, self.z + other.z) def __sub__(self, other): return Vector(self.x - other.x, self.y - other.y, self.z - other.z) def __mul__(self, scalar): return Vector(self.x * scalar, self.y * scalar, self.z * scalar)"},{"instruction":"Create a Python program to determine a grade for a given test score. The program should take a score as an input and output a grade based on the score range. Test Score: 85","output":"def get_grade(score): # Set the score range grade_map = { 90: 'A', 80: 'B', 70: 'C', 60: 'D' } # Iterate over the range and return the corresponding grade for grade_min, grade in grade_map.items(): if score >= grade_min: return grade # Test print(get_grade(85))"},{"instruction":"Create a recursive Python function to calculate the sum of all elements in a list.","output":"def sum_list(list): if not list: return 0 return list[0] + sum_list(list[1:])"},{"instruction":"Using an open source API, create a program to perform sentiment analysis on tweets.","output":"#Importing the necessary libraries import tweepy import requests #Authentication consumer_key = ... consumer_secret = ... access_key = ... access_secret = ... #Creating the authentication object auth = tweepy.OAuthHandler(consumer_key, consumer_secret) #Setting access tokens auth.set_access_token(access_key, access_secret) #Creating the API object api = tweepy.API(auth) #Defining the sentiment analysis function def sentiment_analysis(tweet): post_data = {'text': tweet} response = requests.post('https://api.meaningcloud.com/sentiment-2.1', data=post_data, headers={'content-type':'application/x-www-form-urlencoded', 'apikey': '<insert API key here>'}) response_json = response.json() print(response_json) return response_json['score_tag'] #Running the sentiment analysis tweets = api.search(q='#python', lang='en', rpp=1) for tweet in tweets: print(sentiment_analysis(tweet.text))"},{"instruction":"Given a Python list of integers, write a function to find the sum of the elements in the list. nums = [1, 2, 3, 4, 5]","output":"def findSum(nums): total = 0 for num in nums: total += num return total"},{"instruction":"Create a Python program to convert paragraphs into sentences. This is the first sentence. This is the second sentence. This is the third sentence.","output":"def convert_paragraphs_to_sentences(paragraph): sentences = paragraph.split('. ') return sentences sentences = convert_paragraphs_to_sentences(\\"This is the first sentence. This is the second sentence. This is the third sentence.\\") for x in sentences: print(x)"},{"instruction":"Build a Python program that takes in two lists as an input and returns a third list with the common elements across the two inputs. list1 = [2, 3, 4, 5, 6] list2 = [3, 5, 7, 8, 9]","output":"def common_elements(list1, list2): common_elements = [] for element in list1: if element in list2: common_elements.append(element) return common_elements list1 = [2, 3, 4, 5, 6] list2 = [3, 5, 7, 8, 9] print(common_elements(list1, list2))"},{"instruction":"Describe the sorted() method and how it works","output":"The sorted() method is a built-in function in Python that takes an iterable object and returns a sorted list. It is used to sort the items of an iterable in a specific order which may be either ascending or descending. The sorted() method works by comparing each item in the iterable with all the other items and sorting them in a specific order."},{"instruction":"Create a function in Python that given a string, calculates the number of vowels in it. Hello World!","output":"def count_vowels(s): vowels = 'aeiou' count = 0 for c in s.lower(): if c in vowels: count += 1 return count s = 'Hello World!' print(count_vowels(s)) # Output 3"},{"instruction":"Write a Python program to create a list of all the even numbers between two given numbers. 5, 10","output":"def even_number_list(a, b): return list(i for i in range(a, b+1) if i%2 == 0)"},{"instruction":"Create a program in Python which takes a string input from the user and prints it in the reverse order","output":"# Take input from the user string = input(\\"Enter string : \\") # Reverse the string rev_str = string[::-1] # Print the reversed string print(\\"Reverse string :\\", rev_str)"},{"instruction":"Create a command line utility in Python that takes two arguments. The utility should compare the two arguments and output the result as either “equal” or “not equal”. Arg1: hello Arg2: world","output":"import sys arg1 = sys.argv[1] arg2 = sys.argv[2] if arg1 == arg2: print('equal') else: print('not equal')"},{"instruction":"This code generates REXI benchmarks. To use it, call the function \`get_rexi_benchmarks\` with a parameter \`jg\`. The function returns a list of REXI methods.","output":"#! /usr/bin/env python3 import os import sys import math from itertools import product # REXI from mule_local.rexi.REXICoefficients import * from mule_local.rexi.pcirexi.BeanREXI import BeanREXI from mule_local.rexi.pcirexi.LRREXI import LRREXI from mule_local.rexi.trexi.TREXI import * from mule_local.rexi.cirexi.CIREXI import * from mule_local.rexi.elrexi.ELREXI import * from mule_local.rexi.brexi.BREXI import * # EFloat efloat_mode = \\"float\\" def get_rexi_benchmarks(jg): # Accumulator of all REXI methods # rexi_method['rexi_method'] = 'file' # Choose REXI method which is typically 'file' for all file-based ones # rexi_method['rexi_files_coefficients'] = None # List with approximations for different 'phi' functions rexi_methods = [] # # CI REXI # if True: # REXI stuff def fun_params_ci_N(ci_max_real, ci_max_imag): if ci_max_imag >= 7: return 128 else: return 32 params_ci_max_imag = [30.0] params_ci_max_real = [10.0] # # Scale the CI circle radius relative to this time step size # We do this simply to get a consistent time stepping method # Otherwise, CI would not behave consistently # Yes, that's ugly, but simply how it goes :-) # params_ci_max_imag_scaling_relative_to_timestep_size = 480 # params_ci_max_imag_scaling_relative_to_timestep_size = None params_ci_min_imag = 5.0 rexi_method = {} # Choose REXI method which is typically 'file' for all file-based ones rexi_method['rexi_method'] = 'file' # List with approximations for different 'phi' functions rexi_method['rexi_files_coefficients'] = None for ci_max_imag, ci_max_real in product(params_ci_max_imag, params_ci_max_real): if params_ci_max_imag_scaling_relative_to_timestep_size != None: ci_max_imag *= (jg.runtime.timestep_size / params_ci_max_imag_scaling_relative_to_timestep_size) # \\"phi0\\" cirexi = CIREXI(efloat_mode=efloat_mode) coeffs_phi0 = cirexi.setup( function_name=\\"phi0\\", N=fun_params_ci_N(ci_max_real, ci_max_imag), lambda_include_imag=ci_max_imag, lambda_max_real=ci_max_real ).toFloat() # \\"phi1\\" cirexi = CIREXI(efloat_mode=efloat_mode) coeffs_phi1 = cirexi.setup( function_name=\\"phi1\\", N=fun_params_ci_N(ci_max_real, ci_max_imag), lambda_include_imag=ci_max_imag, lambda_max_real=ci_max_real ).toFloat() # \\"phi2\\" cirexi = CIREXI(efloat_mode=efloat_mode) coeffs_phi2 = cirexi.setup( function_name=\\"phi2\\", N=fun_params_ci_N(ci_max_real, ci_max_imag), lambda_include_imag=ci_max_imag, lambda_max_real=ci_max_real ).toFloat() rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2] # Add to list of REXI methods rexi_methods.append(rexi_method) # # EL-REXI # if True: max_imags = [30.0] rexi_method = {} # Choose REXI method which is typically 'file' for all file-based ones rexi_method['rexi_method'] = 'file' # List with approximations for different 'phi' functions rexi_method['rexi_files_coefficients'] = None for max_imag in max_imags: # \\"phi0\\" elrexi = ELREXI(efloat_mode=efloat_mode) coeffs_phi0 = elrexi.setup( function_name=\\"phi0\\", N=max(64, int(75 * max_imag / 30)), lambda_max_real=10.5, lambda_max_imag=max_imag + 2.5 ).toFloat() # \\"phi1\\" elrexi = ELREXI(efloat_mode=efloat_mode) coeffs_phi1 = elrexi.setup( function_name=\\"phi1\\", N=max(64, int(75 * max_imag / 30)), lambda_max_real=10.5, lambda_max_imag=max_imag + 2.5 ).toFloat() # \\"phi2\\" elrexi = ELREXI(efloat_mode=efloat_mode) coeffs_phi2 = elrexi.setup( function_name=\\"phi2\\", N=max(64, int(75 * max_imag / 30)), lambda_max_real=10.5, lambda_max_imag=max_imag + 2.5 ).toFloat() rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2] # Add to list of REXI methods rexi_methods.append(rexi_method) # # LR-REXI (Rectangle contour with Gauss-Legendre Quadrature) # if True: max_imags = [30.0] rexi_method = {} # Choose REXI method which is typically 'file' for all file-based ones rexi_method['rexi_method'] = 'file' # List with approximations for different 'phi' functions rexi_method['rexi_files_coefficients'] = None for max_imag in max_imags: # \\"phi0\\" lrrexi = LRREXI(efloat_mode=efloat_mode) coeffs_phi0 = lrrexi.setup( function_name=\\"phi0\\", width=23, height=2 * max_imag + 20, center=-1, N=128).toFloat() # \\"phi1\\" lrrexi = LRREXI(efloat_mode=efloat_mode) coeffs_phi1 = lrrexi.setup( function_name=\\"phi1\\", width=23, height=2 * max_imag + 20, center=-1, N=128).toFloat() # \\"phi2\\" lrrexi = LRREXI(efloat_mode=efloat_mode) coeffs_phi2 = lrrexi.setup( function_name=\\"phi2\\", width=23, height=2 * max_imag + 20, center=-1, N=128).toFloat() rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2] # Add to list of REXI methods rexi_methods.append(rexi_method) # # Bean-REXI # if True: max_imags = [30.0] rexi_method = {} # Choose REXI method which is typically 'file' for all file-based ones rexi_method['rexi_method'] = 'file' # List with approximations for different 'phi' functions rexi_method['rexi_files_coefficients'] = None for max_imag in max_imags: # \\"phi0\\" beanrexi = BeanREXI(efloat_mode=efloat_mode) coeffs_phi0 = beanrexi.setup( function_name=\\"phi0\\", horizontal_radius=16, vertical_radius=max_imag / 30 * 35, center=-2, N=max(64, int(75 * max_imag / 30))).toFloat() # \\"phi1\\" beanrexi = BeanREXI(efloat_mode=efloat_mode) coeffs_phi1 = beanrexi.setup( function_name=\\"phi1\\", horizontal_radius=16, vertical_radius=max_imag / 30 * 35, center=-2, N=max(64, int(75 * max_imag / 30))).toFloat() # \\"phi2\\" beanrexi = BeanREXI(efloat_mode=efloat_mode) coeffs_phi2 = beanrexi.setup( function_name=\\"phi2\\", horizontal_radius=16, vertical_radius=max_imag / 30 * 35, center=-2, N=max(64, int(75 * max_imag / 30))).toFloat() rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2] # Add to list of REXI methods rexi_methods.append(rexi_method) return rexi_methods if __name__ == \\"__main__\\": pass"},{"instruction":"Create a class called Student in Python with appropriate attributes and methods.","output":"class Student: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender def getName(self): return self.name def getAge(self): return self.age def getGender(self): return self.gender"},{"instruction":"Write a Python program to populate a database from a given dataset of products. This program should loop through each record of the dataset and check if the product has already been persisted, and if not, it should save the record to the database. products_dataset: List[Dict[str, str]] = [ {'name': 'baseball bat', 'price': 19.99, 'quantity': 20}, {'name': 'soccer ball', 'price': 9.99, 'quantity': 10}, {'name': 'football', 'price': 14.99, 'quantity': 5}, ]","output":"import sqlite3 db = sqlite3.connect('products.db') cursor = db.cursor() cursor.execute(\\"CREATE TABLE IF NOT EXISTS products (name text, price real, quantity integer)\\") for product in products_dataset: product_name = product['name'] product_price = product['price'] product_quantity = product['quantity'] if not cursor.execute(f\\"SELECT * FROM products WHERE name='{product_name}'\\").fetchone(): cursor.execute(f\\"INSERT INTO products (name, price, quantity) VALUES ({product_name}, {product_price}, {product_quantity})\\") db.commit() db.close()"},{"instruction":"Review this code and make any necessary changes in Python to make it more efficient. def add_items(items): total = 0 for item in items: total += item return total","output":"def add_items(items): return sum(items)"},{"instruction":"Write a Python loop to print the numbers between 2 and 10 (inclusive).","output":"for i in range(2, 11): print(i)"},{"instruction":"Turn the given input string into a valid Python statement. Input string: Function to print hello world.","output":"def printHelloWorld(): print(\\"Hello world\\")"},{"instruction":"Develop a Python function to calculate the area of a rectangle given its length and width.","output":"def calculate_rectangle_area(length, width): return length * width"},{"instruction":"Create a list in Python to store the first 10 numbers that are divisible by 4.","output":"divisible_by_four = [i for i in range(1,11) if i%4 == 0]"},{"instruction":"mplement a web scraper in Python that downloads the contents of a given URL. url = 'https://en.wikipedia.org/wiki/Web_scraping'","output":"import requests from bs4 import BeautifulSoup url = 'https://en.wikipedia.org/wiki/Web_scraping' r = requests.get(url) soup = BeautifulSoup(r.text, 'html.parser') html = str(soup) with open(\\"output.html\\", \\"w\\") as file: file.write(html)"},{"instruction":"Create a basic Python application to return the similarity between two strings using fuzzywuzzy. The two strings are: Apple and Apples.","output":"# Import the necessary modules import fuzzywuzzy from fuzzywuzzy import process # The two strings to compare str1 = 'Apple' str2 = 'Apples' # Compare the two strings score = fuzzywuzzy.fuzz.ratio(str1, str2) # Print the similarity score print(score) # Output 100"},{"instruction":"Write a Python code snippet to check if a list contains duplicated elements. [3, 6, 8, 9, 10, 3]","output":"\\"\\"\\" Python code snippet to check if a list contains duplicated elements \\"\\"\\" def has_duplicates(arr): seen_elements = set() for elem in arr: if elem in seen_elements: return True seen_elements.add(elem) return False if __name__ == '__main__': arr = [3, 6, 8, 9, 10, 3] print(has_duplicates(arr)) # True"},{"instruction":"Write a function in Python to optimize a given objective function using gradient descent.","output":"def gradient_descent(lr, x, y): m_curr = b_curr = 0 iterations = 10000 n = len(x) for i in range(iterations): y_predicted = m_curr*x + b_curr cost = (1/n) * sum([val**2 for val in (y-y_predicted)]) md = -(2/n)*sum(x*(y-y_predicted)) bd = -(2/n)*sum(y-y_predicted) m_curr = m_curr - lr * md b_curr = b_curr - lr * bd return m_curr, b_curr"},{"instruction":"Write a Python program optimize the following code using functional programming. i = 5 while i >= 0: print(i) i = 1","output":"from functools import reduce # initialize the loop num = 5 # call reduce() solution = reduce(lambda i, _: i - 1, range(num + 1)) # print the result print(solution)"},{"instruction":"Design a Python program to find which number is missing between a given range of numbers. [1, 2, 4, 6, 7, 8, 9]","output":"def find_missing_number(arr): n = len(arr) total = (n+1)*(arr[0] + arr[n-1]) / 2 sum_arr = sum(arr) return total - sum_arr"},{"instruction":"Develop a simple Blackjack game using Python which will allow a player to play against a computer (Dealer).","output":"import random # Lists of suits and ranks suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs') ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace') # Dictionary mapping ranks to values values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10, 'Queen':10, 'King':10, 'Ace':11} # Function to calculate the value of a hand def get_value(cards): value = 0 for card in cards: value += values[card[0]] return value # Main game loop while True: # Create empty lists to store player and dealer's hand dealer_hand = [] player_hand = [] # Deal cards to both players for _ in range(2): dealer_hand.append(random.choice(list(zip(ranks, suits)))) player_hand.append(random.choice(list(zip(ranks, suits)))) # Print hands print('Player's Hand: ', player_hand) print('Value of Hand: ', get_value(player_hand)) print('Dealer Hand: ', dealer_hand[0]) # Determine if player wants to hit/stay hit_or_stand = input('Would you like to [H]it or [S]tand? ').lower() # Player hits if hit_or_stand == 'h': player_hand.append(random.choice(list(zip(ranks, suits)))) print('Player's Hand: ', player_hand) print('Value of Hand: ', get_value(player_hand)) if(get_value(player_hand) > 21): print('Bust! Player loses.') break # Player stands elif hit_or_stand == 's': while get_value(dealer_hand) < 17: dealer_hand.append(random.choice(list(zip(ranks, suits)))) print('Dealer Hand: ', dealer_hand) print('Value of Hand: ', get_value(dealer_hand)) if (get_value(dealer_hand) > 21) or (get_value(dealer_hand) < get_value(player_hand)): print('Player wins!') break elif (get_value(dealer_hand) > get_value(player_hand)): print('Dealer wins!') break else: print('It's a tie!') break"},{"instruction":"Generate a Python program for an opinion poll. The program should take in an arbitrary number of responses in the form of strings and determine the most frequent response. responses = [Yes, Yes, No, No, Yes, Maybe]","output":"def get_most_frequent_response(responses): # Count the number of each response response_counts = {} for response in responses: if response in response_counts: response_counts[response] += 1 else: response_counts[response] = 1 # Find the most frequent response most_frequent = '' max_count = 0 for response, count in response_counts.items(): if count > max_count: most_frequent = response max_count = count # Print result print(f'Most frequent response: {most_frequent}')"},{"instruction":"Finish coding a reusable Python function that takes in a list and an argument. list = [1, 2, 3, 4, 5] argument = multiply","output":"def modify_list(list, argument): if argument == \\"multiply\\": for i in range(len(list)): list[i] = list[i]*list[i] elif argument == \\"add\\": for i in range(len(list)): list[i] = list[i] + list[i] return list"},{"instruction":"Create a neural network in Python for a regression task to predict a numerical value.","output":"# import necessary libraries import numpy as np import pandas as pd import tensorflow as tf # define the neural network architecture model = tf.keras.Sequential([ tf.keras.layers.Input(shape=(input_dim,)), tf.keras.layers.Dense(units=128, activation=\\"relu\\"), tf.keras.layers.Dense(units=64, activation=\\"relu\\"), tf.keras.layers.Dense(units=1, activation=\\"linear\\") ]) # compile the model model.compile(optimizer=\\"adam\\", loss=\\"mean_squared_error\\") # fit the model model.fit(X_train, Y_train, epochs=10)"},{"instruction":"Write a Python program to print out the triangle pattern given an height n as input. height = 4","output":"def print_triangle(n): for i in range(n): for j in range(i+1): print(\\"*\\",end=\\"\\") print() n = 4 print_triangle(n) # Output # * # ** # *** # ****"},{"instruction":"Design a Python program to convert a list of Fahrenheit temperatures to a list of Celsius temperatures. [150, 160, 170, 180, 190]","output":"def Fahrenheit_to_Celsius(Fahrenheit_Temps): Celsius_Temps = [] for temp in Fahrenheit_Temps: Celsius = (temp - 32) * 5 / 9 Celsius_Temps.append(Celsius) return Celsius_Temps Fahrenheit_Temps = [150, 160, 170, 180, 190] Celsius_Temps = Fahrenheit_to_Celsius(Fahrenheit_Temps) print(\\"Celsius Temperatures =\\", Celsius_Temps)"},{"instruction":"Create a python program that outputs a sentence when given an input of two words. words = [red, apple]","output":"words = [\\"red\\", \\"apple\\"] sentence = words[0] + \\" \\" + words[1] print(sentence)"},{"instruction":"Create a web scraper script in Python using BeautifulSoup and Requests to extract data from a web page that contains a list of products. The URL to scrape https://example.com/produc","output":"import requests from bs4 import BeautifulSoup def scrape_products(url): response = requests.get(url) html = response.text soup = BeautifulSoup(html, 'html.parser') product_list = [] for item in soup.find_all('div', class_='product-item'): name = item.find('h3').text price = item.find('div', class_='price').text product_list.append((name, price)) return product_list"},{"instruction":"Write a function in Python that takes a set of numbers and prints the sum, mean and standard deviation of the numbers. [1, 2, 3, 4, 5]","output":"def print_stats(numbers): sum = 0 for i in numbers: sum = sum + i mean = sum / len(numbers) ssd = 0 for i in numbers: ssd = ssd + (i-mean)**2 ssd = ssd / len(numbers) standard_dev = sqrt(ssd) print(\\"Sum = \\", sum) print(\\"Mean = \\", mean) print(\\"Standard Deviation = \\", standard_dev)"},{"instruction":"Generate a python program that takes the diameter of a circle as an input and outputs the circumference of the circle.","output":"def circumference_of_circle(diameter): circumference = 3.14 * diameter return circumference"},{"instruction":"Create a Python application that will use the Random Forest algorithm to classify handwritten digits.","output":"# Import libraries import pandas as pd from sklearn.ensemble import RandomForestClassifier from sklearn.model_selection import train_test_split # Load dataset df = pd.read_csv(‘digits_dataset.csv’) # Split data into train and test sets X = df.drop(‘label’, axis=1) y = df[‘label’] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # Train classifier clf = RandomForestClassifier() clf.fit(X_train, y_train) # Evaluate model on test set accuracy = clf.score(X_test, y_test) print('Test accuracy: {0:.2f}%'.format(accuracy*100))"},{"instruction":"Create a Python program that prints all numbers from 1 to 10 in reverse order.","output":"for i in range(10, 0, -1): print(i)"},{"instruction":"Using a neural network, generate Python code for a sentiment analysis application. A CSV file containing sentiment data with each sentence having a label (positive, neutral, or negative)","output":"import pandas as pd import numpy as np import keras # Read in data data = pd.read_csv('sentiment.csv') # Preprocessing: # Convert sentences to vectors tokenizer = keras.preprocessing.text.Tokenizer(num_words = 1000) tokenizer.fit_on_texts(data['sentence']) X = tokenizer.texts_to_matrix(data['sentence'], mode='tfidf') # One-hot encoding of labels labels = data['label'] num_classes = np.max(labels) + 1 y = keras.utils.to_categorical(labels, num_classes) # Building the model model = keras.models.Sequential() model.add(keras.layers.InputLayer(input_shape = X.shape[1:])) model.add(keras.layers.Dense(units = 50, activation='relu')) model.add(keras.layers.Dense(units = num_classes, activation='softmax')) # Compiling and training the model model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(X, y, epochs=15, batch_size=32, validation_split=0.2 ) # Saving the model model.save('sentiment_analysis.h5')"},{"instruction":"Edit the following Python function to add the option of a timeout after a certain amount of time. def download_url(url): request = requests.get(url) return reque","output":"import signal def timeout(signum, frame): raise TimeoutError(\\"Timed Out\\") def download_url(url, timeout_value): signal.signal(signal.SIGALRM, timeout) signal.alarm(timeout_value) try: request = requests.get(url) return request except TimeoutError: print(\\"Download timed out. Please try again.\\")"},{"instruction":"Write a Python program that creates a dictionary with a list as a key","output":"def make_dict_from_list(list_key): dictionary = {} for element in list_key: dictionary[element] = [] return dictionary"},{"instruction":"Write a Python program to analyze the given user input sentences regarding sentiment. Given sentence: I am so excited to start this projec","output":"def analyze_sentiment(sentence): sentiment = TextBlob(sentence) if sentiment.polarity > 0: print(\\"Sentence is Positive\\") elif sentiment.polarity == 0: print(\\"Sentence is Neutral\\") else: print(\\"Sentence is Negative\\") sentence = \\"I am so excited to start this project\\" analyze_sentiment(sentence)"},{"instruction":"Write a Python program to validate a given email address. The program should ensure that the given email follows valid email syntax. example@example.com","output":"import re def is_valid_email(email): email_regex = re.compile(r\\"^[w.+-]+@[w]+.[a-z]{2,3}\\") return email_regex.match(email) email = \\"example@example.com\\" if is_valid_email(email): print(\\"Valid email address\\") else: print(\\"Invalid email address\\")"},{"instruction":"Develop a Python function to fetch data from a web service. url = 'https://jsonplaceholder.typicode.com/users'","output":"import requests def fetch_data_from_web_service(url): response = requests.get(url) return response.json()"},{"instruction":"Generate a Python code that prints the following sequence of characters ( ABCDEFGHIJ ).","output":"# Create an empty string seq = \\"\\" # Loop through the alphabet for i in range(65, 75): # Convert the ASCII code to a character seq += chr(i) # Print the output print(seq)"},{"instruction":"Design a heuristic algorithm in Python to solve a given assignment problem. Assignment Problem: Jobs: A, B, C, D Workers: 1, 2, 3 Cost: 1A, 2B, 3C, 1D = 3, 5, 8, 4 1A, 2C, 3D, 1B = 8, 7, 2, 6","output":"def assignmentProblem(costMatrix): # Variables R = len(costMatrix) C = len(costMatrix[0]) X = [[0 for x in range(C)] for x in range(R)] # Find the minimum element in each row minRowValues = [min(i) for i in costMatrix] # Reduce each column by its minimum element and subtract it from the original costMatrix for i in range(len(costMatrix[0])): for j in range(len(costMatrix)): costMatrix[j][i] = costMatrix[j][i] - minRowValues[j] # Find the minimum element in each column minColValues = [min(y) for y in zip(*costMatrix)] # Reduce each row by its minimum element for i in range(len(costMatrix)): for j in range(len(costMatrix[0])): costMatrix[i][j] = costMatrix[i][j] - minColValues[j] # Star all minimum element in the reduced costMatrix # Find the indices of all the star elements starsLocations = [] for i in range(R): for j in range(C): if costMatrix[i][j] == 0 and X[i][j] != 1: X[i][j] = \\"*\\" starsLocations.append([i, j]) return starsLocations"},{"instruction":"Write a function in Python for finding the maximum subarray sum of an array. arr = [4,2,1,4,5,7,2,4]","output":"def max_subarray_sum(arr): max_so_far = 0 max_ending_here = 0 for i in range(0, len(arr)): max_ending_here = max_ending_here + arr[i] if max_ending_here < 0: max_ending_here = 0 if (max_so_far < max_ending_here): max_so_far = max_ending_here return max_so_far result = max_subarray_sum(arr) print(result)"},{"instruction":"Create a Python program to optimize the running time of a program using memoization. # k: as an input parameter # f: a recursive functio","output":"def memoize(f, k): memo = dict() def helper(x): if x not in memo: memo[x] = f(x) return memo[x] return helper(k)"},{"instruction":"Create a method in Python to format a date from the format ddmmyyyy to yyyymmdd. date = 10052020","output":"def format_date(date): splitted_date = date.split(\\"-\\") reformatted_date = splitted_date[::-1] return \\"-\\".join(reformatted_date) format_date(\\"10-05-2020\\")"},{"instruction":"Create a Python script to measure the similarity between two given strings using the Levenshtein distance Strings ‘Apple’ and ‘Apples’","output":"def levenshtein_distance(s1, s2): # Base cases if s1 == s2: return 0 elif len(s1) == 0: return len(s2) elif len(s2) == 0: return len(s1) # Construct a matrix matrix = [[0 for c in range(len(s1) + 1)] for r in range(len(s2) + 1)] # Fill in the first row and column for r in range(len(s2) + 1): matrix[r][0] = r for c in range(len(s1) + 1): matrix[0][c] = c # Fill in the rest of the matrix for r in range(1, len(s2) + 1): for c in range(1, len(s1) + 1): if s2[r - 1] == s1[c - 1]: cost = 0 else: cost = 1 matrix[r][c] = min(matrix[r - 1][c] + 1, matrix[r][c - 1] + 1, matrix[r - 1][c - 1] + cost) # Return the similarity score return matrix[len(s2)][len(s1)] string1 = 'Apple' string2 = 'Apples' score = levenshtein_distance(string1, string2) print(score) # Output: 1"},{"instruction":"mplement an algorithm in Python to remove duplicate elements from a given list. list = [1,4,4,4,5,5,5,6,7]","output":"def removeDuplicates(list): uniqueList = [] for item in list: if item not in uniqueList: uniqueList.append(item) return uniqueList print(removeDuplicates([1,4,4,4,5,5,5,6,7]))"},{"instruction":"mplement a sorting algorithm in Python. list of integer numbers: [98, 86, 100, 5, 34, 22]","output":"def bubble_sort(items): for pass_num in range(len(items) - 1, 0, -1): for idx in range(pass_num): if items[idx] > items[idx + 1]: items[idx], items[idx + 1] = items[idx + 1], items[idx] numbers = [98, 86, 100, 5, 34, 22] bubble_sort(numbers) print(numbers)"},{"instruction":"Create a Python class for a Rectangle that has two sides, and methods for area and perimeter.","output":"\\"\\"\\" Create a Python class for a Rectangle that has two sides, and methods for area and perimeter \\"\\"\\" class Rectangle: def __init__(self, side1, side2): self.side1 = side1 self.side2 = side2 def area(self): return self.side1 * self.side2 def perimeter(self): return 2*self.side1 + 2*self.side2 if __name__ == '__main__': r = Rectangle(3, 4) print(\\"Area: {}\\".format(r.area())) print(\\"Perimeter: {}\\".format(r.perimeter()))"},{"instruction":"Create a program to implement a selection sort in Python. [5, 3, 2, 4, 1]","output":"def selection_sort(arr): n = len(arr) for i in range(n-1): min_index = i for j in range(i+1, n): if arr[min_index] > arr[j]: min_index = j arr[i], arr[min_index] = arr[min_index], arr[i] return arr"},{"instruction":"mplement a gradient descent algorithm for a classification task in Python.","output":"def grad_descent_classifier(input_data, weights, learning_rate): # finding the gradient of our weights w.r.t to cost function N = len(input_data) grad = np.zeros(weights.shape) error = 0 # looping through each training datapoint for i in range(N): x = input_data[i] y = input_data[i][-1] # calculating the error error += (np.dot(x, weights)-y)**2 # update grad for j in range(len(x)): grad[j] += -(2/N)*(y-np.dot(x,weights))*x[j] # updating the weights weights = weights - learning_rate*grad # return the weights return weights"},{"instruction":"Rewrite the following Python program into C++. The program should generate a random number between 0 and 9 inclusive. import random def generateRandomNumber(): number = random.randint(0, 9) print(number) generateRandomNumber()","output":"#include <iostream> #include <ctime> #include <cstdlib> using namespace std; int generateRandomNumber(){ int number = rand() % 10; //Generate a random number between 0-9 cout << number << endl; return number; } int main() { srand(time(NULL)); generateRandomNumber(); return 0; }"},{"instruction":"Build a REST API using Python Flask for adding, updating, and deleting blog posts. Not applicable","output":"from flask import Flask, request, jsonify from flask_sqlalchemy import SQLAlchemy from flask_marshmallow import Marshmallow app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.sqlite3' db = SQLAlchemy(app) ma = Marshmallow(app) # BlogPost Model class BlogPost(db.Model): id = db.Column(db.Integer, primary_key=True) title = db.Column(db.String(100), nullable=False) content = db.Column(db.Text, nullable=False) # BlogPost Schema class BlogPostSchema(ma.Schema): class Meta: fields = ('id', 'title', 'content') # Init Schema blog_post_schema = BlogPostSchema() blog_posts_schema = BlogPostSchema(many=True) # Create a blog post @app.route('/blog-post', methods=['POST']) def add_blog_post(): title = request.json['title'] content = request.json['content'] new_blog_post = BlogPost(title=title, content=content) db.session.add(new_blog_post) db.session.commit() blog_post = BlogPost.query.get(new_blog_post.id) return blog_post_schema.jsonify(blog_post) # Update a blog post @app.route('/blog-post/<id>', methods=['PUT']) def update_blog_post(id): blog_post = BlogPost.query.get(id) title = request.json['title'] content = request.json['content'] blog_post.title = title blog_post.content = content db.session.commit() return blog_post_schema.jsonify(blog_post) # Delete a blog post @app.route('/blog-post/<id>', methods=['DELETE']) def delete_blog_post(id): blog_post = BlogPost.query.get(id) db.session.delete(blog_post) db.session.commit() return blog_post_schema.jsonify(blog_post) if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Write a Python program to merge two given dictionaries and update the values of common keys. Dictionary 1: {'a': 10, 'b': 20, 'c': 30} Dictionary 2: {'a': 15, 'd': 40}","output":"def merge_dicts(dict1, dict2): result = {**dict1, **dict2} for key in result: if key in dict1 and key in dict2: result[key] = dict1[key] + dict2[key] return result dict1 = {'a': 10, 'b': 20, 'c': 30} dict2 = {'a': 15, 'd': 40} merge_dicts(dict1, dict2) # {'a': 25, 'b': 20, 'c': 30, 'd': 40}"},{"instruction":"Develop a Python solution to identify parts of speech of a given sentence. Sentence: I like apples.","output":"import nltk sentence = \\"I like apples.\\" words = nltk.word_tokenize(sentence) tagged_words = nltk.pos_tag(words) parts_of_speech = dict() for word, tag in tagged_words: parts_of_speech[word] = tag print(parts_of_speech) # Output: {'I': 'PRP', 'like': 'VBP', 'apples': 'NNS'}"},{"instruction":"w would you write a program in Python that takes as input an array of integers and prints the sum of its elements? [1, 5, 8, 3]","output":"arr = [1,5,8,-3] # Compute the sum total = 0 for num in arr: total += num # Print the sum print(total)"},{"instruction":"Create a GUI using tkinter in Python to calculate the size of a triangle in sq. cm given the length of its three sides.","output":"import tkinter as tk root = tk.Tk() root.title(\\"Triangle Area Calculator\\") side1Label = tk.Label(root, text=\\"Side 1\\") side1Label.grid(row=0, column=0, sticky=tk.W, padx=10, pady=10) side1Entry = tk.Entry(root) side1Entry.grid(row=0, column=1, padx=10, pady=10) side2Label = tk.Label(root, text=\\"Side 2\\") side2Label.grid(row=1, column=0, sticky=tk.W, padx=10, pady=10) side2Entry = tk.Entry(root) side2Entry.grid(row=1, column=1, padx=10, pady=10) side3Label = tk.Label(root, text=\\"Side 3\\") side3Label.grid(row=2, column=0, sticky=tk.W, padx=10, pady=10) side3Entry = tk.Entry(root) side3Entry.grid(row=2, column=1, padx=10, pady=10) def calculate_area(): side1 = float(side1Entry.get()) side2 = float(side2Entry.get()) side3 = float(side3Entry.get()) s = (side1 + side2 + side3)/2 area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5 areaLabel.configure(text=\\"Area = {0:0.2f} sq. cm\\".format(area)) calculateButton = tk.Button(root, text=\\"Calculate\\", command=calculate_area) calculateButton.grid(row=3, columnspan=2, padx=10, pady=10) areaLabel = tk.Label(root, text=\\"Area = 0 sq. cm\\") areaLabel.grid(row=4, columnspan=2, padx=10, pady=10) root.mainloop()"},{"instruction":"Write a Python program which prints out the Fibonacci series up to the Nth term. 15","output":"def print_fibonacci_series(n): a = 0 b = 1 c = 0 while c < n: print(a,end=\\" \\") c = c+1 temp = a+b a = b b = temp print_fibonacci_series(15)"},{"instruction":"Create a Python program which performs basic math operations on user input numbers and prints the result. Not applicable","output":"# Function to add two numbers def add(x, y): return x + y # Function to subtract two numbers def subtract(x, y): return x - y # Function to multiply two numbers def multiply(x, y): return x * y # Function to divide two numbers def divide(x, y): return x / y # Take inputs from the user num1 = int(input(\\"Enter first number: \\")) num2 = int(input(\\"Enter second number: \\")) # Add the two numbers sum = add(num1, num2) # Subtract the two numbers sub = subtract(num1, num2) # Multiply the two numbers mul = multiply(num1, num2) # Divide the two numbers div = divide(num1, num2) # Print the results print(\\"Sum: {0} nSub: {1} nMul: {2} nDiv: {3}\\".format(sum, sub, mul, div))"},{"instruction":"Please provide Python code to print out all the prime numbers in a list of numbers. list_of_numbers = [2, 3, 4, 5, 6, 7, 8, 9, 11]","output":"def is_prime(num): for i in range(2, num): if num % i == 0: return False return True list_of_numbers = [2, 3, 4, 5, 6, 7, 8, 9, 11] for i in list_of_numbers: if is_prime(i): print(i)"},{"instruction":"Rewrite the following JavaScript code in Python: for (let i = 1; i <= 10; i++) { console.log(i); } Not applicable","output":"for i in range(1, 11): print(i)"},{"instruction":"Write a python program to find the angle between two planes in 3D space.","output":"from math import acos, degrees def angle_planar_3d(normal1, normal2): length1 = math.sqrt((normal1[0]**2) + (normal1[1]**2) + (normal1[2]**2)) length2 = math.sqrt((normal2[0]**2) + (normal2[1]**2) + (normal2[2]**2)) dotProduct = normal1[0]*normal2[0] + normal1[1]*normal2[1] + normal1[2]*normal2[2] cosAngle = dotProduct / (length1 * length2) return degrees(acos(cosAngle)) normal1=[1,0,0] normal2=[0,1,0] print(angle_planar_3d(normal1, normal2))"},{"instruction":"Design an algorithm in Python to find the shortest unique substrings in a given input string. input_string =abccab","output":"def find_shortest_unique_substrings(input_string): \\"\\"\\" Finds the shortest unique substrings in a given input string Parameters ---------- input_string : str The input string Returns ------- List[str] A list containing the shortest unique substrings \\"\\"\\" # Generate all possible substrings substrings = [] for i in range(len(input_string)): for j in range(i+1, len(input_string)+1): substrings.append(input_string[i:j]) # Keep track of the unique substrings unique_substrings = [] # Iterate over all substrings for substring in substrings: # Check if the substring is unique if substring not in unique_substrings: unique_substrings.append(substring) # Return the shortest unique substrings return sorted(unique_substrings, key=len)"},{"instruction":"Develop a machine learning model in Python to predict housing prices in a given city.","output":"from sklearn.linear_model import LinearRegression X_train, y_train, X_test, y_test = load_data(city) model = LinearRegression() model.fit(X_train, y_train) predictions = model.predict(X_test)"},{"instruction":"Write a Python script to decode a base64 encoded string. encoded_string = 'aGVsbG8='","output":"import base64 encoded_string = 'aGVsbG8=' decoded_string = base64.b64decode(encoded_string) print(decoded_string) # prints b'hello'"},{"instruction":"Create a for loop statement in Python to iterate over a list and print the each item in the list. [1,2,3,4,5]","output":"for i in [1,2,3,4,5]: print(i)"},{"instruction":"Convert the JavaScript code snippet to Python. \`\`\` function sum(a, b) { return a + b; } \`\`\`","output":"def sum(a, b): return a + b"},{"instruction":"Write a Python program to retrieve a list of 10 latest posts from Reddit. Not applicable","output":"import praw reddit = praw.Reddit('bot1') latest_posts = [] for submission in reddit.subreddit('all').new(limit=10): latest_posts.append(submission.title) print(latest_posts)"},{"instruction":"Write a python code that calculates the longest possible ride duration using a given list of bus arrival times. arr = [9.00, 9.40, 9.50, 11.00, 15.00]","output":"def find_longest_ride(arr): max_duration = 0 for i in range(len(arr)): for j in range(i+1,len(arr)): duration = arr[j] - arr[i] if duration > max_duration: max_duration = duration return max_duration # Main Program arr = [9.00, 9.40, 9.50, 11.00, 15.00] result = find_longest_ride(arr) print (\\"The longest possible ride is {:.2f} hrs\\".format(result))"},{"instruction":"Generate an appropriate Python command to edit the following list such that all the negative numbers are replaced with 0. [1, 5, 9, 8, 2]","output":"def filter_negative(nums): return [max(0, n) for n in nums]"},{"instruction":"Write a python code to validate a given ip address. ip=192.168.1.113","output":"def validate_ip(ip): parts = ip.split(\\".\\") if len(parts) != 4: return False for part in parts: # Check if a part is an integer if not part.isnumeric(): return False # Check if a part is in range 0 - 255 if int(part) < 0 or int(part) > 255: return False return True if __name__ == '__main__': output = validate_ip(\\"192.168.1.113\\") print(output)"},{"instruction":"Create an API in Python to list out all directories and subdirectories from a given path. 'C://Users/Username/Documents'","output":"import os def listDirectories(path): dirs = os.listdir(path) for dir in dirs: print(os.path.join(path, dir)) if os.path.isdir(os.path.join(path, dir)): listDirectories(os.path.join(path, dir))"},{"instruction":"This code defines a Python module called \`zabbix_host_info\` that allows you to search for Zabbix host entries. It takes in various options such as \`host_name\`, \`host_ip\`, \`exact_match\`, \`remove_duplicate\`, and \`host_inventory\` to filter the search results. The module uses the \`zabbixapi\` library to connect to a Zabbix server and retrieve the host information. To use this module, import it into your Python code and call its functions with the appropriate arguments.","output":"#!/usr/bin/python # -*- coding: utf-8 -*- # (c) me@mimiko.me # GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt) from __future__ import (absolute_import, division, print_function) __metaclass__ = type ANSIBLE_METADATA = {'metadata_version': '1.1', 'status': ['preview'], 'supported_by': 'community'} RETURN = ''' --- hosts: description: List of Zabbix hosts. See https://www.zabbix.com/documentation/4.0/manual/api/reference/host/get for list of host values. returned: success type: dict sample: [ { \\"available\\": \\"1\\", \\"description\\": \\"\\", \\"disable_until\\": \\"0\\", \\"error\\": \\"\\", \\"flags\\": \\"0\\", \\"groups\\": [\\"1\\"], \\"host\\": \\"Host A\\", ... } ] ''' DOCUMENTATION = ''' --- module: zabbix_host_info short_description: Gather information about Zabbix host description: - This module allows you to search for Zabbix host entries. - This module was called C(zabbix_host_facts) before Ansible 2.9. The usage did not change. version_added: \\"2.7\\" author: - \\"Michael Miko (@RedWhiteMiko)\\" requirements: - \\"python >= 2.6\\" - \\"zabbix-api >= 0.5.4\\" options: host_name: description: - Name of the host in Zabbix. - host_name is the unique identifier used and cannot be updated using this module. required: true host_ip: description: - Host interface IP of the host in Zabbix. required: false exact_match: description: - Find the exact match type: bool default: no remove_duplicate: description: - Remove duplicate host from host result type: bool default: yes host_inventory: description: - List of host inventory keys to display in result. - Whole host inventory is retrieved if keys are not specified. type: list required: false version_added: 2.8 extends_documentation_fragment: - zabbix ''' EXAMPLES = ''' - name: Get host info local_action: module: zabbix_host_info server_url: http://monitor.example.com login_user: username login_password: password host_name: ExampleHost host_ip: 127.0.0.1 timeout: 10 exact_match: no remove_duplicate: yes - name: Reduce host inventory information to provided keys local_action: module: zabbix_host_info server_url: http://monitor.example.com login_user: username login_password: password host_name: ExampleHost host_inventory: - os - tag host_ip: 127.0.0.1 timeout: 10 exact_match: no remove_duplicate: yes ''' import atexit import traceback from ansible.module_utils.basic import AnsibleModule, missing_required_lib try: from zabbix_api import ZabbixAPI HAS_ZABBIX_API = True except ImportError: ZBX_IMP_ERR = traceback.format_exc() HAS_ZABBIX_API = False class Host(object): def __init__(self, module, zbx): self._module = module self._zapi = zbx def get_hosts_by_host_name(self, host_name, exact_match, host_inventory): \\"\\"\\" Get host by host name \\"\\"\\" search_key = 'search' if exact_match: search_key = 'filter' host_list = self._zapi.host.get({'output': 'extend', 'selectParentTemplates': ['name'], search_key: {'host': [host_name]}, 'selectInventory': host_inventory}) if len(host_list) < 1: self._module.fail_json(msg=\\"Host not found: %s\\" % host_name) else: return host_list def get_hosts_by_ip(self, host_ips, host_inventory): \\"\\"\\" Get host by host ip(s) \\"\\"\\" hostinterfaces = self._zapi.hostinterface.get({ 'output': 'extend', 'filter': { 'ip': host_ips } }) if len(hostinterfaces) < 1: self._module.fail_json(msg=\\"Host not found: %s\\" % host_ips) host_list = [] for hostinterface in hostinterfaces: host = self._zapi.host.get({ 'output': 'extend', 'selectGroups': 'extend', 'selectParentTemplates': ['name'], 'hostids': hostinterface['hostid'], 'selectInventory': host_inventory }) host[0]['hostinterfaces'] = hostinterface host_list.append(host[0]) return host_list def delete_duplicate_hosts(self, hosts): \\"\\"\\" Delete duplicated hosts \\"\\"\\" unique_hosts = [] listed_hostnames = [] for zabbix_host in hosts: if zabbix_host['name'] in listed_hostnames: continue unique_hosts.append(zabbix_host) listed_hostnames.append(zabbix_host['name']) return unique_hosts def main(): module = AnsibleModule( argument_spec=dict( server_url=dict(type='str', required=True, aliases=['url']), login_user=dict(type='str', required=True), login_password=dict(type='str', required=True, no_log=True), host_name=dict(type='str', default='', required=False), host_ip=dict(type='list', default=[], required=False), http_login_user=dict(type='str', required=False, default=None), http_login_password=dict(type='str', required=False, default=None, no_log=True), validate_certs=dict(type='bool', required=False, default=True), timeout=dict(type='int', default=10), exact_match=dict(type='bool', required=False, default=False), remove_duplicate=dict(type='bool', required=False, default=True), host_inventory=dict(type='list', default=[], required=False) ), supports_check_mode=True ) if module._name == 'zabbix_host_facts': module.deprecate(\\"The 'zabbix_host_facts' module has been renamed to 'zabbix_host_info'\\", version='2.13') if not HAS_ZABBIX_API: module.fail_json(msg=missing_required_lib('zabbix-api', url='https://pypi.org/project/zabbix-api/'), exception=ZBX_IMP_ERR) server_url = module.params['server_url'] login_user = module.params['login_user'] login_password = module.params['login_password'] http_login_user = module.params['http_login_user'] http_login_password = module.params['http_login_password'] validate_certs = module.params['validate_certs'] host_name = module.params['host_name'] host_ips = module.params['host_ip'] timeout = module.params['timeout'] exact_match = module.params['exact_match'] is_remove_duplicate = module.params['remove_duplicate'] host_inventory = module.params['host_inventory'] if not host_inventory: host_inventory = 'extend' zbx = None # login to zabbix try: zbx = ZabbixAPI(server_url, timeout=timeout, user=http_login_user, passwd=http_login_password, validate_certs=validate_certs) zbx.login(login_user, login_password) atexit.register(zbx.logout) except Exception as e: module.fail_json(msg=\\"Failed to connect to Zabbix server: %s\\" % e) host = Host(module, zbx) if host_name: hosts = host.get_hosts_by_host_name(host_name, exact_match, host_inventory) if is_remove_duplicate: hosts = host.delete_duplicate_hosts(hosts) extended_hosts = [] for zabbix_host in hosts: zabbix_host['hostinterfaces'] = host._zapi.hostinterface.get({ 'output': 'extend', 'hostids': zabbix_host['hostid'] }) extended_hosts.append(zabbix_host) module.exit_json(ok=True, hosts=extended_hosts) elif host_ips: extended_hosts = host.get_hosts_by_ip(host_ips, host_inventory) if is_remove_duplicate: hosts = host.delete_duplicate_hosts(extended_hosts) module.exit_json(ok=True, hosts=extended_hosts) else: module.exit_json(ok=False, hosts=[], result=\\"No Host present\\") if __name__ == '__main__': main()"},{"instruction":"Design a class in Python that stores a 2x2 matrix and has a method to return its inverse.","output":"class Matrix: def __init__(self, matrix): self.matrix = matrix def get_inverse(self): inverse = [[0,0],[0,0]] a = self.matrix[0][0] b = self.matrix[0][1] c = self.matrix[1][0] d = self.matrix[1][1] inverse[0][0] = d/(a*d - b*c) inverse[0][1] = -1*b/(a*d - b*c) inverse[1][0] = -1*c/(a*d - b*c) inverse[1][1] = -(a/(a*d - b*c)) return inverse"},{"instruction":"Create a function for checking if a string is palindrome using Python.","output":"def is_palindrome(text): reverse = text[::-1] # reverse the string return text == reverse"},{"instruction":"Generate an algorithm in Python to find the intersection of two given lists. list1=[1,2,3,4] list2=[3,4,5,6]","output":"# Function to find the intersection of two lists def intersect(list1, list2): intersection = [] # Iterate through the items in list1 for item in list1: # Check if the item is in list2 if item in list2: # If yes, add it to the intersection list intersection.append(item) # Return the intersection return intersection list1 = [1,2,3,4] list2 = [3,4,5,6] intersection = intersect(list1, list2) print(intersection) # Output: [3, 4]"},{"instruction":"Write a Python program to generate all binary strings of a given length n. 3","output":"def generate_binary_str(n): result = [] for i in range(2 ** n): s = bin(i)[2:] s = (n - len(s)) * \\"0\\" + s result.append(s) return result result = generate_binary_str(3) print(result) # Output: ['000', '001', '010', '011', '100', '101', '110', '111']"},{"instruction":"Find the smallest number in the given list without using any builtin Python functions or sorting. arr = [8, 3, 9, 5, 1]","output":"def find_smallest(arr): smallest = None for n in arr: if smallest is None or n < smallest: smallest = n return smallest arr = [8, 3, 9, 5, 1] smallest = find_smallest(arr) print(smallest)"},{"instruction":"Design a text editor in Python that prints ‘Corrected’ if a correct sentence is entered, and ‘Incorrect’ if an incorrect sentence is entered","output":"def text_editor(): sentence = input(\\"Enter the sentence: \\") is_correct = check_correctness(sentence) if is_correct: print(\\"Corrected\\") else: print(\\"Incorrect\\") def check_correctness(sentence): # code to check the correctness of the sentence return is_correct"},{"instruction":"Create a python code to get the intersection of two Lists. List1 = [1, 3, 5, 7, 8] List2 = [2, 3, 7, 8, 9]","output":"def get_intersection(List1, List2): ''' This program takes in two lists and returns the elements common in both lists ''' intersect_list = [] for item in List1: if item in List2: intersect_list.append(item) return intersect_list List1 = [1, 3, 5, 7, 8] List2 = [2, 3, 7, 8, 9] print(get_intersection(List1, List2)) # [3, 7, 8]"},{"instruction":"Write a Python program to check if all the elements in a given list are unique.","output":"def is_list_unique(list): unique_list = list(dict.fromkeys(list)) return len(list) == len(unique_list)"},{"instruction":"Develop a Python function to sum an array of integers [1, 2, 3, 4]","output":"def sumIntArray(arr): arr_sum = 0 for num in arr: arr_sum += num return arr_sum arr = [1, 2, 3, 4] print(sumIntArray(arr)) #prints 10"},{"instruction":"Design and program a Python function to find the maximum number from an array of integers [10, 2, 4, 6, 8, 9]","output":"def max_num(arr): max_num = arr[0] for i in arr: if i > max_num: max_num = i return max_num if __name__ == '__main__': arr = [10, 2, 4, 6, 8, 9] print('The maximum number in array is', max_num(arr))"},{"instruction":"Write a Python program to use a type hint to check if a variable is an instance of a particular class.","output":"def check_type(variable, class_name): if isinstance(variable, class_name): print(\\"It is an instance of the class\\") else: print(\\"It is not an instance of the class\\")"},{"instruction":"Write a Python program to compute the integral of a given function using the trapezoidal rule.","output":"def trapezoidal_rule(f, a, b, n): # calculate h h = (b-a)/n # initialize output result = 0.0 # calculate last term result += 0.5*f(a) + 0.5*f(b) # calculate intermediate terms for i in range(1,n): result += f(a + i*h) # multiply by step size result *= h return result"},{"instruction":"Compose a Python class hierarchy which models the relationship between a student, instructor, and class.","output":"class Person: def __init__(self, name): self.name = name class Student(Person): def __init__(self, name, student_id): super().__init__(name) self.student_id = student_id self.classes = [] def enroll(self, course): self.classes.append(course) class Instructor(Person): def __init__(self, name, instructor_id): super().__init__(name) self.instructor_id = instructor_id self.classes = [] def assign(self, course): self.classes.append(course) class Course: def __init__(self, name, course_id): self.name = name self.course_id = course_id self.students = [] self.instructor = None def assign_instructor(self, instructor): self.instructor = instructor def add_student(self, student): self.students.append(student)"},{"instruction":"Rewrite the following CoffeeScript program in Python code. coffeeConvert = (x) > x * 60","output":"def coffeeConvert(x): return x * 60"},{"instruction":"Given a list of numbers, write a python program that finds an index of an array element and its corresponding value. my_list = [2,4,6,8,10]","output":"def find_index_and_value(my_list): for i, num in enumerate(my_list): print(\\"Element with index %d has value %d\\" % (i, num)) my_list = [2,4,6,8,10] find_index_and_value(my_list)"},{"instruction":"Write an algorithm in Python to find the exponentiation of a given base and an exponent. base = 2 exponent = 4","output":"def pow(base, exponent): result = 1 for i in range(exponent): result = result * base return result base = 2 exponent = 4 print('The result of {}^{} is {}'.format(base, exponent, pow(base, exponent)))"},{"instruction":"Generate Python code to find the pair with the maximum product in a given array.","output":"def max_pair_product(arr): # Initialize the maximum product and the maximum elements max_product = 0 max_elems = [0, 0] # Iterate through each element in the array for i in range(len(arr)): left_elem = arr[i] # Iterate through each other element in the array for j in range(i + 1, len(arr)): right_elem = arr[j] # Compute the product product = left_elem * right_elem # Find the maximum product and the corresponding elements if product > max_product: max_product = product max_elems = [left_elem, right_elem] # Return the maximum product and the corresponding elements return (max_product, max_elems)"},{"instruction":"Develop a Python program to detect a loop in a linked list.","output":"class Node: def __init__(self, data): self.data = data self.next = None def detect_loop(head): slow_ptr = head fast_ptr = head #check if the linked list is empty if head is None: return False #iterate over the list while fast_ptr is not None and fast_ptr.next is not None: slow_ptr = slow_ptr.next fast_ptr = fast_ptr.next.next #if the slow and fast pointer are pointing to the same node, then there is a loop if slow_ptr == fast_ptr: return True return False"},{"instruction":"Create a Python script that compares two lists and prints their differences. list1 = [1, 2, 3, 4] list2 = [2, 4, 6, 8]","output":"list1 = [1, 2, 3, 4] list2 = [2, 4, 6, 8] list_diff = [] for i in list1: if i not in list2: list_diff.append(i) for j in list2: if j not in list1: list_diff.append(j) print(list_diff) # output: [1, 3, 6, 8]"},{"instruction":"Create a Python function to calculate the standard deviation of a set of numbers. [1, 2, 3, 4, 5]","output":"def calculate_std(numbers): mean = sum(numbers)/len(numbers) squared_differences = [(num-mean)**2 for num in numbers] variance = sum(squared_differences) / len(numbers) return variance**0.5 result = calculate_std([1, 2, 3, 4, 5]) print(result)"},{"instruction":"Write a Python program to return the greatest common divisor between two numbers. num1 = 15 num2 = 25","output":"def gcd(num1, num2): while num2 != 0: temp = num1 num1 = num2 num2 = temp % num2 return num1 print(gcd(num1,num2))"},{"instruction":"Convert the following function from Python to Java. def generate_list(size): Generate a list of integers from 0 to size 1. return [x for x in range(size)]","output":"public List<Integer> generateList(int size) { /* Generate a list of integers from 0 to size - 1. */ List<Integer> list = new ArrayList<>(); for (int i = 0; i < size; i++) { list.add(i); } return list; }"},{"instruction":"Create a web crawler in Python to get all web page URLs from a given website. https://en.wikipedia.org/wiki/Web_crawler","output":"import requests from bs4 import BeautifulSoup url = 'https://en.wikipedia.org/wiki/Web_crawler' request = requests.get(url) soup = BeautifulSoup(request.content, 'html.parser') for link in soup.find_all('a', href=True): print(link['href'])"},{"instruction":"Create a function in Python to calculate the average of a given list [9, 8, 7]. [9, 8, 7]","output":"def calculate_average(lst): sum = 0 for el in lst: sum += el return sum / len(lst) avg = calculate_average([9, 8, 7]) print(avg) # Output: 8.0"},{"instruction":"Create a web scraper using Python to extract the titles and dates of blog posts on a particular website.","output":"import requests from bs4 import BeautifulSoup # Make the request r = requests.get('http://example.com/blog') # Parse the HTML soup = BeautifulSoup(r.text, 'html.parser') # Extract the page titles and dates titles = [] dates = [] for tag in soup.find_all('h2'): titles.append(tag.text) for tag in soup.find_all('time'): dates.append(tag.text)"},{"instruction":"Create a function in Python to build an empty dictionary.","output":"def buildDictionary(): dictionary = dict() return dictionary"},{"instruction":"Generate an XML document in Python to display the data of an employee table. Table columns: employee_id, employee_name, department, salary","output":"import xml.etree.ElementTree as ET root = ET.Element('employees') employee1 = ET.SubElement(root, \\"employee\\") employee1.set(\\"employee_id\\", \\"1\\") employee1.set(\\"employee_name\\", \\"John\\") employee1.set(\\"department\\", \\"IT\\") employee1.set(\\"salary\\", \\"50000\\") employee2 = ET.SubElement(root, \\"employee\\") employee2.set(\\"employee_id\\", \\"2\\") employee2.set(\\"employee_name\\", \\"Jane\\") employee2.set(\\"department\\", \\"Marketing\\") employee2.set(\\"salary\\", \\"55000\\") tree = ET.ElementTree(root) tree.write(\\"employee_data.xml\\")"},{"instruction":"Edit the following Python program to make it more efficient and concise. def calculate_sum(lst): total = 0 for num in lst: total = total + num return total","output":"def calculate_sum(lst): return sum(lst)"},{"instruction":"Create a Python script that divides a list of numbers into two subsets whose sum is as close as possible. numbers = [1, 4, 8, 10, 5, 9]","output":"def divide_list(numbers): # find the sum of the list list_sum = sum(numbers) # try all possible combinations of dividing the list best_difference = float('inf') best_subset_1 = None best_subset_2 = None for i in range(2**len(numbers)): # get the binary representation of i bit_string = '{:0b}'.format(i).zfill(len(numbers)) subset_1 = [] subset_2 = [] for j, bit in enumerate(bit_string): if bit == '0': subset_1.append(numbers[j]) else: subset_2.append(numbers[j]) # check if the difference between the two subsets is the lowest difference = abs(sum(subset_1) - sum(subset_2)) if difference < best_difference: best_difference = difference best_subset_1 = subset_1 best_subset_2 = subset_2 return best_subset_1, best_subset_2"},{"instruction":"Create a Python function to detect a specific sequence Given a list of integers, list_a = [1, 6, 3, 7, 4], find the index of the sequence [3, 7]","output":"def find_sequence(list_a, pattern): result = [] for i in range(len(list_a)-len(pattern)+1): if list_a[i:i+len(pattern)] == pattern: result.append(i) return result"},{"instruction":"Can you construct a class in Python which will allow users to assign attributes and values like a dictionary?","output":"class MyDict(dict): def __init__(self, **kwargs): super().__init__(**kwargs) def __getattr__(self, attr): if attr in self: return self[attr] else: raise AttributeError(\\"Attribute '{}' not found\\".format(attr)) def __setattr__(self, attr, value): self[attr] = value"},{"instruction":"Generate a universal JSON serialization from any Python class.","output":"import json def serialize_object(obj): if hasattr(obj, '__dict__'): return obj.__dict__ else: return obj def serialize_class(class_instance): return json.dumps(class_instance, default=serialize_object) if __name__ == '__main__': # Sample class Person: def __init__(self, name, age): self.name = name self.age = age def hello(self): print(\\"Hello, my name is {} and I'm {} years old\\".format(self.name, self.age)) person = Person('Jane', 20) print(serialize_class(person))"},{"instruction":"Write a function in Python to classify a given number into even or odd.","output":"def classify_num(num): if (num % 2 == 0): return \\"Even\\" else: return \\"Odd\\""},{"instruction":"Create a python script to compare the similarity between two given sentences using cosine similarity.","output":"import numpy as np from sklearn.feature_extraction.text import CountVectorizer def similarity_score(sentence1, sentence2): \\"\\"\\"Computes the similarity between two sentences using cosine similarity.\\"\\"\\" # Vectorize the sentences vectorizer = CountVectorizer(stop_words='english') vectorizer.fit_transform([sentence1, sentence2]) vector1, vector2 = vectorizer.transform([sentence1, sentence2]).toarray() # Compute cosine similarity score = np.dot(vector1, vector2) / (np.linalg.norm(vector1) * np.linalg.norm(vector2)) return score"},{"instruction":"Write a Python program to find the closest number to zero from an array. [8, 5, 2, 10]","output":"def closest_number(arr): min_diff = abs(arr[0]) for num in arr: if abs(num) < min_diff: min_diff = abs(num) return min_diff # Driver Code arr = [8, 5, -2, 10] print(closest_number(arr)) # -2"},{"instruction":"Create a program in Python to output all the ndigit Armstrong numbers. n = 3","output":"def armstrong_numbers(n): # Generate numbers up to 10^n for i in range(10**(n - 1), 10**n): # Convert the number to a list of digits digits = [int(d) for d in str(i)] # Calculate the sum of the nth powers of the digits sum_of_nth_powers = 0 for d in digits: sum_of_nth_powers += d**n # If the sum is equal to the original number, it is an Armstrong number if sum_of_nth_powers == i: print(i) n = 3 armstrong_numbers(n) # Output 153 370 371 407"},{"instruction":"Write a Python code to update the values in a table. Table name: orders Table Schema: order_id INT customer_name VARCHAR price INT Input Data: order_id = 2345 customer_name = ‘John Smith' price = 59.99","output":"cur.execute(\\"UPDATE orders SET customer_name = %s, price = %s WHERE order_id = %s\\", (customer_name, price, order_id)) conn.commit()"},{"instruction":"Write a function in Python to find the kth smallest element in an unsorted array. input_array = [7, 2, 5, 9, 6], k = 4","output":"def kth_smallest(input_array, k): input_array.sort() return input_array[k-1]"},{"instruction":"Create a new class in Python to represent a point in the Euclidean plane.","output":"class Point: def __init__(self, x, y): self.x = x self.y = y"},{"instruction":"Create a Python script to generate 10 random numbers and print their sum. <noinput>.","output":"import random nums = random.sample(range(100), 10) total = 0 for num in nums: total += num print(total)"},{"instruction":"Write a Python program to simulate a random neuron network.","output":"import random # Neuron class class Neuron: # Initialize inputs and weights def __init__(self, numInputs): self.weights = [] for i in range(numInputs): self.weights.append(random.uniform(-1, 1)) # Process inputs and produce output def process(self, inputs): # Multiply inputs by weights output = 0 for i in range(len(self.weights)): output += self.weights[i] * inputs[i] # Use sigmoid function to normalize result return 1 / (1 + math.exp(-output))"},{"instruction":"Convert a given list of integers to a string in Python. [56, 23, 7]","output":"def list_to_string(int_list): return ' '.join(str(x) for x in int_list) int_list = [56, 23, 7] print(list_to_string(int_list))"},{"instruction":"Create an algorithm in Python that approximates pi upto given accuracy. Accuracy: 2 decimal po","output":"# function to approximate pi def approximate_pi(accuracy): pi = 0 iteration = 0 # set precision point precision = 10 ** -accuracy while True: pi += (4 / (2 * iteration + 1)) * ((-1) ** iteration) # terminates if the difference in pi is less than given accuracy if abs((pi - 3.14) > precision): break iteration += 1 return round(pi, accuracy) # example accuracy = 2 print(approximate_pi(accuracy)) # Output: 3.14"},{"instruction":"Create a function in Python that takes two arguments, x and y, and returns the sum of x and y.","output":"def add(x, y): return x + y"},{"instruction":"Create a python data structure to store customer data, including customer name, address, email and phone number. John Doe 1234 Anystreet Anytown, ST 12345 johnd@example.com 1234567890","output":"customer = { 'name': \\"John Doe\\", 'address': \\"1234 Anystreet Anytown, ST 12345\\", 'email': \\"johnd@example.com\\", 'phone': \\"123-456-7890\\" }"},{"instruction":"Create a Python program to search for a particular pattern in a string of text and return all matching substrings. let text = hey this is a string to match for a pattern;","output":"import re text = \\"hey this is a string to match for a pattern\\" pattern = \\"match\\" # Find all matches matches = re.findall(pattern, text) # Print the matches print(matches) # Output: ['match']"},{"instruction":"w would you convert a string to float in Python?","output":"We can use the float() function to convert a string to float in Python. We can pass the string to the function as an argument and it will return the float representation of the same. Example: string_value = \\"12.45\\" float_value = float(string_value) print(float_value) #Output: 12.45"},{"instruction":"Develop a Python program to grade a student's performance on a multiple choice test. [5, 10, 15]","output":"def grade_test(scores): total = 0 for score in scores: total += score if total >= 40: return \\"Pass\\" else: return \\"Fail\\" scores = [5, 10, 15] grade = grade_test(scores) print(\\"Grade: \\" + grade)"},{"instruction":"Create an AI assistant to answer questions about the Python programming language. The assistant should be able to answer questions like What is a while loop?, What is the difference between a list and a dictionary? Not applicable","output":"from rasa_nlu.model import Interpreter interpreter = Interpreter.load('./models/nlu/default/model') def ask_question(question): result = interpreter.parse(question) intent = result['intent']['name'] if intent == 'python_while_loop': #return answer to \\"What is a while loop?\\" elif intent == 'python_list_dictionary': #return answer to \\"What is the difference between a list and a dictionary?\\""},{"instruction":"Write a python program to preprocess a dataset such that each row is a list containing tuples and containing max four columns.","output":"import csv def preprocess_data(in_file): '''This function preprocesses a csv file into a list containing tuples with max four columns per row.''' with open(in_file) as fin: reader = csv.reader(fin) data = [line[:4] for line in reader] return [tuple(line) for line in data]"},{"instruction":"Convert the following JavaScript code to its equivalent Python code. const array = [1, 2, 3];","output":"array = [1, 2, 3]"},{"instruction":"Write a Python program to find the number of divisors of an integer.","output":"def count_number_divisors(x): count = 0 for i in range(1, x+1): if x % i == 0: count = count + 1 return count"},{"instruction":"Update a Python program which constructs a list of prime numbers using the Sieve of Eratosthenes algorithm. The program should improve its performance by using an efficient implementation of the algorithm. Not applicable","output":"def sieve_of_eratosthenes(n): primes = [True for i in range(n+1)] p = 2 while (p * p <= n): if (primes[p] == True): for i in range(p *2, n+1, p): primes[i] = False p += 1 primes[0] = False primes[1] = False prime_numbers = [] for i in range(n+1): if primes[i]: prime_numbers.append(i) return prime_numbers print(sieve_of_eratosthenes(20))"},{"instruction":"Write a Python program to find the greatest overlapping of two interval lists. [[1,4], [7, 10], [3, 5]] and [[2,5], [6,9]]","output":"def overlap(intervals1, intervals2): max_overlap = 0 for i in range(len(intervals1)): for j in range(len(intervals2)): overlap = min(intervals1[i][1], intervals2[j][1]) - max(intervals1[i][0], intervals2[j][0]) max_overlap = max(max_overlap, overlap) return max_overlap result = overlap([[1,4], [7, 10], [3, 5]], [[2,5], [6,9]]) print(result)"},{"instruction":"Create a set of instructions in Python to generate a Mad Libs game. Not applicable","output":"# define the set of words words = { 'adjective': ['funny', 'beautiful', 'tall'], 'noun': ['cat', 'dog', 'computer'], 'verb': ['jump', 'run', 'walk'] } # function for getting user input def get_input(type): print(\\"Enter a %s\\" % type) return input() # function for getting a random word def get_random_word(type): import random return random.choice(words[type]) # main function def play_game(): print(\\"Welcome to Mad Libs! Let's get started!\\") # get user input adjective1 = get_input('adjective') noun1 = get_input('noun') verb1 = get_input('verb') # get random words adjective2 = get_random_word('adjective') noun2 = get_random_word('noun') verb2 = get_random_word('verb') # create mad lib mad_lib = \\"The %s %s %s over the %s %s and then %s away!\\" % (adjective1, noun1, verb1, adjective2, noun2, verb2) # print mad lib print(mad_lib)"},{"instruction":"Design a function in Python that takes an array of strings as input and returns all the strings in reversed order. data = [Hello, World, Foo, Bar]","output":"def reverseStrings(data): return [string[::-1] for string in data] reversedStrings = reverseStrings(data) print(reversedStrings) # [\\"olleH\\", \\"dlroW\\", \\"ooF\\", \\"raB\\"]"},{"instruction":"This code creates a textured pyramid in Python using OpenGL drawing primitives. To create the pyramid, define a function called createPyramid() that returns a geode. Then, load a texture from a file and create a StateSet that enables the texture. Finally, assign the StateSet to the geode and enter a simulation loop.","output":"#!/bin/env python # Translated into python from C++ tutorial at # http:#trac.openscenegraph.org/projects/osg/wiki/Support/Tutorials/Textures from osgpypp import osg, osgDB, osgViewer import sys # Creating Textured Geometry using StateSets # Goals # Add a texture to geometry defined by OpenGL drawing primitives introduced in # tutorial Basic geometry. # Background # The previous tutorial introduced viewing scenes that include basic shapes # created from OpenGL primitives. This section explains how to add textures to # these shapes. To make the code easier to use, we'll put the pyramid code # into a function that creates a geode and returns a pointer to it. The # following code is from tutorial Basic geometry. def createPyramid(): pyramidGeode = osg.Geode() pyramidGeometry = osg.Geometry() pyramidGeode.addDrawable(pyramidGeometry) # Specify the vertices: pyramidVertices = osg.Vec3Array() pyramidVertices.append( osg.Vec3(0, 0, 0) ) # front left pyramidVertices.append( osg.Vec3(2, 0, 0) ) # front right pyramidVertices.append( osg.Vec3(2, 2, 0) ) # back right pyramidVertices.append( osg.Vec3( 0,2, 0) ) # back left pyramidVertices.append( osg.Vec3( 1, 1,2) ) # peak # Associate this set of vertices with the geometry associated with the # geode we added to the scene. pyramidGeometry.setVertexArray( pyramidVertices ) # Create a QUAD primitive for the base by specifying the # vertices from our vertex list that make up this QUAD: pyramidBase = osg.DrawElementsUInt(osg.PrimitiveSet.QUADS, 0) pyramidBase.append(3) pyramidBase.append(2) pyramidBase.append(1) pyramidBase.append(0) # Add this primitive to the geometry: # pyramidGeometry.addPrimitiveSet(pyramidBase) # code to create other faces goes here! pyramidGeometry.addPrimitiveSet(pyramidBase) # Repeat the same for each of the four sides. Again, vertices are specified in counter-clockwise order. pyramidFaceOne = osg.DrawElementsUInt(osg.PrimitiveSet.TRIANGLES, 0) pyramidFaceOne.append(0) pyramidFaceOne.append(1) pyramidFaceOne.append(4) pyramidGeometry.addPrimitiveSet(pyramidFaceOne) pyramidFaceTwo = osg.DrawElementsUInt(osg.PrimitiveSet.TRIANGLES, 0) pyramidFaceTwo.append(1) pyramidFaceTwo.append(2) pyramidFaceTwo.append(4) pyramidGeometry.addPrimitiveSet(pyramidFaceTwo) pyramidFaceThree = osg.DrawElementsUInt(osg.PrimitiveSet.TRIANGLES, 0) pyramidFaceThree.append(2) pyramidFaceThree.append(3) pyramidFaceThree.append(4) pyramidGeometry.addPrimitiveSet(pyramidFaceThree) pyramidFaceFour = osg.DrawElementsUInt(osg.PrimitiveSet.TRIANGLES, 0) pyramidFaceFour.append(3) pyramidFaceFour.append(0) pyramidFaceFour.append(4) pyramidGeometry.addPrimitiveSet(pyramidFaceFour) colors = osg.Vec4Array() colors.append(osg.Vec4(1.0, 0.0, 0.0, 1.0) ) #index 0 red colors.append(osg.Vec4(0.0, 1.0, 0.0, 1.0) ) #index 1 green colors.append(osg.Vec4(0.0, 0.0, 1.0, 1.0) ) #index 2 blue colors.append(osg.Vec4(1.0, 1.0, 1.0, 1.0) ) #index 3 white colors.append(osg.Vec4(1.0, 0.0, 0.0, 1.0) ) #index 4 red pyramidGeometry.setColorArray(colors) pyramidGeometry.setColorBinding(osg.Geometry.BIND_PER_VERTEX) # Since the mapping from vertices to texture coordinates is 1:1, # we don't need to use an index array to map vertices to texture # coordinates. We can do it directly with the 'setTexCoordArray' # method of the Geometry class. # This method takes a variable that is an array of two dimensional # vectors (osg.Vec2). This variable needs to have the same # number of elements as our Geometry has vertices. Each array element # defines the texture coordinate for the cooresponding vertex in the # vertex array. texcoords = osg.Vec2Array(5) texcoords[0].set(0.00,0.0) # tex coord for vertex 0 texcoords[1].set(0.25,0.0) # tex coord for vertex 1 texcoords[2].set(0.50,0.0) # \\"\\" texcoords[3].set(0.75,0.0) # \\"\\" texcoords[4].set(0.50,1.0) # \\"\\" pyramidGeometry.setTexCoordArray(0,texcoords) return pyramidGeode # Loading a Texture, Creating a State Set, assigning it to a Node # The method for rendering primitives is controlled using StateSets. This # section of code demonstrates how to load a texture from file, create a # StateSet in which this texture is enabled, and assign this StateSet to a # node in the scene. The first section starts out the same as previous # tutorials. Initialize a viewer and build a scene with a single pyramid. # Declare a group to act as root node of a scene: root = osg.Group() pyramidGeode = createPyramid() root.addChild(pyramidGeode) # Now for adding a texture. Here we'll declare a texture instance and set # its data variance as 'DYNAMIC'. (If we don't declare the texture as dynamic, # some of the osg's optimization routines could remove it.) The texture class # encapsulates OpenGL texture modes (wrap, filiter, etc.) as well as an # osg.Image. The code below shows how to read an osg.Image instance from a # file and associate this image with a texture. KLN89FaceTexture = osg.Texture2D() # protect from being optimized away as static state: KLN89FaceTexture.setDataVariance(osg.Object.DYNAMIC) # load an image by reading a file: klnFace = osgDB.readImageFile(\\"KLN89FaceB.tga\\") if klnFace is None: print \\" Couldn't find texture, quitting.\\" sys.exit(-1) # Assign the texture to the image we read from file: KLN89FaceTexture.setImage(klnFace) # Textures can be associated with rendering StateSets. The next step is to # create a StateSet, associate and enable our texture with this state set and # assign the StateSet to our geometry. # Create a StateSet with default settings: stateOne = osg.StateSet() # Assign texture unit 0 of our StateSet to the texture # we just created and enable the texture. stateOne.setTextureAttributeAndModes(0, KLN89FaceTexture, osg.StateAttribute.ON) # Associate this state set with the Geode that contains # the pyramid: pyramidGeode.setStateSet(stateOne) # The last step is the simulation loop: viewer = osgViewer.Viewer() #The final step is to set up and enter a simulation loop. viewer.setSceneData( root ) viewer.run()"},{"instruction":"Create a Python function that takes two parameters, a number (n) and a word (w), and prints out the word n number of times. 3, Hello","output":"def repeat(n, w): for i in range(n): print(w) repeat(3, \\"Hello\\") # Output: Hello Hello Hello"},{"instruction":"Create a Python script that finds the most frequent words in a passage. passage = This is a passage about cats.","output":"from collections import Counter def most_frequent_words(passage): word_list = passage.split() word_freq = Counter(word_list) most_freq_word = word_freq.most_common(1) return most_freq_word"},{"instruction":"Create an email migration script in Python to migrate emails from source mailbox to destination. The script should enable reading, writing, and deleting emails from the source mailbox. source_mailbox = <path to source mailbox> destination_mailbox = <path to destination mailbox>","output":"import imaplib import email import os # Source mailbox settings, assuming IMAP source_mailbox = \\"<path to source mailbox>\\" source_mailbox_username = \\"<source mailbox username>\\" source_mailbox_password = \\"<source mailbox password>\\" # Destination mailbox settings, assuming IMAP destination_mailbox = \\"<path to destination mailbox>\\" destination_mailbox_username = \\"<destination mailbox username>\\" destination_mailbox_password = \\"<destination mailbox password>\\" # Establish connection to source mailbox try: source_imap = imaplib.IMAP4_SSL(source_mailbox) except imaplib.IMAP4.error: print('Failed to connect to source mailbox. Exiting...') sys.exit(-1) # Establish connection to destination mailbox try: destination_imap = imaplib.IMAP4_SSL(destination_mailbox) except imaplib.IMAP4.error: print('Failed to connect to destination mailbox. Exiting...') sys.exit(-1) # Login to source mailbox try: source_imap.login(source_mailbox_username, source_mailbox_password) except imaplib.IMAP4.error: print('Failed to login to source mailbox. Exiting...') sys.exit(-1) # Login to destination mailbox try: destination_imap.login(destination_mailbox_username, destination_mailbox_password) except imaplib.IMAP4.error: print('Failed to login to destination mailbox. Exiting...') sys.exit(-1) # Establish connection to source mailbox try: source_imap.select() except imaplib.IMAP4.error: print('Failed to select source mailbox. Exiting...') sys.exit(-1) # Establish connection to destination mailbox try: destination_imap.select() except imaplib.IMAP4.error: print('Failed to select destination mailbox. Exiting...') sys.exit(-1) # Read emails from source and copy to destination mailbox _, messages = source_imap.search(None, 'ALL') for message in messages[0].split(): _, data = source_imap.fetch(message, '(RFC822)') msg = email.message_from_bytes(data[0][1]) source_imap.store(message, '+FLAGS', 'Deleted') destination_imap.append( destination_mailbox, None, None, msg.as_bytes()) # Commit changes to source mailbox source_imap.expunge() # Log out of source and destination mailbox source_imap.close() source_imap.logout() destination_imap.close() destination_imap.logout()"},{"instruction":"Generate a function in Python to find the maximum element from a given array. [10, 15, 20, 11, 99]","output":"def findMaxElement(array): maxElement = 0 for element in array: if element > maxElement: maxElement = element return maxElement array = [10, 15, 20, 11, 99] maxElement = findMaxElement(array) print(\\"The maximum element in the array is\\", maxElement)"},{"instruction":"Create a Python program to crop a list to a specific length list = [1, 2, 3, 4, 5, 6], length = 4","output":"def crop_list(input_list, length): output_list = [] for i in range(length): output_list.append(input_list[i]) return output_list my_list = [1, 2, 3, 4, 5, 6] length = 4 result = crop_list(my_list, length) print(result)"},{"instruction":"Design a Python web crawler that takes a URL as an input and prints out a list of all the hyperlinks on the page. https://www.example.com","output":"import requests from bs4 import BeautifulSoup def crawl_page(url): page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') return [link.get('href') for link in soup.find_all('a')] url = \\"https://www.example.com\\" links = crawl_page(url) for link in links: print(link)"},{"instruction":"Write a Python program to detect if a string contains any special characters.","output":"def has_special_characters(string): import re return bool(re.search('[^a-zA-Z0-9]', string))"},{"instruction":"Generate a Python script to convert a text to title case format.","output":"def title_case(string): convert_string = string.split(\\" \\") title_string = \\"\\" for each_word in convert_string: first_letter = each_word[0].upper() other_letters = each_word[1:].lower() title_string += first_letter + other_letters + \\" \\" return title_string"},{"instruction":"Design a web scraper using Python that gathers all the phone numbers from a set of webpages? URLs to scrape","output":"import requests import re def scrape_phone_numbers(urls): phone_numbers = [] for url in urls: response = requests.get(url) numbers = re.findall(\\"([+]d{2}s?0?d{10})\\", response.text) phone_numbers.extend(numbers) return phone_numbers"},{"instruction":"Write a Python algorithm that finds the factorial of a given number. 5","output":"def factorial(n): if n == 0: return 1 return n * factorial(n-1)"},{"instruction":"Create a Python script that evaluates an expression using a stackbased algorithm. Expression: 5+3*4","output":"def eval_expr(expr): stack = [] tokens = expr.split() for token in tokens: if token == '+': n1 = stack.pop() n2 = stack.pop() stack.append(n1 + n2) elif token == '-': n1 = stack.pop() n2 = stack.pop() stack.append(n2 - n1) elif token == '*': n1 = stack.pop() n2 = stack.pop() stack.append(n1 * n2) elif token == '/': n1 = stack.pop() n2 = stack.pop() stack.append(n2 / n1) else: stack.append(int(token)) return stack[0] print(eval_expr('5 + 3 * 4')) # 17"},{"instruction":"Write a Python program to optimize the sorting of a given list of items. ['chair', 'lamp', 'books', 'table']","output":"def optimize_sort(items): sorted_items = sorted(items) return sorted_items"},{"instruction":"Create a simple Python application for calculating the area of different shapes (circle, square, triangle, and rectangle). Not applicable","output":"import math def calculate_area(shape, *args): if shape == 'circle': radius = args[0] return math.pi * radius * radius elif shape == 'square': side_length = args[0] return side_length * side_length elif shape == 'triangle': base, height = args return 0.5 * base * height elif shape == 'rectangle': length, width = args return length * width else: return 'Invalid shape' if __name__ == '__main__': print(calculate_area('circle', 5))"},{"instruction":"Write a Python program to optimize the given linear objective function using the Simplex algorithm.","output":"import numpy as np from scipy.optimize import minimize def optimize_function(objective): bounds = ((0, None), (0, None), (0, None)) res = minimize(objective, [1,1,1], method=\\"Nelder-Mead\\", bounds=bounds) return res"},{"instruction":"Create a Python class called Rectangle that stores the length and width.","output":"class Rectangle: def __init__(self, length, width): self.length = length self.width = width def area(self): return self.length * self.width"},{"instruction":"Construct an Python program for binary search for an item in a sorted list.","output":"def binary_search(my_list, item): low = 0 high = len(my_list)-1 while low<=high: mid = (low+high)//2 if my_list[mid] == item: return mid elif my_list[mid] > item: high = mid - 1 else: low = mid + 1 return -1"},{"instruction":"Can you suggest an algorithm for finding all the permutations of a given string in Python?","output":"def permutations(string): if len(string) == 1: return [string] result = [] for i in range(0, len(string)): subString = string[0:i] + string[i+1: len(string)] subPermutations = permutations(subString) for j in range(0, len(subPermutations)): result.append(string[i] + subPermutations[j]) return result"},{"instruction":"Create a Python program that takes a string as input and outputs the string with all characters replaced with their corresponding ASCII values. Python","output":"def ascii_repr_str(str): ans = '' for ch in str: ans += str(ord(ch)) return ans print(ascii_repr_str(\\"Python\\")) # result: 080 121 116 104 111 110"},{"instruction":"Write a Python program that takes a string and gives the frequency of each letter and the relative frequency of each letter. string = Foo Bar","output":"input_string = \\"Foo Bar\\" # A dict is initialized to store the frequency of each letter letter_frequency = {} # for loop to calculate frequency of each letter # in the input_string for letter in input_string: # updating the value letter_frequency[letter] = letter_frequency.get(letter, 0) + 1 # variable to store total number of characters total_characters = 0 # variable to store the relative frequency relative_frequency = {} # loop to count total number of characters for letter in letter_frequency: total_characters += letter_frequency[letter] # loop to calculate relative frequency # of each letter for letter in letter_frequency: relative_frequency[letter] = (letter_frequency[letter] / total_characters) * 100 # printing the result print(\\"Letter Frequency : \\", letter_frequency) print(\\"Relative Frequency : \\", relative_frequency)"},{"instruction":"Optimize the following Python function to calculate the sum of natural numbers up to a given number. n = 10","output":"def sum_natural_numbers(n): total = 0 for i in range(1, n + 1): total += i return total def sum_natural_numbers(n): return n * (n + 1) // 2 print(sum_natural_numbers(10))"},{"instruction":"Construct a Python function that takes two integers a and b and returns the sum of their squares. 2 and 3","output":"def sum_sqr(a, b): return a*a + b*b print(sum_sqr(2, 3))"},{"instruction":"Write a Python code to sort the given array. array : [ 2, 4, 1, 3, 7, 5]","output":"# Bubble sort algorithm def sort_array(array): for i in range(len(array)): for j in range(len(array)-i-1): if array[j] > array[j+1]: array[j], array[j+1] = array[j+1], array[j] return array # Sample array array = [2, 4, 1, 3, 7, 5] # Function call sorted_array = sort_array(array) # Print sorted output print(sorted_array)"},{"instruction":"Generate a python program to determine which episode of a TV show is the most popular.","output":"def get_most_popular_episode(data): \\"\\"\\" Args: data (dict): A dictionary with information about each episode of the TV show, including the number of views and the episode number Returns: int: The number of the most popular episode \\"\\"\\" max_views = 0 most_popular_episode = 0 for ep_num, ep_data in data.items(): num_views = ep_data[\\"views\\"] if num_views > max_views: max_views = num_views most_popular_episode = ep_num return most_popular_episode"},{"instruction":"Optimize a Python script's performance by refactoring the code to use multiprocessing. def process_list_data(data): for record in data: # Process the data list_data = [1,2,3,4,5] process_list_data(list_data)","output":"from multiprocessing import Pool def process_data(record): # Process the data def process_list_data(data): with Pool() as p: p.map(process_data, data) list_data = [1,2,3,4,5] process_list_data(list_data)"},{"instruction":"Output a program in Python to find the most frequent occurring item in an array arr = [1,3,3,3,4,4,4,4,5,5]","output":"from collections import Counter arr = [1,3,3,3,4,4,4,4,5,5] data = Counter(arr) get_mode = dict(data) mode = [k for k, v in get_mode.items() if v == max(list(data.values()))] print(f\\"Mode of the given list is {mode}\\")"},{"instruction":"Construct a Python function to reverse the contents of a given array inplace.","output":"def reverse_in_place(arr): start = 0 end = len(arr)-1 while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1"},{"instruction":"Using a Decision Tree model, create a Python program to predict whether a customer is likely to churn given 5 different features. Features: Purchase history, Gender, Age, Location, Billing Amou","output":"import pandas as pd from sklearn.tree import DecisionTreeClassifier from sklearn.model_selection import train_test_split # Read the dataset dataset = pd.read_csv('data.csv') # Extract the input and output X = dataset.iloc[:, :5].values y = dataset.iloc[:, 5].values # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42) # Train the decision tree clf = DecisionTreeClassifier() clf.fit(X_train, y_train) # Predict the output y_pred = clf.predict(X_test) # Print the accuracy print('Accuracy:', clf.score(X_test, y_test))"},{"instruction":"Create a Python class to represent a student's name and GPA.","output":"class Student: def __init__(self, name, gpa): self.name = name self.gpa = gpa def get_name(self): return self.name def get_gpa(self): return self.gpa"},{"instruction":"Construct a for loop in Python to calculate the sum of the first 10 even numbers.","output":"total = 0 for x in range(2, 21, 2): total += x print(total)"},{"instruction":"Generate a Python program to classify a sentence as positive, neutral, or negative using sentiment analysis. This is a great movie!","output":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_classifier(sentence): sid = SentimentIntensityAnalyzer() sentiment_scores = sid.polarity_scores(sentence) if sentiment_scores['compound'] > 0.5: sentiment_class = 'positive' elif sentiment_scores['compound'] == 0.0: sentiment_class = 'neutral' else: sentiment_class = 'negative' return sentiment_class if __name__ == '__main__': sentence = 'This is a great movie!' print(sentiment_classifier(sentence))"},{"instruction":"Generate a Python code to print the symmetric differences between two sets. Set1 = {1, 3, 4, 8} Set2 = {2, 3, 5, 6}","output":"# Define sets Set1 = {1, 3, 4, 8} Set2 = {2, 3, 5, 6} # Compute the symmetric difference difference = Set1.symmetric_difference(Set2) # Print the symmetric differences print(\\"The symmetric differences between the two sets :\\", difference)"},{"instruction":"Write a Python program to format a specified string to limit the number of characters to 6. String: Hello World","output":"def limit_chars(string): # Limit the number of character to 6 limited_string = string[:6] return limited_string string = \\"Hello World\\" result = limit_chars(string) print(result)"},{"instruction":"Construct a Python dictionary that has the value hello assigned to the key word.","output":"my_dict = { \\"word\\": \\"hello\\" }"},{"instruction":"Design a GUI in Python to display data in tabular format and the ability to sort by column.","output":"import tkinter as tk # Set up the root window root = tk.Tk() # Create the table table = tk.Frame(root) table.grid(row=0, column=0) # Set the row and column numbers rows = 5 columns = 5 # Create the label for column 0 for i in range(rows): for j in range(1, columns): b = tk.Entry(table, text=\\"\\") b.grid(row=i, column=j, sticky=\\"nsew\\") # Sort by column def sortByColumn(col): list = table.grid_slaves() sortlist = [] for l in list: if int(l.grid_info()[\\"column\\"]) == col: sortlist.append(l.get()) sortlist = sorted(sortlist) i = 0 for l in list: if int(l.grid_info()[\\"column\\"]) == col: l.delete(0, \\"end\\") l.insert(0, sortlist[i]) i += 1 # Create the button to initiate the sort for c in range(1, columns): tk.Button(table, text=\\"Sort\\", command=lambda c=c: sortByColumn(c)).grid(row=rows, column=c) # Diplay the root window root.mainloop()"},{"instruction":"Generate Python code to remove all punctuation in a given string.","output":"import string def remove_all_punctuation(string): \\"\\"\\" Remove all punctuation from a given string. string: string to be modified \\"\\"\\" punctuations = string.maketrans('', '', string.punctuation) no_punct = string.translate(punctuations) return no_punct"},{"instruction":"Use the Python code to translate reStructuredText to HTML using the docutils package. The resulting HTML will be printed to the console.","output":"#!/usr/bin/python # -*- coding: utf-8 -*- # # --- BEGIN_HEADER --- # # html_writer - [insert a few words of module description on this line] # Copyright (C) 2003-2009 The MiG Project lead by Brian Vinter # # This file is part of MiG. # # MiG is free software: you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # MiG is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. # # -- END_HEADER --- # from docutils.writers.html4css1 import Writer, HTMLTranslator from docutils.core import publish_string # Setup a translator writer html_writer = Writer() html_writer.translator_class = HTMLTranslator # Setup a restructured text example reST = \\"\\"\\" Example of reST: ================ This is a small example of the way reST can be used as a base for generating HTMLformatted text that: - looks nice - is standards compliant - is flexible We *may* decide to start using this as text formatting tool in MiG__ later on. __ http://mig-1.imada.sdu.dk/ We can also use it for creating tables if we want to: ===== ===== ====== Input Output ----- ----- ------ A B A or B ===== ===== ====== False False False True False True False True True True True True ===== ===== ====== Have fun! ---- Cheers, Jonas \\"\\"\\" # Translate reST to html html = publish_string(reST, settings_overrides={'output_encoding' : 'unicode'}, writer=html_writer) print html"},{"instruction":"This code performs BLAST evaluation. To use it, follow these steps: 1. Import the necessary libraries: glob, sys, csv, and tabulate from Bio.Blast.Applications. 2. Define the following functions: carga_csv(file_name): creates a list of lists with a csv file. crea_comparacion(tabla_ref, estructura = 'star', comparacion = 'bi'): creates comparisons lists (code) depending on arguments. imprime_comparacion(listas): prints the comparison as a readable format. imprime_referencia(claves): prints the comparison as a readable format. crea_diccionario(tabla): creates a dictionary of code:organism. 3. In the program body, prompt the user to enter the CSV file name and load the data using carga_csv(). 4. Present the CSV data using tabulate(). 5. Present the options: blast parameters, comparison parameters, run. 6. If the user selects option 1, prompt them to enter the comparisons using the organism index and the direction (bidirectional or unidirectional). Use crea_comparacion() to create the comparison list. 7. If the user selects option 2, prompt them to enter the desired E value for BLAST runs. Use NcbiblastpCommandline() to create the commands for comparisons. 8. Run the commands and inform the user when the work is completed.","output":"#! /usr/bin/env python \\"\\"\\" DESCRIPTION \\"\\"\\" import glob, sys, csv from tabulate import tabulate from Bio.Blast.Applications import NcbiblastpCommandline \\"\\"\\"--- FUNCTIONS ---\\"\\"\\" def carga_csv(file_name): \\"\\"\\" creates a list of lists with a csv file \\"\\"\\" tabla = [] cr = csv.reader(open(file_name,\\"rb\\")) for row in cr: tabla.append(row) return tabla def crea_comparacion(tabla_ref, estructura = 'star', comparacion = 'bi'): \\"\\"\\" creates comparisons lists (code) depending on arguments \\"\\"\\" lista = [] tabla = list(tabla_ref) if estructura == 'star': nodo = tabla.pop() for organismo in tabla: lista.append([nodo[1],organismo[1]]) if comparacion == 'bi': lista.append([organismo[1], nodo[1]]) else: comps = estructura.split(',') for comp in comps: pareja = comp.split('-') query = tabla[int(pareja[0])][1] db = tabla[int(pareja[1])][1] lista.append([query, db]) if comparacion == 'bi': lista.append([db, query]) return lista def imprime_comparacion(listas): \\"\\"\\" prints the comparison as a readable format\\"\\"\\" print 'COMPARISONSn-----------n' for lista in listas: print lista[0] + ' --> ' + lista[1] print 'n' def imprime_referencia(claves): \\"\\"\\" prints the comparison as a readable format\\"\\"\\" print 'REFERENCEn---------' n = 0 for key, val in claves.items(): print n, '. ', key, 't', val n=n+1 print 'n' def crea_diccionario(tabla): \\"\\"\\" creates a dictionary of code:organism\\"\\"\\" diccionario={} for row in tabla: diccionario[row[1]]=row[0] return diccionario \\"\\"\\"--- PROGRAM BODY ---\\"\\"\\" print '----------------nBLAST EVALUATIONn----------------' blast_eval = 1e-05 comparison_list = [] # charge csv file nombre_csv = raw_input('Please enter the CSV file name: ') organismos = carga_csv(nombre_csv) referencia = crea_diccionario(organismos) comparison_list = crea_comparacion(organismos) # present csv data print 'nCSV datan--------' print tabulate(organismos, headers=[\\"Organism\\",\\"Code\\", \\"Genome File\\", \\"Database folder\\"]) + 'n' # present options: blast parameters, comparison parameters, run while 1: imprime_referencia(referencia) imprime_comparacion(comparison_list) print 'CHOOSE AN OPTIONn----------------n1) Comparisonsn2) Runn3) Quit' user_in = raw_input('Option: ') if user_in == '1': imprime_referencia(referencia) print ('Please enter the comparisons using the organism index.n' + 'Format: \\"-\\" between indices; \\",\\" between comparisons; no spaces.n') nueva_comparacion = raw_input('Comparisons: ') print 'Choose \\"bi\\" for bidirectional or \\"uni\\" for unidirectional; no quotation marks.' tipo_comparacion = raw_input('Direction: ') comparison_list = crea_comparacion(organismos, nueva_comparacion, tipo_comparacion) elif user_in == '2': blast_eval = raw_input('nPlease write the desired E value for BLAST runs; 1e-5 suggested.nE_value: ') print 'nBLAST+ commands to be runned...n' break elif user_in == '3': quit() else: print ('Incorrect option, try again.n') # create commands for comparisons comandos = [] for pair in comparison_list: nombre = referencia[pair[0]].split() comandos.append([(nombre[0]+'_'+nombre[1]+'.faa'), ('db_'+pair[1]+'/db_'+pair[1]), (pair[0]+'_'+pair[1]+'.xml')]) print tabulate(comandos, headers=[\\"Genome file\\",\\"Database\\", \\"Product file\\"]) + 'n' raw_input('Press ENTER to continue') # run commands, inform data created for comando in comandos: blastp_cline = NcbiblastpCommandline(query=comando[0], db=comando[1], evalue=blast_eval ,outfmt=5, out=comando[2]) print 'File ' + comando[2] + ' is currently in progess...' stdout, stderr = blastp_cline() print 'WORK COMPLETEDn--------------'"},{"instruction":"From the input, create Python code that checks if a given number is a palindrome or not. num = 12321","output":"def is_palindrome(num): \\"\\"\\"Check if a given number is a palindrome or not\\"\\"\\" str_num = str(num) length = len(str_num) if length % 2 == 0: left = str_num[:length//2] right = str_num[length//2:] right_rev = right[::-1] return left == right_rev else: left = str_num[:length//2] middle = str_num[length//2] right = str_num[(length//2)+1:] right_rev = right[::-1] return left == right_rev and middle == middle"},{"instruction":"Write a Python program to convert a given string to a list, using a specified delimiter. red, blue, green, delimiter = ,","output":"def string_to_list(string, delimiter): list = string.split(delimiter) return list string = \\"red, blue, green\\" delimiter = \\",\\" print(string_to_list(string, delimiter))"},{"instruction":"Generate a list in Python that contains all the words from a source string that start with a certain letter. source_string = My dog loves to play in the park! letter = p","output":"def generate_list(source_string, letter): words = source_string.split() result = [] for word in words: if word[0].lower() == letter: result.append(word) return result print(generate_list(source_string, letter))"},{"instruction":"Optimize the following Python program to increase its performance by three times. def slow_operation(n): result = 0 for i in range(n): result += i return resul","output":"def fast_operation(n): result = (n * (n + 1)) // 2 return result"},{"instruction":"Write a Python program to check whether two strings are anagrams or not String 1: dog String 2: god","output":"\\"\\"\\" Check whether two strings are anagrams or not \\"\\"\\" # Function to check if two strings are anagrams or not def is_anagram(str1, str2): # Create two lists with the characters of the strings list_str1 = list(str1) list_str1.sort() list_str2 = list(str2) list_str2.sort() # If the two lists are equal, then it is an anagram if (list_str1 == list_str2): return True else: return False # main if __name__ == \\"__main__\\": # Given strings str1 = 'dog' str2 = 'god' if (is_anagram(str1, str2)): print(\\"The two strings are anagrams\\") else: print(\\"The two strings are not anagrams\\")"},{"instruction":"This code is an IBM Storwize V7000 autodiscovery script for Zabbix. To use it, run svc_perf_discovery_sender.py with the following options: debug (to enable debug output), clusters <svc1>[,<svc2>...] (commaseparated Storwize node list), user <username> (Storwize V7000 user account with Administrator role), password <pwd> (user password), and discoverytypes <type1>,[type2] (discovery types: 'volumemdisk','volume','mdisk','pool'). The script sends volume/mdisk/pool LLD JSON data to LLD trapper items svc.discovery.<volumemdisk|volume|mdisk|pool> and should be used with _Special_Storwize_Perf Zabbix template. See also http://www.zabbix.com/documentation/2.0/manual/discovery/low_level_discovery.","output":"#!/usr/bin/python # -*- coding: utf-8 -*- # coding: utf-8 # # IBM Storwize V7000 autodiscovery script for Zabbix # # 2013 Matvey Marinin # # Sends volume/mdisk/pool LLD JSON data to LLD trapper items \\"svc.discovery.<volume-mdisk|volume|mdisk|pool>\\" # Use with \\"_Special_Storwize_Perf\\" Zabbix template # # See also http://www.zabbix.com/documentation/2.0/manual/discovery/low_level_discovery # # Usage: # svc_perf_discovery_sender.py [--debug] --clusters <svc1>[,<svc2>...] --user <username> --password <pwd> # # --debug = Enable debug output # --clusters = Comma-separated Storwize node list # --user = Storwize V7000 user account with Administrator role (it seems that Monitor role is not enough) # --password = User password # import pywbem import getopt, sys from zbxsend import Metric, send_to_zabbix import logging def usage(): print >> sys.stderr, \\"Usage: svc_perf_discovery_sender_zabbix.py [--debug] --clusters <svc1>[,<svc2>...] --user <username> --password <pwd> --discovery-types <type1>,[type2]\\" print >> sys.stderr, \\"Discovery types: 'volume-mdisk','volume','mdisk','pool'\\" try: opts, args = getopt.gnu_getopt(sys.argv[1:], \\"-h\\", [\\"help\\", \\"clusters=\\", \\"user=\\", \\"password=\\", \\"debug\\", \\"discovery-types=\\"]) except getopt.GetoptError, err: print >> sys.stderr, str(err) usage() sys.exit(2) debug = False clusters = [] DISCOVERY_TYPES = [] user = None password = None for o, a in opts: if o == \\"--clusters\\" and not a.startswith('--'): clusters.extend( a.split(',')) elif o == \\"--user\\" and not a.startswith('--'): user = a elif o == \\"--password\\" and not a.startswith('--'): password = a elif o == \\"--debug\\": debug = True elif o == \\"--discovery-types\\": DISCOVERY_TYPES.extend( a.split(',')) elif o in (\\"-h\\", \\"--help\\"): usage() sys.exit() if not clusters: print >> sys.stderr, '--clusters option must be set' usage() sys.exit(2) if not DISCOVERY_TYPES: print >> sys.stderr, '--discovery-types option must be set' usage() sys.exit(2) if not user or not password: print >> sys.stderr, '--user and --password options must be set' usage() sys.exit(2) def debug_print(message): if debug: print message for cluster in clusters: debug_print('Connecting to: %s' % cluster) conn = pywbem.WBEMConnection('https://'+cluster, (user, password), 'root/ibm') conn.debug = True for discovery in DISCOVERY_TYPES: output = [] if discovery == 'volume-mdisk' or discovery == 'volume': for vol in conn.ExecQuery('WQL', 'select DeviceID, ElementName from IBMTSSVC_StorageVolume'): output.append( '{\\"{#TYPE}\\":\\"%s\\", \\"{#NAME}\\":\\"%s\\", \\"{#ID}\\":\\"%s\\"}' % ('volume', vol.properties['ElementName'].value, vol.properties['DeviceID'].value) ) if discovery == 'volume-mdisk' or discovery == 'mdisk': for mdisk in conn.ExecQuery('WQL', 'select DeviceID, ElementName from IBMTSSVC_BackendVolume'): output.append( '{\\"{#TYPE}\\":\\"%s\\", \\"{#NAME}\\":\\"%s\\", \\"{#ID}\\":\\"%s\\"}' % ('mdisk', mdisk.properties['ElementName'].value, mdisk.properties['DeviceID'].value) ) if discovery == 'pool': for pool in conn.ExecQuery('WQL', 'select PoolID, ElementName from IBMTSSVC_ConcreteStoragePool'): output.append( '{\\"{#TYPE}\\":\\"%s\\",\\"{#NAME}\\":\\"%s\\",\\"{#ID}\\":\\"%s\\"}' % ('pool', pool.properties['ElementName'].value, pool.properties['PoolID'].value) ) json = [] json.append('{\\"data\\":[') for i, v in enumerate( output ): if i < len(output)-1: json.append(v+',') else: json.append(v) json.append(']}') json_string = ''.join(json) print(json_string) trapper_key = 'svc.discovery.%s' % discovery debug_print('Sending to host=%s, key=%s' % (cluster, trapper_key)) #send json to LLD trapper item with zbxsend module if debug: logging.basicConfig(level=logging.INFO) else: logging.basicConfig(level=logging.WARNING) send_to_zabbix([Metric(cluster, trapper_key, json_string)], 'localhost', 10051) debug_print('')"},{"instruction":"Create a program that takes a name as input and prints the length of the name using Python. Jane","output":"def nameLength(name): return len(name) name = \\"Jane\\" print(\\"Length of the name is:\\", nameLength(name))"},{"instruction":"Define a class in Python that stores information about a person and provides methods for essential operations such as obtaining their age, date of birth and calculating the number of days until their next birthday Not applicable","output":"import datetime class Person: def __init__(self, name, date_of_birth): self.name = name self.date_of_birth = datetime.datetime.strptime(date_of_birth, '%Y-%m-%d') def get_age(self): today = datetime.datetime.now() return today.year - self.date_of_birth.year - ((today.month, today.day) < (self.date_of_birth.month, self.date_of_birth.day)) def get_date_of_birth(self): return self.date_of_birth def days_until_next_birthday(self): today = datetime.datetime.now() next_birthday = datetime.datetime(today.year, self.date_of_birth.month, self.date_of_birth.day) if today > next_birthday: next_birthday = next_birthday.replace(year=today.year+1) return abs((next_birthday - today).days)"},{"instruction":"Design a class in Python for storing information about books. The class should contain fields for the book title, author, and year of publication. Not applicable","output":"class Book: def __init__(self, title, author, year): self.title = title self.author = author self.year = year def __str__(self): return f\\"{self.title} by {self.author} ({self.year})\\""},{"instruction":"Create an algorithm in Python to check whether a number is prime or not. 14","output":"\\"\\"\\" Create an algorithm in Python to check whether a number is prime or not \\"\\"\\" #define a function to check whether a number is prime def is_prime(num): #check if the number is 1 or 2 if num in [1, 2]: return True #check if the number is mulitple of 2 if num % 2 == 0: return False #otherwise check all odd numbers between 3 and the number's square root for i in range(3, int(num ** 0.5 + 1), 2): #if the number is divisble by any odd number, it is not prime if num % i == 0: return False #if the number isn't divisible by any odd number, it is prime return True #test the function if __name__ == '__main__': num = 14 print(is_prime(num))"},{"instruction":"Generate a class definition for a Car object in Python. The object should have attributes for brand, horsepower, and color. Not applicable","output":"class Car: def __init__(self, brand, horsepower, color): self.brand = brand self.horsepower = horsepower self.color = color def get_brand(self): return self.brand def set_brand(self, brand): self.brand = brand def get_horsepower(self): return self.horsepower def set_horsepower(self, horsepower): self.horsepower = horsepower def get_color(self): return self.color def set_color(self, color): self.color = color"},{"instruction":"w can you sort a list of integers in ascending order in Python?","output":"def sort_list(lst): return sorted(lst)"},{"instruction":"Generate a Python program to divide two numbers and produce the result in decimal form.","output":"def divide(a,b): return round(a/b, 2)"},{"instruction":"Write a Python script to generate a multiplication table with a given number of rows and columns. rows = 6 columns = 8","output":"def multiplicationTable(x, y): table = [[ 0 for j in range(x)] for i in range(y)] for row in range(x): for col in range(y): table[row][col] = (row + 1) * (col + 1) return table print(multiplicationTable(rows, columns)) Output: [[1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 6, 8, 10, 12, 14, 16], [3, 6, 9, 12, 15, 18, 21, 24], [4, 8, 12, 16, 20, 24, 28, 32], [5, 10, 15, 20, 25, 30, 35, 40], [6, 12, 18, 24, 30, 36, 42, 48]]"},{"instruction":"Create a function in Python to optimize the hyperparameters of a support vector machine model for a given data set.","output":"import numpy as np from sklearn.svm import SVC from sklearn.model_selection import GridSearchCV def optimize_svm(X, y): \\"\\"\\"Optimizes the hyperparameters of a Support Vector Machine model using GridSearchCV. Parameters ---------- X : numpy array The feature dataset y : numpy array The target values Returns ------- best_estimator : sklearn.svm.SVC A fitted SVM Estimator instance \\"\\"\\" tuned_parameters = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4], 'C': [1, 10, 100, 1000]}, {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}] clf = GridSearchCV(SVC(), tuned_parameters, cv=5) clf.fit(X, y) best_estimator = clf.best_estimator_ return best_estimator"},{"instruction":"Create a class in Python that can represent a 3D point with the given fields. x y and z coordinate","output":"class Point3D: def __init__(self, x, y, z): self.x = x self.y = y self.z = z def __str__(self): return 'Point3D is at {x}, {y}, {z}'.format(x = self.x, y = self.y, z = self.z)"},{"instruction":"Write a Python program to classify numbers into prime and nonprime. A list of integers: [2, 4, 8, 11, 15]","output":"def is_prime(num): for i in range(2, num): if num % i == 0: return False return True def classify_prime_nums(nums): result = [] for num in nums: if is_prime(num): result.append((\\"prime\\", num)) else: result.append((\\"non-prime\\", num)) return result nums = [2, 4, 8, 11, 15] print(classify_prime_nums(nums))"},{"instruction":"Create an optimization problem in Python to optimize the function. The given function is f(x, y) = x + y^2, where x and y are real numbers.","output":"import numpy as np from scipy.optimize import minimize def f(x): x, y = x return x + y**2 x0 = np.array([0,0]) res = minimize(f, x0, method='nelder-mead') print(res.x)"},{"instruction":"Design an algorithm in Python to calculate the sum of individual digits in a given number. Number: 12345","output":"def digitSum(n): sum = 0 # loop until we have no digits left while (n != 0): # extract the last digit dig = n % 10 # add the digit to the total sum sum += dig # remove the last digit from n n = n // 10 return sum # Driver Code n = 12345 sum = digitSum(n) # Print the result print(sum)"},{"instruction":"Develop a Python algorithm to validate a given palindrome string. level","output":"def isPalindrome(s): i = 0 j = len(s) - 1 while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True # Driver code s = \\"level\\" if isPalindrome(s): print(\\"Yes\\") else: print(\\"No\\")"},{"instruction":"Write a Python script to sort the given array using Heap sort algorithm [8, 5, 2, 1, 8]","output":"def heapify(arr, n, i): largest = i l = 2 * i + 1 r = 2 * i + 2 if l < n and arr[i] < arr[l]: largest = l if r < n and arr[largest] < arr[r]: largest = r if largest != i: arr[i],arr[largest] = arr[largest],arr[i] heapify(arr, n, largest) def heapSort(arr): n = len(arr) for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i) for i in range(n-1, 0, -1): arr[i], arr[0] = arr[0], arr[i] heapify(arr, i, 0) arr = [8, 5, 2, 1, 8] heapSort(arr) n = len(arr) print (\\"Sorted array is\\") for i in range(n): print (\\"% d\\" %arr[i]),"},{"instruction":"Write a Python program to generate a password of length 10 from lowercase alphabets, uppercase alphabets, digits and special characters.","output":"import random import string length = 10 def generatePassword(length): chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \\"!@#%^&*\\" return ''.join([random.choice(chars) for _ in range(length)]) password = generatePassword(length) print(password)"},{"instruction":"Create a Python program to calculate the square root of a number without using the square root function. 36","output":"def my_sqrt(x): guess = x i = 0 while guess * guess != x and i < 20: guess = (guess + x/guess) / 2.0 i += 1 return guess result = my_sqrt(36) print(\\"Square root of 36 is = \\", result)"},{"instruction":"Write a Python program that prints out items that appear in both listA and listB listA = [1, 2, 3, 4] listB = [2, 4, 5, 6]","output":"listA = [1, 2, 3, 4] listB = [2, 4, 5, 6] for i in listA: if i in listB: print(i) # Output 2 4"},{"instruction":"Develop a Python program for solving a quadratic equation. Not applicable","output":"import cmath def quadratic_equation(a, b, c): # calculate the discriminant d = (b**2) - (4*a*c) # find two solutions sol1 = (-b-cmath.sqrt(d))/(2*a) sol2 = (-b+cmath.sqrt(d))/(2*a) return sol1, sol2 if __name__ == \\"__main__\\": a = 1 b = 5 c = 6 solutions = quadratic_equation(a, b, c) print('The solution are {0} and {1}'.format(solutions[0],solutions[1]))"},{"instruction":"Create a JavaScript object containing a list of programming languages and their respective paradigms. Not applicable","output":"const languages = { 'C': 'Imperative', 'C++': 'Imperative', 'Java': 'Object-Oriented', 'Scala': 'Object-Oriented', 'Python': 'Object-Oriented', 'PHP': 'Object-Oriented', 'Go': 'Imperative/Functional', 'Ruby': 'Object-Oriented/Functional', ' JavaScript': 'Functional/Prototype-based', };"},{"instruction":"Create an algorithm in Python for sorting an array of integers with the bubble sort method. [12, 3, 10, 7, 5, 11]","output":"def bubble_sort(arr): for i in range(len(arr)): for j in range(len(arr) - 1): if arr[j] > arr[j+1]: temp = arr[j] arr[j] = arr[j+1] arr[j+1] = temp return arr result = bubble_sort([12, 3, 10, 7, 5, 11]) print(result)"},{"instruction":"Create a Twitter bot in Python to reply with popular trends whenever a user searches for a hashtag. Not applicable","output":"# Import necessary packages import tweepy import json #Authentication consumer_key = 'your_consumer_key' consumer_secret = 'your_consumer_secret' access_token = 'your_access_token' access_token_secret = 'your_access_token_secret' auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) # Track tweets with a specific hashtag keyword = \\"#python\\" # Reply with popular trends trends_result = api.trends_place(1) trends = json.loads(json.dumps(trends_result, indent=2)) for trend in trends[0][\\"trends\\"]: try: api.update_status(trend[\\"name\\"]) except tweepy.TweepError as e: print(e.reason)"},{"instruction":"Write a Python program to find the prime numbers from a list given by the user. mylist = [3,4,7,11,13,18]","output":"def isPrime(num): for i in range (2, num): if num % i == 0: return False return True # Driver Code mylist = [3,4,7,11,13,18] for num in mylist: # if condition is true, print the number if isPrime(num): print(num, end =\\" \\")"},{"instruction":"Write a Python script that takes a list of strings, finds the longest string, and prints it out. ['dog', 'cat', 'zebra','elephant']","output":"def find_longest_string(string_list): longest_string = \\"\\" for i in string_list: if len(i) > len(longest_string): longest_string = i print(longest_string) find_longest_string(['dog', 'cat', 'zebra', 'elephant'])"},{"instruction":"mplement a Neural Network written in Python using TensorFlow for predicting the local weather. Not applicable.","output":"import tensorflow as tf # Build the neural network model model = tf.keras.Sequential([ tf.keras.layers.Input(shape=(24,)), # 8 neurons on the first hidden layer tf.keras.layers.Dense(8, activation='relu'), # 4 neurons on the second hidden layer tf.keras.layers.Dense(4, activation='relu'), # Output layer, which will have 3 neurons since we have 3 classes tf.keras.layers.Dense(3, activation='softmax') ]) model.compile(optimizer='adam', loss=tf.losses.CategoricalCrossentropy(), metrics=['accuracy']) # Train the model model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test)) # Save the model model.save('weather_predictor_model.h5')"},{"instruction":"Create a class in Python with properties to store the name and age of a person.","output":"class Person: def __init__(self, name, age): self.name = name self.age = age def get_name(self): return self.name def get_age(self): return self.age"},{"instruction":"Create a python script to download a complete web page and cache it for faster offline access. URL: https://www.example.com/page1","output":"import requests import os url = 'https://www.example.com/page1' if not os.path.exists('cache'): os.makedirs('cache') r = requests.get(url) filename = url.rsplit('/', 1)[-1] file_path = os.path.join('cache', filename) with open(file_path, 'wb') as f: f.write(r.content)"},{"instruction":"Pick two languages from Python, Java, C++ and Go. Write a function in both languages that takes in two integer numbers and returns the sum of them. Not applicable","output":"#Python def add(a, b): return a + b #Java public static int add(int a, int b) { return a + b; } #C++ int add(int a, int b) { return a + b; } #Go func add(a int, b int) int { return a + b }"},{"instruction":"Generate an algorithm in Python to rotate an array of size 'n' by 'd' elements. [1, 2, 3, 4, 5], d=2","output":"def rotate(arr, d): for _ in range(d): temp = arr[0] for i in range(len(arr)-1): arr[i] = arr[i+1] arr[len(arr)-1] = temp return arr arr = [1, 2, 3, 4, 5] d = 2 rotated_arr = rotate(arr, d) print(rotated_arr) # [3, 4, 5, 1, 2]"},{"instruction":"Develop a Python program to calculate the mean of a given array. 60, 54, 77, 78, 37, 35","output":"def mean(arr): total = 0 for num in arr: total += num return total/len(arr) arr = [60, 54, 77, 78, 37, 35] print(\\"Mean: \\", mean(arr))"},{"instruction":"Generate Python code to perform an action based on a given condition. Condition: If the user input is an integer, print You have entered an integer","output":"user_input = input(\\"Enter a number:\\") if user_input.isdigit(): print(\\"You have entered an integer.\\")"},{"instruction":"Write a python program to sort an array with n elements in ascending order. arr = [7, 5, 2, 9, 6, 4, 1, 3, 8]","output":"def sort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # The last element has already been sorted for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Driver code to test above arr = [7, 5, 2, 9, 6, 4, 1, 3, 8] sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (arr[i]),"},{"instruction":"Write a Python program that can generate a random 5digit number and check if that number is prime or not. Not applicable","output":"import random def is_prime(num): for i in range(2, num): if num%i == 0: return False return True def generate_prime(): while True: num = random.randint(10000, 99999) if is_prime(num): return num if __name__ == '__main__': num = generate_prime() print(num, 'is a prime number')"},{"instruction":"Write a python script that does the following: Download the content of a website","output":"import requests url = \\"https://example.com\\" r = requests.get(url) data = r.content with open(\\"example_website.html\\", \\"wb\\") as file: file.write(data) print(\\"File downloaded successfully.\\")"},{"instruction":"This script takes an aligned fasta file and a tab delimited file containing CDS coordinates and creates a nexus input for BEAST. To use this script, run it with the following options: f [aligned fasta file], c [tab delimited file with CDS coordinates], o [name for output nexus file]. You can also add the flag onlyCDS if you only want coding regions to be included in the output nexus file.","output":"#!/usr/bin/env python from __future__ import division import optparse, os #This script uses an aligned fasta file and a tab deliminted file containing CDS coordinates to create a nexus input for BEAST #In version 2.0, added a flag to throw if you only want coding sequence to be included in the nexus file def main(): usage = '%prog [options]' p = optparse.OptionParser() p.add_option('-f', '--fasta', help='Aligned fasta. [None]') p.add_option('-c', '--coords', help='Tab delimited file with coordinates of CDS. Should have at least 3 tab delimited columns. The first is not used, will probably have some sort of CDS name. The next two have start and stop base positions.[None]') p.add_option('-o', '--out', help='Name for output nexus file. [None]') p.add_option('--onlyCDS', default=False, action=\\"store_true\\", help='Use this flag if you only want coding regions to be included in the output nexus file. [None]') opts, args = p.parse_args() make_beast_nexus(opts) #----------------------End of main() def make_beast_nexus(opts): fout=open(opts.out, 'w') #Read in seqs names, seqs = read_fasta_lists(opts.fasta) #Get coding coordinates coding_coords=get_coords(opts.coords) #Make concatenated coding seqs coding_seqs=['']*len(seqs) for start, end in coding_coords: for i in range(len(seqs)): coding_seqs[i]+=seqs[i][start-1:end] if opts.onlyCDS: fout.write(\\"#NEXUSn[File created using beast_nexus_prep.py using %s and %s]nnBEGIN TAXA;n\\" % (opts.fasta, opts.coords)) fout.write(\\"DIMENSIONS NTAX=%d;nnTAXLABELSn%sn;nnEND;n\\" % (len(names), 'n'.join(names))) fout.write(\\"BEGIN CHARACTERS;nDIMENSIONS NCHAR=%d;nFORMAT DATATYPE=DNA MISSING=N GAP=-;nMATRIXnn%sn;nnEND;nn\\" % (len(coding_seqs[0]), 'n'.join(['%s %s' % (names[x], coding_seqs[x]) for x in range(len(names))]))) fout.write(\\"BEGIN ASSUMPTIONS;ntcharset coding = 1-%d;nend;n\\" % (len(coding_seqs[0]))) else: #Get non-coding coordinates noncoding_coords=extrap_noncoding(coding_coords, len(seqs[0])) #Make concatenated noncoding seqs noncoding_seqs=['']*len(seqs) for start, end in noncoding_coords: for i in range(len(seqs)): noncoding_seqs[i]+=seqs[i][start-1:end] concat_seqs=[coding_seqs[i]+noncoding_seqs[i] for i in range(len(seqs))] coding_start=1 coding_end=len(coding_seqs[0]) noncoding_start=coding_end+1 noncoding_end=len(concat_seqs[0]) fout.write(\\"#NEXUSn[File created using beast_nexus_prep.py using %s and %s]nnBEGIN TAXA;n\\" % (opts.fasta, opts.coords)) fout.write(\\"DIMENSIONS NTAX=%d;nnTAXLABELSn%sn;nnEND;n\\" % (len(names), 'n'.join(names))) fout.write(\\"BEGIN CHARACTERS;nDIMENSIONS NCHAR=%d;nFORMAT DATATYPE=DNA MISSING=N GAP=-;nMATRIXnn%sn;nnEND;nn\\" % (len(concat_seqs[0]), 'n'.join(['%s %s' % (names[x], concat_seqs[x]) for x in range(len(names))]))) fout.write(\\"BEGIN ASSUMPTIONS;ntcharset coding = %d-%d;ntcharset noncoding = %d-%d;nend;n\\" % (coding_start, coding_end, noncoding_start, noncoding_end )) fout.close() def extrap_noncoding(coding_coords, seq_len): non_coords=[] #To handle noncoding at the very beginning of the sequence if coding_coords[0][0] != 1: non_coords.append((1,coding_coords[0][0]-1)) #To handle noncoding regions in between coding seqs coding_sorted=sorted(coding_coords[:]) for i in range(len(coding_sorted[:-1])): if coding_sorted[i+1][0]-coding_sorted[i][1]>0: non_coords.append((coding_sorted[i][1]+1,coding_sorted[i+1][0]-1)) #To handle non-coding at the very end of the sequence if coding_coords[-1][1] != seq_len: non_coords.append((coding_coords[-1][1]+1, seq_len)) print non_coords return non_coords def get_coords(c_file): fin=open(c_file, 'r') coords=[] for line in fin: cols=line.strip().split('t') coords.append((int(cols[1]), int(cols[2]))) return coords # Extracts data from a fasta sequence file. Returns two lists, the first holds the names of the seqs (excluding the '>' symbol), and the second holds the sequences def read_fasta_lists(file): fin = open(file, 'r') count=0 names=[] seqs=[] seq='' for line in fin: line=line.strip() if line and line[0] == '>': #indicates the name of the sequence count+=1 names.append(line[1:]) if count>1: seqs.append(seq) seq='' else: seq +=line seqs.append(seq) return names, seqs #------------------------------------->>>> if __name__ == \\"__main__\\": main()"},{"instruction":"Create an Artificial Neural Network in Python to classify flower colors from a given input.","output":"\\"\\"\\" Creating an Artificial Neural Network in Python to classify flower colors from a given input \\"\\"\\" import numpy as np import keras from keras.models import Sequential from keras.layers import Dense, Dropout # Create the input data and labels X_train = np.array([ [0], [1], [2], [3], [4], [5], [6] ]) y_train = np.array([ [0, 0, 0, 0, 1], # Blue [0, 0, 0, 1, 0], # Green [0, 0, 1, 0, 0], # Yellow [1, 0, 0, 0, 0], # Red [0, 1, 0, 0, 0], # Orange [0, 0, 0, 0, 0], # Purple [0, 0, 0, 1, 0] # Green ]) # Create the model model = Sequential() model.add(Dense(20, activation='relu', input_shape=(1,))) model.add(Dropout(0.2)) model.add(Dense(20, activation='relu')) model.add(Dropout(0.2)) model.add(Dense(20, activation='relu')) model.add(Dense(5, activation='softmax')) # Compile and run the model model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(X_train, y_train, epochs=50, batch_size=1)"},{"instruction":"Create a neural network in Python that is able to classify Iris flower species given sepal and petal measurements.","output":"import pandas as pd import numpy as np import tensorflow as tf from tensorflow import keras from tensorflow.keras import layers # read in data data = pd.read_csv('iris.data') # labels labels = data['species'] # features features = data.drop('species', axis=1) # normalize features features = (features - features.mean()) / features.std() # create model model = keras.Sequential() model.add(layers.Dense(units=4, activation='relu', input_shape=(4,))) model.add(layers.Dense(units=10, activation='relu')) model.add(layers.Dense(units=3, activation='softmax')) # compile model model.compile(optimizer=tf.keras.optimizers.Adam(), loss='sparse_categorical_crossentropy', metrics=['accuracy']) # train/fit model model.fit(features, labels, epochs=100, validation_split=0.2)"},{"instruction":"Design a program in Python that outputs the Nth Fibonacci number.","output":"def nth_fibonacci_number(n): if n == 0: return 0 if n == 1: return 1 a = 0 b = 1 for i in range(2, n+1): c = a + b a = b b = c return c"},{"instruction":"Develop a program in python to generate a matrix Rows: 3 Columns: 4","output":"def generate_matrix(rows, cols): matrix = [] for i in range(rows): row = [] for j in range(cols): row.append(0) matrix.append(row) return matrix # Example m = generate_matrix(3, 4) print(m) # Output: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]"},{"instruction":"Given a list of integers, write a Python program to find the two numbers whose sum is closest to zero. arr = [25, 19, 3, 8, 12]","output":"def find_sum_close_to_zero(arr): min_sum = float('inf') for i in range(len(arr)): for j in range(i+1, len(arr)): if abs(arr[i] + arr[j]) < abs(min_sum): min_sum = arr[i] + arr[j] return min_sum print(find_sum_close_to_zero(arr)) # -7"},{"instruction":"Develop a function in Python to identify the courses in a list of courses that need prerequisites. [ [Calculus I,none], [Calculus II, Calculus I], [Algebra I, none], [Algebra II, Algebra I] ]","output":"def prerequisitesCourses(courses): requiredCourses = [] for course in courses: if course[1] != \\"none\\": requiredCourses.append(course[1]) return requiredCourses"},{"instruction":"Create a Python program which will take a number n as input and prints the nth fibonacci number in the series 8","output":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program print(Fibonacci(8))"},{"instruction":"Create a Python program to parse and modify the following input string. ABC 123 XYZ 456","output":"input_string = \\"ABC 123 XYZ 456\\" output_string = \\"\\" for char in input_string: if char.isalpha(): output_string += char.lower() else: output_string += char print(output_string)"},{"instruction":"Create a web scraper in Python using bs4 to collect news headlines and article summaries from a news website. Not applicable","output":"import requests from bs4 import BeautifulSoup URL = \\"INSERT_NEWS_WEBSITE_URL_HERE\\" r = requests.get(URL) soup = BeautifulSoup(r.content, 'html5lib') headlines = soup.findAll('h2', attrs = {'class': 'entry-title'}) for headline in headlines: print(headline.get_text()) summaries = soup.findAll('div', attrs = {'class': 'entry-summary'}) for summary in summaries: print(summary.get_text())"},{"instruction":"Generate datasets in Python with a feature combination of 5 features drawn randomly from a normal distribution.","output":"import numpy as np def generate_data(n_samples=1000): # Generate 5 features randomly drawn from a normal distribution features = np.random.randn(n_samples, 5) # Generate labels labels = np.zeros(n_samples) return (features, labels)"},{"instruction":"Rewrite this Python function to be as efficient as possible. def get_values(dictionary): values = [] for key, value in dictionary.items(): if value > 0: values.append(value) return value","output":"def get_values(dictionary): return [value for key, value in dictionary.items() if value > 0]"},{"instruction":"Generate a Python program which will compare two strings and determine corresponding factors. Compare string Hello World and string Bye World.","output":"def string_compare(str1, str2): if len(str1) > len(str2): return \\"str1 is longer\\" elif len(str1) < len(str2): return \\"str2 is longer\\" else: if(str1 == str2): return \\"strings are equal\\" else: return \\"strings are different\\" print(string_compare(\\"Hello World\\", \\"Bye World\\")) # Output: str1 is longer"},{"instruction":"Create a Python program to find the highest common factor of two given numbers. Not applicable","output":"def hcf(x, y): if x > y: smaller = y else: smaller = x for i in range(1, smaller+1): if((x % i == 0) and (y % i == 0)): hcf = i return hcf num1 = int(input(\\"Enter first number: \\")) num2 = int(input(\\"Enter second number: \\")) print(\\"The Highest Common Factor is\\", hcf(num1, num2))"},{"instruction":"Create a python code that can take two strings and find the Levenshtein distance between them. String 1: John String 2: Jane","output":"\\"\\"\\" def Levenshtein_distance(str1, str2): n = len(str1) m = len(str2) # create a matrix dp = [[0 for x in range(m + 1)] for x in range(n + 1)] for i in range(n + 1): for j in range(m + 1): # first string is empty if i == 0: dp[i][j] = j # second string is empty elif j == 0: dp[i][j] = i #both strings are non-empty elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # strings are different else: dp[i][j] = 1 + min(dp[i][j - 1], #Insert dp[i - 1][j], #Remove dp[i - 1][j - 1]) #Replace return dp[n][m] # Driver Code str1 = \\"John\\" str2 = \\"Jane\\" print(Levenshtein_distance(str1, str2)) \\"\\"\\" 5. Output: 1"},{"instruction":"Design a Python algorithm to find the longest increasing subarray. arr = [1, 3, 2, 5, 8, 3, 4, 6]","output":"def longest_increasing_subarray(arr): size = len(arr) max_len = 1 for index in range(size): max_len_ending_here = 1 j = index + 1 while j < size: if arr[j] > arr[j - 1]: max_len_ending_here += 1 j += 1 if max_len_ending_here > max_len: max_len = max_len_ending_here return max_len arr = [1, 3, -2, 5, 8, -3, 4, 6] result = longest_increasing_subarray(arr) print(result)"},{"instruction":"Generate a Python list comprehension that creates a new list containing all the odd numbers between 0 and 10. Not applicable","output":"odd_numbers = [x for x in range(0, 11) if x % 2 != 0]"},{"instruction":"Create a Python Flask API that stores users’ information in the database. The API should include an endpoint for registering users with fields for username, email, first name, last name and password.","output":"from flask import Flask, request from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db' db = SQLAlchemy(app) class User(db.Model): id = db.Column(db.Integer, primary_key=True) username = db.Column(db.String(80), unique=True, nullable=False) email = db.Column(db.String(120), unique=True, nullable=False) first_name = db.Column(db.String(80)) last_name = db.Column(db.String(80)) password = db.Column(db.String(120)) def __repr__(self): return '<User %r>' % self.username db.create_all() @app.route('/register', methods=['POST']) def register(): data = request.get_json() username = data['username'] email = data['email'] first_name = data['first_name'] last_name = data['last_name'] password = data['password'] new_user = User(username=username, email=email, first_name=first_name, last_name=last_name, password=password) db.session.add(new_user) db.session.commit() return 'User %s is created.' % username if __name__ == '__main__': app.run()"},{"instruction":"Generate a method in Python that determines if a given string contains a URL.","output":"import re def isUrl(string): urlPattern = re.compile(r'https?://(www.)?(w+)(.w+)') match = urlPattern.search(string) return bool(match)"},{"instruction":"Write a function in Python to reverse the order of words in a sentence. sentence = hello world how are you","output":"def reverse_words(sentence): words = sentence.split(' ') reversed_words = words[::-1] return ' '.join(reversed_words) sentence = \\"hello world how are you\\" print(reverse_words(sentence)) # output - you are how world hello"},{"instruction":"Create a machine learning model in Python that can categorize voice commands. ['Turn on the light', 'Turn off the fan', 'Activate the AC']","output":"#Import necessary libraries import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB # Prepare a dataset dataset = [['Turn on the light', 'Light'], ['Turn off the fan', 'Fan'], ['Activate the AC', 'AC']] dataframe = pd.DataFrame(dataset, columns=['Message', 'Category']) # Split the data into features and labels X = dataframe.drop(columns=['Category']) y = dataframe['Category'] # Separate training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1) # Create a model and fit it model = MultinomialNB() model.fit(X_train, y_train) # Test the model y_pred = model.predict(X_test) print(y_pred)"},{"instruction":"Write a python program to parse a given input string and extract the URLs present in the string. The links mentioned in the article are: https://www.example.com/ and http://www.example.com/mypage","output":"import re def extract_urls(input_str): urls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[-_@.&+]|[!*(),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', input_str) return urls input_str = \\"The links mentioned in the article are: https://www.example.com/ and http://www.example.com/mypage\\" print(extract_urls(input_str))"},{"instruction":"Suggest a method for encrypting a message in Python using cryptography.","output":"from cryptography.fernet import Fernet # Generate a new fernet key key = Fernet.generate_key() f = Fernet(key) # Encrypt the message encrypted_message = f.encrypt(b\\"This is a secret message\\") # Decrypt the encrypted message decrypted_message = f.decrypt(encrypted_message) print(encrypted_message) print(decrypted_message)"},{"instruction":"Classification: Write a Python program to classify a set of words into nouns, verbs, and adjectives [stiff, particular, hear, running, better, help]","output":"from nltk.tokenize import word_tokenize from nltk import pos_tag words = ['stiff', 'particular', 'hear', 'running', 'better', 'help'] tokenized_words = word_tokenize(' '.join(words)) results = pos_tag(tokenized_words) nouns = [word for word, tag in results if tag.startswith('N')] verbs = [word for word, tag in results if tag.startswith('V')] adjectives = [word for word, tag in results if tag.startswith('J')] print('Nouns:', nouns) print('Verbs:', verbs) print('Adjectives:', adjectives)"},{"instruction":"Create a python code to find the intersection of two sets. {1,2,3,4,5} and {3,4,5,6,7}","output":"# Create two sets set1 = {1,2,3,4,5} set2 = {3,4,5,6,7} # Find the intersection intersection = set1 & set2 # Print the result print(intersection)"},{"instruction":"Create a Python program to classify whether a given list of numbers is increasing, decreasing, or dueceasing.","output":"def classify_increase_decrease(arr): if arr[0] < arr[1]: for i in range(1, len(arr) - 1): if arr[i] > arr[i + 1]: return \\"decreasing\\" return \\"increasing\\" elif arr[0] > arr[1]: for i in range(1, len(arr) - 1): if arr[i] < arr[i + 1]: return \\"increasing\\" return \\"decreasing\\" else: for i in range(1, len(arr) - 1): if arr[i] != arr[i + 1]: return \\"discontinuous\\" return \\"duceasing\\""},{"instruction":"Optimize an existing Python program so that it runs faster. def binary_search(arr, value): low = 0 high = len(arr) 1 while (low <= high): mid = low + (high low) // 2 if arr[mid] == value: return mid elif arr[mid] < value: low = mid + 1 elif arr[mid] > value: high = mid 1 return 1","output":"def binary_search(arr, value): low = 0 high = len(arr) - 1 found = False while low <= high and not found: mid = low + (high - low) // 2 if arr[mid] == value: found = True elif arr[mid] < value: low = mid + 1 else: high = mid - 1 if found: return mid else: return -1"},{"instruction":"Write an Python script to generate all possible permutations of a given list. [1,2,3]","output":"def permutation(lst): # If lst is empty then there are no permutations if len(lst) == 0: return [] # If there is only one element in lst then, only # one permuatation is possible if len(lst) == 1: return [lst] # Find the permutations for lst if there are # more than 1 characters l = [] # empty list that will store current permutation # Iterate the input(lst) and calculate the permutation for i in range(len(lst)): m = lst[i] # Extract lst[i] or m from the list. remLst is # remaining list remLst = lst[:i] + lst[i+1:] # Generating all permutations where m is first # element for p in permutation(remLst): l.append([m] + p) return l # Driver program to test above function data = list('123') for p in permutation(data): print (p)"},{"instruction":"Write a python code allowing the user to convert strings to ints and ints to strings.","output":"def str_to_int(string): return int(string) def int_to_str(integer): return str(integer)"},{"instruction":"Create a fullstack application for a book tracking website. This application should have functionality to allow users to rate and review books, add books to a list of favorites, and view other users' profiles. Not applicable","output":"# Backend Python/Flask # Database MySQL # Endpoints CreateUser: Creates a new user with username, password, and profile details Login: Authenticates and logs in an existing user SearchBook: Searches for books by title or author AddFavorite: Adds a book to the user's favorites list RateBook: Rates a book from 1 to 5 stars. GetFavorites: Fetches the user's list of favorite books GetUserRating: Fetches a user's rating for a particular book GetProfile: Fetches profile information for a particular user # Frontend Vue.js # Components Navigation: The header navigation bar Search: The search bar component where users can look up books FavoriteList: The list of books saved to the favorite list RatingDisplay: A component that displays a user's rating for a particular book UserProfile: A component that displays the profile information for a particular user."},{"instruction":"Create a loop in Python to print out all the numbers from 1 to 10.","output":"for num in range(1,11): print(num)"},{"instruction":"Shorten the following code using appropriate Python statement x = 1 if x == 0: print(x is 0) elif x == 1: print(x is 1) else: print(x is not 0 or 1)","output":"x = 1 print(\\"x is\\", (\\"0\\" if x == 0 else \\"1\\" if x == 1 else \\"not 0 or 1\\"))"},{"instruction":"Create a Python script to print out each word that begins with a vowel in a sentence. Sentence: The quick brown fox jumped over the lazy dog","output":"for word in sentence.split(): if word[0].lower() in 'aeiou': print(word)"},{"instruction":"Write a Python program to read a CSV collection of customer data and print out a summary of purchases. The CSV contains four columns (<user_id>, <purchase_category>, <purchase_amount>, <date_purchased>).","output":"import csv summary = {} with open('customer_data.csv', mode='r') as csv_file: csv_reader = csv.DictReader(csv_file) line_count = 0 for row in csv_reader: if row['user_id'] not in summary: summary[row['user_id']] = { 'purchase_category': set(), 'total_amount': 0 } summary[row['user_id']]['purchase_category'].add(row['purchase_category']) summary[row['user_id']]['total_amount'] += float(row['purchase_amount']) line_count += 1 for key, value in summary.items(): print(f\\"Customer {key} has purchased items in the following categories: {', '.join(value['purchase_category'])} with a total amount of {value['total_amount']:.2f}.\\")"},{"instruction":"mplement the QuickSort Algorithm in Python.","output":"\\"\\"\\" Implementing the QuickSort Algorithm in Python \\"\\"\\" def partition(arr, low, high): i = (low-1) # index of smaller element pivot = arr[high] # pivot for j in range(low, high): # If current element is smaller than the pivot if arr[j] < pivot: # increment index of smaller element i = i+1 arr[i], arr[j] = arr[j], arr[i] arr[i+1], arr[high] = arr[high], arr[i+1] return (i+1) def quickSort(arr, low, high): if low < high: # The partition index is obtained pi = partition(arr, low, high) # Separately sort elements before # partition and after partition quickSort(arr, low, pi-1) quickSort(arr, pi+1, high) # Driver Code arr = [10, 7, 8, 9, 1, 5] n = len(arr) quickSort(arr,0,n-1)"},{"instruction":"mplement a code in Python to print out the sum of the first six numbers.","output":"# Initialize sum sum = 0 # Use a for loop to iterate over numbers for num in range(1, 7): sum = sum + num # Print result print(\\"The sum of the first six numbers is:\\", sum)"},{"instruction":"Edit an existing Python program to remove a specific element from the list. my_list = ['abc', '123', 'def', '345'] element = 'def'","output":"my_list = ['abc', '123', '345'] if element in my_list: my_list.remove(element)"},{"instruction":"Write a Python program to fliter a list of strings and return a new list containing only the strings containing the letter 'a'. ['ant', 'bar', 'cat', 'dog', 'eel']","output":"list_strings = ['ant', 'bar', 'cat', 'dog', 'eel'] # using list comprehension filtered_list = [x for x in list_strings if 'a' in x] print(filtered_list) # output: ['ant', 'bar', 'cat']"},{"instruction":"Write a python function to display the nth node of a singly linked list. head = ListNode(5), n = 2","output":"class ListNode: def __init__(self, val): self.val = val self.next = None def display_nth_node(head, n): index = 0 current_node = head while current_node and index<n: index += 1 current_node = current_node.next if current_node is None: return None else: return current_node.val head = ListNode(5) displayed_node = display_nth_node(head, 2) print(displayed_node) # None"},{"instruction":"Suggest a completion for the following python code to count the number of a given character in a string. def count_characters(s, c)","output":"def count_characters(s, c): count = 0 for ch in s: if ch == c: count += 1 return count"},{"instruction":"Write a Python program to extract odd elements from a list. mylist = [2, 3, 4, 5, 6, 7, 8]","output":"mylist = [2, 3, 4, 5, 6, 7, 8] odd_list = [] for num in mylist: if num % 2 != 0: odd_list.append(num) print(odd_list) #[3, 5, 7]"},{"instruction":"Create a web scraper in Python to get the title and first paragraph of a web page Web page URL: https://en.wikipedia.org/wiki/Machine_learning","output":"import requests from bs4 import BeautifulSoup url = 'https://en.wikipedia.org/wiki/Machine_learning' # Make a GET request to fetch the raw HTML content html_content = requests.get(url).text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Print the title of the web page print(\\"Title:\\", soup.title.string) # Find the first paragraph first_paragraph = soup.find('p').text print(\\"First paragraph:\\", first_paragraph)"},{"instruction":"Generate a list of alphabets in Python","output":"alphabets = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']"},{"instruction":"Create a machine learning model for detecting spam emails using Python and scikitlearn. A dataset of 1000 emails, 500 labeled as spam and 500 as not spam.","output":"import pandas as pd import numpy as np from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # Load the data emails = pd.read_csv('emails.csv') X = emails['text'] y = emails['label'] # Create a CountVectorizer and fit it to our dataset vectorizer = CountVectorizer() X_vector = vectorizer.fit_transform(X) # Initialize our Multinomial Naive Bayes model and fit it to our dataset model = MultinomialNB().fit(X_vector, y) # Make predictions based on our model predictions = model.predict(X_vector) # Check the accuracy accuracy = np.mean(predictions == y) print('Model accuracy is {}'.format(accuracy))"},{"instruction":"Develop a Python program that prints a random string every time it is run. Not applicable","output":"import random def gen_random_str(): # generate a random string random_str = ''.join([random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') for i in range(10)]) # print the string print(random_str) if __name__ == '__main__': gen_random_str()"},{"instruction":"Write a Python program to calculate the total cost of a meal given the components and the quantity for each component. Quantity = {'burger': 2, 'fries': 3, 'soda': 2}; Prices = {'burger': 5, 'fries': 2, 'soda': 1}","output":"def calculateCost(quantity, prices): cost = 0 for item in quantity: cost += quantity[item] * prices[item] return cost quantity = {'burger': 2, 'fries': 3, 'soda': 2} prices = {'burger': 5, 'fries': 2, 'soda': 1} result = calculateCost(quantity, prices) print(result)"},{"instruction":"Write a Python program to generate a Fibonacci sequence where the number of elements is given as an input. Number of elements = 10","output":"def generateFibonacci(numOfElements): sequence = [] a = 0 b = 1 for i in range(numOfElements): sequence.append(a) c = a + b a = b b = c return sequence print(generateFibonacci(10)) #output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"},{"instruction":"Can you provide a Python code snippet to count the number of words in the given text? Text: Today it is a beautiful day.","output":"text = \\"Today it is a beautiful day.\\" words = text.split() print(\\"Number of words in the given text:\\", len(words))"},{"instruction":"Use matplotlib in Python to create a pie chart depicting a survey result. topic = Favorite fruits responses = { 'banana': 5, 'apple': 7, 'strawberry': 10, 'mango': 6 }","output":"import matplotlib.pyplot as plt labels = list(responses.keys()) values = list(responses.values()) colors = ['#F08080', '#F8A458', '#9BC808', '#000080'] plt.pie(values, labels = labels, colors = colors, autopct='%1.2f%%') plt.title('Favorite Fruits') plt.axis('equal') plt.show()"},{"instruction":"Create a Python function to verify a given user input.","output":"def verify_input(user_input): # Define the accepted characters allowed_chars = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0987654321_\\" for char in user_input: if char not in allowed_chars: return False return True"},{"instruction":"Write a command line program in Python that prints out the Fibonacci numbers up to n. 5","output":"# Program to print the Fibonacci numbers up to n # Function to return the nth Fibonacci number def fibonacci(n): # Base case if n == 0: return 0 elif n == 1 or n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2) # Main function num = int(input(\\"Enter a number: \\")) for i in range(num + 1): print(fibonacci(i))"},{"instruction":"Create an AIX application using Python that takes in user text and returns an appropriate response. User input text: I'm feeling sad.","output":"import gpt_2_simple as gpt2 # Load the GPT-2 model sess = gpt2.start_tf_sess() gpt2.load_gpt2(sess, run_name='run1') # Generate a response text generated_text = gpt2.generate(sess, temperature=0.7, prefix=\\"I'm feeling sad.\\", length=30, return_as_list=True )[0] # Print the response print(generated_text)"},{"instruction":"Create a Python program to classify emails by email content. Yes, I would like a new laptop. No, I don't need one.","output":"import nltk from nltk.tokenize import sent_tokenize from nltk.tokenize import word_tokenize from nltk.corpus import stopwords #list of sample emails emails = [ 'Yes, I would like a new laptop.', 'No, I don't need one.' ] #list of categories email_categories = ['request', 'response'] stop_words = stopwords.words('english') all_words = [] for email in emails: email_words = word_tokenize(email) email_words = [word for word in email_words if word not in stop_words] all_words.extend(email_words) word_features = nltk.FreqDist(all_words) word_features = list(word_features.keys()) def getFeatures(email): words = word_tokenize(email) features = {} for w in word_features: features[w] = (w in words) featuresets = [(getFeatures(email), category) for (email, category) in zip(emails, email_categories)] trainSet = featuresets[:1] testSet = featuresets[1:] classifier = nltk.NaiveBayesClassifier.train(trainSet) for i in testSet: print(\\"Actual: \\"+i[1]+ \\" Predicted: \\"+classifier.classify(i[0]))"},{"instruction":"Generate a sequence of prime numbers using Python.","output":"def generate_prime_numbers(n): prime_numbers = [] for num in range(2, n + 1): prime = True for i in range(2, num): if (num % i == 0): prime = False if prime: prime_numbers.append(num) return prime_numbers print(generate_prime_numbers(100))"},{"instruction":"Generate an HTML <select> element that displays a list of 3 programming languages","output":"<select> <option value=\\"c\\">C</option> <option value=\\"java\\">Java</option> <option value=\\"python\\">Python</option> </select>"},{"instruction":"Create a Python program that creates a new list containing only even numbers from a given list. [1, 2, 3, 4, 5, 6, 7, 8, 9]","output":"# create a list original_list = [1, 2, 3, 4, 5, 6, 7, 8, 9] # create a new list with only even numbers even_list = [num for num in original_list if num % 2 == 0] # display the even list print(even_list)"},{"instruction":"Create a Python program to find the longest word in a given sentence. This is a test sentence","output":"def longestWord(sentence): words = sentence.split(' ') longest_word = '' for word in words: if len(word) > len(longest_word): longest_word = word return longest_word sentence = \\"This is a test sentence\\" print(longestWord(sentence)) // \\"sentence\\""},{"instruction":"Suggest a way to display a calendar for the current month in python.","output":"import calendar date = calendar.month( 2020, 8 ) print(date)"},{"instruction":"Develop a python class that checks if a given number is a prime number or not.","output":"class CheckPrime(object): def __init__(self, number): self.number = number def is_prime(self): if self.number < 2: return False for i in range(2, self.number): if self.number % i == 0: return False return True if __name__ == '__main__': number = int(input('Please input a number: n')) check_prime = CheckPrime(number) if check_prime.is_prime(): print('The number {} is a prime number.'.format(number)) else: print('The number {} is not a prime number.'.format(number))"},{"instruction":"Create a Python program to convert a list of temperatures from Celcius to Fahrenheit. temp_list = [30,15,17,18]","output":"temp_list = [30,15,17,18] # Convert each element in the list to Fahrenheit fahrenheit_list = [] for temp in temp_list: fahrenheit_list.append(temp*9/5 + 32) print(fahrenheit_list) # [86.0, 59.0, 62.6, 64.4]"},{"instruction":"Design and implement a code to reverse a string in Python.","output":"\\"\\"\\"Design and implement a code to reverse a string in Python\\"\\"\\" def reverse_string(string): \\"\\"\\" Function to reverse a given string\\"\\"\\" # Initialize the empty string to store the reversed string reversed_string = \\"\\" # Iterate through the characters of the string in reverse order for i in range(len(string) - 1, -1, -1): reversed_string += string[i] # Return the reversed string return reversed_string if __name__ == '__main__': string = \\"Hello World!\\" reversed_string = reverse_string(string) print(reversed_string)"},{"instruction":"Generate code to convert a JSON string to a Python dictionary","output":"import json def json_string_to_dict(json_string): '''Converts a JSON string to a Python dictionary.''' return json.loads(json_string)"},{"instruction":"Write Python code to print the Hello World! string.","output":"print(\\"Hello World!\\")"},{"instruction":"Design a script in Python to scrape text data from a particular web page. url = 'https://en.wikipedia.org/wiki/Movie'","output":"from bs4 import BeautifulSoup import requests # Get the HTML of the page html_content = requests.get(url).text # Create the Soup object soup = BeautifulSoup(html_content, 'lxml') # Find the text data data = soup.find_all('p') # Print the text data for element in data: print(element.text)"},{"instruction":"Create a class in Python that can be used for storing and accessing information about books.","output":"class Book: def __init__(self, title, author, publisher, isbn): self.title = title self.author = author self.publisher = publisher self.isbn = isbn def get_title(self): return self.title def get_author(self): return self.author def get_publisher(self): return self.publisher def get_isbn(self): return self.isbn"},{"instruction":"Generate a Python program that performs a search in a binary tree and returns the path from the root node to the node containing the search query. Not applicable","output":"class Node: def __init__(self, val): self.left = None self.right = None self.val = val def search_path(root, key): path = [] path = _search_path(root, key, path) return path def _search_path(node, key, path): if node is None: return None path.append(node.val) if node.val == key: return path left_search = _search_path(node.left, key, path) if left_search is not None: return left_search right_search = _search_path(node.right, key, path) if right_search is not None: return right_search path.pop() return None"},{"instruction":"Design a function in Python to find an element in a given list. [3, 2, 4, 5, 6, 7], 4","output":"def findElement(arr, element): for i in range(0, len(arr)): if arr[i] == element: return True return False"},{"instruction":"Create a Python Web Scraper to scrape the life expectancy of citizens in India from the WHO database.","output":"import requests from bs4 import BeautifulSoup url = \\"http://www.who.int/countries/ind/en/\\" scraped_data = requests.get(url) soup = BeautifulSoup(scraped_data.text, 'lxml') life_expectancy_data = soup.find('div', {'class':'site-width'}) life_expectancy = life_expectancy_data.find('ul') life_expectancy_india = float(life_expectancy.find('li').text.strip().split(' ')[-1]) print(life_expectancy_india)"},{"instruction":"mplement a sorting algorithm in Python. array = [10,7,8,9,1,5]","output":"def bubbleSort(array): n = len(array) for i in range(n): for j in range(0, n-i-1): if array[j] > array[j+1] : array[j], array[j+1] = array[j+1], array[j] return array print(bubbleSort(array))"},{"instruction":"Develop a computer vision system for a specific application. Design a computer vision system that can detect the presence of a person in a given room.","output":"Create a Python script that can recognize the presence of a person in a given frame of an image/video. The script should incorporate a trained computer vision model that can detect human faces or other characteristics that can be used to differentiate a person from other objects."},{"instruction":"Create a Python script that automates a task for your development workflow. Commit messages can be hard to keep track of.","output":"import os def get_last_commit_message(): \\"\\"\\" Retrieves the commit message of the last commit. \\"\\"\\" # Get the list of all commits output = os.popen('git log').read() # Split the output into a list of commits commits = output.split('commit ')[1:] # Get the message of the last commit last_commit_message = commits[0].split('n')[1] return last_commit_message if __name__ == '__main__': print(get_last_commit_message())"},{"instruction":"Write a Python script to search for a specific word in a given string. The quick brown fox","output":"import re def searchWord(string, word): return re.search(word, string) result = searchWord(\\"The quick brown fox\\", \\"brown\\") if result is not None: print(\\"Word found\\") else: print(\\"Word not found\\")"},{"instruction":"Create a Linear Regression model in Python to extract a desired output based on the given input data. Input data: X = [1,2,3,4,5,6] y = [13, 23, 32, 43, 51,64]","output":"#import libraries import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.metrics import r2_score # convert the data into dataframe df = pd.DataFrame({'X': [1,2,3,4,5,6], 'y': [13, 23, 32, 43, 51,64]}) # train and test split x_train = df[['X']][:-1] y_train = df['y'][:-1] x_test = df[['X']][-1:] y_test = df['y'][-1:] # define linear model from sklearn.linear_model import LinearRegression model = LinearRegression() model.fit(x_train, y_train) # score r2_score(y_test, model.predict(x_test))"},{"instruction":"Develop a class in Python to represent an employee, including the data attributes for name, age, position and salary. Not applicable","output":"class Employee: def __init__(self, name, age, position, salary): self.name = name self.age = age self.position = position self.salary = salary def getName(self): return self.name def getAge(self): return self.age def getPosition(self): return self.position def getSalary(self): return self.salary"},{"instruction":"Generate a python function to count the number of unique elements in a list [10, 12, 10, 4, 10, 6, 4]","output":"def uniqueCount(mylist): unique = [] for x in mylist: if x not in unique: unique.append(x) return len(unique) mylist = [10, 12, 10, 4, 10, 6, 4] print(uniqueCount(mylist))"},{"instruction":"Create a Python program to print the multiplication table from 1 to 10","output":"def table(n): for i in range(1, 11): # for 1 to 10 print(n,'x',i,'=',n*i) # Driver Code n = 5 table(n)"},{"instruction":"Create an algorithm using Python to generate random passwords. Number of characters: 10","output":"import random def generate_password(length): # Generate a random password that is length characters long chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890' password = '' for _ in range(length): password += random.choice(chars) return password generated_password = generate_password(10) print(generated_password)"},{"instruction":"Create a Python script to filter a list of numbers by a given filter. The script should use a function that takes a list of numbers and a filter as arguments and returns the filtered list. List: [1,2,5,6,4,7,8] Filter: x > 0","output":"def filterList(nums, filter): # Initialize a filtered list filtered_list = [] # Iterate over the list for num in nums: # Check if filter is true if eval(str(num)+filter): filtered_list.append(num) # Return the filtered list return filtered_list result = filterList([1,2,5,6,-4,7,8], '> 0') print(result) # Output: [1,2,5,6,7,8]"},{"instruction":"Create a REST API endpoint in Python to return a list of employees with their name and salary. Not applicable","output":"import json employees = [ {'name': 'John', 'salary': 1000}, {'name': 'Alice', 'salary': 2000}, {'name': 'Bob', 'salary': 1500} ] def get_employees(): return json.dumps(employees)"},{"instruction":"Create a python 3 function to encode the input string. Hello World!","output":"def encode_string(s): # Function to encode a string encoded_string = '' for c in s: encoded_string += hex(ord(c)).upper()[2:] return encoded_string"},{"instruction":"Create a Python program that reads two integer values from standard input, stores them in two variables, and then swaps their values? a = 5, b = 10","output":"# Read two integer values a = int(input()) b = int(input()) # Swap their values temp = a a = b b = temp # Print the variables print(\\"a =\\", a) print(\\"b =\\", b)"},{"instruction":"Write a Python script to create a classifier which can classify given emails as spam or nonspam.","output":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # read data df = pd.read_csv('data.csv') # transform data into features vectorizer = CountVectorizer() x = vectorizer.fit_transform(df['text']) # train Naive Bayes model clf = MultinomialNB() clf.fit(x, df['label']) # predict on unseen data example = vectorizer.transform(['I am a spam email']) prediction = clf.predict(example) print(prediction[0])"},{"instruction":"Write a function that returns the sum of all the elements of a list in Python.","output":"def mySum(list): total = 0 for num in list: total += num return total"},{"instruction":"Create a Python program to optimize a given function with at least two variables. The function is given as f(x,y) = 3x^2 + 2xy + 7y^2 and the x and y values are bounded from 0 to 5.","output":"from scipy.optimize import minimize def objective(x): # minimize 3x^2 + 2xy + 7y^2 return 3*x[0]**2 + 2*x[0]*x[1] + 7*x[1]**2 # define bounds x0_bounds = (0,5) x1_bounds = (0,5) bounds = [x0_bounds, x1_bounds] # intial values x0 = [1, 1] # optimization solution = minimize(objective,x0, bounds=bounds) # result print(\\"Optimized x0:\\", solution.x[0]) print(\\"Optimized x1:\\", solution.x[1]) print(\\"Optimized result:\\", solution.fun)"},{"instruction":"Create a code in Python that takes two lists and returns a new list that contains the elements of both. list1 = [1, 2, 3] list2 = [2, 3, 4]","output":"def merge_lists(list1, list2): merged_list = list1 + list2 return merged_list merged_list = merge_lists(list1, list2) print(merged_list)"},{"instruction":"Create a Python program that takes a list of words given by the user and prints out a sentence constructed from these words. words = ['The', 'quick', 'brown', 'fox']","output":"words = ['The', 'quick', 'brown', 'fox'] sentence = \\" \\".join(words) print(sentence) # Output: The quick brown fox"},{"instruction":"Create a Python web application to display user profile data. The application should include an HTML page, a web server, and a database. User profile data includes name, age, email, address and phone number.","output":"import sqlite3 from flask import Flask, g, render_template # create the application app = Flask(__name__) # define the database connection def get_db(): if not hasattr(g, 'db'): g.db = sqlite3.connect('users.db') return g.db # close the connection at the end of a request @app.teardown_appcontext def close_db(error): if hasattr(g, 'db'): g.db.close() # define a route to display all users @app.route('/') def index_page(): db = get_db() cur = db.execute(SELECT * FROM users) return render_template('index.html', users=cur.fetchall()) # run the application if __name__ == '__main__': app.run() # template file: index.html <html> <body> {% for user in users %} <h3>{{ user.name }} | {{ user.address }}</h3> {% endfor %} </body> </html>"},{"instruction":"Create a Python program to swap two numbers. num1 : 5 num2 : 10","output":"# Function to swap two numbers def swap_nums(num1, num2): # Swapping the two numbers num1, num2 = num2, num1 return num1, num2 # Main code num1 = 5 num2 = 10 # Printing the values before swapping print(\\"Before swapping: \\") print(\\"Number 1 = \\", num1) print(\\"Number 2 = \\", num2) # Calling the swap function num1, num2 = swap_nums(num1, num2) # Printing the values after swapping print(\\"nAfter swapping: \\") print(\\"Number 1 = \\", num1) print(\\"Number 2 = \\", num2)"},{"instruction":"Create a basic Machine Learning model in Python using Scikit Learn. The model should take the number of bedrooms and lot size of a house as input and predict the price of the house. Number of Bedrooms: 3 Lot Size: 10000","output":"import numpy as np import matplotlib.pyplot as plt from sklearn import linear_model #generate dataset containing input and output bedrooms = [3,2,4,2,3,4] lot_sizes = [10000,20000,30000,40000,50000,60000] prices = [20000,25000,30000,35000,40000,45000] #reshape the data bedrooms_data = np.array(bedrooms).reshape(-1,1) lot_sizes_data = np.array(lot_sizes).reshape(-1,1) #train the model model = linear_model.LinearRegression() model.fit(bedrooms_data,lot_sizes_data) #predict predicted_price = model.predict([[3,10000]]) #print the predicted price print(predicted_price)"},{"instruction":"Create a Python class representing a grocery item with the following attributes: name, price, quantity.","output":"class GroceryItem: def __init__(self, name, price, quantity): self.name = name self.price = price self.quantity = quantity"},{"instruction":"Create an optimization function in Python that takes in a list of integers and finds the smallest number that is greater than all of the other numbers in the list. [1, 2, 3, 4]","output":"def optimize(arr): smallest = None for num in arr: if (smallest is None) or (num > smallest): smallest = num return smallest + 1 x = [1, 2, 3, 4] result = optimize(x) print(result) # 5"},{"instruction":"Create a Python algorithm to evaluate a heap.","output":"def eval_heap(arr): # Base case if len(arr) == 0: return -1 # Stores the index of the max element max_idx = 0 # Iterate the array from index 1 for i in range(1, len(arr)): # Update the max_idx if value of arr[i] # is greater than arr[max_idx] if arr[i] > arr[max_idx]: max_idx = i # Check if heap property is violated for j in range(0, max_idx): if arr[j] > arr[max_idx]: return False # Recursively call the eval_heap on remaining elements return eval_heap(arr[0:max_idx])"},{"instruction":"Write a python program to sort a list of tuples based on their second element. list = [('dog', 6), ('cat', 4), ('rabbit', 2)]","output":"list = [('dog', 6), ('cat', 4), ('rabbit', 2)] list.sort(key=lambda x: x[1]) print(list)"},{"instruction":"dentify the difference between the following code snippet in Python # Snippet 1 x = 1 if x == 1: print(Meaning of life) # Snippet 2 if x == 1: print(Meaning of life) x = 1","output":"The difference between the two snippets is that in the first snippet, the value of x will be changed before the if condition is evaluated, while in the second snippet, the value of x will not be changed until after the if condition is evaluated. Therefore, if the code in the first snippet is executed, the print statement will be executed, while in the second snippet, the print statement will not be executed."},{"instruction":"Write a Python program that takes a text string as input and returns the number of words in it. text = 'This is a sample string.'","output":"def count_words(text): words = text.split() return len(words)"},{"instruction":"Write a Python program to create a web API for predicting movie ratings based on user reviews. Not applicable","output":"import json import nltk import pandas as pd from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression # Define a function to create features from review data def create_features_from_reviews(reviews): vectorizer = TfidfVectorizer(ngram_range=(1, 1), stop_words='english', min_df=0.017, max_df=0.98) X = vectorizer.fit_transform(reviews) return X # Load and pre-process the raw data data = pd.read_csv('movie_reviews.csv', header=0, delimiter=',') X = create_features_from_reviews(data['review_text']) y = data['rating'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) # Train the logistic regression model and evaluate it logreg = LogisticRegression() logreg.fit(X_train, y_train) acc_score = logreg.score(X_test, y_test) print('Accuracy: ', acc_score) # Create a simple web API @app.route('/api/movie_rating', methods=['POST']) def predict_rating(): # Get the data from the POST request data = request.get_json() # Make prediction using model prediction = logreg.predict([X_test[0]]) # Take the first value of prediction output = prediction[0] return json.dumps({'rating': output})"},{"instruction":"Create a Python module to perform basic encryption of a given text.","output":"def basic_encryption(s): encrypted = \\"\\" for c in s: encrypted += chr(ord(c) + 1) return encrypted"},{"instruction":"Create a web crawl program using Python libraries. This program should crawl through a website for specified URLS and fetch the page source code. Target website: https://example.com","output":"import requests from bs4 import BeautifulSoup # URL of the website to be crawled url = 'https://example.com/' # Send a request to the website and fetch the source code r = requests.get(url) html = r.text # Initialize the BeautifulSoup object soup = BeautifulSoup(html, 'html.parser') # Find all the links in the website links = soup.find_all('a') # Iterate over the links and collect the \`href\` values for link in links: print(link.get('href'))"},{"instruction":"Write a function in Python that takes a string as input and converts it to title case. s = this is a test string","output":"def convertToTitleCase(s): return ' '.join(word[0].upper() + word[1:] for word in s.split()) print(convertToTitleCase(\\"this is a test string\\")) # Output: This Is A Test String"},{"instruction":"Create a Python code snippet toshuffle a given list of numbers. [1, 2, 3, 4, 5]","output":"import random def shuffle_list(list_nums): random.shuffle(list_nums) print(\\"Shuffled list :\\", list_nums) list_nums = [1, 2, 3, 4, 5] shuffle_list(list_nums)"},{"instruction":"Craft a program in Python to take in a list of integers, and return the sum of the even numbers in the list. [1, 2, 3, 4, 5]","output":"def sum_even(arr): ''' Function to calculate the sum of even numbers in an array Parameters arr: list of integers Returns sum of even numbers in the array ''' total = 0 for num in arr: if num % 2 == 0: total += num return total"},{"instruction":"Generate a python program to print a Roman Numeral for any number between 1 and 5.","output":"def print_roman_numeral(num): if num == 1: return \\"I\\" elif num == 2: return \\"II\\" elif num == 3: return \\"III\\" elif num == 4: return \\"IV\\" elif num == 5: return \\"V\\" else: return \\"invalid number\\" number = int(input(\\"Enter a number between 1 and 5: \\")) print(print_roman_numeral(number))"},{"instruction":"Write a Python program to sort data from the largest to the smallest. [44, 23, 11, 33, 5]","output":"unsorted_list = [44, 23, 11, 33, 5] sorted_list = sorted(unsorted_list, reverse=True) print(sorted_list)"},{"instruction":"Write a python program which takes a given address data in the form of a dictionary and returns the geocodes of the address. {'street': '123 Main Street', 'state': 'NY', 'zip': '12345'}","output":"\\"\\"\\" Get the geocodes of an address data \\"\\"\\" import requests def geocode_address(address): # Create the url url = 'http://maps.googleapis.com/maps/api/geocode/json' # Create the params params = {'address': '{street}, {state}, {zip}'.format(**address), 'sensor': 'false'} # Make the request resp = requests.get(url, params=params) data = resp.json() # Extract the latitude and longitude if data['status'] == 'OK': lat = data['results'][0]['geometry']['location']['lat'] lng = data['results'][0]['geometry']['location']['lng'] else: return 'Error: Address not found' return [lat, lng] if __name__ == '__main__': address = {'street': '123 Main Street', 'state': 'NY', 'zip': '12345'} print(geocode_address(address))"},{"instruction":"Write a Python program to sort a given list of strings based on their length. list1 = [apple, orange, banana, mango]","output":"def sort_str_by_length(list1): return sorted(list1, key=len)"},{"instruction":"mplement an algorithm for optimizing a program written in Python. def makeChange(coinSet, change): bestSet = [] for i in range(change + 1): bestSet.append([i]) for i in range(1, change + 1): for j in range(len(coinSet)): if coinSet[j] < = i: bestSet[i] = min(bestSet[i], 1 + bestSet[i coinSet[j]]): return bestSet[change]","output":"def makeChange(coinSet, change): bestSet = [] for i in range(change + 1): bestSet.append([i]) # populate the list until the change amount for i in range(1, change + 1): for j in range(len(coinSet)): # test to see if the coin is less then or equal to the change if coinSet[j] <= i: bestSet[i] = min(bestSet[i], 1 + bestSet[i - coinSet[j]]) # check to make sure the coins sum upto given amount else return None if(sum(bestSet[change]) != change): return None return bestSet[change]"},{"instruction":"Develop a process in Python to classify a set of data points into two categories. [1, 2, 3, 4, 5, 6, 7]","output":"def classifier(data_points): categories = [] for data_point in data_points: if data_point % 2 == 0: categories.append('even') else: categories.append('odd') return categories"},{"instruction":"Design a function in Python to find the most repeated character in a string. my_string=Hello world","output":"def most_repeated_character(my_string): counts = Counter(my_string) max_char = max(counts, key=counts.get) return max_char print(\\"Most repeated character:\\", most_repeated_character(my_string))"},{"instruction":"Write a Python program to classify a given set of data into any two classes. data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","output":"def classify_data(data): class_1 = [] class_2 = [] for value in data: if value % 2 == 0: class_1.append(value) else: class_2.append(value) return class_1, class_2"},{"instruction":"Write a Python program to generate a random list of length n containing integers within range (0, n1). n = 6","output":"import random def random_list(n): # Generating a random list of length n random_list = [] for i in range(n): random_list.append(random.randint(0,n-1)) return random_list # Driver Code n = 6 print(random_list(n))"},{"instruction":"Create a Python script to download a web page from a URL. https://example.com","output":"import requests # Get the webpage url = 'https://example.com' r = requests.get(url) # Save the webpage to a file with open('webpage.html', 'wb') as f: f.write(r.content)"},{"instruction":"Remove the duplicates from a given array using Python data = [1, 3, 3, 4, 5, 6, 6, 7]","output":"def remove_duplicates(data): result = [] for element in data: if element not in result: result.append(element) return result print(remove_duplicates([1, 3, 3, 4, 5, 6, 6, 7]))"},{"instruction":"mplement an algorithm to find a substring in a given string using a greedy approach in Python. string = This is a sample string substring = sample","output":"def find_substring(string, substring): start = 0 result = \\"\\" while start < len(string): idx = string.find(substring, start) if idx == -1: break result += string[idx:idx+len(substring)] start = idx+len(substring) return result"},{"instruction":"Create a Python program to group words that are anagrams into a list. ['eat', 'tea', 'tan', 'ate', 'nat', 'bat']","output":"def group_anagrams(words): result = {} for word in words: key = ''.join(sorted(word)) if key in result.keys(): result[key].append(word) else: result[key] = [word] return list(result.values()) words = ['eat', 'tea', 'tan', 'ate', 'nat', 'bat'] print(group_anagrams(words))"},{"instruction":"Generate a Python script to cluster handwritten numbers by a given similarity metric.","output":"# import the necessary libraries import matplotlib.pyplot as plt from sklearn.cluster import KMeans from sklearn.datasets import load_digits # load the digits dataset digits = load_digits() # define the clustering model kmeans_model = KMeans(n_clusters=10, random_state=42) # fit the model to the digits dataset kmeans_model.fit(digits.data) # assign labels to the clusters labels = kmeans_model.labels_ # plot the clusters for i in range(10): # create a mask to isolate each cluster mask = labels == i # plot the images of the cluster plt.title(f\\"Cluster {i}\\") plt.imshow(digits.images[mask][0], cmap=\\"gray\\") plt.show()"},{"instruction":"Optimize the given Python code to improve the runtime. def sum_list(nums): sum_total = 0 for n in nums: sum_total += n return sum_total nums = [1, 2, 3, 4, 5]","output":"def sum_list(nums): return sum(nums) nums = [1, 2, 3, 4, 5]"},{"instruction":"mplement a function to merge and sort two given sorted lists in Python. list_1 = [1, 3, 5, 6, 7] list_2 = [4, 8, 9, 10]","output":"def merge_sort(list_1, list_2): merged_list = list_1 + list_2 merged_list.sort() return merged_list if __name__ == '__main__': list_1 = [1, 3, 5, 6, 7] list_2 = [4, 8, 9, 10] print(merge_sort(list_1, list_2))"},{"instruction":"Convert the following pseudocode into a Python program: <Set X to be the sum of the cubes of all numbers from 1 to 10>","output":"x = 0 for i in range(1,11): x += i**3 print(x)"},{"instruction":"Given a list of numbers, write a python program that finds the highest and secondhighest number in the list. my_list = [1,5,10,14,19,25]","output":"def find_max_min(my_list): max1 = float(\\"-inf\\") max2 = float(\\"-inf\\") for num in my_list: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num return max1, max2 max1, max2 = find_max_min(my_list) print(\\"The highest and second-highest number in the list are: %d, %d\\" % (max1, max2))"},{"instruction":"Develop an algorithm to check if a string S is a palindrome in Python. String S = racecar","output":"def is_palindrome(s): # Convert strings to lowercase s = s.lower() # Iterate through middle of string with indices for i in range(len(s) // 2): if s[i] != s[len(s) - i - 1]: return False return True"},{"instruction":"mplement a Python program for the 0/1 knapsack problem. weights = [10, 30, 20] values = [30, 90, 60] capacity = 50","output":"def knapsack_0_1(weights, values, capacity): n = len(values) matrix = [ [0]*(capacity+1) for _ in range(n+1) ] for i in range(1, n+1): for c in range(capacity+1): if weights[i-1] > c: matrix[i][c] = matrix[i-1][c] else: matrix[i][c] = max(matrix[i-1][c], values[i-1] + matrix[i-1][c-weights[i-1]]) return matrix[i][c]"},{"instruction":"Write a Python script to simulate a first person shooter game. No input required","output":"import pygame import math # Initialize pygame pygame.init() clock = pygame.time.Clock() # Setup window window_width, window_height = 800, 600 window = pygame.display.set_mode((window_width, window_height)) pygame.display.set_caption(\\"First Person Shooter\\") # Load images player_image = pygame.image.load(\\"player.png\\") # Setup player player_x = 400 player_y = 300 player_x_change = 0 player_y_change = 0 # Game loop run = True while run: # Window background window.fill((0, 0, 0)) # Track user events for event in pygame.event.get(): if event.type == pygame.QUIT: run = False # Get and handle key inputs keys = pygame.key.get_pressed() if keys[pygame.K_LEFT]: player_x_change = -4 if keys[pygame.K_RIGHT]: player_x_change = 4 if keys[pygame.K_UP]: player_y_change = -4 if keys[pygame.K_DOWN]: player_y_change = 4 # Move player player_x += player_x_change player_y += player_y_change # Boundary check if player_x <= 0: player_x = 0 elif player_x >= window_width - 64: player_x = window_width - 64 if player_y <= 0: player_y = 0 elif player_y >= window_height - 64: player_y = window_height - 64 # Display player window.blit(player_image, (player_x, player_y)) # Update window pygame.display.update() # Wait for a frame clock.tick(60) # Quit game pygame.quit()"},{"instruction":"Design a function in Python to generate a random password.","output":"\\"\\"\\" Design a function in Python to generate a random password \\"\\"\\" import string import random def generate_password(length=16): # list of possible characters for the password characters = string.ascii_letters + string.punctuation + string.digits # generate a random password password = ''.join(random.choice(characters) for i in range(length)) # return the random password return password # generate a random password random_password = generate_password() # print the random password print(random_password)"},{"instruction":"Write a Python program that predicts the future price of a stock in two weeks. Current stock prices: IBM 145, AAPL 285, MSFT 181","output":"# Import necessary libraries import numpy as np import pandas as pd from sklearn.linear_model import LinearRegression # Load the data data = [[145, 285, 181], [149, 290, 184], [153, 295, 187]] data = pd.DataFrame(data, columns=['IBM', 'AAPL', 'MSFT']) # Define and fit the linear regression model model = LinearRegression() model.fit(data[['IBM', 'AAPL', 'MSFT']], data.shift(-1)) # Make predictions for the future stock prices predictions = model.predict([[145, 285, 181], [149, 290, 184]])[0] print('Predicted future stock prices: IBM: %f, AAPL: %f, MSFT: %f.' % (predictions[0], predictions[1], predictions[2]))"},{"instruction":"Generate a Python class called Circle that stores the radius of a circle and calculates the area.","output":"class Circle: def __init__(self, radius): self.radius = radius def calculateArea(self): return 3.14159 * self.radius * self.radius"},{"instruction":"Generate a function in Python using the input argument that takes in a string, removes all the vowels from it, and returns a new string without any vowels. the quick brown fox jumps over the lazy dog","output":"def remove_vowels(text): no_vowels = \\"\\" for character in text: if character not in \\"aeiouAEIOU\\": no_vowels += character return no_vowels"},{"instruction":"Write a function to count the number of syllables in a word using regular expression in Python? Not applicable","output":"import re def count_syllables(word): pattern = r'[aeiouy]+' return len(re.findall(pattern, word)) print(count_syllables('syllable')) # 3 print(count_syllables('balloons')) # 2"},{"instruction":"Generate a function in Python to zip two lists. list1 = [a, b, c] list2 = [1, 2, 3]","output":"def zip_two_lists(list1, list2): return zip(list1, list2)"},{"instruction":"Write a Python program that sorts a list of numbers using the Merge Sort algorithm. Not applicable","output":"def merge_sort(lst): # Base case: if lst has 0 or 1 element, it is already sorted if len(lst) <= 1: return lst # Split the list into two halves mid = len(lst) // 2 left_half = merge_sort(lst[:mid]) right_half = merge_sort(lst[mid:]) # Merge the sorted halves return merge(left_half, right_half) def merge(left_half, right_half): # Create an empty list merged_list = [] # Each loop iteration, take the smallest remaining element in each list while left_half and right_half: if left_half[0] <= right_half[0]: merged_list.append(left_half.pop(0)) else: merged_list.append(right_half.pop(0)) # Add the remainder of the left or right half merged_list.extend(left_half) merged_list.extend(right_half) # Return the merged list return merged_list"},{"instruction":"Design a Python dictionary for storing data about countries and their corresponding capital cities.","output":"countries_cities = { \\"UK\\": \\"London\\", \\"France\\": \\"Paris\\", \\"Spain\\": \\"Madrid\\", \\"Germany\\": \\"Berlin\\", \\"Italy\\": \\"Rome\\" }"},{"instruction":"Develop a Python class that implements a stack data structure with push and pop methods.","output":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop()"},{"instruction":"Can you generate code to clear all whitespace from a given string in Python? Input String = Hello World","output":"def clear_whitespace(s): s = s.strip() # Remove leading and trailing whitespaces s = \\"\\".join(s.split()) # Remove middle whitespaces return s print(clear_whitespace(\\" Hello World \\"))"},{"instruction":"Write a Python script that takes a list of words as input and calculates the average length of the words. [Hello,World,Beautiful,Day]","output":"words = [\\"Hello\\",\\"World\\",\\"Beautiful\\",\\"Day\\"] lengths = [len(word) for word in words] avg_length = sum(lengths) / len(lengths) print(\\"Average word length is {:.2f}\\".format(avg_length))"},{"instruction":"Generate a Python program to check if a list contains a given value.","output":"def check_if_contains(lst, val): return val in lst"},{"instruction":"Create a Python program to analyze the sentiment of a given sentence. sentence = 'I am very happy to be here'","output":"from textblob import TextBlob sentence = 'I am very happy to be here' sentiment = TextBlob(sentence).polarity if sentiment > 0: print(\\"Sentiment: Positive\\") elif sentiment == 0: print(\\"Sentiment: Neutral\\") else: print(\\"Sentiment: Negative\\")"},{"instruction":"Develop an algorithm in Python to find the depth of a binary tree.","output":"def findDepth(root): if root is None: return 0 ; else : left_height = findDepth(root.left) right_height = findDepth(root.right) if left_height > right_height : return left_height+1 else: return right_height+1"},{"instruction":"Write a Python program to take a string as input and return a new string with all vowels removed.","output":"def remove_vowels(string): # compile regex regex = re.compile('[aeiou]', re.IGNORECASE) # replace matching characters with an empty string return regex.sub('', string)"},{"instruction":"Build a classifier in Python that can classify a movie against different genres.","output":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier # read in the dataset df = pd.read_csv('movie_data.csv') # remove irrelevant columns df_clean = df.drop(['plot', 'cast', 'director', 'year'], axis=1) # feature engineering X = df_clean.drop('genre', axis=1).values y = df_clean['genre'].values # split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # train the model rf = RandomForestClassifier(n_estimators=1000, random_state=0) rf.fit(X_train, y_train) # evaluate the model accuracy = rf.score(X_test, y_test) print('Model accuracy on test set: ', accuracy)"},{"instruction":"Create a Python Flask application which allows users to store and retrieve a list of books. Not applicable","output":"from flask import Flask, request import sqlite3 # configure the database db_name = 'booklist.db' def get_cursor(): conn = sqlite3.connect(db_name) conn.row_factory = sqlite3.Row return conn.cursor() # create the Flask application app = Flask(__name__) # create a route to view all books @app.route('/books', methods=['GET']) def view_books(): cursor = get_cursor() cursor.execute('SELECT * FROM books') books = cursor.fetchall() return books # create a route to store a book @app.route('/books', methods=['POST']) def store_book(): title = request.json.get('title') author = request.json.get('author') cursor = get_cursor() cursor.execute('INSERT INTO books (title, author) VALUES (?,?)', (title, author)) conn = cursor.connection conn.commit() return 'Book Added successfully' # run the application if __name__ == '__main__': app.run(debug=True)"},{"instruction":"Write a Python program to demonstrate inheritance between two classes.","output":"class Person: def __init__(self, name, age): self.name = name self.age = age def show_info(self): print(\\"Name of Person is: \\", self.name) print(\\"Age of Person is: \\", self.age) class Employee(Person): def __init__(self, name, age, emp_id): super().__init__(name, age) self.emp_id = emp_id def show_info(self): super().show_info() print(\\"ID of Employee is: \\", self.emp_id) emp = Employee(\\"John Doe\\", 30, \\"E1001\\") emp.show_info()"},{"instruction":"Write a Python program to implement a given sorting algorithm Array: [9, 8, 7, 6, 5, 4, 3, 2, 1] Sorting Algorithm: Insertion Sor","output":"def insertion_sort(arr): for i in range(1, len(arr)): key = arr[i] j = i-1 while j >=0 and key < arr[j] : arr[j+1] = arr[j] j -= 1 arr[j+1] = key arr = [9, 8, 7, 6, 5, 4, 3, 2, 1] insertion_sort(arr)"},{"instruction":"Write a Python program to create a class to represent a bank account and add two methods, deposit and withdrawal, to modify the account balance. Not applicable.","output":"class BankAccount: def __init__(self, name, balance=0.0): self.name = name self.balance = balance def deposit(self, amount): self.balance += amount return self.balance def withdraw(self, amount): if amount > self.balance: raise RuntimeError('Amount greater than available balance.') self.balance -= amount return self.balance"},{"instruction":"The given code is a Python module that provides functions to interact with video4linux2 (v4l2) devices. To use this module, import it into your Python script and call the functions as needed. The functions include: \`list_devices()\`: lists all v4l2 devices currently connected to the system. \`list_resolutions(device)\`: lists all supported resolutions for a given v4l2 device. \`get_brightness(device)\`: gets the current brightness value for a given v4l2 device. \`set_brightness(device, value)\`: sets the brightness value for a given v4l2 device. \`get_contrast(device)\`: gets the current contrast value for a given v4l2 device. \`set_contrast(device, value)\`: sets the contrast value for a given v4l2 device. \`get_saturation(device)\`: gets the current saturation value for a given v4l2 device. \`set_saturation(device, value)\`: sets the saturation value for a given v4l2 device. \`get_hue(device)\`: gets the current hue value for a given v4l2 device. \`set_hue(device, value)\`: sets the hue value for a given v4l2 device.","output":"# Copyright (c) 2013 Calin Crisan # This file is part of motionEye. # # motionEye is free software: you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program. If not, see <http://www.gnu.org/licenses/>. import fcntl import logging import os.path import re import stat import subprocess import time import utils _resolutions_cache = {} _ctrls_cache = {} _ctrl_values_cache = {} _DEV_V4L_BY_ID = '/dev/v4l/by-id/' def find_v4l2_ctl(): try: return subprocess.check_output('which v4l2-ctl', shell=True).strip() except subprocess.CalledProcessError: # not found return None def list_devices(): global _resolutions_cache, _ctrls_cache, _ctrl_values_cache logging.debug('listing v4l2 devices...') try: output = '' started = time.time() p = subprocess.Popen('v4l2-ctl --list-devices 2>/dev/null', shell=True, stdout=subprocess.PIPE, bufsize=1) fd = p.stdout.fileno() fl = fcntl.fcntl(fd, fcntl.F_GETFL) fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK) while True: try: data = p.stdout.read(1024) if not data: break except IOError: data = '' time.sleep(0.01) output += data if len(output) > 10240: logging.warn('v4l2-ctl command returned more than 10k of output') break if time.time() - started > 3: logging.warn('v4l2-ctl command ran for more than 3 seconds') break except subprocess.CalledProcessError: logging.debug('failed to list devices (probably no devices installed)') return [] try: # try to kill the v4l2-ctl subprocess p.kill() except: pass # nevermind name = None devices = [] for line in output.split('n'): if line.startswith('t'): device = line.strip() persistent_device = find_persistent_device(device) devices.append((device, persistent_device, name)) logging.debug('found device %(name)s: %(device)s, %(persistent_device)s' % { 'name': name, 'device': device, 'persistent_device': persistent_device}) else: name = line.split('(')[0].strip() # clear the cache _resolutions_cache = {} _ctrls_cache = {} _ctrl_values_cache = {} return devices def list_resolutions(device): global _resolutions_cache device = utils.make_str(device) if device in _resolutions_cache: return _resolutions_cache[device] logging.debug('listing resolutions of device %(device)s...' % {'device': device}) resolutions = set() output = '' started = time.time() p = subprocess.Popen('v4l2-ctl -d \\"%(device)s\\" --list-formats-ext | grep -vi stepwise | grep -oE \\"[0-9]+x[0-9]+\\" || true' % { 'device': device}, shell=True, stdout=subprocess.PIPE, bufsize=1) fd = p.stdout.fileno() fl = fcntl.fcntl(fd, fcntl.F_GETFL) fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK) while True: try: data = p.stdout.read(1024) if not data: break except IOError: data = '' time.sleep(0.01) output += data if len(output) > 10240: logging.warn('v4l2-ctl command returned more than 10k of output') break if time.time() - started > 3: logging.warn('v4l2-ctl command ran for more than 3 seconds') break try: # try to kill the v4l2-ctl subprocess p.kill() except: pass # nevermind for pair in output.split('n'): pair = pair.strip() if not pair: continue width, height = pair.split('x') width = int(width) height = int(height) if (width, height) in resolutions: continue # duplicate resolution if width < 96 or height < 96: # some reasonable minimal values continue if width % 16 or height % 16: # ignore non-modulo 16 resolutions continue resolutions.add((width, height)) logging.debug('found resolution %(width)sx%(height)s for device %(device)s' % { 'device': device, 'width': width, 'height': height}) if not resolutions: logging.debug('no resolutions found for device %(device)s, using common values' % {'device': device}) # no resolution returned by v4l2-ctl call, add common default resolutions resolutions = utils.COMMON_RESOLUTIONS resolutions = list(sorted(resolutions, key=lambda r: (r[0], r[1]))) _resolutions_cache[device] = resolutions return resolutions def device_present(device): device = utils.make_str(device) try: st = os.stat(device) return stat.S_ISCHR(st.st_mode) except: return False def find_persistent_device(device): device = utils.make_str(device) try: devs_by_id = os.listdir(_DEV_V4L_BY_ID) except OSError: return device for p in devs_by_id: p = os.path.join(_DEV_V4L_BY_ID, p) if os.path.realpath(p) == device: return p return device def get_brightness(device): return _get_ctrl(device, 'brightness') def set_brightness(device, value): _set_ctrl(device, 'brightness', value) def get_contrast(device): return _get_ctrl(device, 'contrast') def set_contrast(device, value): _set_ctrl(device, 'contrast', value) def get_saturation(device): return _get_ctrl(device, 'saturation') def set_saturation(device, value): _set_ctrl(device, 'saturation', value) def get_hue(device): return _get_ctrl(device, 'hue') def set_hue(device, value): _set_ctrl(device, 'hue', value) def _get_ctrl(device, control): global _ctrl_values_cache device = utils.make_str(device) if not device_present(device): return None if device in _ctrl_values_cache and control in _ctrl_values_cache[device]: return _ctrl_values_cache[device][control] controls = _list_ctrls(device) properties = controls.get(control) if properties is None: logging.warn('control %(control)s not found for device %(device)s' % { 'control': control, 'device': device}) return None value = int(properties['value']) # adjust the value range if 'min' in properties and 'max' in properties: min_value = int(properties['min']) max_value = int(properties['max']) value = int(round((value - min_value) * 100.0 / (max_value - min_value))) else: logging.warn('min and max values not found for control %(control)s of device %(device)s' % { 'control': control, 'device': device}) logging.debug('control %(control)s of device %(device)s is %(value)s%%' % { 'control': control, 'device': device, 'value': value}) return value def _set_ctrl(device, control, value): global _ctrl_values_cache device = utils.make_str(device) if not device_present(device): return controls = _list_ctrls(device) properties = controls.get(control) if properties is None: logging.warn('control %(control)s not found for device %(device)s' % { 'control': control, 'device': device}) return _ctrl_values_cache.setdefault(device, {})[control] = value # adjust the value range if 'min' in properties and 'max' in properties: min_value = int(properties['min']) max_value = int(properties['max']) value = int(round(min_value + value * (max_value - min_value) / 100.0)) else: logging.warn('min and max values not found for control %(control)s of device %(device)s' % { 'control': control, 'device': device}) logging.debug('setting control %(control)s of device %(device)s to %(value)s' % { 'control': control, 'device': device, 'value': value}) output = '' started = time.time() p = subprocess.Popen('v4l2-ctl -d \\"%(device)s\\" --set-ctrl %(control)s=%(value)s' % { 'device': device, 'control': control, 'value': value}, shell=True, stdout=subprocess.PIPE, bufsize=1) fd = p.stdout.fileno() fl = fcntl.fcntl(fd, fcntl.F_GETFL) fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK) while True: try: data = p.stdout.read(1024) if not data: break except IOError: data = '' time.sleep(0.01) output += data if len(output) > 10240: logging.warn('v4l2-ctl command returned more than 10k of output') break if time.time() - started > 3: logging.warn('v4l2-ctl command ran for more than 3 seconds') break try: # try to kill the v4l2-ctl subprocess p.kill() except: pass # nevermind def _list_ctrls(device): global _ctrls_cache device = utils.make_str(device) if device in _ctrls_cache: return _ctrls_cache[device] output = '' started = time.time() p = subprocess.Popen('v4l2-ctl -d \\"%(device)s\\" --list-ctrls' % { 'device': device}, shell=True, stdout=subprocess.PIPE, bufsize=1) fd = p.stdout.fileno() fl = fcntl.fcntl(fd, fcntl.F_GETFL) fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK) while True: try: data = p.stdout.read(1024) if not data: break except IOError: data = '' time.sleep(0.01) output += data if len(output) > 10240: logging.warn('v4l2-ctl command returned more than 10k of output') break if time.time() - started > 3: logging.warn('v4l2-ctl command ran for more than 3 seconds') break try: # try to kill the v4l2-ctl subprocess p.kill() except: pass # nevermind controls = {} for line in output.split('n'): if not line: continue match = re.match('^s*(w+)s+(w+)s+:s*(.+)', line) if not match: continue (control, properties) = match.groups() properties = dict([v.split('=', 1) for v in properties.split(' ') if v.count('=')]) controls[control] = properties _ctrls_cache[device] = controls return controls"},{"instruction":"Write a Python program to divide a given list into n equal lists. my_list = [1, 2, 3, 4, 5, 6] n = 3","output":"# Function to divide the given list into N equal parts def divide_list(my_list, n): # List Comprehension to divide the list into n equal parts list_of_lists = [my_list[i * n:(i + 1) * n] for i in range((len(my_list) + n - 1) // n )] return list_of_lists # Driver Code my_list = [1, 2, 3, 4, 5, 6] n = 3 divide_list(my_list, n) # Output: [[1, 2, 3], [4, 5, 6], [7, 8]]"},{"instruction":"Edit the following Python program to make it run without any syntax errors. def sum(alist) total 0 for i in range alist total += i return total","output":"def sum(alist): total = 0 for i in alist: total += i return total"},{"instruction":"Write a Python program which randomly selects 3 items from a list of 5 items and prints them to the console. list = [apple, banana, orange, strawberry, grape]","output":"import random list = [\\"apple\\", \\"banana\\", \\"orange\\", \\"strawberry\\", \\"grape\\"] random.shuffle(list) for item in list[:3]: print(item)"},{"instruction":"mplement a realtime chat application in Python using websockets. Not applicable","output":"import websockets users = [] async def consumer(websocket): while True: message = await websocket.recv() for user in users: await user.send(message) async def producer(websocket, path): users.append(websocket) await consumer(websocket) start_server = websockets.serve(producer, 'localhost', 8000) asyncio.get_event_loop().run_until_complete(start_server) asyncio.get_event_loop().run_forever()"},{"instruction":"Develop a Python function that squares a given number.","output":"def square(number): return number * number"},{"instruction":"Develop a Python program for randomly generating a 3D object of n cubes n = 8","output":"from random import random def generate_cubed_object(n): objects = [] for i in range(n): x = random() y = random() z = random() objects.append([x, y, z]) return objects print(generate_cubed_object(8)) # [[0.4, 0.2, 0.3], [0.5, 0.6, 0.7], ....]"},{"instruction":"Convert the given array to an array of dictionaries in Python. array = [[a, 1], [b, 2], [c, 3]]","output":"[{'a': 1}, {'b': 2}, {'c': 3}]"},{"instruction":"Create a Python program to implement the triangle numbers. n = 5","output":"def triangle_numbers(n): res = 0 for i in range(n): res += i+1 return res result = triangle_numbers(n) print(result) # output: 15"},{"instruction":"Can you construct a Python program that takes a string of words and counts the occurrences of each word? This is an example of a string of words","output":"words = \\"This is an example of a string of words\\".split() word_freq = {} for word in words: if word not in word_freq: word_freq[word] = 1 else: word_freq[word] += 1 for key, value in word_freq.items(): print(f\\"{key} : {value}\\")"},{"instruction":"Write a function in Python to find the longest substring in a string that is palindromic. str = forgeeksskeegeekefrogg","output":"def longestPalindromicSubstring( str): n = len(str) # table[i][j] will be false if substring str[i..j] # is not palindrome. # Else table[i][j] will be true table = [[0 for x in range(n)] for y in range(n)] # All substrings of length 1 are palindromes maxLength = 1 i = 0 while (i < n): table[i][i] = True i = i + 1 # check for substring of length 2. start = 0 i = 0 while i < n-1: if (str[i] == str[i + 1]): table[i][i + 1] = True start = i maxLength = 2 i = i + 1 # Check for lengths greater than 2. k is length # of substring k = 3 while k <= n: # Fix the starting index i = 0 while i < (n-k+1): # Get the ending index of substring from # starting index i and length k j = i + k - 1 # checking for sub-string from ith index to # jth index iff str[i+1] to # str[j-1] is a palindrome if (table[i+1][j-1] and str[i] == str[j]): table[i][j] = True if (k > maxLength): start = i maxLength = k i = i + 1 k = k + 1 print (\\"Longest palindrome substring is: \\") print (str[start:start + maxLength]) # return length of LPS return maxLength"},{"instruction":"Design a Python program to read in a integer array and find the second largest element in the array. [3, 8, 4, 5, 7, 6]","output":"def second_largest(arr): first_largest = arr[0] second_largest = -float(\\"inf\\") for num in arr: if num > first_largest: second_largest = first_largest first_largest = num elif second_largest < num < first_largest: second_largest = num return second_largest if __name__ == '__main__': arr = [3, 8, 4, 5, 7, 6] print(second_largest(arr))"},{"instruction":"Generate a Python program to convert Fahrenheit to Celsius using a given formula.","output":"def fahrenheit_to_celsius(fahrenheit): celsius = (fahrenheit - 32) * 5 / 9 return celsius"},{"instruction":"Create a Python program to create a pandas DataFrame containing data about cars. Include columns for make, model, price, and mpg. Not applicable","output":"import pandas as pd column_names = [\\"make\\", \\"model\\", \\"price\\", \\"mpg\\"] cars = [ [\\"Toyota\\", \\"Camry\\", 23000, 28], [\\"Honda\\", \\"Accord\\", 21000, 30], [\\"Ford\\", \\"Ecosport\\", 20000, 25], [\\"Hyundai\\", \\"Elantra\\", 22000, 27], [\\"Toyota\\", \\"Corolla\\", 18000, 35], [\\"Honda\\", \\"Civic\\", 19000, 32], [\\"Ford\\", \\"Escape\\", 24000, 24], [\\"Hyundai\\", \\"Sonata\\", 19500, 29] ] df = pd.DataFrame(cars, columns=column_names) print(df)"},{"instruction":"Sort a dictionary by values in Python.","output":"dictionary = {'key1':1, 'key2': 3, 'key3': 2} sorted_dict = {key: value for key, value in sorted(dictionary.items(), key=lambda item: item[1])}"},{"instruction":"Create a function in Python using listcomprehension to turn all the strings in the list to lowercase. words = [Hello, My, Name, IS, John]","output":"def to_lowercase(words): return [word.lower() for word in words]"},{"instruction":"Create a webserver for a machine learning API using Python and Flask. Example code of a machine learning model.","output":"import flask, json from flask import request, jsonify # create the machine learning model def create_ml_model(data): return model # web-server app = Flask(__name__) @app.route('/ml', methods=['POST']) def ml(): # Get input data from request req_data = request.get_json() # Create the model model = create_ml_model(req_data) # Make a prediction pred = model.predict(req_data) # Return the prediction return jsonify(pred) if __name__ == '__main__': app.run(port=5000)"},{"instruction":"Edit the following Python code to optimize the performance of a function that takes a list of numbers as input and prints the maximum and minimum values. The input should include a sample piece of Python code for testing and optimizing purposes: def print_min_max(numbers): max_num = 0 min_num = 0 for n in numbers: if n > max_num: max_num = n; if n < min_num: min_num = n; print(Max: {0}, Min: {1}.format(max_num, min_num))","output":"def print_min_max(numbers): max_num = min_num = numbers[0] for n in numbers[1:]: max_num = max(max_num, n) min_num = min(min_num, n) print(\\"Max: {0}, Min: {1}\\".format(max_num, min_num))"},{"instruction":"Refactor a given code snippet into a Python Lambda function. def some_method(x, y): result = x + y return resul","output":"some_method = lambda x, y: x + y"},{"instruction":"Create a Python script that scrapes a website for all the external links present in the page. Not applicable","output":"import requests from bs4 import BeautifulSoup def extract_links_from_url(url): # make a request to the URL r = requests.get(url) # create a beautiful soup object soup = BeautifulSoup(r.content,'html5lib') # find and return hyperlinks(a tags) return [link['href'] for link in soup.find_all('a', href=True)]"},{"instruction":"Create a program in Python that takes two numbers as an input and returns the sum of the two numbers.","output":"def sum_nums(a, b): \\"\\"\\"Returns the sum of two numbers a and b.\\"\\"\\" return a + b"},{"instruction":"Write a function in Python to select the 3rd character from each string in the given list. ['IronMan', 'Hulk', 'Thor', 'Captain America']","output":"def third_char(lst): third_chars = \\"\\" for word in lst: third_chars += word[2] return third_chars third_char(['IronMan', 'Hulk', 'Thor', 'Captain America'])"},{"instruction":"mplement a priority queue data structure in Python. Not applicable","output":"import heapq class PriorityQueue: def __init__(self): self.heap = [] def push(self, item, priority): heapq.heappush(self.heap, (priority, item)) def pop(self): return heapq.heappop(self.heap)[1] pq = PriorityQueue() pq.push('A',1) pq.push('B',5) pq.push('C',2) while not pq.isEmpty(): print(pq.pop())"},{"instruction":"Write a Python program to check that a string contains only a specified set of characters. string = 'abcdefghijklmn' specified_characters = 'abcde'","output":"def checkString(string, specified_characters): for char in string: if char not in specified_characters: return False return True string = 'abcdefghijklmn' specified_characters = 'abcde' if(checkString(string, specified_characters)): print(\\"String contains only specified characters\\") else: print(\\"String does not contain only specified characters\\")"},{"instruction":"Generate the Fibonacci sequence of length 8 (starting from 0) in Python.","output":"def fibonacciSequence(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n+1): c = a + b a = b b = c return b fibonacciSequence(8) # Output:21"},{"instruction":"Design a computer program in Python to store and search for items in a shopping list. Not applicable","output":"# Shopping list application # Declare a list to store all the items shopping_list = [] # Function to add item to the list def add_item(item): shopping_list.append(item) print(\\"Item added!\\") # Function to remove item from the list def remove_item(item): shopping_list.remove(item) print(\\"Item removed!\\") # Function to search for an item in the list def search_item(item): if item in shopping_list: print(\\"Item found.\\") else: print(\\"Item not found.\\") # Function to display all the items def display_items(): print(\\"Here is your list:\\") for item in shopping_list: print(item) # Test functions add_item(\\"Milk\\") add_item(\\"Bread\\") remove_item(\\"Milk\\") search_item(\\"Bread\\") display_items() # Output: # Item added! # Item added! # Item removed! # Item found. # Here is your list: # Bread"},{"instruction":"Generate a Python function to calculate the absolute value of a number.","output":"def absolute_value(num): if num < 0: return -num else: return num"},{"instruction":"mplement a singleton Python class.","output":"class Singleton: _instance = None def __new__(cls): if not cls._instance: cls._instance = super(Singleton, cls).__new__(cls) return cls._instance"},{"instruction":"Create an application in Python that takes user input for an year and prints the day of the week for January 1st of that year. Year: 2018","output":"import datetime def day_of_week(year): date = datetime.datetime(year, 1, 1) return date.strftime(\\"%A\\") print(day_of_week(2018)) # Output: Monday"},{"instruction":"Build a neural network in Python that classifies cats and dogs.","output":"import tensorflow as tf from tensorflow import keras # Create the model model = keras.Sequential() model.add(keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3))) model.add(keras.layers.MaxPooling2D((2, 2))) model.add(keras.layers.Conv2D(64, (3, 3), activation='relu')) model.add(keras.layers.MaxPooling2D((2, 2))) model.add(keras.layers.Conv2D(128, (3, 3), activation='relu')) model.add(keras.layers.MaxPooling2D((2, 2))) model.add(keras.layers.Conv2D(128, (3, 3), activation='relu')) model.add(keras.layers.MaxPooling2D((2, 2))) model.add(keras.layers.Flatten()) model.add(keras.layers.Dense(512, activation='relu')) model.add(keras.layers.Dense(1, activation='sigmoid')) model.compile(loss='binary_crossentropy', optimizer=keras.optimizers.RMSprop(lr=1e-4), metrics=['acc'])"},{"instruction":"Design a binary search algorithm in Python that finds the index of an element in a sorted array. [1, 2, 3, 4, 5, 6, 7], 5","output":"def binary_search(arr, target): left = 0 right = len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 # target is not found return -1 result = binary_search([1, 2, 3, 4, 5, 6, 7], 5) print(result)"},{"instruction":"Write a line of code to print the first five elements in a given list in Python.","output":"print(list[:5])"},{"instruction":"What is the best way to generate a basic HTTP server in Python?","output":"import http.server server_address = ('', 8000) httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler) httpd.serve_forever()"},{"instruction":"Write a function in Python that takes in a list of integers. The function should return a list of integers such that the result is made up of the elements of the original list sorted in descending order. [3, 5, 2, 1]","output":"def sorted_descending(list_of_ints): result = sorted(list_of_ints, reverse=True) return result"},{"instruction":"Edit the SQL query to get the users from Canada who joined within the last 6 months. SELECT * FROM user","output":"SELECT * FROM users WHERE country = 'Canada'  AND CAST(DATEDIFF(MONTH, joined_date, GETDATE()) AS INT) <= 6;"},{"instruction":"Write a Python script to convert a given number of minutes into hours and minutes.","output":"def minutes_to_hours(minutes):   hours = minutes // 60   minutes = minutes % 60   return hours, minutes"},{"instruction":"Extract only the digits from a given string using Python.","output":"import re def extract_digits(string):     regex = r\\"D\\"     return re.sub(regex, \\"\\", string)"},{"instruction":"Write an HTML code snippet for a form to get two inputs: name and email.","output":"<form>     <label for=\\"name\\">Name:</label>     <input type=\\"text\\" id=\\"name\\" name=\\"name\\">     <label for=\\"email\\">Email:</label>     <input type=\\"email\\" id=\\"email\\" name=\\"email\\">     <input type=\\"submit\\" value=\\"Submit\\"> </form>"},{"instruction":"Use the given SQL table named 'employess' to find the total number of employees with the gender 'Male'. CREATE TABLE employees (   empid INTEGER,   firstname VARCHAR(50) NOT NULL,   lastname VARCHAR(50) NOT NULL,   gender VARCHAR(6) NOT NULL );","output":"SELECT COUNT(*)  FROM employees  WHERE gender = \\"Male\\";"},{"instruction":"Write a JavaScript function to convert the given string to title case.","output":"function toTitleCase(str) {     return str.replace(/wS*/g, function(txt){         return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();     }); }"},{"instruction":"Look at the given code and find the bug in it. def add_numbers(x,y):     return x + y + 1","output":"The bug in the given code is that it adds 1 extra to the result of the function. To fix this, the return statement should be modified to: return x + y."},{"instruction":"Use the given CSS code to set the color of all h1 elements to blue.","output":"h1 {     color: blue; }"},{"instruction":"Write a React component to display a list of all the countries.","output":"import React from \\"react\\"; const CountryList = ({ countries }) => {   return (     <ul>       {countries.map(country => {         return <li>{country}</li>;       })}     </ul>   ); }; export default CountryList;"},{"instruction":"Find any errors in the given PHP code. <?php name = “John”; message = “Hello, my name is Name.”; echo message;","output":"The given PHP code contains an error in the variable name. The variable is written as Name instead of name, so it is not getting replaced with the given value of John. The code should be corrected to: name = \\"John\\"; message = \\"Hello, my name is name.\\"; echo message;"},{"instruction":"Given a string, find the number of times a given character appears in the string. String: \\"Hello World\\" Character: \\"l","output":"The given character 'l' appears 3 times in the given string \\"Hello World\\"."},{"instruction":"Read the given CSS selector and explain what it does.","output":"The given CSS selector \\"div > p:not(.special)\\" will select all the <p> elements that are children of <div> which do not have a class of \\"special\\"."},{"instruction":"w would you query a database table using MySQL?","output":"SELECT * FROM table_name;"},{"instruction":"w can you access the value of a key from a JavaScript object?","output":"You can access a value from a JavaScript object using either dot notation or square bracket notation.  Using dot notation, you can do something like \\"object.key\\", where the key is the name of the property you want to access.  Using bracket notation, you can do something like \\"object[\\"key\\"]\\", where the key is a string containing the name of the property you want to access."},{"instruction":"Write a JavaScript code to filter a given array and return only the even numbers. array = [1,2,3,4,5,6,7]","output":"const even = array.filter(num => num % 2 === 0);"},{"instruction":"w can you validate a credit card number using JavaScript?","output":"You can validate a credit card number using JavaScript with the Luhn algorithm. The Luhn algorithm is a simple checksum formula that can be used to validate various identification numbers, such as credit card numbers, National Provider Identifier (NPI) numbers, and Canadian Social Insurance Numbers (SINs)."},{"instruction":"Write a C program to add every two elements in an array and print the sum. numbers = [2, 3, 4, 5, 6]","output":"#include<stdio.h> int main()  {      int numbers[] = {2, 3, 4, 5, 6};      int size = sizeof(numbers) / sizeof(numbers[0]);         int i;     int sum;     for (i=1; i<size; i+=2) {         sum=numbers[i] + numbers[i-1];        printf(\\"sum of %d and %d is %d n\\",numbers[i-1], numbers[i], sum);     }      return 0;  }"},{"instruction":"Write a Python code to sort a given list into descending order.","output":"def sortDescending(nums):   nums.sort(reverse=True)   return nums"},{"instruction":"Solve the following problem. Given an array of integers, return an array with the elements multiplied by two. arr = [2, 8, 10, 9]","output":"def doubleElements(arr):   return [num * 2 for num in arr]    arr = [2, 8, 10, 9] print(doubleElements(arr)) // [4, 16, 20, 18]"},{"instruction":"Write a C program to find the difference between the maximum and minimum values in an array. arr = {2, 8, 10, 9}","output":"#include<stdio.h>     int diffMaxMin(int arr[], int n)  {      int max_num = arr[0], min_num = arr[0];         int i;      for (i = 0; i < n; i++) {          max_num = max_num > arr[i] ? max_num : arr[i];          min_num = min_num < arr[i] ? min_num : arr[i];      }         return (max_num - min_num);  }     int main()  {      int arr[] = {2, 8, 10, 9};      int n = sizeof(arr) / sizeof(arr[0]);      printf(\\"%dn\\", diffMaxMin(arr, n));      return 0;  }"},{"instruction":"Calculate the value of PI using the Leibniz formula.","output":"def calculatePi():     pi = 0.0     N = 10000     sign = 1     for i in range(N):         pi += 4.0 * sign / (2.0 * i + 1.0)         sign *= -1     return pi print(\\"π = \\", calculatePi()) # 3.141592653589793"},{"instruction":"Write an SQL query to find the names of all employee who have \\"Programmer\\" as their job title.","output":"SELECT name FROM employee WHERE job_title = 'Programmer';"},{"instruction":"Write a C++ program to print the following sequence: 1, 2, 4, 8, 16, 32, ......","output":"#include <iostream> using namespace std; int main() {     int i, n;     for (i = 1; i <= 32; i *= 2)     {         cout << i << \\" \\";     }     return 0; }"},{"instruction":"w do you define and call a function in Python?","output":"In Python, a function is defined using the \`def\` keyword followed by the function name, a list of parameters and the code block that implements the function. To call a function, you need to provide the name of the function followed by a list of arguments. For example, to define and call a function called \`myfunc\` with an argument \`x\`: def myfunc(x):     # function implementation myfunc(x)  # call the function with argument x"},{"instruction":"Write a SQL query to get the names and the total number of orders for each customer in a table called 'orders'.","output":"SELECT      c.name,      COUNT(o.order_id) AS total_orders  FROM customers c      INNER JOIN orders o      ON c.customer_id = o.customer_id GROUP BY c.name;"},{"instruction":"What is the syntax for performing an instruction inside a loop in JavaScript?","output":"The syntax for performing an instruction inside a loop in JavaScript is:  for (initialization; condition; iteration) {     // instruction }"},{"instruction":"what languages can the TensorFlow library be used?","output":"The TensorFlow library can be used in Python, C++, JavaScript, Java, Go, Swift, and R. It is also supported in different platforms such as iOS, Android, and web browsers."},{"instruction":"Create a GraphQL query that returns all the top five countries in terms of population.","output":"query {   countries(first: 5) {     name     population   } }"},{"instruction":"mplement a bubble sort on the given array of integers. [4, 8, 1, 3, 9]","output":"def bubble_sort(arr):   for _ in range(len(arr) -1):      for i in range(len(arr)-1):       if arr[i] > arr[i+1]:         arr[i], arr[i+1] = arr[i+1], arr[i]     return arr print(bubble_sort([4, 8, 1, 3, 9])) # [1, 3, 4, 8, 9]"},{"instruction":"Create a Python script that inputs an integer and prints \\"odd\\" if the number is odd, or \\"even\\" if the number is even.","output":"def check_even_or_odd(num):   if num % 2 == 0:     print(\\"even\\")   else:     print(\\"odd\\")    check_even_or_odd(5) # odd"},{"instruction":"Re-implement the same program in a different language of your choice. def quick_sort(arr):     if len(arr) < 2:         return arr     else:         pivot = arr[0]         less = [i for i in arr[1:] if i <= pivot]         greater = [i for i in arr[1:] if i > pivot]         return quick_sort(less) + [pivot] + quick_sort(greater)","output":"def quick sort(arr):     if len(arr) < 2:         return arr     else:          pivot = arr[0]         left = [x for x in arr[1:] if x <= pivot]         right = [x for x in arr[1:] if x > pivot]         return quick_sort(left) + [pivot] + quick_sort(right)"},{"instruction":"Create a NodeJS server that listens on port 8080 and serves a simple HTML page.","output":"const http = require('http'); const port = 8080; const server = http.createServer(function (request, response) {     response.writeHead(200, { \\"Content-Type\\": \\"text/html\\" });      response.write('<html><body><h1>Hello, World!</h1></body></html>');       response.end();  }); server.listen(port); console.log(\\"Listening at port\\", port);"},{"instruction":"Edit the following HTML document and add a CSS style to changes the background color to blue. <html>   <head>   </head>   <body>     <h1>Hello, World!</h1>   </body> </html>","output":"<html>   <head>     <style>       body {         background-color: blue;       }     </style>   </head>   <body>     <h1>Hello, World!</h1>   </body> </html>"},{"instruction":"Create a Python class for a movie instance with name, director, and year fields.","output":"class Movie:     def __init__(self, name, director, year):         self.name = name         self.director = director         self.year = year"},{"instruction":"Create an algorithm to compute the greatest common divisor between two numbers. m = 8, n = 20","output":"def gcd(m, n):     # base case      if m == 0:         return n          # recursive case     return gcd(n % m, m) print(gcd(8, 20)) # Output: 4"},{"instruction":"Write a function in C++ that takes in a string of text and removes all the punctuation from the string.","output":"#include <string> #include <cctype> string remove_punctuation(string s) {     string str;     for (char c : s) {         if (ispunct(c) == false)             str.push_back(c);     }     return str; }"},{"instruction":"Given a list of integers, determine the sum of all of elements in the list. [3, 4, 5, 6]","output":"def get_sum(nums):     total_sum = 0     for num in nums:         total_sum += num     return total_sum"},{"instruction":"Create a program that will guess a number between 0 and 10.","output":"import random def guessing_game():     secret_number = random.randint(0, 10)     guess = int(input(\\"Guess a number between 0 and 10: \\"))     while guess != secret_number:         print(\\"Incorrect! Try again.\\")         guess = int(input(\\"Guess a number between 0 and 10: \\"))      print(\\"Correct!\\")"},{"instruction":"Write an algorithm that takes in two integers and returns true if they are evenly divisible.","output":"def is_evenly_divisible(x, y):     return x % y == 0"},{"instruction":"Read a code that prints out the Fibonacci Series.","output":"def fibonacci(n):      a = 0     b = 1     if n < 0:          print(\\"Incorrect input\\")      elif n == 0:          return a      elif n == 1:          return b      else:          for i in range(2,n):              c = a + b              a = b              b = c          return b"},{"instruction":"Create a code that recognizes if an inputted string is a palindrome or not.","output":"def is_palindrome(input_string):     rev_input = input_string[::-1]     return input_string == rev_input"},{"instruction":"You are given a list of integers and need to calculate the maximum number in the list. [3, 4, 7, 1]","output":"def get_max(numbers):     max_value = numbers[0]     for number in numbers:         if (number > max_value):             max_value = number     return max_value"},{"instruction":"Write an algorithm that takes in two numbers and returns the remainder of the first number divided by the second number.","output":"def get_remainder(x, y):     return x % y"},{"instruction":"Read a given code and determine if it contains any errors or not. def factorial(n):     product = 1     for i in range(2, 3):         product *= i     return produc","output":"true"},{"instruction":"Create a function in JavaScript that squares a given number.","output":"const square = (num) => {   return num * num; }"},{"instruction":"Complete the following function in Python which will return all the numbers in a list between a given minimum and maximum. def getRange(min, max)","output":"def getRange(min, max):   return [i for i in range(min, max+1)]"},{"instruction":"Write a C++ class called Vector3D which can be used to represent a 3D vector with 3 float values.","output":"#include <iostream> class Vector3D { private:   float x, y, z; public:   Vector3D(float x, float y, float z) : x(x), y(y), z(z) {}   float dotProduct(Vector3D v) {     return x * v.x + y * v.y + z * v.z;   } };"},{"instruction":"Create a function in JavaScript that calculates the area of a rectangular room given its width and length.","output":"const calculateArea = (width, length) => {   return width * length; }"},{"instruction":"Create a function in Python that prints out all prime numbers between two given numbers.","output":"def print_primes(start, end):     for num in range(start, end):         if num > 1:             for i in range(2, num):                 if (num % i) == 0:                     break             else:                 print(num)"},{"instruction":"Generate the output given the following input to the Python function you wrote in  task 11. print_primes(5, 15)","output":"5 7 11 13"},{"instruction":"Edit the following Java code to create a method which will calculate the area of a rectangle, given its width and length. public class Rectangle {   private double width;   private double length;","output":"public class Rectangle {   private double width;   private double length;     public double calculateArea() {     return width * length;   } }"},{"instruction":"Create a C++ program that asks the user to type their age and will print out an appropriate message to the user.","output":"#include <iostream> int main() {     int age;     std::cout << \\"Please type your age: \\";     std::cin >> age;       if(age < 12) {         std::cout << \\"You are still young!\\" << std::endl;     } else if (age < 18) {         std::cout << \\"You are a teenager!\\" << std::endl;     } else {         std::cout << \\"Welcome to adulthood!\\" << std::endl;     }       return 0; }"},{"instruction":"What is the difference between supervised learning and unsupervised learning?","output":"Supervised learning is a type of machine learning where the algorithm is given a labelled dataset and its goal is to learn a mapping between the given input and the given output. The labels in the dataset act as a supervisor to guide the algorithm towards its learning path. Unsupervised learning is a type of machine learning where the algorithm is given an unlabelled dataset and its goal is to learn from the data and discover patterns and insights from the data without being given any explicit guidance. The algorithm must learn by itself how to organize the data and extract useful information from it."},{"instruction":"Write a Java program that counts the number of vowels in a given string. String str = \\"This is a test string\\";","output":"public class VowelCounter {  public static int countVowels(String str) {   int count = 0;   for(int i = 0; i < str.length(); i++) {    char currentChar = str.charAt(i);    if(currentChar == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {     count++;    }   }   return count;  }  public static void main(String[] args) {   String str = \\"This is a test string\\";   int count = countVowels(str);   System.out.println(\\"Number of vowels = \\" + count);  } }"},{"instruction":"Explain the practical application of sorting algorithms","output":"Sorting algorithms are used in many practical applications, such as sorting data in databases, large scale data analysis, and search engine optimization. They are also used in sorting algorithms used in operating system kernels and in finding the shortest path in graph theory. Sorting algorithms can also be used to improve the performance of applications by sorting data according to certain criteria, thus reducing the amount of computation time required. In addition, sorting algorithms are used in designing algorithms for data compression and in machine learning. Generally, sorting algorithms are used to bring data into some form of order so that it can be searched or traversed more easily. By improving the efficiency of data retrieval, sorting algorithms can improve the overall performance of applications."},{"instruction":"Write a code to find the day of the week corresponding to a given date using the calendar module? Day: 25 Month: December Year: 2020","output":"\\"\\"\\" Find the day of the week corresponding to a given date using calendar module \\"\\"\\" import calendar def get_day_of_week(day, month, year):     dayNumber = calendar.weekday(year,month,day)     dayName = calendar.day_name[dayNumber]      return dayName      if __name__ == '__main__':     day = 25     month = 12     year = 2020     print(get_day_of_week(day, month, year))"},{"instruction":"Write a SQL query to get all distinct posts with the highest score.","output":"SELECT DISTINCT Posts.ID, MAX(Posts.Score)  FROM Posts  GROUP BY Posts.ID;"},{"instruction":"Write a HTML code snippet to create a 4x3 table of no border and gradient.","output":"<table style=\\"border: none; background: linear-gradient(#ff0000, #00ff00, #0000ff);\\">   <tr>     <td>Cell 1</td>     <td>Cell 2</td>     <td>Cell 3</td>   </tr>   <tr>     <td>Cell 4</td>     <td>Cell 5</td>     <td>Cell 6</td>   </tr>   <tr>     <td>Cell 7</td>     <td>Cell 8</td>     <td>Cell 9</td>   </tr>   <tr>     <td>Cell 10</td>     <td>Cell 11</td>     <td>Cell 12</td>   </tr> </table>"},{"instruction":"Name the different levels of accessibility supported in HTML?","output":"The different levels of accessibility supported in HTML are: A (minimal), AA (structured data and metadata), AAA (full accessibility)."},{"instruction":"w can you write a JavaScript regular expression to validate an email address?","output":"var re = /^(([^<>()[].,;:s@\\"]+(.[^<>()[].,;:s@\\"]+)*)|(\\".+\\"))@(([^<>()[].,;:s@\\"]+.)+[^<>()[].,;:s@\\"]{2,})/i;"},{"instruction":"What does a negative index signify in a Python array?","output":"A negative index in a Python array is used to access elements from the end of the array, where the last element of the array is at index -1."},{"instruction":"Edit the following code to remove the syntax error so that the program will run correctly. def double(x): return x * 2","output":"def double(x):     return x * 2"},{"instruction":"Change the following code to accept multiple arguments. func add(a, b) {   return a + b; }","output":"func add(...args) {   let result = 0;   for (const arg of args) {     result += arg;   }   return result; }"},{"instruction":"Rewrite the following jQuery code to its vanilla JavaScript equivalent. (\\"#list li\\").each(function(){   //some code });","output":"document.querySelectorAll(\\"#list li\\").forEach(function (el) {   //some code });"},{"instruction":"Generate a function \`recursive_sum\` that computes the sum of a list of integers recursively.","output":"def recursive_sum(lst):      # Base case     if not len(lst):          return 0     return lst[0] + recursive_sum(lst[1:])"},{"instruction":"Calculate the total sum of a given list using an accumulator pattern. numbers = [2, 3, 4]","output":"numbers = [2, 3, 4] total_sum = 0 # iterate through the list and add each element to the total sum for n in numbers:      total_sum += n       print(total_sum)"},{"instruction":"Using a while loop, print all numbers between 0 and a given number, 10.","output":"i = 0 while i <= 10:      print(i)     i+=1"},{"instruction":"Using list comprehension, create a list of all even numbers from 0 to 10.","output":"even_numbers = [num for num in range(11) if num % 2 == 0]"},{"instruction":"Extend the given list of numbers by adding all odd numbers from 0 to 10. my_list = [0, 2, 4, 6, 8, 10]","output":"my_list = [0, 2, 4, 6, 8, 10] my_list.extend([num for num in range(11) if num % 2 != 0])"},{"instruction":"Create a generator expression to print the square of a list of numbers. numbers = [1, 2, 3, 4, 5]","output":"numbers = [1, 2, 3, 4, 5] # generator expression squares = (num ** 2 for num in numbers) for square in squares:      print(square)"},{"instruction":"Utilize regular expressions to parse and return a list of words from a sentence. sentence = \\"The quick brown fox jumps over the lazy dog","output":"sentence = \\"The quick brown fox jumps over the lazy dog\\" # regular expression import re words = re.findall(r'w+', sentence) print(words)"},{"instruction":"Sort a given dictionary of strings alphabetically. my_dict = {'a':\\"apple\\", 'c':\\"cat\\", 'b':\\"banana\\"}","output":"my_dict = {'a':\\"apple\\", 'c':\\"cat\\", 'b':\\"banana\\"} # sort the dictionary sorted_dict = {key: my_dict[key] for key in sorted(my_dict.keys())} print(sorted_dict)"},{"instruction":"Compare two arrays for equality [1, 2, 3] [1, 2, 4]","output":"False"},{"instruction":"Write a for loop that iterates through a list of numbers and prints only the even numbers. [1, 2, 3, 4, 5, 6]","output":"for i in [1,2,3,4,5,6]:     if i % 2 == 0:         print(i)"},{"instruction":"Create a class Person with a name, age and gender attributes.","output":"class Person:     def __init__(self, name, age, gender):         self.name = name         self.age = age         self.gender = gender"},{"instruction":"Write a lambda expression to deduct 10 from a number.","output":"lambda x: x-10"},{"instruction":"Create a dictionary with the item and their corresponding prices. Apple - 2.99 Banana - 0.99","output":"d = {'Apple': 2.99, 'Banana': 0.99}"},{"instruction":"Construct an appropriate list of even numbers between 0 and 10.","output":"[0, 2, 4, 6, 8, 10]"},{"instruction":"Remove the first element in a list using slicing. [1, 2, 3, 4, 5]","output":"list[1:]"},{"instruction":"Write a class to define a car object with the attribute of brand, model and year.","output":"class Car:     def __init__(self, brand, model, year):         self.brand = brand         self.model = model         self.year = year"},{"instruction":"Using the .sort() method, sort an array in ascending order. [5, 3, 9, 1]","output":"arr.sort()"},{"instruction":"Write a for loop to print out the squared value of each element in the list. [1, 2, 3, 4]","output":"for i in [1,2,3,4]:     print(i*i)"},{"instruction":"Write a function in Python to generate a list of numbers that is the square of all numbers between 1 and the number provided. num = 10","output":"def generate_square_list(num):     result = []     for i in range(1, num+1):         result.append(i*i)     return result"},{"instruction":"Given a list of sentence fragments, use a loop in Python to print each fragment on a separate line. sentences = [\\"Hello\\", \\"My name is\\", \\"John\\", \\"Nice to meet you!\\"]","output":"for sentence in sentences:     print(sentence)"},{"instruction":"the following Python function, insert code to check if the given number is even or odd. def check_num(num):     # TODO     if num % 2 == 0:         print(\\"Even\\")     else:         print(\\"Odd\\")","output":"def check_num(num):     assert isinstance(num, int), \\"num must be an integer value\\"     if num % 2 == 0:         print(\\"Even\\")     else:         print(\\"Odd\\")"},{"instruction":"Write an SQL query to delete all the records in a table named \\"users\\".","output":"DELETE FROM users;"},{"instruction":"Create a new class in Python named \\"Employee\\".","output":"class Employee:     def __init__(self):         pass"},{"instruction":"Create a MySQL table with three columns \\"name\\", \\"id\\", and \\"age\\".","output":"CREATE TABLE users (     name VARCHAR(255) NOT NULL,     id INT NOT NULL,     age INT NOT NULL );"},{"instruction":"Using the comment as a guide, write code in JavaScript to generate a random number between 1 and 10. // TODO","output":"let randomNumber = Math.floor(Math.random() * 10 + 1);"},{"instruction":"the following code, write a switch statement in JavaScript that identifies whether a number is positive, negative, or zero. num = 5","output":"switch(num) {     case (num > 0):         console.log(\\"positive\\");         break;     case (num < 0):         console.log(\\"negative\\");         break;     case (num == 0):         console.log(\\"zero\\");         break;     default:         console.log(\\"Error\\");         break; }"},{"instruction":"Given a list of numbers, write a function in Java to arrange the list in ascending order. nums = [10, 2, 9, 6]","output":"static int[] sortAscending(int[] nums) {     for (int i = 0; i < nums.length-1; i++) {         for (int j = 0; j < nums.length-1-i; j++) {             if (nums[j] > nums[j+1]) {                 int temp = nums[j];                 nums[j] = nums[j+1];                 nums[j+1] = temp;             }         }     }     return nums; }"},{"instruction":"Create a Java program to implement the classic Tic Tac Toe game.","output":"import java.util.Scanner; public class TicTacToe {       public static char[][] board = new char[3][3];     public static boolean playerX;     public static Scanner scan;       public static void main(String[] args) {         scan = new Scanner(System.in);         playerX = true;         initializeBoard();           while(true) {             printBoard();             nextMove(playerX);             if(checkWinner()) {                 break;             }             playerX = !playerX;         }       }       public static void initializeBoard() {         for(int i=0;i<3;i++)             for(int j=0;j<3;j++)                 board[i][j] = '-';     }       public static void printBoard() {         System.out.println(\\"-------------\\");         for (int i = 0; i < 3; i++) {             System.out.print(\\"| \\");             for (int j = 0; j < 3; j++) {                 System.out.print(board[i][j] + \\" | \\");             }             System.out.println();         }         System.out.println(\\"-------------\\");     }       public static void nextMove(boolean player) {         if(player)             System.out.print(\\"Player X, enter your move row,col: \\");         else             System.out.print(\\"Player O, enter your move row,col: \\");           int row = scan.nextInt() - 1;         int col = scan.nextInt() - 1;         board[row][col] = player ? 'X' : 'O';     }       public static boolean checkWinner() {         // Horizontal win         for(int i=0;i<3;i++) {             if(board[i][0] == board[i][1] && board[i][1] == board[i][2])                 return true;         }           // Vertical win         for(int j=0;j<3;j++) {             if(board[0][j] == board[1][j] && board[1][j] == board[2][j])                 return true;         }           // Diagonal win         if(board[0][0] == board[1][1] && board[1][1] == board[2][2])             return true;         if(board[2][0] == board[1][1] && board[1][1] == board[0][2])             return true;           return false;     }   }"},{"instruction":"Output the binary representation of a given number. 14","output":"1110"},{"instruction":"dentify any typos or grammatical errors in this sentence. Emmm, it seemms so.","output":"typos: \\"seemms\\"  grammatical errors: none"},{"instruction":"Fix the bug in this code. def calculate_area(length, width): area = (length * width) if area > 20:     return 'Area too large'","output":"def calculate_area(length, width): area = (length * width) if area > 20:     return 'Area too large' else:     return area"},{"instruction":"Find the simplest possible way to print \\"Welcome to Tech World!\\" five times.","output":"for _ in range(5):     print(\\"Welcome to Tech World!\\")"},{"instruction":"Calculate the mean of the following list of numbers: 4, 6, 8, 10.","output":"mean = (4 + 6 + 8 + 10) / 4 = 7.5"},{"instruction":"Add try-catch block for the code below. x = 1 y = 0 print(x / y)","output":"try:     x = 1     y = 0     print(x / y) except ZeroDivisionError:     print(\\"Cannot divide by zero!\\")"},{"instruction":"Write a function that prints Fibonacci numbers up to N (N>1).","output":"def Fibonacci(n):      a = 0     b = 1     if n < 0:          print(\\"Incorrect input\\")      elif n == 0:          return a      elif n == 1:          return b      else:          for i in range(2, n+1):              c = a + b              a = b              b = c          return b"},{"instruction":"Create an array of 5 students and output their names. var students = [   {name: 'John', age: 19},   {name: 'Amy', age: 22},   {name: 'Luke', age: 17},   {name: 'Alex', age: 18},   {name: 'Tom', age: 20} ];","output":"names = [students[0].name, students[1].name, students[2].name, students[3].name, students[4].name]; console.log(names); // output: ['John', 'Amy', 'Luke', 'Alex', 'Tom']"},{"instruction":"Create a for loop that reads an array of strings and prints each string var strings = [\\"Hello\\", \\"world\\", \\"how\\", \\"are\\", \\"you\\"];","output":"for(var i=0; i < strings.length ;i++){    console.log(strings[i]); } //output: //Hello //world //how //are //you"},{"instruction":"Create an object with two fields, a name and an id.","output":"var obj = {    name: 'John',     id: '12345' };"},{"instruction":"Write a script that sorts an array of numbers from smallest to largest. var numbers = [3, 7, 4, 2, 9, 1];","output":"numbers.sort(function(a, b){     return a-b }); console.log(numbers); //output: [1, 2, 3, 4, 7, 9]"},{"instruction":"Write a function that takes a string and turns it into all uppercase. var string = 'Hello World';","output":"function toUpperCase(string) {    let upperCaseString = string.toUpperCase();    return upperCaseString; } toUpperCase(string); //output: HELLO WORLD"},{"instruction":"Write a Python function to sort the given array of dictionaries by key value. arr = [{'name': 'Jose', 'age': 32}, {'name': 'Ravi', 'age': 23}, {'name': 'Paul', 'age': 26}]","output":"def sort_by_key(arr):  return sorted(arr, key=lambda i: i['name'])"},{"instruction":"Specify a type for the following variable in C. char c = '&';","output":"char c = '&'; //Type is char."},{"instruction":"Why is HashTable data structure the best choice for fast lookup operations?","output":"HashTable data structure is the best choice for fast lookup operations because it stores the data in key-value pairs and uses hashing algorithms to quickly identify the location of the data in memory. With this data structure, lookups can be done in O(1) time complexity, which is much more efficient than other data structures."},{"instruction":"Compress the following data using RLE algorithm. AABBCC","output":"AABBCC --> A2B2C2"},{"instruction":"Create a function to calculate the Euclidean distance from (x, y) to (a, b).","output":"def euclidean_distance(x, y, a, b):      return np.sqrt((x-a)**2 + (y-b)**2)"},{"instruction":"Provide a solution for displaying another message if the user's input is invalid. name = input('What's your name? ')","output":"name = input('What's your name? ') if not name.isalpha():     print('Error: Invalid input.')"},{"instruction":"Create a program that outputs the results of an election. votes = [(\\"A\\", 55), (\\"B\\", 43), (\\"C\\", 21)]","output":"votes = [(\\"A\\", 55), (\\"B\\", 43), (\\"C\\", 21)] total = 0 for name, count in votes:     total += count for name, count in votes:     print(\\"{}: {:.2f}%\\".format(name, count/total*100)) # Output:  # A: 59.77% # B: 47.60% # C: 23.63%"},{"instruction":"Find the running time of this code snippet. list = [2, 5, 1, 6, 9] x = 0 for item in list:     x += item","output":"The running time of this code snippet is O(n), where n is the length of the list."},{"instruction":"Create a Visual Studio Code extension that provides auto-complete features for a specific language.","output":"This Visual Studio Code extension will create an Auto-Complete Provider for a specific language (e.g. JavaScript, Python, etc.). It will analyze the syntax of a given language and provide word suggestions while typing in the source code. The extension should be able to detect the language type from the file extension and then provide the auto-complete suggestions accordingly."},{"instruction":"Provide the logic for sorting an array of strings alphabetically.","output":"for i in range(len(arr)):     for j in range(i + 1, len(arr)):         if arr[i] > arr[j]:             arr[i], arr[j] = arr[j], arr[i]"},{"instruction":"Replace the character at the second index with \\"X\\". s = \\"Hello!","output":"s = \\"Hello!\\" new_str = s[:1] + \\"X\\" + s[2:] print(new_str) # Output: HXllo!"},{"instruction":"Suggest a possible numpy code to normalize a data in the following manner. Normalize the data such that the values lie in the range 0-1.","output":"import numpy as np def normalize(arr):     arr = np.array(arr)     return (arr - arr.min()) / (arr.max() - arr.min())"},{"instruction":"Suggest a code to sort the following array of strings. [\\"dinosaur\\", \\"cat\\", \\"dog\\", \\"elephant\\", \\"tiger\\"]","output":"arr = [\\"dinosaur\\", \\"cat\\", \\"dog\\", \\"elephant\\", \\"tiger\\"] arr.sort()"},{"instruction":"Fill in the __ in the following code to print the reversed string. original_string = \\"Hello World\\"   reversed_string = original_string[ __ : __ ] print(reversed_string)","output":"original_string = \\"Hello World\\"   reversed_string = original_string[::-1] print(reversed_string)"},{"instruction":"Construct a code to add a new item to the end of the list. list_of_items = [\\"apple\\", \\"orange\\", \\"cherry\\"]","output":"list_of_items = [\\"apple\\", \\"orange\\", \\"cherry\\"] list_of_items.append(\\"banana\\")"},{"instruction":"Suggest a python code to print all the even numbers from the given list. list_of_numbers = [11, 22, 31, 37, 44]","output":"list_of_numbers = [11, 22, 31, 37, 44] for num in list_of_numbers:     if num % 2 == 0:         print(num)"},{"instruction":"Construct an algorithm to check for palindrome in a given string.","output":"def is_palindrome(text): \\trev = ''.join(reversed(text))  \\treturn rev == text"},{"instruction":"Suggest a code to iterate a list of numbers and add them to a variable. list_of_numbers = [10, 20, 30, 40]","output":"list_of_numbers = [10, 20, 30, 40] total = 0 for num in list_of_numbers:   total += num"},{"instruction":"Suggest a code to print the last two elements of a list. list_of_items = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"orange\\"]","output":"list_of_items = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"orange\\"] last_two = list_of_items[-2:] print(last_two)"},{"instruction":"Suggest a code to insert an element at the nth position of a given list. list_of_items = [\\"apple\\", \\"banana\\", \\"grapes\\", \\"mango\\"]","output":"list_of_items = [\\"apple\\", \\"banana\\", \\"grapes\\", \\"mango\\"] list_of_items.insert(2, \\"pineapple\\")"},{"instruction":"Suggest a code to remove the third element of a list. list_of_items = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"orange\\"]","output":"list_of_items = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"orange\\"] list_of_items.pop(2)"},{"instruction":"Create a pandas DataFrame based on the given input CSV. EmployeeID,EmployeeName,Salary 1,John,12345 2,David,23456 3,Steve,34567","output":"import pandas as pd df = pd.read_csv(\\"input.csv\\") print(df)"},{"instruction":"Propose a fast sorting algorithm for a list of integers","output":"The QuickSort algorithm is a fast sorting algorithm for a list of integers. QuickSort is a divide and conquer algorithm, meaning it divides a list into smaller lists and then sorts and combines the lists. It starts by partitioning the input list around a pivot element, then recursively sorts the two partitions and recombines them. Its average time complexity is O(n log n) with a space complexity of O(n)."},{"instruction":"Construct a regex expression to extract 3 digits in a string","output":"d{3}"},{"instruction":"Write a code in Java to find the GCD of two numbers","output":"public static int gcd(int num1, int num2) {     if(num2==0)         return num1;     return gcd(num2, num1%num2); }"},{"instruction":"Design a function to generate the random password","output":"import random def generate_password():     #Declare a string of all possible characters     all_chars = \\"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#%^&*()_+=-\`'\\"     #Declare the length of password     password_len = 8     #Create empty string     password = \\"\\"     for i in range(password_len):         #Generate a random index         rand_index = random.randint(0, len(all_chars)-1)         #Append character at the index to password         password += all_chars[rand_index]     return password"},{"instruction":"de a Python program, how would you convert a float number to a string?","output":"str_number = str(float_number)"},{"instruction":"What should be the output of the following JavaScript statement? let x = 5 + 4","output":"The output of the statement is 9."},{"instruction":"w to clear the console screen in C++?","output":"The console screen can be cleared in C++ using the system() command with the clear argument: system(\\"clear\\");"},{"instruction":"Develop a Python function that returns the first two characters of a string. string = \\"GPT-3","output":"def first_two_chars(string):   return string[:2]"},{"instruction":"Construct a block of JavaScript code to find the smallest of 3 numbers","output":"let num1 = 10; let num2 = 20; let num3 = 15; let smallest = Math.min(num1, num2, num3); console.log(smallest);"},{"instruction":"Construct an SQL query that returns the names of customers from the \\"Customers\\" table whose age is between 20 and 30.","output":"SELECT name FROM Customers WHERE age BETWEEN 20 and 30;"},{"instruction":"Develop a valid C code to print the array elements. int arr[] = {1,2,3,4,5}","output":"#include <stdio.h> int main() {     int arr[] = {1,2,3,4,5};     int size = sizeof(arr)/sizeof(arr[0]);     for (int i = 0; i < size; i++) {          printf(\\"%dn\\", arr[i]);      }      return 0; }"},{"instruction":"Write an SQL statement that returns the salary of the employee with the highest salary of the \\"Employees\\" table.","output":"SELECT MAX(salary) FROM Employees;"},{"instruction":"w would you edit the following HTML code so that it displays content in two columns? <div>   <p>This is the content</p> </div>","output":"<div>   <div style=\\"float: left; width: 50%;\\">     <p>This is the content 1</p>   </div>   <div style=\\"float: right; width: 50%;\\">     <p>This is the content 2</p>   </div> </div>"},{"instruction":"Construct a valid SQL statement to calculate the sum of the \\"price\\" column in the \\"Orders\\" table","output":"SELECT SUM(price) FROM Orders;"},{"instruction":"Write a SQL query to find all the records in the \\"employees\\" table where the job_title is \\"Software Engineer\\". Table Name: employees  Columns: employee_id, job_title","output":"SELECT * FROM employees WHERE job_title = 'Software Engineer';"},{"instruction":"Reverse a string using a stack. string: hello","output":"def reverse_string_using_stack(string):      stack = []     for char in string:         stack.append(char)     reversed_string = ''     while len(stack) > 0:          reversed_string += stack.pop()     return reversed_string"},{"instruction":"Create a Java function to remove duplicate characters in a string. string: hello","output":"public string removeDuplicateChars(String str){    Set<Character> set = new HashSet<Character>();    StringBuffer sb = new StringBuffer();    for (int i = 0; i < str.length(); i++) {      Character ch = str.charAt(i);      if(!set.contains(ch)) {        set.add(ch);        sb.append(ch);      }    }    return sb.toString();  }"},{"instruction":"Calculate the distance between two points using Pythagoras theorem. Point A: (3, 4) Point B: (7, 8)","output":"distance = sqrt((7-3)^2 + (8-4)^2) = sqrt(16 + 16) = sqrt(32) = 5.657"},{"instruction":"Create a jQuery function to detect when a page is scrolled.","output":"(window).scroll(function() {   console.log('Scroll detected');  });"},{"instruction":"Create an RNN model to classify emails into spam and not spam.","output":"#imports import tensorflow as tf  from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout  #Model model = tf.keras.models.Sequential([     Embedding(vocab_size, embedding_dim, input_length = max_len),     LSTM(128),     Dense(64, activation = 'relu'),     Dropout(0.25),     Dense(1, activation = 'sigmoid') ])"},{"instruction":"Create a CSS style to set the font color to red for a heading element.","output":"h1 {    color: red;  }"},{"instruction":"Write an algorithm for sorting a given array of numbers. array: [2, 5, 3, 4, 1]","output":"function sort(array) {    for (let i = 0; i < array.length - 1; i++) {      for (let j = 0; j < array.length - i - 1; j++) {        if (array[j] > array[j+1]) {          let temp = array[j];          array[j] = array[j+1];          array[j+1] = temp;        }      }    }    return array;  }"},{"instruction":"Create a JavaScript object with 3 keys and 3 values.","output":"const myObject = {    key1: 'value1',   key2: 'value2',    key3: 'value3'  }"},{"instruction":"Write a function that calculates surface area of a regular 3D-pyramid. Let the base of the pyramid is 5 meters and its height is 8 meter","output":"def surface_area_pyramid(base_length, height):     area_of_base = base_length * base_length     side_of_base = (base_length ** 2 + height ** 2) ** 0.5     area_of_sides = (side_of_base * base_length) * 4     return area_of_base + area_of_sides"},{"instruction":"Format this JavaScript code in a readable way. function foo(){console.log(\\"this is a test\\")}","output":"function foo() {   console.log(\\"this is a test\\"); }"},{"instruction":"Write a JavaScript program to calculate the exponential for a given base and exponent. Base = 3, exponent=4","output":"function calculateExponential(base, exponent) {   let result = 1;   for (let i = 0; i < exponent; i++) {     result *= base;   }   return result; }"},{"instruction":"Develop a solution to this algorithm problem. Given an int array A, find the min absolute difference between any two of its elements.","output":"def minAbsDifference(arr):     min_difference = float(\\"inf\\")     for i in range(len(arr)):         for j in range(i+1,len(arr)):             diff = abs(arr[i] - arr[j])             if diff < min_difference:                 min_difference = diff     return min_difference"},{"instruction":"Rewrite this C++ function in Python int max (int a, int b) { if (a > b)  return a; else  return b;  }","output":"def max(a, b):     if a > b:         return a     else:         return b"},{"instruction":"Design a program that produces the following output:   . . . . . . . . . . . . . . . . . . . . .","output":"#include <iostream> int main()  {     for (int i=0; i<17; i++) {         std::cout << \\".\\";     }     std::cout << std::endl;     return 0; }"},{"instruction":"Write a Python code to print the following output: day     temperature Monday    20 Tuesday   25","output":"print(\\"day     temperature\\") print(\\"Monday    20\\") print(\\"Tuesday   25\\")"},{"instruction":"w can we set a variable in C++?","output":"In C++, we can set a variable in two ways: 1. By using an assignment operator (=), for example: int x = 5;  2. By using the declaration of the variable, for example: int x;  x = 5;"},{"instruction":"Write a code to flatten a two-dimensional list into one-dimensional list in Python. Two-dimensional List: [[1,2], [3,4], [5,6]]","output":"def flatten_2d_list(lst):   flat_list = []   for elem in lst:     for item in elem:       flat_list.append(item)   return flat_list test_list = [[1,2], [3,4], [5,6]]  print(flatten_2d_list(test_list))"},{"instruction":"w can we dynamically add an element to a set in Python?","output":"In Python, we can dynamically add an element to a set using the add() method. For example,  s = set() s.add(4) print(s)"},{"instruction":"Write a Java program to find the second most frequent character in a string. String: \\"Hello World!","output":"public class SecondMostFrequent {   public static char findSecondMostFrequent(String str) {     int[] counts = new int[26];     for(int i = 0; i < str.length(); i++)       counts[str.charAt(i)- 'a']++;     int index = 0;     int max_count = 0;       for(int i = 0; i < str.length(); i++) {             if(counts[str.charAt(i) - 'a'] > max_count) {         max_count = counts[str.charAt(i) - 'a'];         index = i;       }     }          int sec_max = 0;     int sec_index = 0;       for(int i = 0; i < str.length(); i++) {             if(counts[str.charAt(i) - 'a'] > sec_max && counts[str.charAt(i) - 'a'] < max_count) {         sec_max = counts[str.charAt(i) - 'a'];         sec_index = i;       }     }       return str.charAt(sec_index);   }     public static void main(String args[]) {     String str = \\"hello world!\\";     System.out.println( findSecondMostFrequent(str));   } }"},{"instruction":"Change the following list of strings to uppercase in Python. List: ['one', 'two', 'three']","output":"list_strings = [\\"one\\", \\"two\\", \\"three\\"] list_strings = [string.upper() for string in list_strings] print(list_strings)"},{"instruction":"Describe what is polymorphism in Java.","output":"In Java, polymorphism is a programming concept that allows the same code to be used to perform different tasks. This is achieved by assigning different behaviors to different objects that share a common base class. Thus, when a method is invoked, the runtime determines which version of the method should be executed by examining the object on which the method is called."},{"instruction":"w can we create an array of ten zeroes in JavaScript?","output":"In JavaScript, we can create an array of ten zeroes using the Array.from() method. For example: const array = Array.from({length: 10}, () => 0); console.log(array);"},{"instruction":"Create a python function that computes the area of a rectangle given the length and width.","output":"def calculateRectangleArea(length, width):   area = length * width   return area"},{"instruction":"Generate a random 29 character hexadecimal string using javascript.","output":"function generateRandomHexString(length) {     let result = '';     const characters = '0123456789ABCDEF';     for (let i = 0; i < length; i++) {         result += characters.charAt(Math.floor(Math.random() * characters.length));     }       return result; } let hexString = generateRandomHexString(29); console.log(hexString);"},{"instruction":"Create a regular expression that matches strings that start with a certain prefix, followed by two or more numbers, and ending with two or more alphabet characters. prefix = \\"ABC","output":"import re   prefix = \\"ABC\\" pattern = re.compile('^' + prefix + 'd{2,}[A-Za-z]{2,}')"},{"instruction":"Create a SQL query to update the 'name' on table 'employees' with the value 'User 1' where the id is 1.","output":"UPDATE employees SET name = 'User 1' WHERE id = 1;"},{"instruction":"Edit the program below to print out the square root of a number. #include <iostream>    int main()  {      int number;         std::cout << \\"Enter an integer: \\";      std::cin >> number;         // Add code to print square root of the number         return 0; }","output":"#include <iostream>  #include <cmath>   int main()  {      int number;         std::cout << \\"Enter an integer: \\";      std::cin >> number;         // Add code to print square root of the number      std::cout << \\"Square root of \\" << number << \\" is: \\" << sqrt(number) << std::endl;        return 0; }"},{"instruction":"Design a JavaScript program that takes two numbers as input and prints their sum.","output":"// Define a function to add two numbers function addTwoNumbers(num1, num2){   return num1 + num2; } // Main program // Get two numbers from user let num1 = prompt(\\"Enter the first number to add:\\"); let num2 = prompt(\\"Enter the second number to add:\\"); // Call the function to get the sum let sum = addTwoNumbers(num1, num2); // Print result to the user console.log(\`The sum of {num1} and {num2} is: {sum}\`);"},{"instruction":"Create a recursive SQL query to find the level of each node in a tree structure. WITH RECURSIVE tree_levels (node, parent, level) AS (     SELECT node, parent, 0     FROM root_table     WHERE parent IS NULL     UNION ALL     SELECT child.node, child.parent, tree_levels.level + 1     FROM root_table AS child     JOIN tree_levels     ON child.parent = tree_levels.node )","output":"SELECT tree_levels.node, tree_levels.level FROM tree_levels ORDER BY tree_levels.node;"},{"instruction":"Create an algorithm to classify a given set of data into three classes.","output":"from sklearn.neighbors import KNeighborsClassifier import numpy as np # X is the training data X = np.array([[0, 0], [1, 1], [1, 0], [0, 1], [1, 2], [2, 1], [2, 2]]) # y is the labels of the classes y = np.array([0, 0, 1, 1, 2, 2, 2]) # Create the model model = KNeighborsClassifier(n_neighbors=3) # Fit the model using the training data model.fit(X, y) # Use the model to make predictions  prediction = model.predict([[2, 3]]) print(prediction)"},{"instruction":"Write a Python script to compute Pi to the Nth digit.","output":"import math n = int(input(\\"Enter the number of digits of pi to compute: \\")) # Compute pi to nth decimal place pi = round(math.pi, n) print(\\"The value of pi to {0} decimal places is: {1}\\".format(n, pi))"},{"instruction":"Create a query to find all unique combinations of size two in a given list. [1, 2, 3, 4]","output":"SELECT DISTINCT a.val AS val1, b.val AS val2 FROM myTable a JOIN myTable b ON a.id <> b.id WHERE a.val IN (1,2,3,4) AND b.val IN (1,2,3,4) ORDER BY a.val, b.val;"},{"instruction":"Create an algorithm to calculate the mean, mode and median in a given set of numbers.","output":"def mean(nums):     return sum(nums)/len(nums) def mode(nums):     countDict = {}     for num in nums:         if num in countDict:             countDict[num] += 1         else:             countDict[num] = 1     maxValue = 0     maxKey = -1     for key, value in countDict.items():         if value > maxValue:             maxValue = value             maxKey = key     return maxKey def median(nums):     nums.sort()     if len(nums) % 2 == 0:         return (nums[len(nums)//2] + nums[len(nums)//2-1])/2     else:         return nums[(len(nums)-1)//2] if __name__ == '__main__':     nums = [1,2,2,2,3,4,5]     print(\\"Mean: \\", mean(nums))     print(\\"Mode: \\", mode(nums))     print(\\"Median: \\", median(nums))"},{"instruction":"Create a JavaScript function that takes in two arrays of numbers, and returns an array containing only the numbers that appear in both arrays. arr1 = [1, 2, 3, 4, 5];  arr2 = [3, 4, 5, 6, 7]","output":"function containsSameNumbers(arr1, arr2) { \\tconst intersection = []; \\tfor (let i = 0; i < arr1.length; i++) { \\t\\tif (arr2.includes(arr1[i])) { \\t\\t\\tintersection.push(arr1[i]); \\t\\t} \\t} \\treturn intersection; } containsSameNumbers(arr1, arr2); // Output: [3, 4, 5]"},{"instruction":"Python, create a function that takes a string as an argument and returns a string with the vowels replaced with an asterisk (*).","output":"def replace_vowels(string): \\tvowels = \\"aeiou\\" \\tresult = \\"\\" \\tfor char in string: \\t\\tif char in vowels: \\t\\t\\tchar = \\"*\\" \\t\\tresult += char \\treturn result"},{"instruction":"What is the purpose of the \`sort()\` JavaScript array method?","output":"The sort() JavaScript array method is used to sort the elements of an array in place and returns the sorted array. The default sort order is ascending according to the string Unicode code points."},{"instruction":"Design an HTML form that allows the user to submit his/her contact details.","output":"<form action=\\"contactaction.php\\" method=\\"post\\">   <label for=\\"name\\">Name:</label>   <input type=\\"text\\" name=\\"name\\"> <br>   <label for=\\"email\\">Email:</label>   <input type=\\"email\\" name=\\"email\\" placeholder=\\"example@domain.com\\"><br>   <label for=\\"phone\\">Phone:</label>   <input type=\\"tel\\" name=\\"phone\\" placeholder=\\"123-456-7890\\"><br>   <input type=\\"submit\\" value=\\"Submit\\"> </form>"},{"instruction":"Create a JavaScript function that takes a positive integer as an argument and returns the first prime number larger than that integer. num = 10","output":"function nextPrime(num) {   let isPrime = true;   let nextNum = num + 1;   while (isPrime) {     for (let i = 2; i < nextNum; i++) {       if (nextNum % i === 0) {         nextNum++;         isPrime = false;         break;       }     }     if (isPrime) {       return nextNum;     }   }  } nextPrime(num); // Output: 11"},{"instruction":"Create a JavaScript object with two properties, \`name\` and \`age\`, and two methods \`sayHello\`, which logs \\"Hello\\" to the console, and \`addOneToAge\`, which increments the \`age\` by one.","output":"const user = {   name: 'John',   age: 20,   sayHello: function() {     console.log('Hello');   },   addOneToAge: function() {     this.age++;   } }"},{"instruction":"Write a CSS style sheet to make all \`<h2>\` headings have a blue background and white text.","output":"h2 {   background-color: blue;   color: white; }"},{"instruction":"JavaScript, write 3 lines of code to define a function \`add()\` which will take two numbers as arguments and returns their sum.","output":"function add(a, b) {   let sum = a + b;   return sum; }"},{"instruction":"Bash, write a command line to create a directory called \`myFolder\` in the current working directory.","output":"mkdir myFolder"},{"instruction":"Python, write a function to print out a sequence of numbers from 1 to 10.","output":"def print_sequence():   for i in range(1, 11):     print(i) print_sequence() # Output: 1 2 3 4 5 6 7 8 9 10"},{"instruction":"w can you generate a random number in the range of 1 to 10 in Python?","output":"import random random_number = random.randint(1, 10)"},{"instruction":"Convert the following 10 bytes data into a string. b\\"x00x0fx14x03x11x07x08x13x05x10","output":"data = b\\"x00x0fx14x03x11x07x08x13x05x10\\" output_string = data.decode() print(output_string) # Output: \\"ؐءؔ؃ؗ؈ؓ\\""},{"instruction":"What is a MongoDB document?","output":"A MongoDB document is a record in a NoSQL database that is represented in the form of a JSON-like structure. It contains a set of key-value pairs where each key is associated with a specific value. Documents can also be nested and can contain arrays and other documents."},{"instruction":"Write a function to split a string of words by comma. string = 'apple,orange,banana,grapes'","output":"def split_by_comma(string):     return string.split(\\",\\")"},{"instruction":"Calculate the maximum element in the given list. my_list = [2, 1, 7, 5, 3]","output":"def max_element(my_list):      max_num = my_list[0]      for num in my_list:          if num > max_num:              max_num = num     return max_num"},{"instruction":"Write a JavaScript program to accept two numbers from the user and multiply them.","output":"let num1 = prompt('Enter the first number:'); let num2 = prompt('Enter the second number:'); let result = parseInt(num1) * parseInt(num2); console.log(\`The product of {num1} and {num2} is {result}\`);"},{"instruction":"Create a report in PDF format that displays the most frequent words used in the New York Times articles.","output":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer from textblob import TextBlob from nltk.tokenize import word_tokenize  from nltk.tokenize import sent_tokenize from nltk.probability import FreqDist import matplotlib import matplotlib.pyplot as plt from matplotlib.backends.backend_pdf import PdfPages def get_top_words(string):  tokenized_words = word_tokenize(string)  freqdist = FreqDist(tokenized_words)  return freqdist.most_common(15) # Download nltk dependencies # nltk.download('punkt') # nltk.download('vader_lexicon') # Scrape news articles articles = scrape_nyt() # Get top words top_words = [] for article in articles:  top_words.append(get_top_words(article)) # Create PDF report pp = PdfPages('nyt_word_freq.pdf') plt.figure(figsize=(15,10)) plt.bar(*zip(*top_words)) plt.xticks(rotation=90) pp.savefig() pp.close()"},{"instruction":"Construct an algorithm to predict the next 3 days' stock market movements given the stock prices from the past 5 days. [69.04, 67.07, 68.3, 68.91, 70.09]","output":"def predict_stock_movements(data): # Initialize empty list to store predicted values predictions = [] # Iterate over the given data for i in range(len(data)-2):  # Calculate the average of the 5 days  avg = sum(data[i:i+3])/3  # Calculate the current and past day market movement  curr_mov = data[i+2] - data[i+1]  past_mov = data[i+1] - data[i]  # Predict the next day  prediction = avg + curr_mov + past_mov  predictions.append(prediction) return predictions"},{"instruction":"Create a program to determine whether a given sequence is an arithmetic progression or not. [-6, -2, 2, 6]","output":"def is_arithmetic_progression(arr):  # Check if the given array is empty  if len(arr) == 0:   return False  # Initialize the common difference and the first element  commonDifference = arr[1] - arr[0]  firstElement = arr[0]  # Iterate over the array  for i in range(len(arr)):   if arr[i] != firstElement + (i * commonDifference):    return False  # If all elements are in an arithmetic progression  return True"},{"instruction":"Construct a classifier to identify which programming language a given code snippet belongs to. def foo(x, y):  return x + y","output":"from sklearn.feature_extraction.text import CountVectorizer  from sklearn.naive_bayes import MultinomialNB def get_features(code):  # Count the words in the code  vectorizer = CountVectorizer(token_pattern=r\\"(?u)bw+b\\")  count_vectors = vectorizer.fit_transform([code])  return count_vectors.toarray() def classify_language(code):  # Training data  data = [(\\"Python\\", \\"def foo(x, y):n return x + y\\"),  (\\"Java\\", \\"public int foo(int x, int y) {n return x + y;n }\\"),  (\\"C++\\", \\"int foo(int x, int y) {n return x + y;n }\\"),  (\\"JavaScript\\", \\"function foo(x, y) {n return x + y;n }\\")]  languages, codes = zip(*data)    # Extract features from the code  X_train = [get_features(c) for c in codes]  # Train a classifier  clf = MultinomialNB().fit(X_train, languages)  # Extract features from the given code  X_input = get_features(code)  # Predict the language  return clf.predict([X_input])[0]"},{"instruction":"Write a function to implement the Levenshtein Distance algorithm. The Levenshtein Distance algorithm calculates the minimum number of single-character edits (insertions, deletions, or substitutions) necessary to transform one string into another string. \\"cats\\", \\"dog","output":"def levenshtein_distance(str1, str2):  # Create a matrix for storing the distances  m = [[0 for x in range(len(str2) + 1)] for x in range(len(str1) + 1)]  # Mark the first Edit Distance value as 0  m[0][0] = 0    # Iterate over the matrix   for i in range(0, len(str1) + 1):   for j in range(0, len(str2) + 1):    # If we are at the first row or first col, mark the cells with corresponding numbers    if i == 0:     m[i][j] = j    elif j == 0:     m[i][j] = i    # Otherwise, calculate the distance according to the  formula    else:     if str1[i-1] == str2[j-1]:      m[i][j] = m[i-1][j-1]     else:      m[i][j] = min(m[i-1][j], m[i-1][j-1], m[i][j-1]) + 1     # Return the last element in the matrix, which is the Levenshtein Distance  return m[-1][-1]"},{"instruction":"Write a Python script that uses regular expressions to check whether a given URL is correctly formatted or not.","output":"import re def is_valid_url(url):  # Check if the URL is valid using a regex  regex = re.compile(r\\"^(?:http|ftp)s?://([^/]+[.])*[^/]+/?.*\\")  if regex.match(url):   return True  return False"},{"instruction":"Write a function to remove duplicate elements from a list keeping only the first occurrence of each element. [1, 2, 3, 3, 3, 4, 4, 5]","output":"def remove_duplicates(nums):  # Create a list to store the first occurrence of each number  seen = []  # Iterate over the list  for num in nums:   # If the number is not in the seen list, add it   if num not in seen:    seen.append(num)  return seen"},{"instruction":"Create a function that takes a list of strings as input and returns a string of the list sorted in the alphabetical order. [\\"apple\\", \\"banana\\", \\"cherry\\"]","output":"def sort_strings_alphabetically(words): # Use the built-in sorted() function to sort the list of strings sorted_words = sorted(words) # Join the sorted list of words separated by spaces return \\" \\".join(sorted_words)"},{"instruction":"Modify the following code so that it prints the reversed version of a list. list1 = [1, 2, 3, 4, 5] def print_reverse_list(my_list)","output":"list1 = [1, 2, 3, 4, 5] def print_reverse_list(my_list):     my_list.reverse()     print(my_list)"},{"instruction":"Create a valid JSON string which contains the following elements name: John age: 32 city: New York","output":"{   \\"name\\": \\"John\\",   \\"age\\": 32,   \\"city\\": \\"New York\\" }"},{"instruction":"Suggest a method to run a python program from an interactive terminal session.","output":"The simplest way to run a python program from an interactive terminal session is to use the \\"python\\" command. For example, if you have a file called \\"myprog.py\\", you can type \\"python myprog.py\\" at the command line and the program will be executed. Alternately, you can use the \\"execfile\\" command, which takes a file name as an argument and executes it."},{"instruction":"Create a class representing a car","output":"class Car:     def __init__(self, make, model, year, engine_size):         self.make = make         self.model = model         self.year = year         self.engine_size = engine_size"},{"instruction":"Suggest a way to check if a given string contains alphanumeric characters","output":"The simplest way to check if a given string contains alphanumeric characters is to use the built-in isalnum() method which will return True if the string contains at least one alphanumeric character and False otherwise. Example: my_string = 'Hello123' if my_string.isalnum():     print('Contains alphanumeric characters') else:     print('Does not contain alphanumeric characters')"},{"instruction":"Modify the following code to insert the element 'x' into the list at position 'index' list1 = [1, 2, 3, 4, 5] x = 6 index = 3","output":"list1 = [1, 2, 3, 4, 5] x = 6 index = 3 list1.insert(index, x)"},{"instruction":"Create a class in Java to build a singly linked list.","output":"public class SinglyLinkedList {            Node head; // head of list            // Linked list Node.      // This inner class is made static      // so that main() can access it      static class Node {          int data;          Node next;          Node(int d)          {              data = d;              next = null;          } // Constructor      }       public void printList()      {          Node n = head;          while (n != null) {              System.out.print(n.data + \\" \\");              n = n.next;          }      }        public void push(int new_data)      {                   Node new_node = new Node(new_data);                     new_node.next = head;            head = new_node;      }  }"},{"instruction":"Create a SQL query to select only the rows with an age greater than 10. Table Name: users  Columns: name, age","output":"SELECT * FROM users WHERE age > 10;"},{"instruction":"Create a regex expression to match with a specific format of email address.","output":"/([a-zA-Z0-9_-.]+)@([a-zA-Z0-9_-.]+).([a-zA-Z]{2,5})/"},{"instruction":"Retrieve unique values from a list of integers. List: [3, 5, 7, 3, 4, 6, 7, 8]","output":"[3, 5, 7, 4, 6, 8]"},{"instruction":"Perform sentiment analysis on the following sentence and indicate if it is positive or negative. Sentence: I had a really bad experience at the shop.","output":"Negative sentiment."},{"instruction":"Create a matrix in R and fill it with random numbers. Size: 4 x 5","output":"matrix2 <- matrix(runif(n = 20, min = 0, max = 10), nrow = 4, ncol = 5)"},{"instruction":"Convert the following hex color to RGB. Hex Color: #4286f4","output":"RGB(66, 134, 244)"},{"instruction":"Create a bash script to print the version of python installed in the computer.","output":"#!/bin/bash python --version"},{"instruction":"mplement a constructor to create an account class Accou","output":"def __init__(self, name, balance):   self.name = name   self.balance = balance"},{"instruction":"Generate a regular expression to match the following patterns wxyz - w:[a-c] x:[0-9] y:[a-z] z:[A-Z]","output":"^[a-c][0-9][a-z][A-Z]"},{"instruction":"dentify the time complexity for the following piece of code arr = [5, 2, 4, 8, 1] for i in range (len(arr)):    for j in range (len(arr))","output":"O(n^2)"},{"instruction":"Generate valid HTML for a table with three columns","output":"<table>   <tr>     <th>Column1</th>     <th>Column2</th>      <th>Column3</th>   </tr> </table>"},{"instruction":"mplement a function to remove all occurrences of an element in a given list","output":"def remove_element(list, element):      return [x for x in list if x != element]"},{"instruction":"Generate a valid JSON object for a user","output":"{   \\"full_name\\": \\"\\",   \\"age\\": 0,   \\"address\\": {     \\"street\\": \\"\\",     \\"city\\": \\"\\",     \\"state\\": \\"\\"   } }"},{"instruction":"Recognize the type of error in the given code and provide which line of code is causing the error. def divide(numerator, denominator):     return numerator / denominator number = int(input(\\"Enter a number: \\"))     result = divide(100, number)","output":"Line 4 is causing a syntax error due to improper indentation."},{"instruction":"Parse the following HTML content and print the text present in the <p> tag. <div>   <p>Hello World!</p> </div>","output":"print(soup.find('p').text)  # 'Hello World!'"},{"instruction":"Retrieve all the values from the nested dictionary. data_dict = { 'key1': {   'inner_key1': \\"1\\",   'inner_key2': \\"2\\" }, 'key2': {   'inner_key1': \\"3\\",   'inner_key2': \\"4\\" } }","output":"for key1_value in data_dict.values():   for (inner_key1, inner_key2) in key1_value.items():     print(inner_key1, inner_key2)"},{"instruction":"Grant access to content by creating a function that takes in an age and returns a boolean. Age: 20","output":"def check_age(age):   if age < 18:     return False   else:     return True"},{"instruction":"Fix any code errors in the given function. def addToList list: num   list.append(num)   return l","output":"def addToList(List, num):   List.append(num);   return List"},{"instruction":"Construct a lambda expression to multiply the numbers by 2.","output":"x = lambda n : n * 2"},{"instruction":"Create a class to store a given list of strings. List: ['hello', 'world', 'hi']","output":"class StrList:  def __init__(self, str_list):     self.str_list = str_list       def get_list(self):     return self.str_list"},{"instruction":"Get the name and message property from the given dictionary. data = { 'name': 'John', 'message': 'Hello World!', 'city': 'New York' }","output":"name = data['name'] message = data['message']"},{"instruction":"Find the most commonly used element in a given list. List: [8, 1, 7, 7, 4, 8, 8, 7]","output":"from collections import Counter list = [8, 1, 7, 7, 4, 8, 8, 7] most_common = Counter(list).most_common(1)[0] print(\\"Most common element is {}\\".format(most_common[0]))"},{"instruction":"Execute a query to access the records from the table. SELECT * FROM tablename","output":"cursor.execute(\\"SELECT * FROM tablename\\")"},{"instruction":"Given a list of numbers and a target number, write a Python program to find if there exists a sublist whose sum equals the target. numbers = [2, 4, 8, 9, 5, 7], target = 15","output":"def sublist_sum(numbers, target) :      n = len(numbers)         # Consider all sublists of arr[] and return      # true if given sum is present in any of them      for i in range(n) :          curr_sum = numbers[i]             # Try different endpoints for current subarray          j = i+1         while j<=n :                 if curr_sum == target :                  return True                if curr_sum > target or j == n:                  break                curr_sum = curr_sum + numbers[j]              j += 1        return False"},{"instruction":"Write a Python script to calculate the total of all the elements in a nested list. nested_list = [[1,2,3], [4,5,6], [7,8,9]]","output":"def sum_of_nested_list(nested_list):     total = 0     for internal_list in nested_list:         for num in internal_list:             total += num     return total"},{"instruction":"Change all the character in a given string to its corresponding upper case. string = \\"I love programming.","output":"string.upper()"},{"instruction":"Write a Python script to find the maximum depth of a given nested list. nested_list = [[1,2], [3,4], [5,6,7]]","output":"def max_depth_of_nested_list(nested_list):     max_depth = 1     for inner_list in nested_list:         depth = 1         if type(inner_list) == list:             depth += max_depth_of_nested_list(inner_list)         max_depth=max(depth, max_depth)     return max_depth"},{"instruction":"Write a query statement to select the name, age and address of the oldest person in our database?","output":"SELECT name, age, address FROM TableName ORDER BY age DESC LIMIT 1;"},{"instruction":"Modify the following script to format the output to just two decimal places. original_script.py import math a = math.pi print(a)","output":"import math a = math.pi print(\\"{:.2f}\\".format(a))"},{"instruction":"Given a list of integers, write a Python code to return the most frequent item. num_list = [3, 7, 8, 8, 5, 7, 8, 6, 8]","output":"ModeElement = max(set(num_list), key = num_list.count)  print(\\"Most Frequent Element : \\", ModeElement)"},{"instruction":"Generate a random list of 20 unique numbers from 0 to 30.","output":"[3, 5, 12, 11, 14, 0, 22, 19, 10, 6, 1, 25, 18, 27, 24, 16, 17, 21, 20, 15]"},{"instruction":"Construct a while loop with an if-else statement in Java to print all odd numbers between 1 to 10.","output":"int i = 1; while (i <= 10) {      if (i % 2 != 0) {         System.out.print(i + \\" \\");      }     i++; }"},{"instruction":"Compile a given c code and debug the program to find the exact output. #include<stdio.h> int main()  {      char str[] = \\"Hello\\";      char *p;      p = &str[2];      printf(\\"%cn\\", *(p++));      printf(\\"%c\\", *p);      return 0;  }","output":"ll o"},{"instruction":"Create a function to calculate the factorial of 5 using Python.","output":"def factorial(n):     if n == 0:         return 1    else:         return n * factorial(n-1)  print(factorial(5)) # Output: 120"},{"instruction":"Given an array of integers, write JavaScript code to find the largest number amongst the array elements. arr = [5, 10, 2, 7, 3]","output":"let largestNumber = arr.reduce(   (mostRecentLargest, currentItem) =>      currentItem > mostRecentLargest ?      currentItem : mostRecentLargest ); console.log(largestNumber); // Output: 10"},{"instruction":"Provide a list of all the functionality available to a React Native application.","output":"React Native applications will have access to a range of features, such as: - Navigation - Data store - Image and video manipulation - Network and internet data access - Geolocation - Offline storage  - Push notifications - Animations - Accessibility  - Internationalization - Integration with third-party platforms/APIs"},{"instruction":"Given an array of integers, write an algorithm to sort them in an ascending order. arr = [23, 32, 19, 17, -5, 3]","output":"let arrLength = arr.length; let temp; for(i = 0; i < arrLength; i++){    for(j = 0; j < (arrLength - i - 1); j++){ \\t   // Compare two adjacent elements        if(arr[j] > arr[j+1]){           // Swap them           temp = arr[j];           arr[j] = arr[j+1];           arr[j+1] = temp;        }     } } console.log(arr); // Output: [-5, 3, 17, 19, 23, 32]"},{"instruction":"Write a SQL query to find the name of the top 10 highest salary employees in the company.","output":"SELECT TOP 10 Name, Salary FROM Employees ORDER BY Salary DESC;"},{"instruction":"Create a function to check if two strings are an anagram of one another using Python. str1 = 'cat' str2 = 'tac'","output":"def anagram_checker(str1, str2):      if (len(str1)==len(str2)):          if (\\"\\".join(sorted(str1.lower())) == \\"\\".join(sorted(str2.lower()))):              return True         else:              return False"},{"instruction":"Build a Lambda function using Python to calculate the sum of two numbers. n1 = 5 n2 = 8","output":"def add_two_numbers(n1, n2):  return n1 + n2"},{"instruction":"Create a program that calculates the area of a triangle using C#. base = 10 height = 8","output":"public class AreaCalculator {      public static void main(String[] args) {          int base = 10;         int height = 8;         double area = (base*height)/2;          System.out.println(\\"The area of the triangle is: \\"+area);      }  }"},{"instruction":"What is the capital of Spain?","output":"The capital of Spain is Madrid."},{"instruction":"Create an object in Ruby that stores a student's name, age, and GPA.","output":"student = {   name: \\"John Smith\\",   age: 22,   gpa: 3.5 }"},{"instruction":"Compose a SQL query to find the names of all professors in the department of Computer Science.","output":"SELECT name FROM professor WHERE department = 'Computer Science';"},{"instruction":"Utilize a regular expression to match all words that begin with 'b' in a given text. text = \\"The quick brown fox jumps over the lazy dog.","output":"import re text = \\"The quick brown fox jumps over the lazy dog.\\" word_list = re.findall(r\\"b[bB]w+\\", text) print(word_list) # output: ['brown', 'fox', 'b jumps', 'b lazy']"},{"instruction":"Generate a list in Python that contains the numbers from 0 to 50 that are divisible by 7.","output":"numbers = [] for i in range(51):   if i % 7 == 0:     numbers.append(i) print(numbers) # output: [0, 7, 14, 21, 28, 35, 42, 49]"},{"instruction":"Generate a table in SQL to store student information like name, age and grade.","output":"CREATE TABLE student_info (   student_id INT PRIMARY KEY,   student_name VARCHAR(50),   student_age INT,   student_grade INT );"},{"instruction":"Build a Node.js program to find the maximum and minimum item from an array. arr = [100, 200, 75, 10, 50]","output":"let arr = [100, 200, 75, 10, 50]; let min = Math.min(...arr); let max = Math.max(...arr); console.log(\`The minimum of the array is {min}\`); console.log(\`The maximum of the array is {max}\`);"},{"instruction":"Create a program to sum numbers in a given range m to n inclusive. m = 4, n = 8","output":"def sum_in_range(m, n):     sum = 0     for i in range(m, n+1):         sum+=i     return sum"},{"instruction":"Write a Python code snippet to get the first 1000 prime numbers.","output":"primes = [] n = 2 while len(primes) < 1000:  if is_prime(n):  primes.append(n)  n += 1 print(primes)"},{"instruction":"Write a CSS code snippet to apply a border to all p elements.","output":"p {   border: 1px solid #000; }"},{"instruction":"Write a Python code snippet to sum up all the elements in a given dictionary. {   'a': 10,   'b': 15,   'c': 20 }","output":"d = {'a': 10, 'b': 15, 'c': 20}  print(sum(d.values())) # Output: 45"},{"instruction":"Create a function to flatten a 2D array. [[1, 2], [3, 4], [5, 6]]","output":"def flatten_2D_array(arr):     \\"\\"\\"     A function to flatten a 2D array.     Input: A 2D array.     Output: A 1D array.     \\"\\"\\"     flattened_arr = []     for sub_arr in arr:         flattened_arr += sub_arr     return flattened_arr"},{"instruction":"Write a code to take in a string and determine if the string is a palindrome or not. string = \\"civic","output":"def is_palindrome(string):     \\"\\"\\"     Return True is the input string is a Palindrome, False if not.     Input: string     Output: Boolean     \\"\\"\\"     # Cast input to string     if not isinstance(string, str):         string = str(string)          # Reverse the string     rev_string = string[::-1]          #Compare original string with reversed string     if string == rev_string:         return True     else:         return False"},{"instruction":"Create a code to search a given string for a specific keyword and return the index of the keyword. text = \\"Report on the COVID-19 pandemic\\" keyword = \\"COVID-19","output":"def search_string(text, keyword):     \\"\\"\\"     A function to search a given string for a specific keyword and return the index of the keyword.     Input: string, keyword     Output: integer or None     \\"\\"\\"     # Use the find() method to search the string     index = text.find(keyword)          # Return None if the keyword was not found     if index == -1:         return None     # Return the index if the keyword was found     else:         return index"},{"instruction":"Create a code to format the given text using a given indentation level. text = \\"This is a sample text to format.\\" indentation = 4","output":"def indent_text(text, indentation):     \\"\\"\\"     A function to format the given text using a given indentation level.     Input: string, integer     Output: string     \\"\\"\\"     # Split the text into lines     lines = text.splitlines()     # Iterate through each line of the text     for i in range(len(lines)):         # Add the indentation to each line         lines[i] = \\" \\" * indentation + lines[i]     # Join all the lines     indented_text = \\"n\\".join(lines)          return indented_text"},{"instruction":"Develop a code to rotate a given list by a given value. my_list = [1, 2, 3, 4, 5] k = 3","output":"def rotate_list(my_list, k):     \\"\\"\\"     A function to rotate a given list by a given value.     Input: list, integer     Output: list     \\"\\"\\"     # Get the length of list     length = len(my_list)          # Rotate the list     rotated = my_list[-k % length:] + my_list[:-k % length]          return rotated"},{"instruction":"What's the output of this program in Python given the following input? input_string = \\"Hello, World!\\"    list_of_chars = list(input_string) for current_char in list_of_chars:  print(current_char)","output":"H e l l o ,   W o r l d !"},{"instruction":"Create a Java program to compute the distance between two points. PointA = (2, 3) PointB = (4, 9)","output":"public class DistanceCalculator {     public static double distanceCalculator(int x1, int y1, int x2, int y2) {         double distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));         return distance;     } } class DistanceCalculatorTest {     public static void main(String[] args) {         double distance = DistanceCalculator.distanceCalculator(2, 3, 4, 9);         System.out.println(\\"The distance between two points is \\" + distance);      } }"},{"instruction":"Scan through the following code in JavaScript and replace the placeholders with appropriate code. var numbers = [1, 2, 3, 4]; for(___){   console.log(___); }","output":"var numbers = [1, 2, 3, 4]; for(var i = 0; i < numbers.length; i++){   console.log(numbers[i]); }"},{"instruction":"Think of a situation where you would use recursion.","output":"Recursion can be used when performing a task that can be broken down into smaller, simpler parts. For example, performing a Depth-First Search on a Graph. It can also be used when implementing algorithms to solve complex problems such as finding the largest number in a list or creating a binary search tree."},{"instruction":"Write a script in Ruby for calculating the sum of two numbers. a = 5 b = 10","output":"a = 5 b = 10 def add_numbers(a, b)   a + b end sum = add_numbers(a,b) puts \\"The sum of #{a} and #{b} is #{sum}.\\""},{"instruction":"You are given a data set containing employee details. Write a query to get the sum of all salaries.","output":"SELECT  \\t SUM(salary)  FROM  \\temployees;"},{"instruction":"Create a program in Haskell that multiplies any given number by 2. x = 10","output":"multiplyByTwo x = x * 2 main = do   let x = 10   let result = multiplyByTwo x   print result"},{"instruction":"Construct a database schema for a \\"Products\\" table.","output":"CREATE TABLE Products (     id INTEGER PRIMARY KEY AUTOINCREMENT,     product_name TEXT NOT NULL,     product_price REAL NOT NULL,     product_image TEXT,     product_description TEXT );"},{"instruction":"Consider the following code. Explain the purpose of the for loop in the code. nums = [2, 4, 6, 8] for num in nums:     print(num ** 2)","output":"The for loop iterates through the list nums and prints each element to the console, after having been squared."},{"instruction":"Create an HTML page design for displaying a website homepage.","output":"<!DOCTYPE html> <html>     <head>         <title>Website Homepage</title>     </head>     <body>         <h1>Welcome to the website!</h1>         <p>This is the homepage for a new website.</p>         <ul>             <li> About Us </li>             <li> Services </li>             <li> Contact Us </li>         </ul>     </body> </html>"},{"instruction":"Suppose you have two arrays A and B. Write a C++ program to sum up the elements in A and B. A = [1,5,9,10] B = [2,5,7,10]","output":"#include <iostream> using namespace std; int main(void) {     int a[]={1,5,9,10};     int b[]={2,5,7,10};     int c[4];       for(int i=0;i<4;i++)         c[i] = a[i] + b[i];       for(int i=0;i<4;i++)         cout<<c[i]<<\\" \\";     return 0; }"},{"instruction":"Suppose you have a list of integers. Write a program in R language to compute the minimum of the list. list_of_integers <- c(5,9,7,8,2,1)","output":"min_val <- min(list_of_integers) print(min_val)"},{"instruction":"Write a code to collect the name, email address, and phone number from the user.","output":"name = input(\\"What is your name? \\") email = input(\\"What is your email address? \\") phone = input(\\"What is your phone number? \\")"},{"instruction":"Refractor the given code using SQL query commands. SELECT *  FROM customers  WHERE age > 18 AND (state = 'NY' OR experience > 3) AND (country = 'US' OR experience > 5)","output":"SELECT *  FROM customers  WHERE age > 18  AND (state = 'NY' OR experience > 3    OR (country = 'US' AND experience > 5))"},{"instruction":"You need to tell the assistant which language is this code written in. #include <iostream> using namespace std; int main() {     int a = 10, b= 15;     int c = a + b;     cout << \\"The sum of \\" << a << \\" and \\" << b << \\" is: \\" << c << endl;      return 0; }","output":"C++"},{"instruction":"mplement a function in Java to find the frequency of a particular character in a given string.","output":"public static int getCharFrequency(String str, char c)  {     int count = 0;     for (int i = 0; i < str.length(); i++)      {         if (str.charAt(i) == c)             count++;     }     return count;  }"},{"instruction":"Suppose you have two dictionaries, A and B. Write a code in Java to find the intersection of A and B. A = {1: 'a', 2: 'b'} B = {2: 'b', 3: 'c'}","output":"public static HashMap<Integer, String> intersect(HashMap<Integer, String> A, HashMap<Integer, String> B) {     HashMap<Integer, String> result = new HashMap<>();     for (Integer key: A.keySet()) {         if (B.containsKey(key)) {             result.put(key, A.get(key));         }     }     return result; }"},{"instruction":"Describe in one sentence how a given neural network model works. A convolutional neural network","output":"The convolutional neural network utilizes convolutional filters to learn features in an input, followed by layers of non-linear processing to produce an output."},{"instruction":"Edit the following Python code to make it error-free. a = 33 ab = a +","output":"a = 33 ab = a + b"},{"instruction":"Using JavaScript, write code to display the current time in the format \\"hh:mm:ss\\".","output":"let now = new Date(); let time = now.getHours() + \\":\\" + now.getMinutes() + \\":\\" + now.getSeconds(); console.log(time);"},{"instruction":"Write a JavaScript function that accepts two parameters - a number and a string - and returns a sentence with both parameters combined. num=10; str=\\"apple","output":"function combine(num, str) {     return \`There are {num} {str}!\`; }"},{"instruction":"Construct a SQL query to find the names and states of all employees located in California.","output":"SELECT name, state FROM Employees WHERE state = 'California';"},{"instruction":"Construct a C++ program to convert miles to kilometers.","output":"#include <iostream> double MilesToKilometers(double miles) {     return 1.609 * miles;  } int main() {     double miles = 0.0;     std::cout << \\"Enter the number of miles: \\";     std::cin >> miles;     double kilometers = MilesToKilometers(miles);     std::cout << miles << \\" miles is \\" << kilometers << \\" kilometers.n\\";     return 0; }"},{"instruction":"Convert the following recursive function to an iterative one. def factorial(n):      if n == 0:          return 1     else:          return n * factorial(n - 1)","output":"def factorial(n):     result = 1     for i in range(1, n + 1):         result = result * i     return result"},{"instruction":"Sanitize the following user input. \\"user' OR '1'='1","output":"String sanitizedInput = input.replaceAll(\\"[\\"']\\",\\"\\");"},{"instruction":"Write a Java program to find the length of a string without using the length() method.","output":"public static int stringLength(String str){     int count = 0;     for (int i=0; i<str.length(); i++){         if(str.charAt(i)!=' '){             count++;         }     }     return count; }"},{"instruction":"Write a SQL query to retrieve the names of all products from the table 'Product' with a price greater than 100. Table name: Product Attributes: id (integer), name (string), price (integer)","output":"SELECT name FROM Product WHERE price > 100;"},{"instruction":"Generate a Python class definition for a pig object that includes the following properties. name: string color: string age: integer","output":"class Pig(object):     def __init__(self, name, color, age):         self.name = name         self.color = color         self.age = age          def set_name(self, name):         self.name = name          def set_color(self, color):         self.color = color          def set_age(self, age):         self.age = age"},{"instruction":"Delete the elements at indices 2 and 4 in the following list. ['a', 'b', 'c', 'd', 'e', 'f']","output":"l = ['a', 'b', 'c', 'd', 'e', 'f'] del l[2:4]"},{"instruction":"Extract the value \\"qux\\" in the following dictionary. d = {     'foo': 'bar',     'baz': {         'qux': 12     } }","output":"d = {     'foo': 'bar',     'baz': {         'qux': 12     } } qux = d['baz']['qux']"},{"instruction":"Complete the following function so that all strings in the list have a length of 5 characters. lst = [\\"aaa\\", \\"bb\\", \\"ccccc\\", \\"dddddd\\"]","output":"def make_length_five(lst):     '''This function will ensure that all strings in the list have a length of 5 characters.'''     for i in range(len(lst)):         if len(lst[i]) < 5:             lst[i] = lst[i] + ' ' * (5 - len(lst[i]))         elif len(lst[i]) > 5:             lst[i] = lst[i][:5]     return lst"},{"instruction":"Format the following list of numbers as strings, with 3 decimal places. [123.4567, 678.9012, 789.3456]","output":"lst = [123.4567, 678.9012, 789.3456] lst = [format(num, '.3f') for num in lst]"},{"instruction":"Sort the following dictionary objects by the value of the \\"age\\" field. [{'name': 'John', 'age': 32}, {'name': 'Jane', 'age': 28}, {'name': 'Alex', 'age': 24}]","output":"lst = [{'name': 'John', 'age': 32}, {'name': 'Jane', 'age': 28}, {'name': 'Alex', 'age': 24}] lst.sort(key = lambda k: k['age'])"},{"instruction":"Create a function that will return the total number of specific items in a list. [1, 1, 2, 3, 3, 3]","output":"def count_items(lst, item):     '''This function will return the total number of specific items in a list.'''     return len([x for x in lst if x == item])"},{"instruction":"Create a function that will calculate the cumulative sum of a list. [1, 2, 3, 4, 5]","output":"def cumulative_sum(lst):     '''This function will calculate the cumulative sum of a list.'''     result = []     s = 0     for item in lst:         s += item         result.append(s)     return result"},{"instruction":"Create a new dictionary that contains the intersection between the following two dictionaries. d1 = {'a': 1, 'b': 2, 'c': 3} d2 = {'b': 2, 'c': 4, 'd': 5}","output":"d1 = {'a': 1, 'b': 2, 'c': 3} d2 = {'b': 2, 'c': 4, 'd': 5} d3 = { k:v for k,v in d1.items() if k in d2.keys() }"},{"instruction":"Solve the following programming puzzle using Python. A rope connected two opposite trees.  You need to cut the rope so the rope is never longer than 10 meters.  What is the shortest distance you can cut?","output":"def closest_cutting_distance(total_rope_length):     '''This function will calculate the shortest distance you can cut a rope so the rope is never longer than 10 meters.'''     if total_rope_length <= 10:         return total_rope_length     else:         return total_rope_length - 10"},{"instruction":"Create an array in Python that contains numbers from 1 to 5.","output":"my_array = [1, 2, 3, 4, 5]"},{"instruction":"Write a function in JavaScript that counts the number of characters in a sentence. The quick brown fox","output":"function characterCounter(str) {  return str.length; }"},{"instruction":"Write a selector in CSS that selects div elements which are inside a main section.","output":"main > div {   [select style code] }"},{"instruction":"Write a code in Python that returns an inversion of a given string. te","output":"def reverseStr(s):      return s[::-1]     s = \\"tea\\" print(reverseStr(s))"},{"instruction":"Edit a JSON object so that it stores information about a person in a defined format. {   name: John }","output":"{    \\"name\\": \\"John\\",    \\"age\\": 0,   \\"address\\": {     \\"street\\": \\"\\",     \\"city\\": \\"\\",     \\"state\\": \\"\\",     \\"zip\\": \\"\\"   },    \\"phone\\": \\"\\" }"},{"instruction":"Write a Class in Java that represents a student.","output":"public class Student {   private String firstName;   private String lastName;   private int studentId;   public Student(String firstName, String lastName, int studentId) {     this.firstName = firstName;     this.lastName = lastName;     this.studentId = studentId;   }   public String getFirstName() {     return firstName;   }   public String getLastName() {     return lastName;   }   public int getStudentId() {     return studentId;   } }"},{"instruction":"Write a code in PHP for finding the longest word in a string. This is a test string","output":"function longest_word(string){      words = explode(\\" \\", string);      longestword = 0;     foreach (words as word) {          if (strlen(word) > longestword) {              longestword = strlen(word);              longest_word = word;          }      }      return longest_word;  }  echo longest_word(\\"This is a test string\\");"},{"instruction":"What is the complexity class of the below Python code snippet for adding an item to a list? list = [1, 2, 3] list.append(4)","output":"The complexity class of this code snippet is O(1) since appending an item to a list has constant time complexity."},{"instruction":"Define a JavaScript class called Person that has a constructor for setting the name of the person.","output":"class Person {    constructor(name) {       this.name = name    } }"},{"instruction":"What is the output of the following Ruby code? arr = [2, 3, 4] sum = 0 arr.each{|x| sum += x }","output":"The output is that the value of sum is 9."},{"instruction":"What is the output of the following Java code? int x = 7; int y = 3; int z = x % y;","output":"The output is that the value of z is 1."},{"instruction":"w would you convert the following JavaScript object to a JSON string? let myObj = {    name: \\"John Doe\\",    age: 32 };","output":"let  myJSON  =  JSON.stringify(myObj);"},{"instruction":"What is the data type of the following variable in JavaScript? let myNumber = 10","output":"The data type of the variable myNumber is a number."},{"instruction":"Write a Python class that has two variables 'name' and 'age' and a method to print the values of both variables.","output":"class Person:     def __init__(self, name, age):         self.name = name         self.age = age          def print_values(self):         print(\\"Name:\\", self.name)         print(\\"Age:\\", self.age)"},{"instruction":"mplement quick sort in Java.","output":"public static void quickSort(int[] arr, int low, int high) {     if (arr == null || arr.length == 0)         return;       if (low >= high)         return;       // pick the pivot     int middle = low + (high - low) / 2;     int pivot = arr[middle];       // make left < pivot and right > pivot     int i = low, j = high;     while (i <= j) {         while (arr[i] < pivot) {             i++;         }           while (arr[j] > pivot) {             j--;         }           if (i <= j) {             int temp = arr[i];             arr[i] = arr[j];             arr[j] = temp;             i++;             j--;         }     }       // recursively sort two sub parts     if (low < j)         quickSort(arr, low, j);       if (high > i)         quickSort(arr, i, high); }"},{"instruction":"Write a JavaScript code snippet to concatenate the given strings: \\"Hello\\" and \\"World!","output":"var string1 = \\"Hello\\"; var string2 = \\"World!\\"; console.log(string1 + ' ' + string2); // Hello World!"},{"instruction":"Write a PHP code snippet to create an array containing the numbers from 1 to 100.","output":"arr = range(1, 100);"},{"instruction":"Write a JavaScript method that takes an array of numbers and checks if all values in the array are the same. [2,2,2,2]","output":"function allValuesSame(arr) {   for (var i = 1; i < arr.length; i++) {     if (arr[i] !== arr[0])       return false;   }   return true; }"},{"instruction":"Write a MySQL query to find all records containing the word 'hello' in the 'messages' table. Table: messages  ID | Message 1.  hello world 2.  hey there 3.  goodbye 4.  hello ag","output":"SELECT * FROM messages WHERE Message LIKE '%hello%';"},{"instruction":"Java, write a program that finds the sum of two linked lists representing integers.","output":"public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {     ListNode dummyHead = new ListNode(0);     ListNode p = l1, q = l2, curr = dummyHead;     int carry = 0;     while (p != null || q != null) {         int x = (p != null) ? p.val : 0;         int y = (q != null) ? q.val : 0;         int sum = carry + x + y;         carry = sum / 10;         curr.next = new ListNode(sum % 10);         curr = curr.next;         if (p != null)              p = p.next;         if (q != null)              q = q.next;     }     if (carry > 0) {         curr.next = new ListNode(carry);     }     return dummyHead.next; }"},{"instruction":"Using PHP, write a program to generate a string containing the nth Fibonacci number.","output":"function Fibonacci(n) {     if (n == 0)         return '0';     else if (n == 1)         return '1';     else     {         fibonaccinumbers[0] = 0;         fibonaccinumbers[1] = 1;         for (i = 2; i <= n; i++)         {             fibonaccinumbers[i] = fibonaccinumbers[i - 1] +                                     fibonaccinumbers[i - 2];         }         return fibonaccinumbers[n];     } }"},{"instruction":"Write an SQL query to find the records with the maximum value in a given table.","output":"SELECT * FROM table ORDER BY column DESC LIMIT 1;"},{"instruction":"JavaScript, write a function to calculate the nth term in the Fibonacci series.","output":"function fibonacci(n){  if (n <= 1)    return n;  return fibonacci(n - 1) + fibonacci(n - 2); }"},{"instruction":"Given the following code in C, modify it to increment \`num\` by 1. int num = 0;","output":"int num = 0; num++;"},{"instruction":"Write the SQL query to find the product name, prices, ratings of all products with rating greater than 4 and prices lesser than 10.","output":"SELECT product_name, price, rating FROM product_table  WHERE rating > 4 AND price < 10;"},{"instruction":"Create a Ruby script to return the nth Fibonacci number.","output":"# Function to return the nth Fibonacci number  def calculateFibonacci(num)    if num < 0      return 'Incorrect input'   elsif num == 0      return 0    elsif num == 1      return 1    end   #Recursive Function    return calculateFibonacci(num - 1) +  calculateFibonacci(num - 2)  end     # Driver Program  puts calculateFibonacci(7)"},{"instruction":"Write a Python code to calculate the total price of a given list of items including taxes. items = [   {\\"name\\": \\"apple\\", \\"price\\": 10},   {\\"name\\": \\"orange\\", \\"price\\": 20},   {\\"name\\": \\"banana\\", \\"price\\": 5} ] tax_rate = 5","output":"#Calculate total price of a given list of items including taxes items = [   {\\"name\\": \\"apple\\", \\"price\\": 10},   {\\"name\\": \\"orange\\", \\"price\\": 20},   {\\"name\\": \\"banana\\", \\"price\\": 5} ] tax_rate = 5 total_price = 0 for item in items:   total_price += item['price'] total_price = total_price + (total_price * (tax_rate/100)) print(total_price)"},{"instruction":"Design a C++ class to represent a student's information such as name, student ID, and grade.","output":"class Student { private:     string name;     int studentID;     int grade; public:     Student();     Student(string name, int studentID, int grade);     void setName(string name);     string getName();     void setStudentID(int studentID);     int getStudentID();     void setGrade(int grade);     int getGrade(); };"},{"instruction":"Write a code in Python to print out the common elements of two lists which are [2, 4, 6, 8] and [3, 6, 9, 12].","output":"#Function to print out the common elements of two lists def commonElements(l1, l2):     result = [value for value in l1 if value in l2]     return result # Lists to compare list1 = [2, 4, 6, 8]  list2 = [3, 6, 9, 12]  # Output   print(commonElements(list1, list2))  # Output: [6]"},{"instruction":"Modify the code to make sure it is valid according to Java language specification. public class HelloWorld {     public static void main(String[] args) {         System.out.println(\\"Hello World!\\");     } }","output":"public class HelloWorld {     public static void main(String[] args) {         System.out.println(\\"Hello World!\\");     } }"},{"instruction":"Parse a user input in the following format and print it out. x - 10, y - 20","output":"int x = 10; int y = 20; System.out.println(\\"x = \\" + x + \\" y = \\" + y);"},{"instruction":"Create a function in R to generate a random number between the given range.","output":"random_number <- function(min, max) {    return(runif(1, min=min, max=max)) }"},{"instruction":"Write an SQL query to find all students with grades higher than a given threshold. Threshold = 75","output":"SELECT * FROM Students  WHERE Grades > 75;"},{"instruction":"Check this code and add an if statement to print out “even” if the number is divisible by 2 and “odd” if not. for n in range (1,10): \\tprint(n)","output":"for n in range (1, 10):     if n % 2 == 0:         print(n, \\"even\\")     else:         print(n, \\"odd\\")"},{"instruction":"Create a web page using HTML and CSS which displays a user interface for a calculator.","output":"<html>     <head>         <title>Calculator Webpage</title>     </head>     <body>         <h1>Calculator</h1>         <div class=\\"container\\">             <div class=\\"display\\">                 <p>0</p>             </div>             <div class=\\"keypad\\">                 <div class=\\"number-pad\\">                     <button type=\\"button\\">7</button>                     <button type=\\"button\\">8</button>                     <button type=\\"button\\">9</button>                     <button type=\\"button\\">4</button>                     <button type=\\"button\\">5</button>                     <button type=\\"button\\">6</button>                     <button type=\\"button\\">1</button>                     <button type=\\"button\\">2</button>                     <button type=\\"button\\">3</button>                     <button type=\\"button\\">0</button>                 </div>                 <div class=\\"operator-pad\\">                     <button type=\\"button\\" class=\\"operator\\">/</button>                     <button type=\\"button\\" class=\\"operator\\">*</button>                     <button type=\\"button\\" class=\\"operator\\">+</button>                     <button type=\\"button\\" class=\\"operator\\">-</button>                     <button type=\\"button\\" class=\\"operator\\">=</button>                 </div>             </div>         </div>     </body> </html>"},{"instruction":"Convert this SQL statement into a LINQ query. SELECT * FROM Products  WHERE Price > 100","output":"var result = from Product in Products             where Product.Price > 100             select Product;"},{"instruction":"Fix the code by making changes with the appropriate syntax. def add_two_numbers(a, b) \\treturn a + b","output":"def add_two_numbers(a, b):     return a + b"},{"instruction":"Deploy the following ML model on the Cloud.","output":"1. Prepare the model: - Download, install and configure Cloud platform with the required SDKs. - Upload the ML model on the Cloud. - Perform necessary pre-processing steps. 2. Deploy the model: - Use a deployment framework to deploy the model on the Cloud.  - containerize the model using Docker.  - provide appropriate access for the model for it to be queried. 3. Test the model: - Run test cases for the model and assess the accuracy and performance of the model. - Set up a monitoring system for the model."},{"instruction":"Perform sentiment analysis on the given text using NLTK library in Python. The food here is amazing.","output":"from nltk.sentiment.vader import SentimentIntensityAnalyzer sentences = [\\"The food here is amazing!\\"] sid = SentimentIntensityAnalyzer() for sentence in sentences:     ss = sid.polarity_scores(sentence)     print(\\"for sentence: {}, sentiment analysis: {}\\".format(sentence, ss)) # Output # for sentence: The food here is amazing!, sentiment analysis: {'neg': 0.0, 'neu': 0.436, 'pos': 0.564, 'compound': 0.6249}"},{"instruction":"Design the structure of a database for a hotel booking system.","output":"Table 1: Customers - customer_id - first_name - last_name - email Table 2: Rooms - room_id - room_type - beds - rate Table 3: Bookings - booking_id - customer_id - room_id - check_in_date - check_out_date - price Table 4: Payments - payment_id - booking_id - payment_type - price Table 5: Reviews - review_id - booking_id - rating - comment"},{"instruction":"Update the following HTML page so that it refreshes the page every 5 seconds. <html>  <head>   <title>My Webpage</title>  </head>  <body>   Hello World!  </body> </html>","output":"<html>  <head>   <title>My Webpage</title>   <meta http-equiv=\\"refresh\\" content=\\"5\\">  </head>  <body>   Hello World!  </body> </html>"},{"instruction":"Make a bash script to read two user input numbers and print their average.","output":"#!/bin/bash echo \\"Please enter two numbers:\\" read num1 read num2 sum=((num1 + num2)) echo \\"The average of the two numbers is: ((sum / 2))\\""},{"instruction":"Construct a regex expression to match strings of the form \\"123-456\\".","output":"^[0-9]{3}-[0-9]{3}"},{"instruction":"Come up with a Scala code snippet to print the powers of 2.","output":"(0 to 8).foreach( x => {     println(Math.pow(2,x))   } )"},{"instruction":"Write an SQL query to rank the products by their sales.","output":"SELECT product_name, sales,   RANK() OVER (ORDER BY sales DESC) AS rank FROM products;"},{"instruction":"Generate a regex to validate the following format of email address: name@domain.extension","output":"^w+@[a-zA-Z_]+?.[a-zA-Z]{2,3}"},{"instruction":"w do you set a variable to a constant in C#?","output":"In C#, variables can be set to a constant by using the keyword 'const' before the variable declaration. The constant cannot be changed or reassigned once it is declared. Example: const int a = 5;"},{"instruction":"Write a Node.js program to accept a user input and print it in the console.","output":"const readline = require('readline'); const rl = readline.createInterface({   input: process.stdin,   output: process.stdout });    rl.question('Please enter your input: ', (answer) => {   console.log(\`You entered: {answer}\`);   rl.close(); });"},{"instruction":"Create a Python dictionary which contains the student name and their grade for the course. {  \\"John\\": 85,   \\"Alice\\": 91,  \\"Bob\\": 74 }","output":"student_grades = {  \\"John\\": 85,   \\"Alice\\": 91,  \\"Bob\\": 74 }"},{"instruction":"Write a MySQL query to select all the records in a table having the same ID. Table name: \\"customer","output":"SELECT * FROM customers WHERE id = 'ID';"},{"instruction":"Using SQL, write a query to get the last three rows from a table. Table name: \\"customer","output":"SELECT * FROM customer ORDER BY id DESC LIMIT 3;"},{"instruction":"Create a function which takes an array and removes all duplicates using a set. [1, 2, 3, 3, 4, 4, 5]","output":"# Create a function which takes an array and removes all duplicates using a set def remove_duplicates(arr):   return list(set(arr))  arr = [1, 2, 3, 3, 4, 4, 5]  new_arr = remove_duplicates(arr)  print(new_arr) # [1, 2, 3, 4, 5]"},{"instruction":"Find the smallest missing positive number in an array. [-2, 0, 1, 3]","output":"# Find the smallest missing positive number def smallest_positive(arr):   s = set(arr)   i = 1   while i in s:   i += 1  return i arr = [-2, 0, 1, 3]  smallest = smallest_positive(arr) print(smallest) # 2"},{"instruction":"Create a Python class with the following attributes: firstname, lastname and address.","output":"# Define a python class  class Person:   def __init__(self, firstname, lastname, address):    self.firstname = firstname   self.lastname = lastname   self.address = address"},{"instruction":"Add a constructor to the above class to make sure that firstname and lastname are provided when creating a new instance.","output":"# Define a python class  class Person:   def __init__(self, firstname, lastname, address):    # make sure that firstname and lastname are provided when creating a new instance   if (firstname == \\"\\" or lastname == \\"\\"):     raise ValueError(\\"firstname and lastname can't be empty\\")   self.firstname = firstname   self.lastname = lastname   self.address = address"},{"instruction":"Create a class for a bike which has a color, make and description as attributes.","output":"# Define a class for a bike class Bike:  def __init__(self, color, make, description):    self.color = color   self.make = make   self.description = description"},{"instruction":"Modify the 'Bike' class so that when instances are created they are assigned a unique ID.","output":"# Define a class for a bike class Bike:  _id = 0  def __init__(self, color, make, description):    Bike._id += 1   self.id = Bike._id   self.color = color   self.make = make   self.description = description"},{"instruction":"Write a SQL query to create a table with 5 columns and names 'id', 'name', 'age', 'gender' and 'email'.","output":"CREATE TABLE tablename (  id INT,   name VARCHAR(250),   age INT,   gender VARCHAR(50),   email VARCHAR(200) );"},{"instruction":"Write a Python program to find all the factors of an integer. number = 16","output":"def find_factors(number):     factors = []     for i in range(1, number + 1):         if number % i == 0:             factors.append(i)     return factors"},{"instruction":"Write a function to convert a Roman numeral to an integer.","output":"def roman_to_integer(numeral):   romans = {\\"I\\": 1,             \\"V\\": 5,             \\"X\\": 10,             \\"L\\": 50,             \\"C\\": 100,             \\"D\\": 500,             \\"M\\": 1000             }   num = 0   i = 0   while i < len(numeral):     if i+1 < len(numeral):       if romans[numeral[i]] >= romans[numeral[i+1]]:         num = num + romans[numeral[i]]       else :         num = num + romans[numeral[i+1]] - romans[numeral[i]]         i+=1     else:       num = num + romans[numeral[i]]     i+=1   return num"},{"instruction":"Write a Python function to compare two lists and return the elements that are in both of them. list1 = [3, 5, 7, 8] list2 = [3, 5, 10, 12]","output":"def compare_lists(list1, list2):     return [x for x in list1 if x in list2]"},{"instruction":"Edit this code so it can classify whether a number is even or odd. def classify_number(num)","output":"def classify_number(num):     if num % 2 == 0:         return \\"even\\"     else:         return \\"odd\\""},{"instruction":"Explain the purpose of a web browser.","output":"A web browser is a software application used to retrieve, render and traverse information on the World Wide Web. It uses Hypertext Transfer Protocol (HTTP) to request pages from from web servers, receive them, and display them in an organised way on our device. It also provides tools to allow users to traverse the web and access content such as email, videos, music, social networks, etc."},{"instruction":"dentify the type of output for the given C++ statement. cout<<\\"Hello World\\";","output":"String output."},{"instruction":"Analyse a given JSON object and list all the keys with their values. {   \\"name\\":\\"John\\",   \\"age\\":30,   \\"cars\\": {     \\"car1\\":\\"Ford\\",     \\"car2\\":\\"BMW\\",     \\"car3\\":\\"Fiat\\"   } }","output":"name: John age: 30 car1: Ford car2: BMW car3: Fiat"},{"instruction":"Given an array of integers, find the maximum difference between two elements in the array such that the larger element appears after the smaller element in the array. [5, 2, 4, 7, 15]","output":"def maxDifference(arr):   # Initialize max difference   max_difference = 0   # Traverse the array   for i in range(len(arr) - 1):     for j in range(i + 1, len(arr)):       # Find the difference between two elements       diff = arr[j] - arr[i]       # Check if the difference is the maximum       if diff > max_difference:         max_difference = diff   return max_difference # Output maxDifference([5, 2, 4, 7, 15]) # 13"},{"instruction":"Override the \\"toString\\" method for a given class in Java.","output":"public class MyClass {   public String toString() {     return \\"MyClass Object\\";   } }"},{"instruction":"Write a function that takes a list of words and detects if they are anagrams. a_list=[\\"potato\\",\\"tomato\\"]","output":"def is_anagram(a_list):          l1 = [''.join(sorted(word)) for word in a_list[0]]     l2 = [''.join(sorted(word)) for word in a_list[1]]     return l1 == l2"},{"instruction":"Write a Python function that takes two lists and returns a new list which contains only the unique elements from both of the lists. list1=[1,2,3,4] list2=[3,4,5,6]","output":"def unique_from_two_lists(list1,list2):   return list(set(list1 + list2))"},{"instruction":"Create a Python program to analyze a given list of URL requests and count the number of unique requests.","output":"def count_unique_requests(url_list):     return len(set(url_list))"},{"instruction":"Write a function that takes a two-dimensional array and flattens it into an one-dimensional array.","output":"def flatten(arr):     return [item for row in arr for item in row]"},{"instruction":"Using Python, parse a given XML document and output the names of all elements with the “class” attribute.","output":"from xml.etree import ElementTree def find_elements(tree):     elements = []     for elem in tree.iter():         if 'class' in elem.attrib:             elements.append(elem.tag)     return elements"},{"instruction":"Write a Python function to convert a given number of days into weeks, days.","output":"def convert_days(days):   weeks = days // 7   days = days % 7   return (weeks, days)"},{"instruction":"Write a Python function that takes a list of strings as an input and returns a new list with the strings sorted by length.","output":"def sort_by_length(lst):   return sorted(lst, key=len)"},{"instruction":"Write a Python function that takes a list of n strings and a number k and returns the longest string with length of k or less.","output":"def find_longest_at_length(lst, k):     longest_str = lst[0]     for s in lst[1:]:         if len(s) <= k and len(s) > len(longest_str):             longest_str = s     return longest_str"},{"instruction":"Create a JSON string representation of the given Python dictionary. {'name': 'John', 'age': 20, 'hobby': 'Coding'}","output":"var jsonStr = JSON.stringify({name: \\"John\\", age: 20, hobby: \\"Coding\\"});"},{"instruction":"Write a bash script that prints the given input string. String to be printed='Hello World'","output":"#!/bin/bash  echo \\"Hello World\\""},{"instruction":"Create a function in Ruby for performing string manipulations on the given text. Text=\\"Hello World","output":"def manipulate_string(text)   text = text.upcase   text = text.reverse   text = text.gsub('O', '*')   return text end"},{"instruction":"mplement a sorting algorithm in Python to arrange the given array in descending order. [10, 80, 40, 20, 60]","output":"def descendingOrder(arr):      arr.sort(reverse = True)      return arr     # Driver code  arr = [10, 80, 40, 20, 60]  output = descendingOrder(arr)  print(output)"},{"instruction":"Write a Python class for a Employee object to store the basic properties such as name, age, salary, etc.","output":"class Employee:       def __init__(self, name, age, salary):         self.name = name         self.age = age         self.salary = salary       def get_details(self):         return \\"Name: {}, Age: {}, Salary: {}\\".format(self.name, self.age, self.salary)"},{"instruction":"Write a JavaScript function for finding the biggest element in an array. [2, 4, 5, 6, 8, 10]","output":"function findMax(arr) {    let max = arr[0];   for (let i = 0; i < arr.length; i++) {      if (arr[i] > max)        max = arr[i];    }    return max;  }"},{"instruction":"Create a HTML select element with the given list of countries as options. CountryList = ['India','United States','Canada','Australia','New Zealand','Singapore','Japan']","output":"<select>   <option value=\\"India\\">India</option>   <option value=\\"United States\\">United States</option>   <option value=\\"Canada\\">Canada</option>   <option value=\\"Australia\\">Australia</option>   <option value=\\"New Zealand\\">New Zealand</option>   <option value=\\"Singapore\\">Singapore</option>   <option value=\\"Japan\\">Japan</option> </select>"},{"instruction":"Construct an SQL query for finding the average salary of employees from a given department. Department='Information Technology'","output":"SELECT AVG(salary)  FROM employees  WHERE department = 'Information Technology';"},{"instruction":"Create a PHP script for performing basic calculations such as addition, subtraction, multiplication and division.","output":"<?php function calculate(op, a, b) {     switch(op) {         case '+':             return a + b;         case '-':             return a - b;         case '*':             return a * b;         case '/':             return a / b;     } } ?>"},{"instruction":"Write a function in Swift for generating random numbers within a given range. Min=1, Max=20","output":"func randomNumberInRange(min: Int, max: Int) -> Int {     return Int.random(in: min...max) }"},{"instruction":"Create an HTML table with the given list of student's marks. StudentMarks=[34, 78, 63, 57, 92]","output":"<table>   <tr>     <th>Student</th>     <th>Marks</th>   </tr>   <tr>     <td>1</td>     <td>34</td>   </tr>   <tr>     <td>2</td>     <td>78</td>   </tr>   <tr>     <td>3</td>     <td>63</td>   </tr>   <tr>     <td>4</td>     <td>57</td>   </tr>   <tr>     <td>5</td>     <td>92</td>   </tr> </table>"},{"instruction":"Create a Python class named \\"Bicycle\\" which has two attributes named \\"color\\" and \\"wheels\\".","output":"class Bicycle:    def __init__(self, color, wheels):       self.color = color       self.wheels = wheels"},{"instruction":"Write a SQL query to find all users who are younger than 25 years old.","output":"SELECT * FROM users WHERE age < 25;"},{"instruction":"Make a copy of a given dictionary in Python.","output":"import copy original_dict = {1: 'a', 2: 'b', 3: 'c'} new_dict = copy.deepcopy(original_dict)"},{"instruction":"Write a SQL query to find out the names of users who have \\"B\\" as their second character in the name.","output":"SELECT name from users WHERE name LIKE '_b%';"},{"instruction":"Make an HTML webpage with a heading \\"Welcome to my webpage!\\" and a paragraph with the text \\"This is my first webpage!\\".","output":"<!DOCTYPE html> <html lang=\\"en\\"> <head>  <meta charset=\\"UTF-8\\">  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">  <title>My Webpages</title> </head> <body>  <h1>Welcome to my webpage!</h1>  <p>This is my first webpage!</p> </body> </html>"},{"instruction":"Write a SQL query to update the age of a certain user. name = \\"John Doe\\" age = 25","output":"UPDATE users SET age = 25 WHERE name = 'John Doe';"},{"instruction":"Write an HTML form which includes a text field, a submit button and a check box labeled \\"Remember Me\\".","output":"<form>   <input type=\\"text\\" placeholder=\\"Type something...\\">   <input type=\\"submit\\" value=\\"Submit\\">   <input type=\\"checkbox\\" name=\\"rememberme\\" value=\\"true\\">Remember Me </form>"},{"instruction":"Create an array of strings containing the names of the seven days of the week.","output":"let daysOfWeek = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\",                    \\"Thursday\\", \\"Friday\\", \\"Saturday\\",                    \\"Sunday\\"];"},{"instruction":"Write a query to count the number of movies released in 2020 from the database.","output":"SELECT COUNT(*) AS total_movies FROM movies WHERE year = 2020;"},{"instruction":"Create an object in JavaScript containing the output of a multiplication table from 1 to 10.","output":"let multiplicationTable = {  1:1,2,3,4,5,6,7,8,9,10,  2:2,4,6,8,10,12,14,16,18,20,  3:3,6,9,12,15,18,21,24,27,30,  4:4,8,12,16,20,24,28,32,36,40,  5:5,10,15,20,25,30,35,40,45,50,  6:6,12,18,24,30,36,42,48,54,60,  7:7,14,21,28,35,42,49,56,63,70,  8:8,16,24,32,40,48,56,64,72,80,  9:9,18,27,36,45,54,63,72,81,90,  10:10,20,30,40,50,60,70,80,90,100 };"},{"instruction":"Develop a Python script to count the number of characters, words, and sentences present in a given string. This is a sample sentence to test the program.","output":"string = 'This is a sample sentence to test the program.' character_count = len(string) word_count = len(string.split()) sentence_count = len(string.split('.')) print('Number of characters: ', character_count) print('Number of words: ', word_count) print('Number of sentences: ', sentence_count) Output: Number of characters: 45 Number of words: 8 Number of sentences: 1"},{"instruction":"Explain what is a non-deterministic algorithm.","output":"A non-deterministic algorithm is an algorithm that can produce different results when run multiple times with the same inputs. This is because the algorithm may make use of randomness or take different paths based on the input, and the result of each run will be different. Non-deterministic algorithms are useful in solving problems that cannot be solved with traditional deterministic algorithms, such as certain AI problems or certain puzzles."},{"instruction":"Explain the concept of recursion with an example.","output":"Recursion is a technique in which a function calls itself. It is used to solve problems which can be broken down into sub-problems that are similar to the original problem. An example of recursion is the Fibonacci sequence, where a number in the sequence is the sum of the previous two numbers. The sequence can be computed using a recursive function: def Fibonacci(n):    if n<0:      print(\\"Incorrect input\\")    elif n==1:      return 0   elif n==2:      return 1   else:      return Fibonacci(n-1)+Fibonacci(n-2)     # Driver program  print(Fibonacci(6))  Output: 5"},{"instruction":"Develop a solution for the classic pattern recognition problem - the Towers of Hanoi.","output":"// function to solve the Tower of Hanoi problem def solveTowerOfHanoi(n, source, auxillary, destination):    if n==1:      print(\\"Move disk 1 from source\\",source,\\"to destination\\",destination)      return    solveTowerOfHanoi(n-1, source, destination, auxillary)    print(\\"Move disk\\",n,\\"from source\\",source,\\"to destination\\",destination)    solveTowerOfHanoi(n-1, auxillary, source, destination)  # Driver code  n = 3 solveTowerOfHanoi(n, 'A', 'B', 'C')  Output: Move disk 1 from source A to destination C Move disk 2 from source A to destination B Move disk 1 from source C to destination B Move disk 3 from source A to destination C Move disk 1 from source B to destination A Move disk 2 from source B to destination C Move disk 1 from source A to destination C"},{"instruction":"Explain what is an API and why it is important.","output":"An API (Application Programming Interface) is a set of routines, protocols and tools for building software applications. APIs define the way software components should interact and are used to allow different services, such as web services, to communicate with each other. APIs are important because they allow developers to access services and data without having to rewrite or redevelop an entire application. This allows developers to create more secure, efficient and scalable applications. APIs are also used to create new custom solutions and to increase the overall value and performance of existing services."},{"instruction":"Given an array [6, 4, 15, 10], write a JavaScript code snippet to find the largest number. [6, 4, 15, 10]","output":"let largest = 0; let arr = [6, 4, 15, 10]; for (let i = 0; i < arr.length; i++) {   if (arr[i] > largest) {     largest = arr[i];   } } console.log(largest); // 15"},{"instruction":"Create a Git repository for a project named \\"My first project\\".","output":"git init MyFirstProject"},{"instruction":"Create a function sumToN that takes a single argument and returns the sum of the numbers from 1 to the argument.","output":"def sumToN(n):   sum = 0   for i in range(1, n+1):     sum += i   return sum"},{"instruction":"Given a string s = 'Hello, World!' create a function that takes a string as an input and returns its length. s = 'Hello, World!'","output":"def getStringLength(s):   return len(s)"},{"instruction":"Write a JavaScript code snippet to retrieve the value of the cookie named \\"userID\\".","output":"var userID = document.cookie.split(';')   .find(c => c.trim().startsWith('userID'))   .split('=')[1];"},{"instruction":"Given an array [1, 2, 3, 4], write a Python code snippet to print the items in the array in a single line. [1, 2, 3, 4]","output":"arr = [1, 2, 3, 4] print(*arr, sep=\\", \\") // 1, 2, 3, 4"},{"instruction":"Write a class for a shopping cart in Python.","output":"class ShoppingCart:     def __init__(self):         self.cart = {}     def add_item(self, item, price):         self.cart[item] = price     def get_cart_total(self):         return sum(self.cart.values())"},{"instruction":"w to use the reduce function in Python for computing the sum of elements in a list?","output":"from functools import reduce def my_sum(list):   return reduce((lambda x, y: x + y), list)"},{"instruction":"Write an if else statement in Python for checking if a given number is positive or negative.","output":"if x > 0:   print(\\"The number is positive\\") else:   print(\\"The number is negative\\")"},{"instruction":"Write a loop in Python for printing all even numbers between 1 and 10.","output":"for i in range(1, 11):     if i % 2 == 0:         print(i)"},{"instruction":"Write an SQL query to create a table with name ‘Users’ and three columns: firstname, lastname, email.","output":"CREATE TABLE Users (   firstname VARCHAR(200) NOT NULL,   lastname VARCHAR(200) NOT NULL,   email VARCHAR(200) NOT NULL );"},{"instruction":"Write a JavaScript code to sort a list of strings in alphabetical order. words = ['car', 'apple', 'tree', 'book', 'cat']","output":"let sortedWords = words.sort();  console.log(sortedWords); // ['apple', 'book', 'car', 'cat', 'tree']"},{"instruction":"Write a MATLAB code to find the maximum value for an array of 10 elements. A = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]","output":"max_val = max(A); fprintf('Max value is %dn', max_val);"},{"instruction":"Write an R code to find the length of the longest string in an array. strings = c('this', 'is', 'a', 'test')","output":"strings <- c('this', 'is', 'a', 'test') longest <- max(nchar(strings)) cat('The longest string length is: ', longest)  Output: The longest string length is: 4"},{"instruction":"Write an R code to return the first 10 rows of a data frame. states-data.csv","output":"# Load the data states_data <- read.csv(\\"states-data.csv\\") # Get the first 10 rows head(states_data, 10)"},{"instruction":"Design an algorithm that computes the Fibonacci numbers.","output":"A Fibonacci algorithm can be written using a simple recursive function: int fibonacci(int n) {     if (n == 0 || n == 1) {         return n;     }     else {         return fibonacci(n - 1) + fibonacci(n - 2);     } }"},{"instruction":"Write a JavaScript function that checks if the given string contains any vowels. String: \\"Hello","output":"function containsVowel(str) {  return /[aeiou]/i.test(str); }"},{"instruction":"Create a database table to store real estate records.","output":"CREATE TABLE real_estate_records(      id INT NOT NULL AUTO_INCREMENT,       name VARCHAR(50),       address VARCHAR(250),       bedrooms INT,       bathrooms INT,       price DECIMAL(10,2),       area INT,      PRIMARY KEY(id) );"},{"instruction":"Rewrite the following Python code without using the 'list comprehension' syntax. [x * x for x in range(5)]","output":"list_result = [] for x in range(5):     list_result.append(x*x)"},{"instruction":"Explain how a computer can generate pseudo-random numbers.","output":"A computer can generate pseudo-random numbers by using an algorithm to generate a sequence of numbers that appear to be random. This algorithm uses an initial seed value, typically an input string or value derived from the computer's internal clock, which is then used to generate a sequence of numbers. The resulting sequence will appear to be random to the user, even though it is always the same. Some common methods of generating pseudo-random numbers include the use of linear congruential generators, which use a linear equation to generate a sequence of numbers; the use of a Blum Blum Shub algorithm, which uses the cycle of two large prime numbers to generate a sequence of numbers; or the use of a Mersenne Twister algorithm, which uses a fixed-point representation of a number to generate a sequence of numbers."},{"instruction":"Write a regular expression that extracts all numbers from the given text. Text:  \\"The total number of students is 50 and the average score is 78 out of 100.","output":"d+"},{"instruction":"Describe the purpose of using an Array in programming.","output":"An array is a data structure used in programming to store a collection of elements of the same type in a contiguous block of memory. Arrays are used to hold items such as numbers, strings, objects, etc. and to perform operations such as searching, sorting, and manipulation on the elements of the array. Arrays are also used to implement other data structures such as stacks, queues, and linked lists."},{"instruction":"Write a Python program to sort a list of tuples using Lambda. list = [(3, 4), (5, 1), (2, 0)]","output":"sorted_list = sorted(list, key=lambda x: x[1])"},{"instruction":"Create a function that takes a string and converts the string to CamelCase. string = \\"this_is_a_string","output":"def toCamelCase(string):     s = string.split('_')     return s[0] + ''.join(x.title() for x in s[1:])"},{"instruction":"Update the Java code to check the condition that the value of \\"amount\\" is greater than 1000 or not. public class Main { \\tpublic static void main(String args[]){ \\t\\tdouble amount = 1100; \\t\\t// TODO \\t\\tSystem.out.println(\\"The amount is greater than 1000: \\"+ amount); \\t} }","output":"public class Main { \\tpublic static void main(String args[]){ \\t\\tdouble amount = 1100; \\t\\tif (amount > 1000) { \\t\\t\\tSystem.out.println(\\"The amount is greater than 1000: \\"+ amount); \\t\\t} \\t} }"},{"instruction":"Using the code provided, create an algorithm in Python to print the numbers from 1 to 10.","output":"for i in range(1, 11):      print(i)"},{"instruction":"Modify the program to make sure that only integers are accepted as input. name = input(\\"Enter your name: \\") print(\\"Hello, \\" + name)","output":"name = input(\\"Enter your name: \\") try:     name = int(name)     print(\\"Hello, \\" + str(name)) except ValueError:     print(\\"Error: That was not an integer.\\")"},{"instruction":"Using the code provided, modify the program to output \\"I like cats\\" instead of \\"I love cats\\". print(\\"I love cats\\")","output":"print(\\"I like cats\\")"},{"instruction":"Using the HTML code provided, add a meta tag to the \\"head\\" element. <head>     <title>My Page</title> </head>","output":"<head>     <title>My Page</title>     <meta name=\\"keywords\\" content=\\"HTML,CSS,XML,JavaScript\\"> </head>"},{"instruction":"Create a PHP script to print the numbers 1 to 10.","output":"<?php for (i = 1; i <= 10; i++) {     echo i . \\"<br>\\"; } ?>"},{"instruction":"w do you insert a given element in a balanced AVL tree?","output":"The process of insertion in a balanced AVL tree is similar to the process in a binary search tree, with two additional steps. First, the tree is checked to see if it needs to be rebalanced. If it does, the tree is rebalanced according to the AVL rules. Second, any newly inserted node is checked against its siblings to see if it is in balance or not. If it's not, the tree is rotated to balance it. In order to insert an element in a balanced AVL tree, the following steps must be taken: 1. Start by searching the tree to see if the node to be inserted already exists in the tree. 2. If the node does not exist, insert it in the same fashion as in a binary search tree. 3. Perform post-insertion balancing. This involves checking the newly inserted node's balance factors and rotation if either one is unequal. 4. Update the current node's balance factor as well as the ancestors' balance factors until the root is reached. 5. Once all nodes that need to be balanced have been updated, the insertion is complete."},{"instruction":"Create a CSS class for displaying content in the center of a page.","output":".center-content {     margin: 0 auto;     display: flex;     justify-content: center;     align-items: center; }"},{"instruction":"Create a JavaScript function for getting the unique elements in an array. const arr = [3, 1, 4, 3, 2, 5]","output":"const getUniqueElements = array => {     const uniqueElements = [...new Set(array)];     return uniqueElements; } console.log(getUniqueElements(arr)); // [3, 1, 4, 2, 5]"},{"instruction":"Write an SQL query for finding the minimum and maximum values of a column.","output":"SELECT MIN(column_name), MAX(column_name)  FROM table_name;"},{"instruction":"Create a ruby method for finding the frequency of an element in an array. array = [2, 3, 4, 3, 2, 5, 2]","output":"def frequency(array)     frequency_hash = Hash.new(0)     array.each { |num| frequency_hash[num] += 1 }     frequency_hash end puts frequency(array) // {2=>3, 3=>2, 4=>1, 5=>1}"},{"instruction":"Write a PHP function for counting the number of words in a string. str = 'Hello World!'","output":"function wordCount(str) {     stringArray = explode(' ', str);     return count(stringArray); } echo wordCount(str); // 2"},{"instruction":"Generate a random password that is at least 8 characters and contains numbers, uppercase letters, and symbols.","output":"\\"\\"\\" Generate a random password that is at least 8 characters and contains numbers, uppercase letters, and symbols. \\"\\"\\" import random def generate_password():     charset = \\"01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#%^&*()?\\"     password = \\"\\"     for _ in range(8):         password += random.choice(charset)     return password      if __name__ == '__main__':     print(generate_password())"},{"instruction":"Explain why a stack can be used to reverse a string?","output":"A stack can be used to reverse a string because it follows the Last In First Out (LIFO) principle. This means that the last item to be added in the stack will be the first item to be removed. So when a string is pushed onto the stack, the characters will be stored in reverse order - the last character to be pushed will be the first character to be popped. By popping the characters one at a time, we can reverse the string."},{"instruction":"Select all customers from the customer_table with age greater than 25 and their zip codes within a given range. customer_table = [['Eliza', 22, 48001], ['John', 26, 48034], ['Michael', 50, 48323]] zipcode_range = (48000, 48200)","output":"\\"\\"\\" Select all customers from the customer_table with age greater than 25 and their zip codes within a given range. \\"\\"\\" #select customers customers = [ customer for customer in customer_table if (customer[1] > 25) and (customer[2] >= zipcode_range[0] and customer[2] <= zipcode_range[1])] print(customers)"},{"instruction":"Count the number of occurrences of a given number in a list of numbers. numbers = [1,1,2,3,4,4,4,5] number = 4","output":"\\"\\"\\" Count the number of occurrences of a given number in a list of numbers. \\"\\"\\" numbers = [1,1,2,3,4,4,4,5] number = 4 def count_occurrences(numbers, number):     count = 0     for num in numbers:         if num == number:             count += 1     return count print(count_occurrences(numbers, number))"},{"instruction":"Describe the advantages and disadvantages of using recursion.","output":"Recursion has many advantages including that it is often easier to understand, it eliminates the need for loops, and it can make for concise code when addressing complex problems. However, recursion also has disadvantages such as the potential for infinite loops and excessive memory consumption due to the overhead of function calls. Additionally, recursion can be slower than using loops in some cases."},{"instruction":"Determine whether a given string is a palindrome using stack data structure. string = \\"racecar","output":"\\"\\"\\" Determine whether a given string is a palindrome using stack data structure. \\"\\"\\" def is_palindrome(string):     # reverse the string     stack = []     for char in string:         stack.append(char)     rev_string = \\"\\"     while stack:         rev_string = rev_string + stack.pop()     # compare reversed string with original string     if rev_string == string:         return True     else:         return False if __name__ == '__main__':     string = \\"racecar\\"     print(is_palindrome(string))"},{"instruction":"Create a class named 'Stack' with the following methods:  push, pop, peek, isEmpty.","output":"\\"\\"\\" Create a class named 'Stack' with the following methods: push, pop, peek, isEmpty. \\"\\"\\" class Stack:     def __init__(self):         self.items = []     def push(self, item):         self.items.append(item)     def pop(self):         return self.items.pop()          def peek(self):         return self.items[-1]          def isEmpty(self):         return self.items == []"},{"instruction":"Given a dictionary of key-value pairs, write a function to reorder the dictionary based on the values. d = {'John': 15, 'Anna': 20, 'Bob': 10}","output":"\\"\\"\\" Given a dictionary of key-value pairs, write a function to reorder the dictionary based on the values. \\"\\"\\" def reorder_dict(d):     sorted_dict = {}     sorted_values = sorted(d.values())     while sorted_values:         key = sorted(d, key=lambda k: d[k] == sorted_values[0])[0]         sorted_dict[key] = d[key]         sorted_values.remove(d[key])     return sorted_dict if __name__ == '__main__':     d = {'John': 15, 'Anna': 20, 'Bob': 10}     print(reorder_dict(d))"},{"instruction":"Sum up all the values in a 2D list. list = [[1,2,3],[4,5,6],[7,8,9]]","output":"\\"\\"\\" Sum up all the values in a 2D list. \\"\\"\\" def sum_2d_list(list_2d):     sum = 0     for l in list_2d:         for n in l:             sum += n     return sum if __name__ == '__main__':     list_2d = [[1,2,3],[4,5,6],[7,8,9]]     print(sum_2d_list(list_2d))"},{"instruction":"Use a Linked List structure to implement a stack data structure.","output":"\\"\\"\\" Use a Linked List structure to implement a stack data structure. \\"\\"\\" class Node:     def __init__(self, val):         self.value = val         self.next = None class Stack:     def __init__(self):         self.top = None         self.size = 0     def push(self, val):         new_node = Node(val)         new_node.next = self.top         self.top = new_node         self.size += 1          def pop(self):         if self.top == None:             return None         else:             pop_node = self.top             self.top = self.top.next             self.size -= 1             return pop_node.value"},{"instruction":"Construct a SQL query to select all records from a table called “customers”, and adjust the order based on the column “first_name” in descending order.","output":"SELECT * FROM customers ORDER BY first_name DESC;"},{"instruction":"Create a function using JavaScript to generate a random string of up to 10 characters in length.","output":"function randomString(length) {   let result           = '';   let characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';   let charactersLength = characters.length;   for ( let i = 0; i < length; i++ ) {      result += characters.charAt(Math.floor(Math.random() * charactersLength));   }   return result; }"},{"instruction":"Construct a loop in JavaScript that prints out each item in an array. let arr = [1,2,3,4,5]","output":"for (let i = 0; i < arr.length; i++) {   console.log(arr[i]); }"},{"instruction":"Write a code snippet in Python to generate a random float with up to 4 decimal places.","output":"import random def random_float(a,b):   return round(random.uniform(a,b), 4)"},{"instruction":"What is the value of variable \\"a\\" at the end of the code? a = 0 for i in range (10):     a +=","output":"45"},{"instruction":"Below is a simple function, improve it for efficiency and readability: def get_sum(x, y):     m = max(x, y)     n = min(x, y)     z = 0     while n <= m:         z += n         n += 1     return z","output":"def get_sum(x, y):     # get the lower bound and upper bound     lower, upper = min(x, y), max(x, y)     # apply the arithmetic series formula     return (upper * (upper + 1) - lower * (lower - 1)) // 2"},{"instruction":"ert the missing symbol which will make the code syntactically correct. if x 0","output":"if x == 0"},{"instruction":"Combine the two objects with the same property value. obj1 = {   \\"name\\": \\"John\\",   \\"age\\": 22 } obj2 = {   \\"name\\": \\"John\\",   \\"location\\": \\"New York\\" }","output":"obj3 = {   \\"name\\": \\"John\\",   \\"age\\": 22,   \\"location\\": \\"New York\\" }"},{"instruction":"Complete the code to slice the list up to index 4. my_list = [1, 2, 3, 4, 5, 6, 7]","output":"my_list = my_list[:4] # my_list is now [1, 2, 3, 4]"},{"instruction":"Construct a regex pattern to match the following words. words = [\\"cat\\", \\"bat\\", \\"rat\\"]","output":"pattern = r\\"(cat|bat|rat)\\""},{"instruction":"Using SQL, write a query to fetch the names of all products with a price lower than 50. Table: products Columns: id, name, price Entries: 1, Produce A, 35 2, Produce B, 45 3, Produce C, 75","output":"SELECT name FROM products WHERE price < 50;"},{"instruction":"Write a C++ program to determine the greatest common factor of two numbers. 14, 63","output":"#include <iostream>   int gcd(int a, int b)  {      if (b == 0) {         return a;      }     return gcd(b, a % b);  }     int main()  {      int a = 14;     int b = 63;        std::cout << \\"GCD of \\" << a << \\" and \\" << b << \\" is \\" << gcd(a, b) << std::endl;         return 0;  }"},{"instruction":"Given the following list of strings, return a new list with only the strings that contain the letter \\"e [\\"hello\\", \\"world\\", \\"foo\\", \\"bar\\", \\"elephant\\", \\"cat\\"]","output":"[\\"hello\\", \\"elephant\\"]"},{"instruction":"Convert the following list of numbers from decimal notation to binary notation. [45, 11, 80, 12]","output":"[101101, 1011, 1010000, 1100]"},{"instruction":"Using the Jest JavaScript test framework, write a test that checks if a given number is divisible by 2. n = 6","output":"test('divisible by 2', () => {  expect(n % 2).toBe(0); });"},{"instruction":"Create a mongoose model for employees who have the fields 'name', 'age', 'gender', and 'salary'.","output":"const mongoose = require(\\"mongoose\\"); const EmployeeSchema = new mongoose.Schema({   name: String,   age: Number,   gender: String,   salary: Number, }); module.exports = mongoose.model(\\"Employee\\", EmployeeSchema);"},{"instruction":"Re-write the code below in Java to reverse the first string while preserving the order of the elements in the other strings. arr = [string1, string2, string3]","output":"String[] arr = {\\"string1\\", \\"string2\\", \\"string3\\"};    String temp = arr[0];  arr[0] = new StringBuilder(temp).reverse().toString();    System.out.println(Arrays.toString(arr));"},{"instruction":"Sort the following array of objects based on the 'name' key in descending order. arr = [    { name: ‘Bill’, age: 25 },    { name: ‘Bob’, age: 21 },   { name: ‘Adam’, age: 20 }  ]","output":"arr.sort((a, b) => (a.name < b.name) ? 1 : -1);"},{"instruction":"Write a SQL query to select all books with a title starting with “The” from the database. Table: books Columns: id, title, year Entries 1, ‘The Millionaire Network’, 2020 2, ‘Web Development for Dummies’, 2020 3, ‘The Network for Beginners’, 2021","output":"SELECT *  FROM books  WHERE title LIKE ‘The%’;"},{"instruction":"Write a SQL query to find the names of all customers who bought a laptop from a store. TableName: Customers Columns: CustomerId INT  Name VARCHAR(50)  PurchaseItem VARCHAR(20) TableName: Purchases Columns: PurchaseId INT  CustomerId INT  PurchaseItem VARCHAR(20)","output":"SELECT c.Name FROM Customers c INNER JOIN Purchases p ON c.CustomerId = p.CustomerId WHERE p.PurchaseItem = 'laptop';"},{"instruction":"Create a regex expression to extract all words that contain 3 consonants in a row.","output":"[a-zA-Z]*[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]{3}[a-zA-Z]*"},{"instruction":"Write an algorithm in pseudocode to convert a temperature given in Celsius to its equivalent value in Fahrenheit.","output":"// Algorithm to convert Celsius to Fahrenheit // Input: numeric value in Celsius (c) // Output: numeric value in Fahrenheit (f) // Step 1: Multiply c by 9 // Step 2: Divide the result 9 by 5 // Step 3: Add 32 to the result // Step 4: Output f f = ( 9 / 5 ) * c + 32"},{"instruction":"Design a logic in Rust to check if an entered integer is a prime number or not.","output":"fn is_prime(number: i32) -> bool {     if number == 0 || number == 1 {         return false     }     for i in 2..(number/2) {         if number % i == 0 {             return false         }     }     return true }"},{"instruction":"Create a SQL query to count all buyers from a country. TableName: Customers Columns:  CustomerID INT  Name VARCHAR(40)  Country VARCHAR(20) TableName: Purchases Columns: PurchaseID INT  CustomerID INT","output":"SELECT COUNT(*) FROM Customers c INNER JOIN Purchases p ON c.CustomerID = p.CustomerID WHERE c.Country = 'CountryName';"},{"instruction":"Construct a regex expression to identify all numbers within a given string.","output":"d+"},{"instruction":"mplement a function in Python that takes two array-like structures and returns a new array containing all elements from the first one that do not appear in the second one. list_1 = [9, 4, 2, 1, 5] list_2 = [4, 6, 2]","output":"def difference_array(list_1, list_2):   new_list = []   for i in list_1:     if i not in list_2:       new_list.append(i)   return new_list"},{"instruction":"Create a script that prints the prime numbers up to a given integer n.","output":"def printPrimesUpTo_n(n):     while n > 1:         if not (n % 2 and n > 2):             flag = False             for i in range(2, int(n**0.5) +1):                 if not n % i:                     flag = True                     break             if not flag:                 print(n)         n -= 1"},{"instruction":"Create a function in Java that takes an integer n and prints the first n Fibonacci numbers.","output":"public void printFibonacci(int n) { \\tint a = 0, b = 1, c;   \\tif (n == 0) \\t\\treturn;   \\tfor (int i = 1; i <= n; i++) { \\t\\tc = a + b; \\t\\tSystem.out.print(a + \\" \\"); \\t\\ta = b; \\t\\tb = c; \\t} }"},{"instruction":"Design a procedure in SQL to get maximum salary from the 'employees' table.","output":"SELECT MAX(salary)  FROM employees;"},{"instruction":"mplement a function in Python that takes a list of integers and the size of the list. The function should return a list in which every element is multiplied by three and none of the elements exceeding the size of the list. s=[1,2,3,4]","output":"def multiply_by_3(s):     result = []     for x in s:         if x*3 <len(s):             result.append(x * 3)     return result"},{"instruction":"Write a piece of code in C++ to write \\"Hello World\\" to the console.","output":"#include <iostream>  int main()  {      std::cout << \\"Hello World!\\";      return 0;  }"},{"instruction":"Create a function in JavaScript that removes all vowels from a string.","output":"function removeVowels(str) {   let result = \\"\\";   for (let i = 0; i < str.length; i++) {     if ((str[i] !== 'a') && (str[i] !== 'e') && (str[i] !== 'i') && (str[i] !== 'o') && (str[i] !== 'u')) {       result += str[i];     }   }   return result; }"},{"instruction":"Write an algorithm in Python to count how many words a given string contains.","output":"def count_words(string): \\twords = string.split() \\treturn len(words)"},{"instruction":"Design an SQL query to find all the records where the salary is between 10000 and 20000 in the 'employees' table.","output":"SELECT *  FROM employees  WHERE salary BETWEEN 10000 AND 20000;"},{"instruction":"Create a function in JavaScript to concatenate two strings without using the concat() method.","output":"function concat_str(str1, str2) {     let result = \\"\\";     for (let i = 0; i < str1.length; i++) {         result += str1[i];     }     for (let j = 0; j < str2.length; j++) {         result += str2[j];     }     return result; }"},{"instruction":"Write a SQL query to count the number of unique customers who purchased an item in a given month. Table name: \\"Order","output":"SELECT COUNT(DISTINCT customer_id) FROM Orders WHERE MONTH(order_date) = <month_number>;"},{"instruction":"Create a MySQL schema to store a table of products.","output":"CREATE TABLE products (   id int NOT NULL AUTO_INCREMENT,    name VARCHAR(255) NOT NULL,   description VARCHAR(255) NOT NULL,   price DECIMAL(10, 2) NOT NULL,   PRIMARY KEY (id) );"},{"instruction":"mplement a Java program to search the title of books in a library.","output":"public class LibrarySearch {     private ArrayList<String> titles;     public LibrarySearch() {         titles = new ArrayList<String>();     }          public boolean searchTitle(String title) {         for (int i = 0; i < titles.size(); i++) {             String titleInList = titles.get(i);             if (title.equals(titleInList)) {                 return true;             }         }                 return false;     } }"},{"instruction":"Develop a script in JavaScript to validate an email address.","output":"function isValidEmail(email) {    const re = /^(([^<>()[].,;:s@\\"]+(.[^<>()[].,;:s@\\"]+)*)|(\\".+\\"))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))/;   return re.test(String(email).toLowerCase()); }"},{"instruction":"Create a PHP script that can validate if a given string is a valid IP address.","output":"function validateIP(ip) {    return filter_var(ip, FILTER_VALIDATE_IP);  }"},{"instruction":"Create a C# method that takes a string and counts the number of times a given character appears. \\"Mississippi\\", 'i'","output":"public static int countCharacter(string text, char character)          {              int count = 0;              foreach (char c in text)              {                  if(c == character)                  {                      count++;                  }              }              return count;              }"},{"instruction":"Create a schema for a collection in MongoDB to store product data. Collection name: products Schema should include: name, type (string), description (string), price (integer), availability (boolean)","output":"const ProductSchema = new Schema({   name: { type: String },   type: { type: String },   description: { type: String },   price: { type: Number },   availability: { type: Boolean }, });"},{"instruction":"Write a SQL query to select all rows where the name contains \\"John\\". Table name: employees Table information: id, name, age","output":"SELECT *  FROM employees  WHERE name LIKE '%John%'"},{"instruction":"Update a MongoDB document with the following information. Database name: products Collection name: items Document ID: 5e9697d50a5173c078b5306b Field to update: description Value: This item is now available in 3 size","output":"db.items.updateOne(    { _id: ObjectId(\\"5e9697d50a5173c078b5306b\\") },    { set: { description: \\"This item is now available in 3 sizes\\" } } )"},{"instruction":"Write a SQL query to select all rows where the age is greater than or equal to 30. Table name: employees Table information: id, name, age","output":"SELECT * FROM employees WHERE age >= 30"},{"instruction":"Develop an algorithm to return all possible permutations of a given string. String: \\"abc","output":"const permute = str => {   let results = [];      const permutations = (subStr, rest) => {     if (!rest.length) {       results.push(subStr);     } else {       for (let i = 0; i < rest.length; i++) {         let newSubStr = subStr + rest[i];         let newRest = rest.substring(0, i) + rest.substring(i + 1);         permutations(newSubStr, newRest);       }     }   }   permutations('', str);   return results; }"},{"instruction":"Write a SQL query to join two tables ‘employees’ and ‘locations’ on the key ‘city’ and return only the employees of age 25-35 Table A (employees): id | name | city | age Table B (locations): city | regio","output":"SELECT     e.id,     e.name,     e.city,     e.age FROM      employees e INNER JOIN      locations l ON      e.city =  l.city WHERE     e.age BETWEEN 25 AND 35;"},{"instruction":"Write a Python script to remove all the values that are greater than 30 from the list list_of_num = [25, 12, 36, 118, 200, 30]","output":"new_list = [num for num in list_of_num if num <= 30]"},{"instruction":"Complete the SQL query which find the name and age of all female customers Table A (Customers): name | sex | age","output":"SELECT     name,     age FROM     Customers WHERE      sex = 'female';"},{"instruction":"Modify the CSS in the given HTML code to style the web page <html>  <head>   <title>Styled Page</title>  </head>  <body>   <h1>Styled Page</h1>  </body> </html>","output":"<html>  <head>   <title>Styled Page</title>   <style type=\\"text/css\\">     body {         background-color: white;     }     h1 {         font-family: 'Arial', sans-serif;         font-size: 30px;         color: black;         text-align: center;     }   </style>  </head>  <body>   <h1>Styled Page</h1>  </body> </html>"},{"instruction":"Write a user defined function to print the sum of two numbers","output":"def add_two_numbers(a, b):     return a + b"},{"instruction":"Create a new method “listItems” which returns a list of strings","output":"def listItems():     list_items = [\\"item1\\", \\"item2\\", \\"item3\\"]     return list_items"},{"instruction":"Write a function to print the four elements in the given list in reverse order list = [\\"a\\", \\"b\\", \\"c\\", \\"d\\"]","output":"def print_reverse_order(lst):     for item in reversed(lst):         print(item) print_reverse_order(list)"},{"instruction":"Write a code snippet that returns the root of a given binary tree. tree =          3       /        4      5   /         3       6    7","output":"def root(tree):     if not tree:         return None     return tree.val"},{"instruction":"Write a function in C to find the corresponding letter for a given prime number. int prime_no = 11;","output":"char findLetterforPrime(int prime_no) {     char character;       switch (prime_no)     {         case 2:             character = 'A';             break;         case 3:             character = 'B';             break;         case 5:             character = 'C';             break;         case 7:             character = 'D';             break;         case 11:             character = 'E';             break;         default:             printf(\\" prime number is not in list\\");     }     return character; }"},{"instruction":"Edit the following for loop to add a comment before each iteration. for i in range(10):     print(i)","output":"for i in range(10):     # loop iteration: i =     print(i)"},{"instruction":"Write a code snippet in SQL to show the town fields in a table called \\"library.","output":"SELECT town  FROM library;"},{"instruction":"Write a code snippet in Java that sorts a given array in ascending order.","output":"public static void sortAscending(int[] arr) {      int n = arr.length;      for (int i = 0; i < n-1; i++)          for (int j = 0; j < n-i-1; j++)              if (arr[j] > arr[j+1])              {                  int temp = arr[j];                  arr[j] = arr[j+1];                  arr[j+1] = temp;              }  }"},{"instruction":"Edit the following Python code to add error handling for invalid inputs. def area_triangle(base,height):     p","output":"def area_triangle(base,height):     if base == 0 or height == 0:         raise ValueError(\\"Base and height should not be zero.\\")     else:         return 0.5 * base * height"},{"instruction":"Create a C++ code to display the following pattern. x xxx xxxxx xxxxxxx","output":"#include <iostream>  using namespace std;     // Function to demonstrate printing pattern  void triangle(int n)  {      // Outer loop to handle number of rows      // n in this case      for (int i=0; i<n; i++)      {          // Inner loop to handle number of columns          // values changing acc. to outer loop          for (int j=0; j<=i; j++ )          {              // Printing stars              cout << \\"x\\";          }             // Ending line after each row          cout << \\"n\\";      }  }     // Driver Function  int main()  {      int n = 4;      triangle(n);      return 0;  }"},{"instruction":"Create a function that prints out the Pythagorean theorem in Python.","output":"def pythagoras_theorem():     \\"\\"\\"Print the Pythagorean theorem in Python.\\"\\"\\"     print(\\"The Pythagorean theorem states that the sum of the squares of the two sides of a right triangle is equal to the square of the hypotenuse.\\")"},{"instruction":"Create an array that contains the numbers from 0 to 10 in Python.","output":"arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"},{"instruction":"Create a new div element and add it to the DOM with id \\"main-container\\".","output":"let myDiv = document.createElement('div'); myDiv.id = \\"main-container\\"; document.body.appendChild(myDiv);"},{"instruction":"Write a Java method to transform a String input into a String array with each element the length of 4. String input = \\"HelloWorld\\";","output":"public static String[] stringToArray(String input) {     String[] stringArray = new String[input.length()/4];     int count = 0;     for (int i = 0; i < input.length(); i += 4) {         stringArray[count] = input.substring(i, i+4);         count++;     }     return stringArray; }"},{"instruction":"Write a JavaScript function to find the cube root of a number. let num = 8;","output":"function cubeRoot(num) {   return Math.pow(num, 1/3); }"},{"instruction":"Create a SQL query to get the number of records from the table \\"users\\" where the value of the \\"active\\" column is True.","output":"SELECT COUNT(*) AS num_of_active  FROM users  WHERE active = true;"},{"instruction":"Create a jQuery function that animates an element's background color from red to green over 3 seconds.","output":"(\\"#element\\").animate({     backgroundColor: \\"green\\"   }, {     duration: 3000,     easing: \\"linear\\" });"},{"instruction":"Edit the following SQL statement to select all rows from the \\"users\\" table where the \\"country_id\\" is 2 and the \\"level\\" is greater than 5. SELECT * FROM users;","output":"SELECT * FROM users WHERE country_id = 2  AND level > 5;"},{"instruction":"Create a CSS style to make all headings (h1, h2, h3, h4, h5, h6) bold and blue.","output":"h1, h2, h3, h4, h5, h6{     font-weight: bold;     color: blue; }"},{"instruction":"Write a function in Java that takes an input string and changes the case of each letter to its opposite (i.e. upper case to lower case and vice versa). String input = \\"Hello World\\";","output":"public static String changeCase(String input) {     StringBuilder outputString = new StringBuilder();     for (int i = 0; i < input.length(); i++) {         char c = input.charAt(i);         if (Character.isUpperCase(c)) {             outputString.append(Character.toLowerCase(c));         } else {             outputString.append(Character.toUpperCase(c));         }     }     return outputString.toString(); }"},{"instruction":"Create a function in Python that takes an input list of strings and returns the longest string in the list. list = [\\"cat\\", \\"dog\\", \\"elephant\\"]","output":"def longest_string(list):   longest_word = \\"\\"   for word in list:     if len(word) > len(longest_word):       longest_word = word   return longest_word"},{"instruction":"Categorize a given dataset into three classes [1, 2, 3, 4, 5]","output":"Class 1: [1] Class 2: [2, 3] Class 3: [4, 5]"},{"instruction":"Submit a valid Ruby program to remove special characters from a given string Hello#@World!","output":"def remove_special_chars(str)    str = str.gsub(/[^a-zA-Z0-9s]/, '')    return str end puts remove_special_chars(\\"Hello#@World!\\")"},{"instruction":"Edit the following class to make sure any variables created as part of the class cannot be modified by the program class Example:     def __init__(self, x, y):         self.x = x         self.y = y","output":"class Example:     def __init__(self, x, y):         self.__x = x         self.__y = y     @property     def x(self):         return self.__x     @x.setter     def x(self, val):         raise AttributeError(\\"Cannot modify x\\")     @property     def y(self):         return self.__y     @y.setter     def y(self, val):         raise AttributeError(\\"Cannot modify y\\")"},{"instruction":"Given a function, create a program to identify whether the output is equal to 1, 0 or -1. def func(x):     if x < 0:         return -1     elif x == 0:         return 0     else:         return 1","output":"def func_val(x):     result = func(x)     if result == -1:         return -1     elif result == 0:         return 0     else:         return 1"},{"instruction":"Sort the following array in reversed order: [3, 2, 1, 5, 4, 6] [3, 2, 1, 5, 4, 6]","output":"[6, 5, 4, 3, 2, 1]"},{"instruction":"Create a function in Python that takes as arguments two strings and returns a boolean if both strings are equal or not. string1 = \\"Hello\\" string2 = \\"World","output":"def is_equal(str1, str2):     if str1 == str2:         return True     else:         return False"},{"instruction":"Explain the differences between Stacks and Queues in computer science.","output":"Stacks are data structures that operate in a Last In First Out (LIFO) order, while Queues are data structures that operate in a First In First Out (FIFO) order. In a stack, items can only be added or removed from the top, while in a queue, items can be added at the front and removed from the rear. Additionally, stack elements have direct access to the top element, while queue elements are only able to access the front element."},{"instruction":"Create a program to replace a given string with new text. Old Text: \\"Hello World\\"  New Text: \\"Hello Universe","output":"public static String replaceText(String old, String newText) {   return old.replace(old, newText); }"},{"instruction":"What are the benefits of using React for web development?","output":"The benefits of using React for web development include increased efficiency, increased modularity, and easier maintenance due to its component-based architecture. React allows for quick loading times and scalability. React also allows developers to create reusable UI components. Finally, React’s large community makes debugging and finding resources for development easier."},{"instruction":"You need to generate a random four-digit number and return it as an integer.","output":"import random def generateRandomNumber():     return random.randint(1000,9999)"},{"instruction":"Correct this function so that it returns a correct multiplication table. def multiplication_table(number):     for row in range(1, number + 1):         output = ''         for column in range(1, number + 1):             output = output + '%d*%d=%dt' % (row, column, row * row)         print(output)","output":"def multiplication_table(number):     for row in range(1, number + 1):         output = ''         for column in range(1, number + 1):             output = output + '%d*%d=%dt' % (row, column, row * column)         print(output)"},{"instruction":"Use the given data to print out the average of the numbers. [1, 7, 8, 10]","output":"def calculateAverage(nums):     average = 0     for num in nums:         average += num     return average / len(nums) print(calculateAverage([1,7,8,10])) # Output: 6.5"},{"instruction":"You are given a string, output a new string with its vowels removed. \\"Hello World","output":"def removeVowels(s):     vowels = 'aeiouAEIOU'     s_without_vowel = ''     for c in s:         if c not in vowels:             s_without_vowel += c     return s_without_vowel print(removeVowels(\\"Hello World\\")) # Output: Hll Wld"},{"instruction":"mplement a basic calculator that takes an equation and outputs the result. \\"3+3","output":"def calculator(equation):     result = eval(equation)     return result print(calculator(\\"3+3\\")) # Output: 6"},{"instruction":"mplement a stack to store and retrieve items in last-in first-out order.","output":"class Stack:     def __init__(self):         self.items = []          def push(self, item):         self.items.append(item)          def pop(self):         return self.items.pop()          def peek(self):         return self.items[len(self.items)-1]          def size(self):         return len(self.items)"},{"instruction":"Construct a machine learning model in Python for the given dataset. The dataset contains information on the daily income of 500 students. You should be able to predict the income of a student based on the given characteristics.","output":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression # load dataset dataframe = pd.read_csv('student_income_data.csv') # split into input X and output y X = dataframe.iloc[:,:-1] y = dataframe.iloc[:,-1] # split data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25) # create model model = LinearRegression() # train model model.fit(X_train,y_train) # test model predictions = model.predict(X_test)"},{"instruction":"Compare the performance of two different neural network architectures. Two convolutional neural networks (CNNs) with different depth of layers have been trained on the MNIST dataset.","output":"# evaluate the performance on the test dataset from sklearn.metrics import accuracy_score # load the test dataset X_test, y_test = load_dataset() # evaluate each model y_pred_1 = model_1.predict(X_test) acc_1 = accuracy_score(y_test, y_pred_1) y_pred_2 = model_2.predict(X_test) acc_2 = accuracy_score(y_test, y_pred_2) # compare the performance if acc_1 > acc_2:     print('Model 1 has better performance than Model 2.') elif acc_2 > acc_1:     print('Model 2 has better performance than Model 1.') else:     print('The performances of the two models are equal.')"},{"instruction":"Construct an algorithm in pseudocode to sort a given array of numbers. [3, 1, 4, 5, 7, 2]","output":"sort(array A[]):   for i = 1 to n-1   begin     min = i     for j = (i + 1) to n       if A[j] < A[min]         min = j     swap the value at index min and index i   end   return A[]"},{"instruction":"Construct a SQL query to get the name and age of the youngest student","output":"SELECT name, age FROM students ORDER BY age asc LIMIT 1;"},{"instruction":"Create a function in R that calculates the mean of a given dataset [4.6, 8.9, 5.4, 7.2]","output":"mean <- function(data) {   sum = 0   for (i in data) {     sum = sum + i   }   mean = sum / length(data)   return(mean) }"},{"instruction":"Compute the cross-entropy loss of a given classification problem Ground truth: [0, 0, 0, 1, 1] Predicted: [0, 0, 0, 0.6, 0.8]","output":"-1.2885609570312778"},{"instruction":"Write a sample program that performs text classification","output":"import pandas as pd import numpy as np from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.linear_model import LogisticRegression # load dataset dataframe = pd.read_csv('text_classification_data.csv') # convert to vectors vectorizer = TfidfVectorizer() vectors = vectorizer.fit_transform(dataframe['text']) # split data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(vectors, dataframe['label'], test_size = 0.25) # create model model = LogisticRegression() # train model model.fit(X_train,y_train) # test model predictions = model.predict(X_test)"},{"instruction":"Write a function in Python to calculate the compound interest given the principal amount, rate of interest and number of years. p = 1000 r = 0.10 n = 3","output":"def calc_comp_int(principal, rate, num_years):     return principal * (1 + rate) ** num_years - principal print(calc_comp_int(p, r, n))"},{"instruction":"Change the following string to lowercase using C++. \\"THIS STRING WILL BE LOWERCASED","output":"#include <bits/stdc++.h> using namespace std;   int main() {        string s = \\"THIS STRING WILL BE LOWERCASED\\";     transform(s.begin(), s.end(), s.begin(),               [](unsigned char c) { return std::tolower(c); });     cout << s;     return 0; }"},{"instruction":"Suggest a more descriptive name for the following method. def get_data()","output":"def retrieve_data_from_database():"},{"instruction":"Given a list of numbers and a search value, check if the value is present in the list and return a boolean value. nums = [2, 4, 6, 8, 10] value = 6","output":"def search_list(nums, value):     for num in nums:         if num == value:             return True     return False nums = [2, 4, 6, 8, 10] value = 6 result = search_list(nums, value) print(result) # Output: True"},{"instruction":"Design a function to calculate the distance between two points in a 3-D space. p1 = (3, 2, 1) p2 = (5, 4, 6)","output":"def get_distance(p1, p2):     (x1, y1, z1) = p1     (x2, y2, z2) = p2     dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5     return dist p1 = (3, 2, 1) p2 = (5, 4, 6) distance = get_distance(p1, p2) print(distance) # Output: 5.196152422706632"},{"instruction":"Create a class that can be used to generate random numbers between a given range.","output":"class RandomNumberGenerator:     def __init__(self, min_num, max_num):         self.min_num = min_num         self.max_num = max_num          def get_random_number(self):         return random.randint(self.min_num, self.max_num)"},{"instruction":"Write a type annotation for a function that takes an integer as an input and returns a boolean.","output":"def func(num: int) -> bool:     ..."},{"instruction":"Create a class for a Rectangle with attributes for its length and width, and methods to calculate its area, perimeter and diagonal.","output":"class Rectangle:     def __init__(self, length, width):         self.length = length         self.width = width          def area(self):         return self.length * self.width          def perimeter(self):         return (2*self.length) + (2*self.width)          def diagonal(self):         return (self.length**2 + self.width**2)**0.5"},{"instruction":"Compile a C program to check for memory leaks. #include <stdio.h> int main() {   int* a = (int*)malloc(sizeof(int));   return 0; }","output":"g++ -g -o program program.c -lm -lstdc++ && valgrind --leak-check=yes ./program"},{"instruction":"Create SQL code to query demographic data from a database. SELECT Name, Age, Gender, Location FROM User_table","output":"SELECT Name, Age, Gender, Location FROM User_table WHERE Age > 18 AND Gender = 'Female'"},{"instruction":"Generate HTML code to display an interactive button.","output":"<button onclick=\\"alert('Button was clicked!');\\">Click Me!</button>"},{"instruction":"Construct a Java class to execute a binary search. public class BinarySearch { }","output":"public class BinarySearch {         int binarySearch(int arr[], int l, int r, int x) {          if (r >= l) {              int mid = l + (r - l) / 2;                 if (arr[mid] == x)                  return mid;                 if (arr[mid] > x)                  return binarySearch(arr, l, mid - 1, x);                 return binarySearch(arr, mid + 1, r, x);          }          return -1;      }  }"},{"instruction":"Construct a Node program to merge two arrays.","output":"const mergeArray = (arr1, arr2) => {   return [...arr1, ...arr2]; };"},{"instruction":"Write an R code to identify DNA motifs of a given gene sequence. sequence <- c(\\"AAATACTAGCTGAGTTTGTACGTATGGGCC\\")","output":"motifs <- findMotifs(sequence) print(motifs)"},{"instruction":"Create CSS code to design an expandable menu.","output":".menu > ul {     list-style: none;     padding: 0;     margin: 0;   }   .menu > ul > li {     float: left;   }   .menu li {     position: relative;   }   .menu > ul > li > ul {     position: absolute;     display: none;   }   .menu > ul > li:hover > ul {     display: block;   }"},{"instruction":"Generate a Perl script to check for palindromes.","output":"sub check_palindrome {   my (str) = @_;   my reverse = reverse str;   if(str eq reverse){     return 1;     }   else{     return 0;   } }"},{"instruction":"Construct a C# class to output the prime numbers up to n.","output":"class PrimeNumber {     public static void Main()     {         Console.Write(\\"Enter a number: \\");         int n = int.Parse(Console.ReadLine());           for (int i = 2; i <= n; i++)         {             if (CheckPrime(i))             {                 Console.Write(i + \\" \\");             }         }         Console.WriteLine();     }       public static bool CheckPrime(int numberToCheck)     {         int boundary = (int)Math.Floor(Math.Sqrt(numberToCheck));           if (numberToCheck == 1) return false;         if (numberToCheck == 2) return true;           for (int i = 2; i <= boundary; ++i)         {             if (numberToCheck % i == 0) return false;         }           return true;     } }"},{"instruction":"Reorganize the following code in a more efficient way using Python. def get_student_avg(students):     for student in students:         sum = 0         for grade in student['grades']:             sum += grade         avg = sum / len(student['grades'])         student['avg'] = avg","output":"def get_student_avg(students):     for student in students:         student['avg'] = sum(student['grades']) / len(student['grades'])"},{"instruction":"Correct any errors in the following code. def get_student_avg (studentss):     for stdent in studentss:         sum = 0         for grade in stdent['grades']:             sum += grade         avg = sum // len studnet['grades']         stdent['avg']= avg","output":"def get_student_avg (studentss):     for student in studentss:         sum = 0         for grade in student['grades']:             sum += grade         avg = sum // len(student['grades'])         student['avg']= avg"},{"instruction":"Suggest a sorting algorithm to sort a list in ascending order. my_list = [3, 8, 5, 4, 1, 9, 7]","output":"The best sorting algorithm to use for this task would be the Bubble Sort algorithm. In the Bubble Sort algorithm, the list is looped through and elements are compared to each other and swapped if they are not in the correct order. This process is repeated until the list is sorted."},{"instruction":"Suggest a linear search algorithm for the following task. Given a list of numbers, search for the number 6 in the list and return its position.","output":"The best linear search algorithm to use for this task is the linear search algorithm. In the linear search algorithm, the list is looped through and each element is compared to the target. If the item is found, its position is returned."},{"instruction":"Sort the given list using the quicksort algorithm. my_list = [8, 5, 3, 9, 6, 1]","output":"def quick_sort(arr):   if len(arr) <= 1:     return arr   else:     pivot = arr[0]     left, right = [], []     # pivot     for x in arr[1:]:       if x > pivot:         right.append(x)       else:         left.append(x)     # concatenate     return quick_sort(left) + [pivot] + quick_sort(right) quick_sort(my_list)"},{"instruction":"Write a Bash script to run multiple commands","output":"#!/bin/bash # A bash script which will run all the commands given below # command 1 command 1 # command 2 command 2 # command 3 command 3 # command 4 command 4 etc..."},{"instruction":"Print the numbers in a Fibonacci series with a loop.","output":"# Fibonacci Series using a loop # the first two numbers of the Fibonacci series is 0 and 1 a = 0 b = 1 print(a) print(b) for i in range(10):     c = a + b     a = b     b = c     print(c)"},{"instruction":"Create an HTML table","output":"<table>   <tr>     <td>Name</td>     <td>Age</td>     <td>Hobby</td>   </tr>   <tr>     <td>John</td>     <td>28</td>     <td>Travelling</td>   </tr>   <tr>     <td>Amanda</td>     <td>27</td>     <td>Reading</td>   </tr> </table>"},{"instruction":"mplement a function to solve a given equation. 4x + 2y = 32","output":"def solve_equation(x, y):     A = 4     B = 2     C = 32          y = (C - A*x)/B     return y"},{"instruction":"Edit the given code to fix the bug def calculate_tax(price): tax_rate = 0.20 total = price + (price * tax_rate) return total","output":"def calculate_tax(price):     tax_rate = 0.20     total = price + (price * tax_rate)     return round(total, 2)"},{"instruction":"Generate a 5-dimensional array using the numpy library","output":"import numpy as np arr = np.zeros((5,5,5,5,5))"},{"instruction":"Add the following lines after the 2nd line in the given java program public class Calculator {     public static void main(String args[]) {         int a = 10;         int b = 20; Add the following lines int c = a + b; System.out.println(\\"Sum : \\"+c);","output":"public class Calculator {     public static void main(String args[]) {         int a = 10;         int b = 20;         int c = a + b;         System.out.println(\\"Sum : \\"+c);     } }"},{"instruction":"Generate an appropriate python code snippet to capitalize all elements of an array called A. A = ['welcome', 'to', 'my', 'website']","output":"A = ['welcome', 'to', 'my', 'website'] A = [x.capitalize() for x in A] print(A)"},{"instruction":"Write a code snippet to count the occurrence of number 4 in an array called arr. arr = [1, 4, 2, 4, 5]","output":"arr = [1, 4, 2, 4, 5] count = 0 for num in arr:     if num == 4:         count += 1 print(count)"},{"instruction":"Generate a Pandas code snippet to calculate the averages of the elements of each row in the given dataframe? dataframe = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])","output":"import pandas as pd    dataframe = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])   dataframe['avg'] = dataframe.mean(axis=1) print(dataframe)"},{"instruction":"Edit the following code snippet to make it calculate the median instead of the average? x = [1,2 ,3, 4, 5]","output":"x = [1,2 ,3, 4, 5] import statistics median = statistics.median(x) print(median)"},{"instruction":"Generate a code snippet to perform an element-wise multiplication of two NumPy arrays named A and B. A = [1,2,3] B = [4,5,6]","output":"import numpy as np   A = np.array([1,2,3]) B = np.array([4,5,6])   C = np.multiply(A, B) print(C)"},{"instruction":"Generate a code snippet to print out the top 3 highest numbers from an array A. A = [9, 4, 18, 24, 7, 22, 11]","output":"A = [9, 4, 18, 24, 7, 22, 11]   A.sort(reverse=True)   top_3 = A[:3] print(top_3)"},{"instruction":"Subtract two matrices named A and B and store the result in matrix C? A = [[1, 2, 3],      [4, 5, 6],      [7, 8, 9]]    B = [[10, 11, 12],      [13, 14, 15],      [16, 17, 18]]","output":"import numpy as np   A = np.array([[1, 2, 3],               [4, 5, 6],               [7, 8, 9]])   B = np.array([[10, 11, 12],               [13, 14, 15],               [16, 17, 18]])   C = A - B print(C)"},{"instruction":"Generate a code snippet to sort the students alphabetically by their last name in the following list? students = [('John', 'Doe'), ('Max', 'Smith'), ('Alice', 'Brown')]","output":"students = [('John', 'Doe'), ('Max', 'Smith'), ('Alice', 'Brown')] students.sort(key= lambda x: x[1]) print(students)"},{"instruction":"Select the most suitable approach for compressing a given list of strings.","output":"Using Huffman Coding."},{"instruction":"Write the SQL query to delete all tables from a given database. database: testdb","output":"DROP DATABASE testdb;"},{"instruction":"Suggest the best way to implement an AI system for user authentication.","output":"Using a combination of facial recognition and voice recognition."},{"instruction":"Suggest the most appropriate approach to train a neural network model with a large dataset.","output":"Using mini-batch gradient descent."},{"instruction":"Suggest a way to edit the following text data using NLP techniques text = \\"This is an exmaple","output":"Using NLP techniques, the text can be edited in various ways such as lemmatisation, stemming and tokenisation. For example, the text can be tokenized and lemmatized so that the words \\"example\\" and \\"exmaple\\" are both converted to the root word \\"example\\"."},{"instruction":"Write a Python program to exchange the values of two different variables. x = 10  y = 20","output":"x, y = y, x"},{"instruction":"Select the best approach to process large amount of data in parallel.","output":"Using MapReduce."},{"instruction":"dentify the most suitable language to create  a web application.","output":"JavaScript."},{"instruction":"Create a class in Java called Student that stores four pieces of data: name, id, major, and gpa.","output":"class Student {         // data members      String name;      int id;      String major;      double gpa;         // constructors      Student(String name, int id, String major, double gpa) {           this.name = name;          this.id = id;          this.major = major;          this.gpa = gpa;      }            // method 1      public String getName()      {          return this.name;      }         // method 2      public int getId()      {          return this.id;      }         // method 3      public String getMajor()      {          return this.major;      }         // method 4      public double getGPA()      {          return this.gpa;      }         // method 5      public void setName(String name)      {          this.name = name;      }         // method 6      public void setId(int id)      {          this.id = id;      }         // method 7      public void setMajor(String major)      {          this.major = major;      }         // method 8      public void setGPA(int gpa)      {          this.gpa = gpa;      }  }"},{"instruction":"Create an array in Python with 6 elements and print the last three elements.","output":"my_array = [1, 2, 3, 4, 5, 6]  #Print the last three elements print (my_array[-3:])  #Output:[4, 5, 6]"},{"instruction":"Generate an array in JavaScript with two elements of type boolean.","output":"let booleanArray = [true, false];"},{"instruction":"Create a random matrix using NumPy where the elements have 2 decimal places.","output":"import numpy as np  # Create a 2×2 matrix  random_matrix = np.random.rand(2,2)  # Round to two decimal places  np.around(random_matrix, decimals=2)"},{"instruction":"Modify the following SQL statement to select only the rows with prices greater than 100. SELECT * FROM products;","output":"SELECT *  FROM products  WHERE price > 100;"},{"instruction":"Determine the fraction of numbers in this list that are multiples of 3: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].","output":"fraction = 3/10 = 0.3"},{"instruction":"Create a dictionary in Python mapping the following characters to numbers: A = 1, B = 2, C = 3","output":"my_dict = {      'A': 1,      'B': 2,      'C': 3 }"},{"instruction":"Classify the following sentence as positive, negative, or neutral: \\"I am so happy to be here.","output":"Positive"},{"instruction":"Build a function in Python that takes a string as the input and prints each letter of the string on a separate line.","output":"def print_letters(string):      for letter in string:          print(letter)"},{"instruction":"Sort the following array in descending order using JavaScript:[\\"cat\\", \\"dog\\", \\"fish\\", \\"elephant\\"].","output":"my_arr = [\\"cat\\", \\"dog\\", \\"fish\\", \\"elephant\\"]; my_arr.sort().reverse(); console.log(my_arr); //prints [\\"elephant\\", \\"fish\\", \\"dog\\", \\"cat\\"]"},{"instruction":"Modify the following C++ code to capitalize the uppercase letters in a given string. #include <iostream>  #include <string>  int main()  {      std::string str = \\"hello world\\";      std::cout << str;  return 0;  }","output":"#include <iostream>  #include <string>  #include <algorithm> int main()  {      std::string str = \\"hello world\\";      //Convert to uppercase letters     std::transform(str.begin(), str.end(), str.begin(), ::toupper);          std::cout << str; return 0;  }"},{"instruction":"w does the break statement work in a for loop?","output":"The break statement is used to break out of a loop, including a for loop. When a break statement is encountered inside a loop, it causes the loop to stop executing and control to be transferred outside the loop. For example, in a for loop, if the break statement is encountered, the loop is terminated immediately, and the program control will be transferred outside the loop."},{"instruction":"Generate a timestamp based on the current date.","output":"import time timestamp = int(time.time()) print(timestamp) # 1598059584"},{"instruction":"Write a Python program to find all numbers divisible by 5 but not a multiple of 7, between 1500 and 2700 (both included).","output":"result = [] for i in range(1500, 2701):   if i % 5 == 0 and i % 7 != 0:     result.append(i) print(result) # [1505, 1540, 1575, 1610, 1645, 1680, 1715, 1750, 1785, 1820, 1855, 1890, 1925, 1960, 1995, 2030, 2065, 2100, 2135, 2170, 2205, 2240, 2275, 2310, 2345, 2380, 2415, 2450, 2485, 2520, 2555, 2590, 2625, 2660, 2695]"},{"instruction":"Debug the following PHP code which tries to connect to a remote host. host = \\"myserver.com\\"; user = \\"admin\\"; password = \\"123456\\"; conn = new mysql_connect(host,user,password); if(!conn)    die(\\"Unable to connect!\\");","output":"host = \\"myserver.com\\"; user = \\"admin\\"; password = \\"123456\\"; // Connecting, selecting database conn = mysql_connect(host, user, password) or die('Could not connect: ' . mysql_error());"},{"instruction":"Generate a Python dictionary that contains student information. Name: John; Age: 22; Grade: A;","output":"{  \\"name\\": \\"John\\",  \\"age\\": 22,  \\"grade\\": \\"A\\" }"},{"instruction":"Design a SQL query to select the top 5 movies based on the number of 'likes'. Table Name: Movies Columns:  Movie_ID, Movie_Name, Like","output":"SELECT Movie_Name  FROM Movies ORDER BY Likes LIMIT 5;"},{"instruction":"Classify the given sentence into either declarative or interrogative sentence. John is getting ready for the test.","output":"Declarative sentence."},{"instruction":"Write a JavaScript code that gets the URL of a web page.","output":"var url = window.location.href;"},{"instruction":"Edit the following C code so it runs correctly. #include <stdio.h> int main(){     int score = 80;     printf(\\"Your final score is: %i; return 0; }","output":"#include <stdio.h> int main(){     int score = 80;     printf(\\"Your final score is: %i\\", score);     return 0; }"},{"instruction":"Design a SQL query to find the names of the employees who have an age of 30 or more. Table Name: Employees Columns:  Employee_ID, Last_Name, Age","output":"SELECT Last_Name  FROM Employees WHERE Age >= 30;"},{"instruction":"Generate XML code for the following. Student Name: John Student ID: 123456 Course: Computer Science","output":"<studentName>John</studentName> <studentID>123456</studentID> <course>Computer Science</course>"},{"instruction":"Explain how expression-oriented programming works in Java.","output":"Expression-oriented programming is a programming paradigm where all commands are based on expressions. In Java, expression-oriented programming is used with Java Lambda Expressions, where an expression is executed by passing the command inside parentheses and executing that expression in the context of the method. This approach enables the expression to be executed immediately, as opposed to the traditional approach of declaring a variable, calling a method, and assigning a value to it."},{"instruction":"Evaluate the given value for the expression \\"3 * 5 + 4 / 2\\".","output":"17."},{"instruction":"Explain how to use the built-in bubble sort function for sorting a given list of numbers. [4, 9, 0, 3, 5, 7]","output":"The built-in bubble sort function can be used to sort the given list of numbers. The algorithm starts from the beginning of the list and compares two adjacent elements. If the first number is larger than the second number, they are swapped. This process is repeated until the end of the list is reached. After one iteration, the largest element is placed at the end of the list. This process is then repeated for the remaining elements until the list is completely sorted. To use the Python built-in bubble sort function, simply call the bubble sort on the list, and it will return the sorted list."},{"instruction":"Convert a given list into a dictionary in Python [\\"apple\\", \\"banana\\", \\"cherry\\"]","output":"dict = {     \\"apple\\": 0,     \\"banana\\": 1,     \\"cherry\\": 2 }"},{"instruction":"Define a function to search for a specific element in an array [5, 10, 2, 4, 7]","output":"def search(arr, e):     for i in range(len(arr)):         if (arr[i] == e):             return i     return -1"},{"instruction":"Explain the concept of an ASCII table","output":"An ASCII table is a table that shows the correspondence between characters and symbols commonly used in computers or electronic devices. It consists of a set of codes that represent unique characters, such as letters, numbers, and symbols. Each code is represented by a number between 0 and 127 and is referred to by its decimal, octal, hexadecimal, or binary numbers. It is used to store, transmit, and display characters in different computer systems."},{"instruction":"Code a solution that prints out the string \\"Hello, [name]!\\" using string interpolation in JavaScript.","output":"const name = \\"John Doe\\"; console.log(\`Hello, {name}!\`);"},{"instruction":"Rewrite the following JavaScript code to make it compatible with older browsers. let colors = [\\"red\\", \\"blue\\", \\"green\\"];","output":"var colors = [\\"red\\", \\"blue\\", \\"green\\"];"},{"instruction":"Write a JavaScript function that takes an array of numbers and returns an array containing only the even numbers.","output":"function get_even_numbers(nums) {   return nums.filter(n => n % 2 == 0); }"},{"instruction":"Fill up the missing value in the given JSON array. [19, 10, 22, 25, ??, 4, 100]","output":"[19, 10, 22, 25, 15, 4, 100]"},{"instruction":"What are the two basic components of a computer system?","output":"The two basic components of a computer system are hardware and software."},{"instruction":"Write a JavaScript function to determine if a given string contains at least one upper case letter.","output":"function hasUpperCase(str) {     return str.split('').some(function(l) {         return l.charCodeAt(0) >= 65 && l.charCodeAt(0) <= 90;     }); }"},{"instruction":"Rewrite the following code using the try-catch statement if (num!=0)   result = 1/num; else   result = 0;","output":"try {   result = 1 / num; } catch (err) {   result = 0; }"},{"instruction":"You are given a string s, output the longest substring with no repeating characters. s = \\"abcabcbb","output":"def longest_substring(s):     length = len(s)     current_length = 1     last_occur= {s[0]:0 }     max_length = 0     i = 0      while i < length:         if(s[i] in last_occur):             current_length = i - last_occur[s[i]]             if(current_length > max_length):                 max_length = current_length             last_occur[s[i]] = i         else:             last_occur[s[i]] = i             current_length += 1             if(current_length > max_length):                 max_length = current_length         i += 1     return max_length longest_substring(s) 3"},{"instruction":"Supply a CSS styling for the HTML structure in Task 2.","output":"<style>     body {          background-color: #fafafa;          font-family: sans-serif;      } </style>"},{"instruction":"Calculate the distance between two points (x1, y1) and (x2, y2). x1 = 5, x2 = 8 y1 = 3, y2 = 12","output":"def calculate_distance(x1, x2, y1, y2):     return ((x2-x1)**2 + (y2-y1)**2)**0.5      calculate_distance(x1, x2, y1, y2) 7.615773105863909"},{"instruction":"You are given an array of integers and an integer k. Output one of the maximum sums of k consecutive elements in the array. array = [1, -3, 4, 5, 7, 8, -2, 9, -1] k=3","output":"def max_sum_k_elements(array, k):     max_sum = array[0]     for i in range(len(array)-k+1):         sum_temp = 0         for j in range(k):             sum_temp += array[i+j]         if sum_temp > max_sum:             max_sum = sum_temp     return max_sum max_sum_k_elements(array, k)"},{"instruction":"Fix the bug in the following Python script: def is_odd(x):   if x % 2 == 1     return True is_odd(5)","output":"def is_odd(x):   if x % 2 == 1:     return True   else:     return False is_odd(5)"},{"instruction":"Create a PHP class to represent a student with the following data fields: first name, last name, age, GPA.","output":"class Student {    public firstName;   public lastName;   public age;   public GPA;      public function __construct(firstName, lastName, age, GPA) {     this->firstName = firstName;     this->lastName = lastName;     this->age = age;     this->GPA = GPA;   } }"},{"instruction":"Write a JavaScript function that calculates the area of a triangle based on the three sides provided.","output":"function areaOfTriangle(a, b, c) {   var s = (a+b+c)/2;   return Math.sqrt(s*(s-a)*(s-b)*(s-c)); }"},{"instruction":"Using the following PHP array, output each name in its own bold tags. names = array(\\"John\\", \\"Sarah\\", \\"Paul\\");","output":"<?php   foreach(names as name){     echo \\"<b>\\".name.\\"</b><br>\\";   } ?>"},{"instruction":"Edit the following HTML code to allow Google Chrome to accurately render the page. <html> <head>   <title>My Webpage</title> </head> <body>   <table>   <tr>     <th>Column 1</th>     <th>Coloumn 2</th>   </tr> </body> </html>","output":"<html>   <head>     <title>My Webpage</title>   </head>   <body>     <table>       <tr>         <th>Column 1</th>         <th>Column 2</th>       </tr>     </table>   </body> </html>"},{"instruction":"Create a C program to print the numbers from 1 to 100, except for any number divisible by 3.","output":"#include <stdio.h> int main()  {      for (int i = 1; i <= 100; i++) {          if (i % 3 != 0)              printf(\\"%dn\\", i);      }      return 0;  }"},{"instruction":"Locate and erase all text nodes from the following XML string. <body>   <div>Hello world!</div>   <div>Good bye world!</div> </body>","output":"def delete_text_nodes(xml_string):    root = ET.fromstring(xml_string) # parse the XML string    elems = root.findall(\\".//text()\\") # find all text nodes    for e in elems:      e.getparent().remove(e) # remove the text node    return ET.tostring(root) # return the parsed XML string"},{"instruction":"Write a function to create a Nim game board with size n.","output":"def create_game_board(n):     # Create an empty list     game_board = []     # Loop based on number of rows     for i in range(n):         # Create an empty row         row = []         # Loop based on number of columns         for j in range(n):             # Add value 0 at each position             row.append(0)         # Add the row in empty list         game_board.append(row)     # Return the game board     return game_board"},{"instruction":"Create a dictionary with the keys of the students' IDs and their corresponding grades as the values. student_ids = [1000, 1001, 1002, 1003]  grades = [90, 80, 60, 50]","output":"def create_grade_dict(student_ids, grades):     # Create an empty dictionary     grade_dict = {}      # Loop based on length of student ids      for i in range(len(student_ids)):            # Add id as key and grade as value         grade_dict[student_ids[i]] = grades[i]      # Return the grade dictionary         return grade_dict"},{"instruction":"the given snippet of code, insert a line of code to display the sum of two numbers. int a = 10; int b = 20;","output":"int a = 10; int b = 20; System.out.println(\\"Sum of two numbers is \\" + (a + b));"},{"instruction":"Write a function in Python for sorting a given list of numbers. [29, 11, 46, 7, 248, 1724]","output":"def sort_list(numbers):   return sorted(numbers)"},{"instruction":"Create an HTML form for taking user input about his/her favorite ice-cream flavor.","output":"<form action=\\"/submit-flavor\\" method=\\"post\\">   <label>Choose your favorite flavor:</label>   <select name=\\"Flavor\\" required>     <option value=\\"Vanilla\\">Vanilla</option>     <option value=\\"Chocolate\\">Chocolate</option>     <option value=\\"Strawberry\\">Strawberry</option>     <option value=\\"Mint\\">Mint</option>     <option value=\\"Coffee\\">Coffee</option>   </select><br><br>   <input type=\\"submit\\" value=\\"Submit\\"> </form>"},{"instruction":"Create a function in R for converting a string into uppercase.","output":"upperCase <- function(string){   return(toupper(string)) }"},{"instruction":"Design a CSS style sheet for a given HTML table.","output":"table {   border: 1px solid black;   border-collapse: collapse; } th, td {   padding: 5px;   border: 1px solid black; }"},{"instruction":"Write a SQL query to find the name and the average value of all the transactions for each customer.","output":"SELECT customer.name, AVG(transaction.value)  FROM customer  INNER JOIN transaction ON customer.customer_id = transaction.customer_id GROUP BY customer.name"},{"instruction":"Generate a valid C++ code to implement a linked list with basic operations.","output":"#include<iostream> using namespace std; class Node { public:     int data;     Node* next; }; class LinkedList {     Node* head; public:     LinkedList(){           head = NULL;      }          void append(int data) {         Node* newNode = new Node;         newNode->data = data;         newNode->next = NULL;         if (head == NULL) {             head = newNode;         } else {             Node* temp = head;             while (temp->next != NULL) {                 temp = temp->next;             }             temp->next = newNode;         }     }     void deleteNodeByData(int data) {         if (head == NULL) {             return;         }         if (head->data == data) {             Node *temp = head;             head = head->next;             delete temp;             return;         }         Node *prev;         Node *curr = head;         while(curr != NULL && curr->data != data) {             prev = curr;             curr = curr->next;         }         prev->next = curr->next;         delete curr;         return;     }      void printList() {          Node* temp = head;         while (temp != NULL) {             cout << temp->data << endl;              temp = temp->next;          }      } };"},{"instruction":"Write a Bash shell script to print the unique elements in the given array. list=(1 2 3 1 4 2 5)","output":"#!/bin/bash list=(1 2 3 1 4 2 5) unique_list=() for num in {list[@]}; do     if [[ ! {unique_list[*]} =~ num ]]; then         unique_list+=(num)     fi done echo {unique_list[@]}"},{"instruction":"Generate a valid CSS rule to center align the text with the id \\"heading_text","output":"#heading_text {     text-align: center; }"},{"instruction":"Using the comment as a guide, edit the following CSS so that the text of the id 'heading_text' is green when an element of class 'selected' is active. .selected { \\tborder: 1px solid green; }","output":".selected { \\tborder: 1px solid green; } #heading_text {     color: green; } .selected:active #heading_text {     color: green; }"},{"instruction":"Create a HTML form and assign 'onSubmit' handler to it.","output":"<form onSubmit=\\"alert('Form submitted')\\">     <!-- Form Content -->     <input type=\\"submit\\" value=\\"Submit\\"> </form>"},{"instruction":"Design an SQL query to select the first and last name of all users who are over the age of 25.","output":"SELECT first_name, last_name FROM users WHERE age > 25"},{"instruction":"Sort the numbers in an ascending order in the given array. [4, 2, 9, 10, 5]","output":"[2, 4, 5, 9, 10]"},{"instruction":"Design a recursive algorithm in Python to calculate the sum of all elements in the given array [1, 3, 7, 9, 11]","output":"def recursive_sum(arr):     if len(arr) == 1:         return arr[0]     else:         return arr[0] + recursive_sum(arr[1:]) arr = [1, 3, 7, 9, 11] print(recursive_sum(arr))"},{"instruction":"Estimate the storage space of the given data type. Integer","output":"4 bytes"},{"instruction":"Write a JSP code snippet to instantiate an array object","output":"<%      int [] arr = new int[3];  %>"},{"instruction":"Edit the given C++ code for reversing a given string. #include <iostream> using namespace std; int main()  {     string str = \\"Hello World!\\";     cout << str;     return 0; }","output":"#include <iostream> #include <algorithm>  using namespace std; int main()  {     string str = \\"Hello World!\\";     reverse(str.begin(), str.end());     cout << str;     return 0; }"},{"instruction":"Search and delete a specific record from the given SQL table. Table Name: products Record ID: 12","output":"DELETE FROM products WHERE id = 12;"},{"instruction":"Compare the given two strings and return true if the strings match. String 1: hello String 2: hello","output":"if (str1 == str2)     return true; else     return false;"},{"instruction":"Assign values to the given array of length 10 and print it using a Java program.","output":"public class PrintArray {     public static void main(String[] args) {         int[] array = new int[10];         for (int i = 0; i < 10; i++) {             array[i] = i;         }         for (int i = 0; i < 10; i++) {             System.out.print(array[i] + \\" \\");         }     } }"},{"instruction":"Output the list of all prime numbers in the range of 2 to 50.","output":"[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]"},{"instruction":"Find the elements at even indexes in a given list. list = [1,3,4,7,10,21]","output":"[list[i] for i in range(0,len(list),2)]"},{"instruction":"Using SQLite, create a table from the following schema. created_at DATETIME, user_id INTEGER, username VARCHAR(64)","output":"CREATE TABLE table_name(created_at DATETIME, user_id INTEGER, username VARCHAR(64));"},{"instruction":"Construct a while loop to print out the numbers 5 to 15.","output":"num = 5 while num <= 15:   print(num)   num += 1"},{"instruction":"Suggest a LINQ query to retrieve fields \\"name\\" and \\"date\\" from an array of objects. [    {       \\"name\\":\\"John Doe\\",       \\"date\\":\\"1/1/2020\\"    },    {       \\"name\\":\\"Jane Doe\\",       \\"date\\":\\"1/2/2020\\"    },    {       \\"name\\":\\"John Smith\\",       \\"date\\":\\"1/3/2020\\"    } ]","output":"var data = array.Select(x => new { x.name, x.date });"},{"instruction":"Write a loop to extract the first three characters from each string in the list. letters = [\\"abcde\\", \\"fghij\\", \\"klmno\\"]","output":"extracted_letters = [] for letter in letters:     extracted_letters.append(letter[0:3])"},{"instruction":"Create a mapping of keys and values from a given dictionary. dict = {\\"a\\":1, \\"b\\":2, \\"c\\":3}","output":"mapping = {k:v for (k,v) in dict.items()}"},{"instruction":"Using JavaScript, suggest a program to update a key in a given object. object = {\\"name\\":\\"john\\"};","output":"object[\\"name\\"] = \\"JAMES\\";"},{"instruction":"Write a method in Python to append a given list to another list. list_1 = [1,2,3] list_2 = [4,5,6]","output":"list_1.extend(list_2)"},{"instruction":"Construct an IF-ELSE statement that test for a given condition and prints result based on that. to_test = 5","output":"if to_test < 10:    print(\\"Less than 10\\") else:   print(\\"Greater than 10\\")"},{"instruction":"Suggest an algorithm to sum values of pairs in an array. arr = [2, 3, 5, 7]","output":"def array_sum(arr):     sum = 0     for i in range(0, len(arr)-1, 2):         sum += arr[i] + arr[i+1]     return sum"},{"instruction":"Update the given CSS class statement. .red_box {      background-color: #AAFF00;      margin: 10px;       width: 20px; }","output":".red_box {      background-color: #AAFF00;      margin: 10px;      padding: 15px;     width: 20px;     border-radius: 10px; }"},{"instruction":"Get the output from the given code snippet on an array of integers. int[] numbers = {1,2,3,4,5,6,7,8,9}; int result = 0; for (int number : numbers) { result += number;  }","output":"45"},{"instruction":"Given a string of words, calculate the number of unique words. String str = \\"This is a test to see how many unique words are in this string\\";","output":"13"},{"instruction":"Place the missing parenthesis in the given algorithm. for i = 1 to n    if (A[i] == x)      start = i;      end = i + k – 1;","output":"for (i = 1; i <= n; i++)    if (A[i] == x)      start = i;      end = i + k - 1;"},{"instruction":"Read the code and figure out what will be the output of the program. int a = 15;  int b = 10;  int result = 0;  if(a == b){    result = a + b;  } else {  result = a * b;  }","output":"150"},{"instruction":"Generate the output for this simple algorithm with the given input. Input: array = [5, 4, 1, 2, 6] Output: 8","output":"The output of the algorithm is 8."},{"instruction":"Given an array of integers and an integer value, figure out whether the given value is present in the array or not. Array: [1, 2, 3, 4, 5, 6] Value: 7","output":"False"},{"instruction":"Create a Python program that takes two strings as input and finds their longest common subsequence. x = “ABCBDAB”  y = “BDCABA”","output":"def longestSubsequence(x, y):      m = len(x)      n = len(y)         L = [[None]*(n+1) for i in range(m+1)]          for i in range(m + 1):          for j in range(n + 1):              if i == 0 or j == 0 :                  L[i][j] = 0             elif x[i-1] == y[j-1]:                  L[i][j] = L[i-1][j-1]+1             else:                  L[i][j] = max(L[i-1][j] , L[i][j-1])         index = L[m][n]         lcs = [\\"\\"] * (index+1)      lcs[index] = \\"0\\"         i = m      j = n      while i > 0 and j > 0:             if x[i-1] == y[j-1]:              lcs[index-1] = x[i-1]              i-=1             j-=1             index-=1            elif L[i-1][j] > L[i][j-1]:              i-=1         else:              j-=1        print(\\"Longest common subsequence of \\" + x + \\" and \\" + y + \\" is \\"\\" + \\"\\".join(lcs) + \\"\\"\\")"},{"instruction":"Create a HTML function that changes the color of a given element.","output":"function changeColor(element, color){     element.style.backgroundColor = color; }"},{"instruction":"Create a Javascript class for a customer address book.","output":"class AddressBook {   constructor() {     this.contacts = [];   }   add(name, email, phone, relation) {     let contact = {       name,       email,       phone,       relation     };     this.contacts.push(contact);   }   delete(name) {     this.contacts = this.contacts.filter(contact => contact.name !== name);   }   list() {     console.log(this.contacts);   } }"},{"instruction":"Create a SQL query for finding all books written by a given author.","output":"SELECT books.*  FROM books  JOIN authors ON books.author_id = authors.id  WHERE authors.name = 'John Doe'"},{"instruction":"Write a PHP script to find the 5th element of an array. arr = array(14,32,25,19,14,89,130);","output":"<?php  arr = array(14,32,25,19,14,89,130); echo arr[4]; ?>"},{"instruction":"Write a Python function that accepts a list and returns the sum of the numbers present in the list. list = [1, 2, 3, 4, 5]","output":"def list_sum(lst):     result = 0     for num in lst:         result += num     return result"},{"instruction":"Using the HTML code below, add a link to an external web page. <h2>My First Web Page</h2> <p>This is my first web page.</p>","output":"<h2>My First Web Page</h2> <p>This is my first web page. <a href=\\"url-to-some-site\\">Learn More</a>.</p>"},{"instruction":"Determine the accuracy of a model trained on a given dataset.","output":"Accuracy of a model can be determined by computing its predictions against the actual values of the dataset, and then comparing the number of correct predictions with the total number of predictions. The accuracy of the model is then calculated as the proportion of correct predictions to the total number of predictions."},{"instruction":"Add an event listener to a given HTML element. <button type=\\"button\\" id=\\"clickMe\\">Click Me!</button>","output":"document.getElementById(\\"clickMe\\").addEventListener(\\"click\\", function() {   // Do something when the element is clicked });"},{"instruction":"w is memory managed in C++?","output":"C++ memory management is done through the use of pointers. Pointers are variables which hold the address of a variable or an object. Memory for variables and objects is allocated dynamically at run-time through the use of the new keyword, and deallocated dynamically through the use of the delete keyword. The C++ runtime library also comes with functions such as malloc() and free() for allocating and deallocating memory."},{"instruction":"Create an endpoint in Express.js which prints out the request path when hit by a POST request.","output":"app.post(\\"/\\", (req, res) => {     console.log(\\"Request path: \\" + req.path);     res.send(\\"\\"); });"},{"instruction":"Write a C# method for converting a string to its equivalent integer value.","output":"public static int StringToInt(string str) {     int result = 0;     Int32.TryParse(str, out result);     return result; }"},{"instruction":"Create a method in Java for encrypting a string using the Advanced Encryption Standard (AES).","output":"public static String AESEncrypt(String toEncrypt) throws Exception   {   \\tSecureRandom secureRandom = new SecureRandom();   \\tbyte[] keyBytes = new byte[16]; \\tsecureRandom.nextBytes(keyBytes);     \\tSecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes,\\"AES\\");        \\tCipher cipher = Cipher.getInstance(\\"AES\\"); \\tcipher.init(Cipher.ENCRYPT_MODE,secretKeySpec); \\tbyte[] encrypted = cipher.doFinal(toEncrypt.getBytes()); \\tString encryptedString = Base64.encodeBase64String(encrypted);      \\treturn encryptedString;   }"},{"instruction":"Write a function in JavaScript to sort an array of objects based on a selected key. [{\\"name\\":\\"John\\",\\"age\\":25},{\\"name\\":\\"Bob\\",\\"age\\":30}]","output":"function sortByKey(arr, key) {     return arr.sort((a, b) => (a[key] > b[key]) ? 1 : -1); }"},{"instruction":"Convert a JSON object to corresponding HTML table format. { \\"name\\": \\"John\\", \\"age\\": 31, \\"city\\": \\"New York\\"}","output":"<table>      <tr>         <td>Name</td>         <td>John</td>     </tr>     <tr>         <td>Age</td>         <td>31</td>     </tr>     <tr>         <td>City</td>         <td>New York</td>     </tr> </table>"},{"instruction":"Create a type-safe generic class in C# for storing objects of any data type.","output":"public class GenericStorage<T> {     public T Data {get; set;} }"},{"instruction":"Construct a MySQL query to select certain columns from the table \\"Books\\".","output":"SELECT title, author FROM Books;"},{"instruction":"Create a React component for displaying a simple profile card with the properties of name and age.","output":"const ProfileCard = (props) => {     return (         <div>             <h1>{props.name}</h1>             <p>Age: {props.age}</p>         </div>     ); }"},{"instruction":"Write a stored procedure in SQL for inserting records into the table \\"Students\\".","output":"CREATE PROCEDURE insert_students  (IN name VARCHAR(100), IN age INT)  BEGIN     INSERT INTO students (name, age)     VALUES (name, age);  END"},{"instruction":"Create a C++ class for managing a generic dictionary, in which keys and values can be of any data type.","output":"template <typename K, typename V> class Dictionary {     private:     std::map<K,V> m;           public:     const V& get(const K& key) const {         return m[key];     }       void set(const K& key, const V& value) {         m[key] = value;     } };"},{"instruction":"Write a SQL query to fetch records from the table Persons where the city is either Dallas or Chicago. Table name: Persons  Fields: ID, Lastname, Firstname, City","output":"SELECT ID, Lastname, Firstname, City FROM Persons WHERE City IN ('Dallas', 'Chicago');"},{"instruction":"Convert the following NFA (Non-Deterministic Finite Automaton) to DFA (Deterministic Finite Automaton). State S0, S1, S2  Transition Function: S0 - a -> S1 S0 - b -> S2 S1 - b -> S0 S1 - a -> S2 S2 - a -> S2 S2 - b -> S1 Start State S0, Final States S1 and S2","output":"State Q0, Q1, Q2  Transition Function: Q0 - a -> Q1 Q0 - b -> Q2 Q1 - a -> Q2 Q1 - b -> Q0 Q2 - a -> Q2 Q2 - b -> Q1 Start State Q0, Final States Q0 and Q2"},{"instruction":"Create a basic React web page with two app components.","output":"import React from \\"react\\"; const MainApp = () => (   <div>     <h1>My React App</h1>     <p>Welcome to my React App!</p>   </div> ); const SecondaryApp = () => (   <div>     <h2>Welcome to the second page</h2>     <p>This is the second page of my App!</p>   </div> ); ReactDOM.render(<MainApp />, document.getElementById('root')); ReactDOM.render(<SecondaryApp />, document.getElementById('root2'));"},{"instruction":"Design a Java program to display the numbers from 1 to 100 in a tabular format.","output":"public class Table {   public static void main(String[] args) {     for (int i = 1 ; i <= 100 ; i++){       System.out.println(i);       if (i % 10 == 0){         System.out.println(\\"\\");       }     }   } }"},{"instruction":"Design a basic HTML page with a header, footer and a body section.","output":"<html>  <head>   <title>My HTML Page</title>  </head>  <body>   <header>    <h1>My Website</h1>   </header>   <main>    This is the main content of the page.   </main>   <footer>    Copyright 20"},{"instruction":"Write a function in Java that takes an array of integers and sorts it in ascending order.","output":"public static void sortArray(int[] arr)  {      int n = arr.length;      for (int i = 0; i < n-1; i++)      {          int min_idx = i;          for (int j = i+1; j < n; j++)              if (arr[j] < arr[min_idx])                  min_idx = j;             int temp = arr[min_idx];          arr[min_idx] = arr[i];          arr[i] = temp;      }  }"},{"instruction":"Define an interface in Java.","output":"interface SampleInterface {      // abstract method      public void sampleMethod();  }"},{"instruction":"Find the number of days in a month given the year and month. Year: 2020 Month: April","output":"Given the year 2020 and month April, the number of days in April is 30."},{"instruction":"Write a function in Java to split a string into an array of substrings.","output":"public static String[] splitString(String s, String regex)  {      return s.split(regex);  }"},{"instruction":"Create a SQL query to list all the employees of a given department in descending order of their salary. Table name: \\"Employees\\" Columns: \\"emp_name\\", \\"emp_dept\\", \\"salary","output":"SELECT emp_name, emp_dept, salary FROM Employees  WHERE emp_dept = <dept_name>  ORDER BY salary DESC;"},{"instruction":"Create a C++ function to compute the area of a triangle with three given edges.","output":"float triangle_area(float a, float b, float c)  {      float s = (a + b + c) / 2;      return sqrt(s * (s - a) * (s - b) * (s - c));  }"},{"instruction":"Write a Java script to filter out repeat elements in an array. [1, 2, 3, 2, 4, 4, 1]","output":"let arr = [1, 2, 3, 2, 4, 4, 1];  let unique = [...new Set(arr)]; console.log(unique); // [1, 2, 3, 4]"},{"instruction":"Modify the given Java Program to generate the Fibonacci Series till provided number of terms. int n = 10;","output":"public class Fibonacci {      static int fib(int n)      {      if (n <= 1)         return n;      return fib(n-1) + fib(n-2);      }              public static void main (String args[])      {      int n = 10;      System.out.println(fib(n));      }  }"},{"instruction":"Write a JavaScript program to generate the following types of patterns of stars. * ** *** **** *****","output":"for (var i = 0; i < 5; i++){   var row = \\"\\";   for (var j = 0; j <= i; j++){     row += \\"*\\";   }   console.log(row); }"},{"instruction":"Create a C program that sorts an array in either ascending or descending order, depending on the user’s selection. [2, 1, 4, 3]","output":"#include <stdio.h> // Function to swap two elements void swap(int* a, int* b) {     int t = *a;     *a = *b;     *b = t; } // Bubble sort function  void bubbleSort(int arr[], int n, int order) {          int i, j;      for (i = 0; i < n-1; i++)                       for (j = 0; j < n-i-1; j++)              if (order == 0 && arr[j] > arr[j+1])                  swap(&arr[j], &arr[j+1]);              else if (order == 1 && arr[j] < arr[j+1])                 swap(&arr[j], &arr[j+1]);  } // Driver program int main() {     int arr[] = {2, 1, 4, 3};      int n = sizeof(arr)/sizeof(arr[0]);      int order;     printf(\\"Enter 0 for ascending order, 1 for descending: n\\");     scanf(\\"%d\\", &order);     bubbleSort(arr, n, order);     printf(\\"Sorted array: n\\");     for (int i=0; i < n; i++)         printf(\\"%d \\", arr[i]);     return 0; }"},{"instruction":"Modify the given Ruby program to find the sum of all odd numbers between a given range 1, 10","output":"def sum_odd_numbers(start, finish)   total = 0   (start..finish).each do |number|     total += number if number % 2 == 1    end   total end p sum_odd_numbers(1, 10)"},{"instruction":"Generate a correct assembly language code to execution the following Add two numbers and store the result in memory address 2000","output":"MOV R1, #3000   MOV R2, #3001   ADD R3, R1, R2   MOV 2000, R3"},{"instruction":"Write a HTML/CSS code to implement responsive design","output":"<html> <head> <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\"> <style>   @media only screen and (max-width: 600px) {     #wrap {       max-width: 100%;     }   } </style> </head> <body>  <div id=\\"wrap\\">    <!-- your content -->  </div> </body> </html>"},{"instruction":"Modify the given Swift code to compute the product of two numbers and print the result a = 5 b = 8","output":"var a = 5 var b = 8 var result = a * b print(\\"The product of a and b is: (result)\\")"},{"instruction":"Create a JavaScript function that checks if all elements of an array are equal or not. [1,2,3,1,2]","output":"function checkEquality(arr) {   return arr.every(val => val === arr[0]); } let arr = [1, 2, 3, 1, 2]; console.log(checkEquality(arr)); // false"},{"instruction":"Write a Ruby function to find the most frequently occurring elements in an array [3, 2, 1, 2, 4, 8, 7, 4]","output":"def find_most_frequent(arr)    hash = Hash.new(0)    arr.each do |num|      hash[num] += 1    end    arr.max_by { |v| hash[v] }  end  arr = [3, 2, 1, 2, 4, 8, 7, 4]  print find_most_frequent(arr)  # Output is 4"},{"instruction":"Create an SQL query to get the second highest salary from a table named 'empployee'","output":"SELECT MAX(salary) AS second_highest_salary  FROM employee WHERE salary < (SELECT MAX(salary) FROM employee);"},{"instruction":"Write a class in Java with assigned variables and adequate getters and setters. ClassName: Student Variables: name (String), age (integer)","output":"public class Student {     private String name;     private int age;     // Getters & Setters     public String getName() {         return name;     }     public void setName(String name) {         this.name = name;     }     public int getAge() {         return age;     }     public void setAge(int age) {         this.age = age;     } }"},{"instruction":"Convert the following array of strings into a decimal number. [\\"3\\", \\"14\\", \\"5\\"]","output":"Number(\\"3.145\\")"},{"instruction":"Write a SQL statement that joins three tables and returns the fields of interest. Table 1 (tbl_person): person_name, person_id Table 2 (tbl_course): course_id, course_name Table 3 (tbl_enroll): person_id, course_id Fields of Interest: person_name, course_name","output":"SELECT tbl_person.person_name, tbl_course.course_name FROM tbl_person INNER JOIN tbl_enroll on tbl_person.person_id = tbl_enroll.person_id INNER JOIN tbl_course on tbl_enroll.course_id = tbl_course.course_id;"},{"instruction":"Construct an HTML form as a comment in the below code. <div>     <!-- TODO: Add a form here --> </div>","output":"<div>     <!--     <form action=\\"submit.php\\" method=\\"post\\">         <label for=\\"name\\">Name:</label><br>         <input type=\\"text\\" id=\\"name\\" name=\\"name\\"><br><br>         <label for=\\"email\\">Email:</label><br>         <input type=\\"text\\" id=\\"email\\" name=\\"email\\"><br><br>         <input type=\\"submit\\" value=\\"Submit\\">     </form>     --> </div>"},{"instruction":"Create a function in Python that executes the below pseudocode. Input: A list of integers For each integer:     If the integer is even, add 1 to the list     If the integer is odd, subtract 1 from the list Output: A new list of integer","output":"def modify_list(int_list):     for i in range(len(int_list)):         if int_list[i] % 2 == 0:             int_list[i] += 1         else:             int_list[i] -= 1     return int_list"},{"instruction":"Construct an for loop in R for reading in a csv of an dataset. file_name = \\"mydata.csv","output":"d <- read.csv(file_name) for (i in 1:nrow(d)) {     # do something with each row of data }"},{"instruction":"Ask a natural language question with the intent \\"What is the population of India?\\".","output":"What is the population of India?"},{"instruction":"Using regular expressions, separate the below string into three parts. \\"a=1,b=2,c=3","output":"regex = \\"w=(d+)\\" a, b, c = re.findall(regex, \\"a=1,b=2,c=3\\")"},{"instruction":"Extract all characters from the following text and store them in a new string. Hello world!","output":"characters = \\"Helloworld!\\""},{"instruction":"dentify all person names in the following text using python. John, Paul, and George went to the park.","output":"import re text = \\"John, Paul, and George went to the park.\\" persons = re.findall(r\\"w+\\", text) print(persons) # [\\"John\\", \\"Paul\\", \\"and\\", \\"George\\"]"},{"instruction":"Rewrite the following Python function without using an elif statement. def find_type(x):     if x == \\"a\\":         print(\\"alpha\\")     elif x == \\"b\\":         print(\\"beta\\")     elif x == \\"c\\":         print(\\"gamma\\")","output":"def find_type(x):     type_map = {\\"a\\": \\"alpha\\", \\"b\\": \\"beta\\", \\"c\\": \\"gamma\\"}     if x in type_map:         print(type_map[x])"},{"instruction":"Arrange in order of increasing magnitude the elements in an integer array. arr = [4, 23, 1, 7, 10]","output":"arr.sort(); // arr is now [1, 4, 7, 10, 23]"},{"instruction":"Reverse the characters in the following string: “Hello World”","output":"\\"dlroW olleH\\""},{"instruction":"Create a Java program to read in an integer from the user and output the number doubled.","output":"import java.util.Scanner; public class NumberDoubling {     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);         System.out.print(\\"Enter an integer: \\");         int number = scanner.nextInt();         System.out.println(\\"The doubled number is: \\" + (number * 2));     } }"},{"instruction":"dentify the data type (int, string, list, etc.) of the following expression in Python \\"hello world","output":"string"},{"instruction":"Create a function in HTML that checks to make sure the provided input is an integer","output":"<html> <head>     <script>         function checkInteger(number) {             if(typeof number == 'number') {                 if(Math.floor(number) == number)                      return true;             }             return false;         }     <\/script> </head>"},{"instruction":"Write a function in Ruby that takes in two parameters, a string and an alphabetically sorted list of words, and returns true if the string is an anagram of a word in the list","output":"def is_anagram(string, words)    words.each do |word|     return true if word.split(\\"\\").sort == string.split(\\"\\").sort   end   return false end"},{"instruction":"Write Python code which changes a string to all lowercase characters. String: \\"This is a string in Uppercase!!!","output":"text = \\"This is a string in Uppercase!!!\\" text = text.lower() print(text)"},{"instruction":"Write C++ code to implement a basic doubly linked list.","output":"#include <iostream>   struct Node {     int data;     Node* prev;     Node* next; };   class DoublyLinkedList { private:     Node* head;     Node* tail; public:     DoublyLinkedList() : head(nullptr), tail(nullptr) {}     ~DoublyLinkedList();       void AddFront(int data);     void AddBack(int data);     void DeleteFront();     void DeleteBack();     void Display(); };   void DoublyLinkedList::AddFront(int data) {     Node* newNode = new Node;     newNode->data = data;       newNode->prev = nullptr;       if (head == nullptr) {         newNode->next = nullptr;         head = newNode;         tail = newNode;     }     else {         head->prev = newNode;         newNode->next = head;         head = newNode;     } }   void DoublyLinkedList::AddBack(int data) {     Node* newNode = new Node;     newNode->data = data;     newNode->next = nullptr;       if (tail == nullptr) {         newNode->prev = nullptr;         head = newNode;         tail = newNode;     }     else {         tail->next = newNode;         newNode->prev = tail;         tail = newNode;     } }   void DoublyLinkedList::DeleteFront() {     if (head == nullptr) {         return;     }     else if (head->next == nullptr) {         delete head;         head = nullptr;         tail = nullptr;         return;     }     else {         Node* tmp = head;         head = head->next;         delete tmp;         head->prev = nullptr;     } }   void DoublyLinkedList::DeleteBack() {     if (tail == nullptr) {         return;     }     else if (tail->prev == nullptr) {         delete tail;         head = nullptr;         tail = nullptr;         return;     }     else {         Node* tmp = tail;         tail = tail->prev;         delete tmp;         tail->next = nullptr;     } }   void DoublyLinkedList::Display() {     Node* tmp = head;       while (tmp != nullptr) {         std::cout << tmp->data << \\" \\";         tmp = tmp->next;     } }   DoublyLinkedList::~DoublyLinkedList() {     Node* tmp = head;       while (tmp != nullptr) {         Node* next = tmp->next;         delete tmp;         tmp = next;     } }"},{"instruction":"Write a C# class which implements two-dimensional array searching using binary search algorithms.","output":"public class BinarySearch2D {     public void Search(int[,] matrix, int target)     {         if (matrix == null || matrix.GetLength(0) == 0 || matrix.GetLength(1) == 0)              return;                  int rows = matrix.GetLength(0);         int columns = matrix.GetLength(1);                  int row = 0;         int column = columns - 1;                  while (row < rows && column >= 0)         {             if (matrix[row, column] == target)             {                 Console.WriteLine(\\"Target found at row: {row} and column: {column}\\");                 return;             }             else if (matrix[row, column] > target)             {                 column--;             }             else             {                 row++;             }         }     } }"},{"instruction":"Write a method in C that prints out all the permutations of a given string. String: ABC","output":"#include<stdio.h>  #include<string.h>  /* Function to swap values at two pointers */ void swap(char *x, char *y)  {  \\tchar temp;  \\ttemp = *x;  \\t*x = *y;  \\t*y = temp;  }     /* Function to print permutations of string     This function takes three parameters:     1. String     2. Starting index of the string     3. Ending index of the string. */ void permute(char *a, int l, int r)  {     int i;     if (l == r)       printf(\\"%sn\\", a);     else    {         for (i = l; i <= r; i++)         {            swap((a+l), (a+i));            permute(a, l+1, r);            swap((a+l), (a+i)); //backtrack         }     }  }     /* Driver program to test above functions */ int main()  {  \\tchar str[] = \\"ABC\\";  \\tint n = strlen(str);  \\tpermute(str, 0, n-1);  \\treturn 0;  }"},{"instruction":"Write a MySQL query to calculate the average temperature for each user, given a table of log data.","output":"SELECT user_id, AVG(temperature)  FROM logs  GROUP BY user_id;"},{"instruction":"Write an SQL query to find the top 5 users with the highest temperature reading.","output":"SELECT TOP 5 user_id, MAX(temperature) FROM logs GROUP BY user_id ORDER BY MAX(temperature) DESC;"},{"instruction":"Given an array of integers, write a function that returns the index of the smallest number in the array. array = [3, 1, 9, 6, 17]","output":"def findSmallest(arr):          smallest_index = 0     for i in range(1, len(arr)):         if arr[i] < arr[smallest_index]:             smallest_index = i          return smallest_index index_of_smallest = findSmallest(array) print(index_of_smallest) #prints 1"},{"instruction":"Replace the placeholder in the given HTML document with the corresponding table. <html>   <body>     <!-- replace placeholder with table -->   </body> </html> <table style=\\"width:100%\\">   <tr>     <th>Firstname</th>     <th>Lastname</th>      <th>Age</th>   </tr>   <tr>     <td>Jill</td>     <td>Smith</td>      <td>50</td>   </tr>   <tr>     <td>Eve</td>     <td>Jackson</td>      <td>94</td>   </tr> </table>","output":"<html>   <body>     <table style=\\"width:100%\\">   <tr>     <th>Firstname</th>     <th>Lastname</th>      <th>Age</th>   </tr>   <tr>     <td>Jill</td>     <td>Smith</td>      <td>50</td>   </tr>   <tr>     <td>Eve</td>     <td>Jackson</td>      <td>94</td>   </tr> </table>   </body> </html>"},{"instruction":"Generate a random string 10 characters in length using the given Python code. import random","output":"import random def generate_random_string(length):     \\"\\"\\"Generate a random string with given length using a set of lowercase and uppercase letters, numbers, and punctuation characters.\\"\\"\\"     chars = \\"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#%^&*()[]{}|;:'\\"\\",./<>?\\"     result = \\"\\"     for i in range(length):         result += random.choice(chars)     return result random_string = generate_random_string(10) print(random_string) #eg. 7O?1Y%%&_K"},{"instruction":"Concatenate the strings in the given list using Java. list = [\\"hello\\", \\"world\\", \\"!\\"]","output":"StringBuilder sb = new StringBuilder(); for (String str : list) {     sb.append(str); } String output = sb.toString(); System.out.println(output); // prints \\"hello world!\\""},{"instruction":"Given a JSON string, write a function in JavaScript to extract the value for the key \\"name\\". jsonString = {\\"name\\":\\"John\\", \\"age\\":30, \\"city\\":\\"New York\\"}","output":"function getValueByKey(jsonString, key) {     let jsonObj = JSON.parse(jsonString);     return jsonObj[key]; } nameValue = getValueByKey(jsonString, \\"name\\"); console.log(nameValue) //prints \\"John\\""},{"instruction":"Create a variable in JavaScript for storing the result of the following expression. a + 5*b","output":"let result = a + 5*b;"},{"instruction":"Search for the string \\"tutorials\\" in the given text and replace it with the word \\"lessons\\". text = \\"This site provides many Python tutorial","output":"text = text.replace(\\"tutorials\\", \\"lessons\\"); console.log(text); // prints \\"This site provides many Python lessons\\""},{"instruction":"Calculate the sum of the numbers in the given array using the Java 8 Stream API. nums = [2, 4, 6, 10]","output":"int sum = Arrays.stream(nums).sum(); System.out.println(sum); // prints 22"},{"instruction":"Modify the given code so it prints a prime number table. table_size = 10","output":"# Include the necessary library from prime_generator import get_prime # Get a list of prime numbers primes = get_prime(table_size) # Print the prime number table print(\\" Prime Number Table\\") print(\\" --------------------\\") for i in range(table_size):     print(f\\"{primes[i]:>4} {(i+1)*primes[i]:>4}\\")"},{"instruction":"Given two integers, implement a function in C to swap their values. int a = 3 int b = 5","output":"void swap(int *a, int *b){     int temp = *a;     *a = *b;     *b = temp; } swap(&a, &b);"},{"instruction":"Create a SQL query to get the total count of the employees in the team that have the job title of \\"software engineer\\". Table: Employees  Columns: id (int), name (string), job_title (string), team (string)","output":"SELECT COUNT(*) AS total_count FROM Employees WHERE job_title=\\"software engineer\\""},{"instruction":"Generate the code to append the item \\"banana\\" to the end of the list called fruits. fruits = ['apple', 'orange', 'grapes']","output":"fruits.append('banana')"},{"instruction":"mplement a program in Java that reverses a string input given by the user.","output":"import java.util.Scanner;  public class ReverseString {  public static void main(String[] args) {     Scanner scanner = new Scanner(System.in);   String inputString = scanner.nextLine();   String reversedString = \\"\\";     for(int i = inputString.length() - 1; i >= 0; i-- ) {    reversedString = reversedString + inputString.charAt(i);   }     System.out.println(reversedString);  } }"},{"instruction":"Parse a given HTML page to extract all <h1> tags. <html> <head>     <title>Page Title</title> </head> <body>     <h1>This is a heading 1</h1>     <h2>This is a heading 2</h2>     <h1>This is another heading 1</h1> </body> </html>","output":"from bs4 import BeautifulSoup html_doc = \\"\\"\\" <html> <head>     <title>Page Title</title> </head> <body>     <h1>This is a heading 1</h1>     <h2>This is a heading 2</h2>     <h1>This is another heading 1</h1> </body> </html> \\"\\"\\" soup = BeautifulSoup(html_doc, 'html.parser') h1_tags = soup.find_all('h1') for tag in h1_tags:     print(tag)"},{"instruction":"Create an SQL query to get the names and ages of all employees that are under 25 and have a job title of \\"Software Engineer\\". Table: Employees Columns: id (int), name (string), age (int), job_title (string)","output":"SELECT name, age FROM Employees WHERE age<25 AND job_title=\\"Software Engineer\\""},{"instruction":"Code a function in JavaScript to find the area of a triangle given the lengths of its three sides.","output":"function calculateArea(a, b, c) {     let s = (a + b + c) / 2;     return Math.sqrt(s * (s - a) * (s - b) * (s - c)); }"},{"instruction":"Edit the given SQL query to return the number of employees from each team. SELECT * FROM Employee","output":"SELECT team, COUNT(*) AS total_count FROM Employees GROUP BY team"},{"instruction":"Generate Python code to find the compound interest for a given principal amount, rate, and time period.","output":"# Python program to find compound interest def compound_interest(p,r,t):     # p is the principal amount      # r is the rate      # t is the time period         # Calculating compound interest      CI = p * (pow((1 + r / 100), t))     print(\\"Compound interest is\\", CI)  p=1000 r=10 t=2 compound_interest(p,r,t)"},{"instruction":"Design an algorithm to detect whether two given strings are permutations of each other.","output":"Algorithm: // Take two strings, str1 and str2 // Step 1: // Start // Step 2: // Run a loop over the length of the strings // Step 3: // For each character in str1, check if it also exists in str2. If it does, continue to next character.  // Step 4: // If a character does not have a corresponding character in the other string, return False.  // Step 5: // If all the characters are found, return True.  // Step 6: // Stop"},{"instruction":"Explain the difference between .push(), .pop(), .shift() and .unshift() methods in JavaScript arrays.","output":"The .push() method adds an element to the end of an existing array. It takes a single argument, the element to be added, and returns the new length of the array. The .pop() method removes an element from the end of an existing array. It does not take any arguments and returns the element that was removed. The .shift() method removes an element from the beginning of an existing array. It does not take any arguments, and returns the element that was removed. The .unshift() method adds an element to the beginning of an existing array. It takes a single argument, the element to be added, and returns the new length of the array."},{"instruction":"Write a JavaScript program to randomly select items from an array. const fruits = ['apple', 'banana', 'mango', 'cherry'];","output":"function getRandomItem(arr) {   const index = Math.floor(Math.random() * arr.length);   return arr[index];  }   const randomItem = getRandomItem(fruits); console.log(randomItem);"},{"instruction":"Explain the differences between a while loop and a for loop in JavaScript.","output":"The major difference between a while loop and a for loop is that a while loop checks the condition before the block of code is executed, while a for loop checks the condition before each iteration of the loop. A while loop is used when the number of iterations is not known, while the number of iterations in a for loop is known. In a while loop, the condition must be true in order to execute the loop body, while in a for loop, the loop body is always executed at least once, regardless of whether the condition is true or false. Another difference is that a for loop allows you to include an increment section where you can increment or decrement the loop counter."},{"instruction":"Determine how many characters are in a given string. my_string = \\"Hello, world!","output":"length = len(my_string) print(length) # 13"},{"instruction":"Create a JavaScript array from a given Object. my_obj = {\\"a\\": 1, \\"b\\": 2, \\"c\\": 3}","output":"my_arr = [1, 2, 3]"},{"instruction":"Write a query to retrieve the rows from a given table where the value of the \\"name\\" column is not null. my_table {     \\"id\\": Integer,     \\"name\\": String }","output":"SELECT * FROM my_table WHERE name IS NOT NULL;"},{"instruction":"Create a basic React component.","output":"import React from 'react'; const MyComponent = () => {  return (   <div>    <p>Hello, world!</p>   </div>  ); }; export default MyComponent;"},{"instruction":"Convert the elements of a given array of strings to integers. arr = [\\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\"]","output":"arr = list(map(int,arr))"},{"instruction":"Write a basic HTML page with a div and an unordered list.","output":"<!DOCTYPE html> <html> <head>  <title>Basic HTML Page</title> </head> <body>  <div>   <ul>    <li>list item 1</li>    <li>list item 2</li>    <li>list item 3</li>   </ul>  </div> </body> </html>"},{"instruction":"Parse a given XML document and create a JavaScript object. <?xml version=\\"1.0\\"?> <catalog>  <book id=\\"bk101\\">   <author>Kerridge, Alan</author>   <title>The Kitchen Diaries</title>   <price>29.99</price>  </book>  <book id=\\"bk102\\">   <author>Zinsser, William</author>   <title>On Writing Well</title>   <price>19.95</price>  </book> </catalog>","output":"const parser = new DOMParser(); const xmlDoc = parser.parseFromString(text, \\"text/xml\\");   const books = xmlDoc.querySelectorAll('book'); const result = {};   books.forEach(book => {  const id = book.getAttribute('id');  result[id] = {   author: book.querySelector('author').textContent,   title: book.querySelector('title').textContent,   price: book.querySelector('price').textContent  } }); console.log(result); // {  //  bk101: {author: \\"Kerridge, Alan\\", title: \\"The Kitchen Diaries\\", price: \\"29.99\\"},  //  bk102: {author: \\"Zinsser, William\\", title: \\"On Writing Well\\", price: \\"19.95\\"} // }"},{"instruction":"Build an array of objects from a given array of numbers. arr = [1, 2, 3, 4, 5]","output":"arr = [  {   num: 1   },   {   num: 2  },   {   num: 3  },   {   num: 4  },   {   num: 5  } ]"},{"instruction":"Generate a simple Flask route to handle a GET request.","output":"from flask import Flask app = Flask(__name__) @app.route(\\"/myroute\\", methods=[\\"GET\\"]) def myfunc():   # write code here if __name__ == '__main__':  app.run()"},{"instruction":"Calculate the difference between two given dates in terms of days. date1 = \\"2020-5-15\\" date2 = \\"2020-6-20","output":"from datetime import datetime date1 = datetime.strptime(date1, \\"%Y-%m-%d\\") date2 = datetime.strptime(date2, \\"%Y-%m-%d\\") difference = date2 - date1   print(difference.days) # 36"},{"instruction":"Parse a JSON string into an object in JavaScript. {\\"name\\": \\"John Doe\\", \\"age\\": 30}","output":"var data = JSON.parse('{\\"name\\": \\"John Doe\\", \\"age\\": 30}'); var name = data.name; var age = data.age;"},{"instruction":"Create a list of 10 strings in Python and print each string in a separate line.","output":"mylist = ['string1', 'string2', 'string3', 'string4', 'string5', 'string6', 'string7', 'string8', 'string9', 'string10'] for item in mylist:   print(item)"},{"instruction":"Create an array of 10 random numbers between 1 and 100 in JavaScript and print each number in the console.","output":"var arr = []; for (i = 0; i < 10; i++) {   arr.push(Math.floor(Math.random() * 100) + 1);   console.log(arr[i]); }"},{"instruction":"Create a class in Python with one method called talk that prints a string when invoked.","output":"class MyClass:   def talk(self):     print(\\"Hello, world!\\")"},{"instruction":"Create an array of objects in JavaScript, each object should have two properties, a \\"name\\" and \\"age\\".","output":"var arr = [   {name: 'John', age: 25},   {name: 'Alice', age: 28},   {name: 'Bob', age: 30},   {name: 'David', age: 32}, ]"},{"instruction":"Construct an SQL query to find the average temperature for each month in the year.","output":"SELECT    MONTH(date) as 'Month',   AVG(temperature) as 'Average Temperature' FROM temperatures GROUP BY MONTH(date);"},{"instruction":"Construct an SQL query to get the names and salary of the employees who earn more than a given salary. salary: 10000","output":"SELECT name, salary  FROM employees  WHERE salary > 10000;"},{"instruction":"Generate a JavaScript array containing the first ten Fibonacci numbers.","output":"let fib_nums = [1, 1] for (let i=2; i < 10; i++) {   fib_nums[i] = fib_nums[i - 1] + fib_nums[i - 2] }"},{"instruction":"Construct an SQL query to delete all the rows from a table where the value of a column is less than a given value. column_name: age value: 18","output":"DELETE FROM table_name  WHERE age < 18;"},{"instruction":"Write an SQL query to return all the distinct values of a given column from a table. column_name: gender","output":"SELECT DISTINCT gender FROM table_name;"},{"instruction":"Construct a query to find all movies released since a given year. year: 2000","output":"SELECT * FROM movies WHERE year > 2000;"},{"instruction":"Construct an SQL query to select all the unique values of one column from a table that appear more than twice. column_name: 'gender'","output":"SELECT gender  FROM table_name  GROUP BY gender  HAVING COUNT(*) > 2;"},{"instruction":"Suggest changes to the following Java code so that it sorts an array of strings by length. String[] data = {\\"Hello\\",\\"Hi\\",\\"Bye\\"}; Arrays.sort(data);","output":"String[] data = {\\"Hello\\",\\"Hi\\",\\"Bye\\"}; Comparator<String> comparator = Comparator.comparingInt(String::length); Arrays.sort(data, comparator);"},{"instruction":"Write a function to extract the elements from a given list and add them to a new list. given_list = [0, 2, 4, 6, 8]","output":"def extract_and_add_elements(given_list):     new_list = []     for x in given_list:         new_list.append(x)     return new_list"},{"instruction":"Suggest a suitable data structure to hold a series of student records.","output":"A dictionary would be the best data structure to hold student records, since it allows easy mapping of student identifiers (e.g. a student's ID number or username) to associated data about that student, such as their name, age, and academic results."},{"instruction":"Construct an SQL query to find the number of records where the value in a certain column is greater than a specified value.","output":"SELECT COUNT(*) FROM TABLE_NAME WHERE COLUMN_NAME > VALUE;"},{"instruction":"Write a SQL query for selecting all the people who were born after January 1st, 1960.","output":"SELECT * FROM People WHERE BirthDate > '1960-01-01';"},{"instruction":"Write a Python code to group the following numbers according to their last digit [1, 9, 5, 4, 6, 7, 8, 11]. [1, 9, 5, 4, 6, 7, 8, 11]","output":"group_by_last_digit = {     0: [],     1: [1],     2: [],     3: [],     4: [4],     5: [5],     6: [6],     7: [7],     8: [8],     9: [9],     11: [11] }"},{"instruction":"Write a CSS code to style a table such that each row is a different color.","output":"table tr:nth-child(odd) {     background-color: #f0f0f0; } table tr:nth-child(even) {     background-color: #cccccc; }"},{"instruction":"Write an Objective-C code to create a loop that iterates 10 times, printing out the iteration number each time.","output":"for(int i = 1; i <= 10; i++) {   NSLog(@\\"Current Iteration: %d\\", i);  }"},{"instruction":"Write a Java code to sort the following array in ascending order [3, 6, 2, 8, 1, 9]. [3, 6, 2, 8, 1, 9]","output":"public class SortList {       public static void sort (int[] array) {      int temp;          for (int i = 0; i < array.length; i++) {      for (int j = 0; j < array.length; j++) {        if (array[j] > array[i]) {          temp = array[i];          array[i] = array[j];          array[j] = temp;        }     }    }   }       public static void main(String args[]) {      int[] array = {3, 6, 2, 8, 1, 9};           sort(array);           System.out.print(\\"Sorted list: n\\");      for (int i = 0; i < array.length; i++)        System.out.print(array[i] + \\" \\");    }  }"},{"instruction":"Write a SQL query to update all the records in the table with new values from another table.","output":"UPDATE Table1 SET Table1.Col1 = Table2.Col1,      Table1.Col2 = Table2.Col2,      Table1.Col3 = Table2.Col3 FROM Table1 INNER JOIN Table2 ON Table1.ID = Table2.ID;"},{"instruction":"Write a PHP code to validate a date in the format MM/DD/YYYY.","output":"<?php function validateDate(date) {     d = DateTime::createFromFormat('m/d/Y', date);     return d && d->format('m/d/Y') === date; }"},{"instruction":"Create a SQL query for selecting the top 2 records in a table based on a given rating.","output":"SELECT * FROM Table ORDER BY Rating DESC LIMIT 2;"},{"instruction":"Create a Python class for a user object that includes a name and email field.","output":"class User:     def __init__(self, name, email):         self.name = name         self.email = email"},{"instruction":"Using the provided HTML structure and jQuery code, change the background color to green when the button is clicked. <div>   <h1>Hello World!</h1>   <button>Click me!</button> </div> <script>     (document).ready(function(){         (\\"button\\").click(function(){             //TODO: Add code here         });     }); <\/script>","output":"<div>   <h1>Hello World!</h1>   <button>Click me!</button> </div> <script>     (document).ready(function(){         (\\"button\\").click(function(){             (\\"div\\").css(\\"background-color\\", \\"green\\");         });     }); <\/script>"},{"instruction":"Create a Flask endpoint that displays a \\"Hello World!\\" message.","output":"@app.route(\\"/\\", methods=['GET']) def hello_world():     return \\"Hello World!\\""},{"instruction":"Create a MySQL query to list the authors and the number of books they wrote.","output":"SELECT authors.name, COUNT(book.id) FROM authors INNER JOIN books ON authors.id = books.author_id GROUP BY authors.name;"},{"instruction":"Create a React component that renders a text input field.","output":"class TextInput extends React.Component {   render() {     return (       <input type=\\"text\\" />     );   } }"},{"instruction":"Create a Mongoose schema for a blog post with the following fields: title (String), body (String), and isPublished (Boolean).","output":"const blogPostSchema = new mongoose.Schema({   title: { type: String, required: true },   body:  { type: String, required: true },   isPublished: { type: Boolean, default: false} });"},{"instruction":"Create a CSS style to make all paragraphs with a bottom margin of 10px.","output":"p {   margin-bottom: 10px; }"},{"instruction":"w would you loop through the elements in an array in JavaScript?","output":"You can loop through elements in an array in JavaScript by using a \`for loop\`: for (let i = 0; i < myArray.length; i++) {   const element = myArray[i];   // Do something with the element }"},{"instruction":"Create a Java class to store a student's name, ID, and GPA.","output":"public class Student {     private String name;     private int id;     private Double gpa;          public Student(String name, int id, Double gpa) {         this.name = name;         this.id = id;         this.gpa = gpa;     }          public String getName() {         return name;     }          public int getId() {         return id;     }          public Double getGPA() {         return gpa;     } }"},{"instruction":"Produce an R code snippet to randomly sample 10 elements from vector x.","output":"sample(x, size = 10, replace = FALSE)"},{"instruction":"Rewrite the following Python code to a Bash program. v = [1, 2, 3, 4, 5] for i in v: print(i)","output":"v=(1 2 3 4 5) for i in {v[@]}; do     echo i done"},{"instruction":"Suggest a PHP code snippet which calculates the sum of two numbers.","output":"a = 1; b = 2; sum = a + b; echo sum; // Outputs: 3"},{"instruction":"Create an HTML/CSS web page from the following text content. My favorite food is sushi.","output":"<html>     <head>         <title>Sushi</title>         <style>             // Styling for the page             p {                 font-family: Arial;                 font-size: 18px;             }         </style>     </head>     <body>         <p>My favorite food is sushi.</p>     </body> </html>"},{"instruction":"Summarize the following article in one sentence. The article is about the rise of artificial intelligence, and how it is impacting the job market and our lives in general.","output":"Artificial intelligence is rapidly transforming the job market and our lives as a whole."},{"instruction":"Using recursion, write a Python program to find the factorial of a given number. Number: 5","output":"def factorial(num):      if num == 1:          return 1     else:          return num * factorial(num-1) ans = factorial(5) print(ans)"},{"instruction":"Using the given regular expression, find all the email addresses in the text provided. Regular Expression: /S+@S+.S+/ Text: Please contact support@example.com for assistance.","output":"support@example.com"},{"instruction":"Create a Python dictionary with customer details provided. Name: John Age: 25 Gender: Male Occupation: Chef","output":"customer = {  'name': 'John', 'age': 25, 'gender': 'Male', 'occupation': 'Chef' }"},{"instruction":"Compare the two strings using the given regular expression. Regular Expression: /^[a-z]+/ Strings: string1 and string2","output":"import re regex = re.compile(r\\"^[a-z]+\\") string1 = \\"string1\\" string2 = \\"string2\\" if regex.match(string1) and regex.match(string2):     if string1 == string2:         print(\\"The strings are equal\\")     else:         print(\\"The strings are not equal\\")"},{"instruction":"With the provided data, find the correlation coefficient between the two variables. x: [4, 5, 7, 8] y: [6, 7, 8, 10]","output":"x = [4, 5, 7, 8] y = [6, 7, 8, 10] def find_correlation_coefficient(x, y):     n = len(x)     # Calculate the sums     sum_x = sum(x)     sum_y = sum(y)     # Calculate the sum of the squares     squared_sum_x = sum([pow(x[i], 2) for i in range(n)])     squared_sum_y = sum([pow(y[i], 2) for i in range(n)])     # Calculate the sum of the products     product_sum = sum([x[i]*y[i] for i in range(n)])     # Calculate the correlation coefficient     num = product_sum - (sum_x * sum_y/n)     den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5     r = num/den     return r print(\\" The correlation coefficient is: \\" + str(find_correlation_coefficient(x, y))) # 0.9"},{"instruction":"Parse the given string and return a list of words. string = \\"this is a test string","output":"def parse_string(string):     words = string.split()     return words"},{"instruction":"Generate a random 6-digit integer.","output":"import random random_int = str(random.randint(100000, 999999))"},{"instruction":"Create a program to calculate the mean of the following list. myList = [4, 8, 10, 15]","output":"def mean(myList):     sum = 0     for num in myList:         sum += num     average = round(sum/len(myList), 2)     return average mean_result = mean(myList)"},{"instruction":"Return the number of elements in a dictionary. myDict = {'a':1, 'b':2, 'c':3}","output":"def count_dict_elements(myDict):     count = 0     for key in myDict:         count += 1     return count          element_nums = count_dict_elements(myDict)"},{"instruction":"Given two strings, s1 and s2, write a program to return the longest common substring between them. s1 = 'abcdef' s2 = 'fghijk'","output":"def longest_common_substring(s1, s2):     m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]     longest, x_longest = 0, 0     for x in range(1, 1 + len(s1)):         for y in range(1, 1 + len(s2)):             if s1[x - 1] == s2[y - 1]:                 m[x][y] = m[x - 1][y - 1] + 1                 if m[x][y] > longest:                     longest = m[x][y]                     x_longest = x             else:                 m[x][y] = 0     return s1[x_longest - longest: x_longest] longest_substring = longest_common_substring(s1, s2)"},{"instruction":"Given a linked list, write a program to delete a given node. 1 -> 2 -> 3 -> 4 -> 5 -> NULL Node = 3","output":"class Node:      def __init__(self, data):          self.data = data           self.next = None def delete_node(head, node):     prev = None     curr = head     while(curr is not None and curr.data != node):         prev = curr         curr = curr.next     prev.next = curr.next"},{"instruction":"Edit the code to create a program to print all the leap years between 1900 and 2000. for year in range(1900, 2001):     # TODO","output":"for year in range(1900, 2001):     if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:         print(year)"},{"instruction":"Name two methods of sorting a list in Python.","output":"The two methods of sorting a list in Python are the sorted() function and the .sort() method."},{"instruction":"What is the difference between higher order functions and first class functions?","output":"Higher order functions are functions that can take other functions as arguments or return other functions as output. First class functions are functions that can be passed as arguments to other functions, returned from other functions, assigned to variables, or used in any other way that a value can be used."},{"instruction":"Name four primitive types in Java.","output":"The four primitive types in Java are boolean, char, float, and int."},{"instruction":"Explain what the expression \\"variadic functions\\" means.","output":"A variadic function is a function that can accept a variable number of arguments. It is a type of function in which the number of arguments that is passed to the function can vary, thus giving it more versatility than a function with a fixed number of arguments."},{"instruction":"Construct a function with two parameters to return the sum of the squares of the parameters.","output":"def sum_squares(x, y):     return x*x + y*y"},{"instruction":"What is the meaning of the acronym JSON?","output":"The acronym JSON stands for JavaScript Object Notation. It is a text-based format for data interchange, which makes it easy for machines to parse and generate."},{"instruction":"Write a query to select all rows from a table with the name \\"products\\" and the column \\"price\\" where the price is greater than 10.","output":"SELECT * FROM products WHERE price > 10;"},{"instruction":"mplement a JavaScript function that takes two strings as parameters and replaces all occurrences of the first string with the second. \\"test\\", \\"D","output":"function replaceString(str1, str2) {   return str1.split(' ').map(word => (word === str2) ? str1 : word).join(' '); }"},{"instruction":"Given a string of text, write a python script to remove all non-alphanumeric characters.","output":"def remove_non_alphanumeric_chars(input_string):   return ''.join(c for c in input_string if c.isalnum())"},{"instruction":"Modify the following C program so that it can print the result in reverse order. #include <stdio.h>   int main() {    int arr[] = {1, 2, 3, 4, 5};    int i, size;      size = sizeof(arr) / sizeof(arr[0]);      for (i=0; i < size; i++)    {       printf(\\"%d \\", arr[i]);    }    return 0; }","output":"#include <stdio.h>   int main() {    int arr[] = {1, 2, 3, 4, 5};    int size, i;      size = sizeof(arr) / sizeof(arr[0]);      for (i = size - 1; i >= 0; i--) {       printf(\\"%d \\", arr[i]);    }    return 0; }"},{"instruction":"Modify the following JavaScript code to alert \\"Thanks for visiting!\\" when the page is loaded.","output":"window.onload = function() {     alert(\\"Thanks for visiting!\\"); }"},{"instruction":"Use the given array to find distinct values. arr = [1, 2, 3, 3, 4, 5]","output":"def find_distinct(arr):     distinct_list = []     for num in arr:         if num not in distinct_list:             distinct_list.append(num)     return distinct_list arr = [1, 2, 3, 3, 4, 5] print(find_distinct(arr))  # Output: [1, 2, 3, 4, 5]"},{"instruction":"Replace the character ‘_’ with the underscore symbol in a string. sample_string = \\"this__is_a_sample_string","output":"def replace_underscore_char(sample_string):     return sample_string.replace('_', '_') sample_string = \\"this__is_a_sample_string\\" print(replace_underscore_char(sample_string))  # Output: this__is_a_sample_string"},{"instruction":"Write an expression to select the first element from a list. list = [1, 2, 3, 4]","output":"list[0]  or  list[-4]"},{"instruction":"Create a tuple of strings.","output":"my_tuple = (\\"Apple\\", \\"Banana\\", \\"Orange\\")"},{"instruction":"Extract the last four characters from a text string. text = \\"This is a sample tex","output":"text[-4:]  # Output: \\"text\\""},{"instruction":"Create a dictionary with two given lists. list1 = [\\"John\\", \\"Adam\\"] list2 = [25, 30]","output":"def create_dict(list1, list2):     dictionary = dict(zip(list1, list2))     return dictionary list1 = [\\"John\\", \\"Adam\\"] list2 = [25, 30] print(create_dict(list1, list2))  # Output: {'John': 25, 'Adam': 30}"},{"instruction":"You have been given a list of user details (Names, Addresses etc). Write a code to filter out the users whose age is more than 21. user_details = [  {'name': 'John Doe', 'age': 34, 'address': '123 Main Street'},  {'name': 'Jane Doe', 'age': 18, 'address': '456 Wallaby Way'},  {'name': 'Bob Smith', 'age': 21, 'address': '789 Ocean View'}, ]","output":"def filter_users(user_details):   users_over_21 = []   for user in user_details:     if user['age'] > 21:       users_over_21.append(user)   return users_over_21 if __name__ == \\"__main__\\":   print(\\"Users over 21:\\", filter_users(user_details))"},{"instruction":"Write a code to generate fibonacci series for first n numbers.","output":"def generate_fibonacci(n):   fibonacci = [0, 1]   for i in range(2, n):     fibonacci.append(fibonacci[i - 1] + fibonacci[i - 2])   return fibonacci[:n] if __name__ == \\"__main__\\":   print(generate_fibonacci(n))"},{"instruction":"You have been given a list containing both words and numbers. You need to write a code to generate a new list containing only words in the original list and to calculate the average length of the words. mixed_list = ['cat', 1, 'dog', 2, 'rabbit', 3]","output":"def get_words(mixed_list):   words = []   for item in mixed_list:     if type(item) == str:       words.append(item)   return words def get_average_word_length(words):   total_length = 0   for word in words:     total_length += len(word)   return total_length/len(words) if __name__ == \\"__main__\\":   words = get_words(mixed_list)   print(\\"Words in original list:\\", words)   print(\\"Average length of the words:\\", get_average_word_length(words))"},{"instruction":"You have been given a list of numbers. Write a code to generate a new list of numbers containing only the even numbers from the original list. numbers = [2, 3, 5, 6, 8, 9, 10]","output":"def get_even_numbers(numbers):   even_numbers = []   for num in numbers:     if num % 2 == 0:       even_numbers.append(num)   return even_numbers if __name__ == \\"__main__\\":   print(\\"Even numbers from original list:\\", get_even_numbers(numbers))"},{"instruction":"You have been given a list of strings. Write a code to generate a new list containing only the strings with length less than 6 characters. strings = ['Ready', 'Set', 'Go', 'Hello', 'Pizza', 'Book']","output":"def get_shorter_strings(strings):   shorter_strings = []   for string in strings:     if len(string) < 6:       shorter_strings.append(string)   return shorter_strings if __name__ == \\"__main__\\":   print(\\"strings with length less than 6:\\", get_shorter_strings(strings))"},{"instruction":"Write a code to count the occurrences of a particular element in a given list. list1 = [1, 2, 3, 3, 3, 4, 5] element = 3","output":"def count_occurrences(list1, element):   count = 0   for elem in list1:     if elem == element:       count += 1   return count if __name__ == \\"__main__\\":   print(\\"Number of occurrences of\\", element, \\"in the list:\\", count_occurrences(list1, element))"},{"instruction":"Create a compiler in C++ to compile a given source code.","output":"#include <iostream> #include <string> std::string source_code; // source code to be compiled int main() {   // compile the source code   // check the errors   // return 0 if the compilation is successful   return 0; }"},{"instruction":"Assign a value to each of the variables, x = ? and y = ?, such that x + y = 7.","output":"int x = 3; int y = 4; // x + y = 7"},{"instruction":"Modify the code snippet below to insert the element 'z' into the end of an array. arr = ['a', 'b', 'c', 'd', 'e']","output":"arr = ['a', 'b', 'c', 'd', 'e']  arr.append('z')  print(arr)"},{"instruction":"Create a function to convert a given integer to a string in Python.","output":"def intToStr(n):  \\treturn str(n) # Driver Program  intNum = 55    # Print the output  print(intToStr(intNum))"},{"instruction":"Write a regular expression to match the string \\"123 Main Street\\".","output":"regex = r\\"^d{3}s[A-Za-z]+s[A-Za-z]+\\""},{"instruction":"Write a Python program to identify whether or not a given number is prime.","output":"def is_prime(n):     for i in range(2, n):         if n % i == 0:             return False     return True"},{"instruction":"Create an HTML document to display the following text: Welcome to our website!","output":"<html>  <head>   <title>Welcome to our Website!</title>  </head>  <body>   <h1>Welcome to our Website!</h1>  </body> </html>"},{"instruction":"Create a JavaScript object which contains a key-value pair representing \\"name\\" and \\"lucy\\".","output":"let lucy = {     name: \\"Lucy\\" };"},{"instruction":"What does the SELECT statement in SQL do?","output":"The SELECT statement is used to retrieve data from one or more tables in a database. It is typically used in a query, where it specifies which columns and rows of data should be returned. The statement can also be used to perform calculations on data in the database and to group data together."},{"instruction":"Write a piece of code that implements a 3-way merge sort in Java.","output":"class Mergesort  {      void merge(int arr[], int l, int m, int r)      {          int n1 = m - l + 1;          int n2 = r - m;             int L[] = new int[n1];          int R[] = new int[n2];             for (int i = 0; i < n1; ++i)              L[i] = arr[l + i];          for (int j = 0; j < n2; ++j)              R[j] = arr[m + 1 + j];             int i = 0, j = 0;             int k = l;          while (i < n1 && j < n2) {              if (L[i] <= R[j]) {                  arr[k] = L[i];                  i++;              }              else {                  arr[k] = R[j];                  j++;              }              k++;          }             while (i < n1) {              arr[k] = L[i];              i++;              k++;          }             while (j < n2) {              arr[k] = R[j];              j++;              k++;          }      }         void sort(int arr[], int l, int r)      {          if (l < r) {              int m = (l + r) / 2;                 sort(arr, l, m);              sort(arr, m + 1, r);                 merge(arr, l, m, r);          }      }  }"},{"instruction":"Create a PHP function to trim a string and remove all leading and trailing whitespace. string = \\"  Hello World   \\";","output":"function trimString(string) {     return preg_replace('/^s+|s+/', '', string); } //calling the function trimString(string); //Returns \\"Hello World\\""},{"instruction":"Write some code in JavaScript to generate an array with 3 positive random integers.","output":"function getRandomIntegers(size) {   return [...Array(size)].map(       () => Math.floor(Math.random() * Math.floor(20))     ).filter(randomNumber => randomNumber > 0); } getRandomIntegers(3); //Returns an array with 3 random positive integers"},{"instruction":"Create a function in C to edit a string. The function should correct all occurrences of two or more consecutive spacets with a single space. char str[] = \\"Hi   everyone","output":"void trimSpace(char *str)  {      int i = 0, j = 0;      while (str[i])      {          if (str[i] != ' ')              str[j++] = str[i];          else if (str[i-1] != ' ')              str[j++] = str[i];           i++;      }      str[j] = '0';   }  trimSpace(str); // str will become \\"Hi everyone \\""},{"instruction":"Write a code to detect all possible anagrams of a given word in Python. word = \\"c","output":"def all_anagrams(word):       if len(word) ==0:         return [word]     else:         temp = []         for anagram in all_anagrams(word[1:]):             for i in range(len(word)):                 temp.append(anagram[:i] + word[0:1] + anagram[i:])         return temp all_anagrams(word) // Returns ['act', 'atc', 'cat', 'cta', 'tac', 'tca']"},{"instruction":"Create a code to find the largest number from a list of given numbers in HTML.","output":"<script>   function findLargestNumber(list) {     let largestNumber = list[0];     for (let i = 1; i < list.length; i++){       if (list[i] > largestNumber) {         largestNumber = list[i];       }     }     return largestNumber;   } <\/script>"},{"instruction":"Edit a piece of code to fix a syntax error. def loopList(list)    for i in range(5)      sum += list i      return sum","output":"def loopList(list):    sum = 0   for i in range(5):     sum += list[i]       return sum"},{"instruction":"You need to sort an array of numbers in ascending order using JavaScript. arr = [7, 4, 1, 10, 2]","output":"function sortArray(arr) {   return arr.sort((a,b) => a - b); } sortArray(arr); //Returns [1, 2, 4, 7, 10]"},{"instruction":"Debug the following for loop for computing the sum of numbers from 0 to 10. for num in range(0:11)   sum = sum + num","output":"sum = 0 for num in range(0, 11):     sum = sum + num"},{"instruction":"Write a bash command to view the amount of free disk space on your computer.","output":"df -h"},{"instruction":"What is a bot?","output":"A bot is a software application that automates simple tasks such as sending messages, responding to questions, or performing other tasks. It is often used to create interactive experiences with users, such as chatbots or virtual assistants. It can also be used to automate online activities such as web browsing and data entry."},{"instruction":"w can you use a HTML Id attribute?","output":"The HTML id attribute is used to assign an identifier to an element. This identifier can then be used to reference the element in a style sheet or in JavaScript code. It is also used to link a document fragment to an element, such as a table of contents item to the corresponding section."},{"instruction":"Given a 2-dimensional array, print the elements across each row. arr = [[1, 2, 3],        [4, 5, 6],        [7, 8, 9]]","output":"for row in arr:     for col in row:         print(col, end=\\" \\")     print(\\"\\") # Output 1 2 3 4 5 6 7 8 9"},{"instruction":"Evaluate the following expression:  2x + 3y - 7z. x = 5, y = -1, z = 8","output":"2 * 5 + 3 * -1 - 7 * 8 = -31"},{"instruction":"Write a code snippet to take in 2 integers and generate the minimum of the 2 numbers int x = 5 int y = 9","output":"min = min(x, y) print(min) # Output: 5"},{"instruction":"Output the string \\"Programming is Fun\\" when you run the code?","output":"print('Programming is Fun')"},{"instruction":"Read an array of numbers and output an array with all the even numbers array = [2, 3, 4, 5, 6, 7, 8]","output":"even_array = [i for i in array if i % 2 == 0]  print(even_array) # Output: [2, 4, 6, 8]"},{"instruction":"Write code that validates a given number is within a given range num = 5 min = 0 max = 10","output":"def in_range(num, min, max):     if num in range(min, max):         print(f'{num} is in range')     else:         print(f'{num} is not in range') in_range(num, min, max) # Output: 5 is in range"},{"instruction":"Print a multiplication table of a given number num = 5","output":"for i in range(1,11):     print(f'{num} x {i} = {num * i}')"},{"instruction":"Transform the given code from C++ to Java. int main() { \\tstd::vector<int> numbers {1, 2, 3, 4, 5}; \\tfor (const auto& number: numbers) { \\t\\tstd::cout << number << std::endl; \\t} \\treturn 0; }","output":"public class Main { \\tpublic static void main(String[] args) { \\t\\tint[] numbers = {1, 2, 3, 4, 5}; \\t\\tfor (int number : numbers) { \\t\\t\\tSystem.out.println(number); \\t\\t} \\t} }"},{"instruction":"When given a list of words, output the longest word. ['cat', 'elephant', 'apple', 'banana']","output":"elephant"},{"instruction":"Given a list of words and numbers, create a program to print out the unique words and unique numbers. ['cat', 'elephant', 'dog', '15', '20', 'elephant', '8']","output":"Words: ['cat', 'dog', 'elephant'] Numbers: [15, 20, 8]"},{"instruction":"Using a given array of numbers, create a function to display the frequency of each number.","output":"def frequency(array):     count = {}     # Count the number of occurances     for element in array:         if element not in count:             count[element] = 1         else:             count[element] += 1     # Display the count     for element in count:         print(\\"Number {} occurs {} times\\".format(element, count[element]))"},{"instruction":"Create a for loop in Python that iterates over every element in a list named 'nums'. nums = [1, 4, 6, 8, 10]","output":"for num in nums:     # Do something with num"},{"instruction":"mplement a function 'convert_to_upper()' in JavaScript that converts a given string to uppercase. string = \\"Hello, World!","output":"function convert_to_upper(string) {  return string.toUpperCase(); }"},{"instruction":"Compare and contrast Java and Python for developing applications.","output":"Java and Python are both popular programming languages used for developing applications. Java is a statically typed language and requires extra effort in the form of type checking during compilation, while Python is a dynamically typed language and no type checking is required. Java is more suitable for large-scale enterprise software development and is known for its performance and scalability, whereas Python is generally easier to work with and better suited for smaller projects and prototyping. Java is also more verbose than Python, requiring more lines of code to accomplish the same task. On the other hand, Python has a large library of additional modules and provides simpler syntax and more intuitive programming style."},{"instruction":"Trace through the following code and explain what it does. arr = [1, 4, 6, 7] for i in range(len(arr)):     if arr[i] == 6:         arr[i] = 8","output":"The code loops through the elements of the list 'arr' and checks if each element is equal to 6. If it is, it replaces the element with 8. So after the loop, the list 'arr' would be changed to [1, 4, 8, 7]."},{"instruction":"w would you create a function in JavaScript that takes a string as an argument and counts the number of occurrences of a given character?","output":"function countOccurrences(str, char) {     let count = 0;     for(let i=0; i < str.length; i++) {         if(str[i] == char)             count++;     }     return count; }"},{"instruction":"Write a function in Java that takes a string as an argument and returns the length of the longest word in the string.","output":"public static int findLongestWordLength(String str) {     String[] words = str.split(\\" \\");     int maxLength = 0;     for (String word : words)         maxLength = Math.max(maxLength, word.length());     return maxLength; }"},{"instruction":"Create a function in JavaScript that takes an array and returns a new array containing the elements in reverse order.","output":"function reverseArray(arr) {     let newArr = [];     for (let i = arr.length - 1; i >= 0; i--) {         newArr.push(arr[i]);     }     return newArr; }"},{"instruction":"Write a Python program to find the longest substring in a given string which has no repeating characters.","output":"def longest_substring_without_repeating_characters(str):     start, max_len = 0, 0     used_char = {}     for i, char in enumerate(str):         if char in used_char and start <= used_char[char]:             start = used_char[char] + 1         else:             max_len = max(max_len, i - start + 1)         used_char[char] = i              return max_len"},{"instruction":"Print out the 3rd element in the list. list_to_print = ['foo', 'bar', 'baz']","output":"baz"},{"instruction":"Perform the following calculation without using the multiplication operator. 2*3","output":"2 + 2 + 2"},{"instruction":"Replace all 'e' characters with asterisks in the following sentence. The elephant is walking","output":"Th* appl*phant is walking"},{"instruction":"Write a function to detect if the given integer is even or odd. number = 3","output":"def is_even(number):     if number % 2 == 0:         return True     else:         return False"},{"instruction":"Compute the value of the expression given below. (2^3) + 5","output":"21"},{"instruction":"Find all local maxima in the given list. list_vals = [1, 2, 3, 4, 5, 2, 1]","output":"[3, 4, 5]"},{"instruction":"Write a regular expression that matches any string containing a digit.","output":"d+"},{"instruction":"Write a class and its constructor in Python for a vehicle object that has the fields 'type', 'make', 'model' and 'color'. Car, Toyota, Camry, Red","output":"class Vehicle:     def __init__(self, vehicle_type, make, model, color):         self.type = vehicle_type         self.make = make         self.model = model         self.color = color car = Vehicle(\\"Car\\", \\"Toyota\\", \\"Camry\\", \\"Red\\")"},{"instruction":"Create a script to find the longest palindrome in a given sentence. This is a level sentence.","output":"function findLongestPalindrome(str) {     let longestPalindrome = '';     for (let i = 0; i < str.length; i++) {         for (let j = i + 1; j < str.length + 1; j++) {             let currentSubstr = str.substring(i, j);             if (currentSubstr === currentSubstr.split(\\"\\").reverse().join(\\"\\") && currentSubstr.length > longestPalindrome.length) {                 longestPalindrome = currentSubstr;             }         }     }     return longestPalindrome;  }    console.log(findLongestPalindrome(\\"This is a level sentence.\\")); // Outputs: \\"level\\""},{"instruction":"Write an algorithm in JavaScript for finding the maximum number in a given array. [5, 10, 8, 3, 13]","output":"function maxFromArray(arr) {     let maxNum = arr[0];     for (let i = 1; i < arr.length; i++) {         if (arr[i] > maxNum) {             maxNum = arr[i];         }     }      return maxNum; } console.log(maxFromArray([5, 10, 8, 3, 13])); // Outputs: 13"},{"instruction":"Create a basic HTML form with two text inputs, one for email and one for a password.","output":"<form>    <input type=\\"email\\" name=\\"email\\" placeholder=\\"Email\\" />    <input type=\\"password\\" name=\\"password\\" placeholder=\\"Password\\" />    <input type=\\"submit\\" value=\\"Submit\\" /> </form>"},{"instruction":"PHP, write code to print out the following string: \\"Today is [day]\\". date('l')","output":"echo \\"Today is \\" . date('l');"},{"instruction":"Design a CSS structure to give an element a red background with rounded corners.","output":"element {   background-color: #ff0000;   border-radius: 10px;  }"},{"instruction":"Write a condition in an if-statement that checks whether a number is within a range of 5 to 10. number = 7","output":"if (number > 5 && number < 10) {   // do something }"},{"instruction":"Write a C++ program to take two numbers from the user and display the sum.","output":"#include <iostream>     using namespace std;     // main function -  // where the execution of program begins  int main()  {      // demanding two numbers to the user      int a, b, c;         cout << \\"Enter two numbers: \\";      cin >> a >> b;         c = a + b;      cout << \\"Sum is: \\" << c;         return 0;  }"},{"instruction":"Design a data structure to store a list of names of the student with their respective grades in a class. Student names and grades [     ['John', 90],      ['Tom', 80],     ['Jill', 95],     ['Stacy', 75] ]","output":"class StudentGrades:     def __init__(self, names, grades):         self.names = names         self.grades = grades          def add_entry(self, name, grade):         self.names.append(name)         self.grades.append(grade)              def get_grade(self, name):         for i in range(len(self.names)):             if self.names[i] == name:                return self.grades[i]"},{"instruction":"Compose a code to find the mean and median of a given list [1, 6, 4, 9, 5, 8, 2]","output":"def get_mean_median(nums):     num_count = len(nums)      num_sum = 0.0     for num in nums:          num_sum += num        mean = num_sum / num_count         nums.sort()      if num_count % 2 == 0:          median1 = nums[num_count//2]          median2 = nums[num_count//2 - 1]          median = (median1 + median2)/2     else:          median = nums[num_count//2]         return mean, median"},{"instruction":"Design a code to arrange an array of numbers such that all odd numbers come before even numbers. [2, 8, 3, 4, 9]","output":"def rearrange_arr(arr):      odd_list, even_list = [], []      for num in arr:          if num & 1:              odd_list.append(num)          else:              even_list.append(num)         return odd_list + even_list"},{"instruction":"Construct a code to remove all numbers greater than specified value from a given list. [1, 6, 4, 9, 5, 8, 2], 7","output":"def remove_greater(arr, value):     new_arr = []     for num in arr:         if num <= value:             new_arr.append(num)     return new_arr"},{"instruction":"Design a code to divide two integers without using division operator. 38, 4","output":"def divide_without_operator(x, y):     if x == 0:         return 0         sign = 1     if x * y < 0:         sign = -1        x = abs(x)      y = abs(y)         result = 0        while (x >= y):             temp = y          i = 1            while (x >= temp):              x -= temp              result += i              i <<= 1              temp <<= 1         return result * sign"},{"instruction":"Build a code to print out all permutations of the characters in a given string. \\"ABC","output":"def permute(s):      if len(s) == 0:          return ['']      prev_permutation_list = permute(s[1:len(s)])       next_list = []      for p in prev_permutation_list:          for j in range(len(p) + 1):              next_list.append(p[0:j] + s[0] + p[j:len(p)])       return next_list"},{"instruction":"Create an HTML element, a div with an ID of \\"content\\".","output":"<div id=\\"content\\"></div>"},{"instruction":"Generate a random string of 10 characters that contains only lowercase letters.","output":"hcuqwhvqme"},{"instruction":"Given an array of integers, return the sum of the elements. [1, 2, 3, 4]","output":"10"},{"instruction":"Update the HTML div with an ID of \\"content\\" so that its background color is blue.","output":"<div id=\\"content\\" style=\\"background-color:blue;\\"></div>"},{"instruction":"Given a string of text, print the count of all the words.","output":"def word_count(string):     count = 0     for word in string.split():         count += 1     return count"},{"instruction":"Create a JavaScript object that holds properties and methods for a Vehicle.","output":"let Vehicle = {   make: '',   model: '',   year: 0,   getFullDetails: function() {     return this.make + \\" \\" + this.model + \\" \\" + this.year;   } }"},{"instruction":"Rearrange the following code segments to sort an array of integers in descending order. array = [3, 5, 7, 1, 2]; A. for(let i=1; i<array.length; i++) B. for(let j=i+1; j<array.length; j++) C. if(array[i] < array[j]) D. [array[i], array[j]] = [array[j], array[i]];","output":"for(let i=0; i<array.length; i++) {     for(let j=i+1; j<array.length; j++) {         if(array[i] < array[j]) {             [array[i], array[j]] = [array[j], array[i]];         }     } }"},{"instruction":"Store this JSON data into a database of your choice. [   {     \\"name\\": \\"Bob\\",     \\"age\\": 30,     \\"city\\": \\"New York\\"   },   {     \\"name\\": \\"Alice\\",     \\"age\\": 25,     \\"city\\": \\"San Francisco\\"   } ]","output":"Using MongoDB: const MongoClient = require('mongodb').MongoClient; const users = [   {     \\"name\\": \\"Bob\\",     \\"age\\": 30,     \\"city\\": \\"New York\\"   },   {     \\"name\\": \\"Alice\\",     \\"age\\": 25,     \\"city\\": \\"San Francisco\\"   } ]; const url = 'mongodb://localhost:27017'; const dbName = 'myDatabase'; MongoClient.connect(url, {useNewUrlParser: true}, (err, client) => {   if(err){     console.log(\\"Error connecting to database \\" + err);     return;   } else {     console.log(\\"Successfully connected to database\\");     const db = client.db(dbName);     const collection = db.collection('users');     collection.insertMany(users, (err, result) => {       if(err){         console.log(\\"Error inserting users: \\" + err);       } else {         console.log(\\"Successfully inserted users into database\\");       }     });   } });"},{"instruction":"Write a loop in SQL for selecting all customer names that are not 'Bob'.","output":"SELECT name FROM customers WHERE name != 'Bob';"},{"instruction":"Write an algorithm to find the longest sub string without repeating characters. string = 'abcabcbb'","output":"def length_longest_substring(string):     start = 0     max_length = 0     seen = {}     for end in range(len(string)):         # Check if the character has been previously seen.         if string[end] in seen:             # Move the starting point of the substring to the index after the last seen character of this character.             start = max(start, seen[string[end]] + 1)         # Update the index value of the last seen character.         seen[string[end]] = end         # Calculate the length of the current substring.         max_length = max(max_length, end - start + 1)     # Return the maximum length of the substring.     return max_length"},{"instruction":"Summarize the text into a few sentences. The United Nations (UN) is an intergovernmental organization that aims to maintain international peace and security, develop friendly relations among nations, achieve international co-operation and be a centre for harmonizing the actions of nations. It is the largest, most familiar, most internationally represented and most powerful intergovernmental organization in the world.","output":"The United Nations is a global intergovernmental organization that works to maintain peace and security, foster friendly relations between nations, and promote international cooperation. It is the world's largest and most internationally represented organization, and is capable of powerful action to promote global harmony."},{"instruction":"Create an array containing 5 records of emplyee data, including name, age and city.","output":"let employeeData = [   {     \\"name\\": \\"John\\",     \\"age\\": 24,     \\"city\\": \\"New York\\"   },   {     \\"name\\": \\"Jane\\",     \\"age\\": 28,     \\"city\\": \\"London\\"   },   {     \\"name\\": \\"Bob\\",     \\"age\\": 32,     \\"city\\": \\"Los Angeles\\"   },   {     \\"name\\": \\"Alice\\",     \\"age\\": 25,     \\"city\\": \\"San Francisco\\"   },   {     \\"name\\": \\"Greg\\",     \\"age\\": 30,     \\"city\\": \\"Paris\\"   } ]"},{"instruction":"Write code in Java to calculate the median from an array of integers. arr = [7, 22, 21, 19, 17, 24]","output":"public double getMedian(int[] arr) {      Arrays.sort(arr);         int len = arr.length;      double median = 0;         if (len % 2 == 0) {          int a = arr[len / 2];          int b = arr[(len / 2) - 1];          median = (a + b) / 2.0;      }         else {          median = arr[len / 2];      }         return median;  }"},{"instruction":"Generate a random probability distribution with mean 0 and standard deviation 1 in Python.","output":"import numpy as np dist = np.random.normal(0, 1, 1000)  # mean, standard deviation, samples"},{"instruction":"Provide an example of a query to find all users whose age is 16 or over.","output":"SELECT * FROM Users WHERE age >= 16;"},{"instruction":"Create a second level navigation menu using HTML and CSS.","output":"<nav>   <ul>     <li>Home</li>     <li>About Us        <ul>         <li>Our History</li>         <li>Mission Statement</li>         <li>FAQ</li>       </ul>     </li>     <li>Products</li>     <li>Services</li>     <li>Contact Us</li>   </ul> </nav>"},{"instruction":"Write a SQL query for retrieving the address of the latest customer in the database.","output":"SELECT address FROM customers ORDER BY created_at DESC LIMIT 1;"},{"instruction":"Compile a C++ program, called \\"my_program\\", with the following code. #include <iostream>  int main()  {     std::cout << \\"Hello World!\\";     return 0;  }","output":"g++ -o my_program my_program.cpp"},{"instruction":"Create a function in R which returns the number of rows in a dataframe.","output":"number_of_rows <- function(dataframe) {   return (nrow(dataframe)) }"},{"instruction":"Filter a given list of numbers in Python to find all the even numbers. list1 = [3, 4, 5, 6, 7, 8, 9]","output":"list2 = [number for number in list1 if number % 2 == 0] print(list2) #[4, 6, 8]"},{"instruction":"Sort a given list of strings in ascending order by length in Python. list1 = [\\"cat\\", \\"apple\\", \\"dog\\", \\"banana\\"]","output":"list2 = sorted(list1, key=len) print(list2) #['cat', 'dog', 'apple', 'banana']"},{"instruction":"Create a function in R to get the last seven characters of a string.","output":"substr_last7 <- function(string) {   return (substr(string, nchar(string)-6, nchar(string))) }"},{"instruction":"Fill in the blank to generate a SHA-256 hash in JavaScript:","output":"const crypto = require('crypto'); const hash = crypto.createHash('sha256');"},{"instruction":"Create an array and insert a new record at the beginning of the array in JavaScript.","output":"let array = [1, 2, 3]; array.unshift(4); // Output: [4, 1, 2, 3]"},{"instruction":"Write a Java method to find the index of a given string in an array of strings.","output":"public int findIndexOfString(String[] array, String s) {     for (int i=0; i<array.length; i++) {         if(array[i].equals(s))              return i;     }     return -1; }"},{"instruction":"Create a class in Java and define two float variables and two float methods.","output":"public class FloatExample {     float var1, var2;     public void setVar1(float a) {         var1 = a;     }     public float getVar1() {         return var1;     }     public void setVar2(float b) {         var2 = b;     }     public float getVar2() {         return var2;     } }"},{"instruction":"Write a C program to print the numbers from 1 to 100, with the following conditions: if the number is divisible by 2, print \\"fizz\\" if the number is divisible by 3, print \\"buzz\\" if the number is divisible by both 2 and 3, print \\"fizzbuzz","output":"#include <stdio.h>     int main(void)  {      int i;      for (i=1; i<=100; i++)      {          // number divisible by 3 and 5 both          if (i % 3 == 0 && i % 5 == 0)              printf(\\"fizzbuzzn\\");             // number divisible by 3 only          else if (i % 3 == 0)               printf(\\"fizzn\\");             // number divisible by 5 only          else if (i % 5 == 0)              printf(\\"buzzn\\");             // number indivisible by both 3 and 5         else              printf(\\"%dn\\", i);      }      return 0;  }"},{"instruction":"Write a function in SQL to get the average salary of all engineers whose designation is \\"Senior Software Engineer\\".","output":"SELECT AVG(salary) FROM engineers  WHERE designation = 'Senior Software Engineer';"},{"instruction":"Write a function to decode a string encoded using Base64. encoded_s = \\"TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgdGluY2lkdXJlIGV4c2VlIGRlc2VydW50IG1vbGxpdCBhbmltIGlwc3VtIHRlbXBvcmUgYSBjb25zZXF1YXQgcXVpcyBkb2xvcmVtIG5pc2ku","output":"import base64  def decode_base64(encoded_s):    decoded_s = base64.b64decode(encoded_s).decode('utf-8')     return decoded_s"},{"instruction":"Write a function to classify a text as positive or negative. text = \\"This is an amazing product.","output":"def classify_text(text):   score = 0   words = text.split(\\" \\")   for word in words:     if word in positive_words:       score += 1     elif word in negative_words:       score -= 1   if score > 0:     return \\"positive\\"   elif score == 0:     return \\"neutral\\"   else:     return \\"negative\\""},{"instruction":"mplement a basic calculator using JavaScript.","output":"function calculate(inputString) {   let result = 0;   inputString.split(/+|-|*|//).forEach(function(value) {     result += parseFloat(value);   });   return result; }"},{"instruction":"Clone a given array. arr = [1,2,3,4,5]","output":"def clone(arr):   new_arr = arr.copy()   return new_arr"},{"instruction":"Create a function to print a table using a given dictionary. example_dict = {     'Name': ['John', 'Stella', 'Daniel'],      'Age': [20, 23, 19] }","output":"def print_table(dictionary):     \\"\\"\\"Prints a table from a dictionary of lists.\\"\\"\\"     # retrieve the lists     names = dictionary['Name']     ages = dictionary['Age']     # print the table     print('tNametAge')     print('-' * 20)     for i, name in enumerate(names):         age = ages[i]         print(f't{name}t{age}')"},{"instruction":"Write JavaScript code to Print the message after 5 seconds","output":"setTimeout(function(){     console.log('Printing message after 5 seconds'); }, 5000);"},{"instruction":"Use the following array to generate an HTML table. array = [{'Name': 'John', 'Age': 20}, {'Name': 'Stella', 'Age': 23},      {'Name': 'Daniel', 'Age': 19}]","output":"table = \\"<table>\\"; for(i=0; i < array.length; i++ ) {   table += \\"<tr>\\";   table += \\"<td>\\"+ array[i].Name +\\"</td>\\";   table += \\"<td>\\"+array[i].Age+\\"</td>\\";   table += \\"</tr>\\"; } table += \\"</table>\\"; console.log(table);"},{"instruction":"Provide a function to read a single line of user input in Python.","output":"def read_input():     \\"\\"\\"Reads a single line of user input.\\"\\"\\"     return input()"},{"instruction":"Retrieve the value of an item in a given array. arr = [1, 2, 3, 4, 5]","output":"def get_item_val(arr, idx): \\t\\"\\"\\"Retrieves the value of an item from the given array at a given index.\\"\\"\\" \\tif idx < 0 or idx > len(arr): \\t\\treturn None \\treturn arr[idx]"},{"instruction":"Generate an array with all the numbers from 1 to 100","output":"nums = [i for i in range(1,101)]"},{"instruction":"Perform sentiment analysis on this text. It was a wonderful experience staying at the hotel","output":"The sentiment of the text is positive."},{"instruction":"Define a function called find_sum that takes a list of numbers and adds them all together.","output":"def find_sum(seq):      s = 0             # iterate over the sequence      for i in seq:          s += i             return s"},{"instruction":"Using Java, create a class constructor for a 3D vector.","output":"class Vector3D {     double x;      double y;     double z;       Vector3D(double x, double y, double z) {         this.x = x;         this.y = y;         this.z = z;     } }"},{"instruction":"Write an SQL query to retrieve the top 3 scores in a table that contains scores for all players.","output":"SELECT TOP 3 * FROM scores ORDER BY score DESC;"},{"instruction":"Create a program in JavaScript that takes in a positive integer and returns the sum of its digits. 824","output":"function sumDigits(num) {   let str = num.toString();   let result = 0;   for (let char of str) {     result += Number(char);   }   return result; }"},{"instruction":"Using Java, make a program that finds out the smallest common denominator between two numbers. 12 and 18","output":"public static int getSmallestCommonDenominator(int a, int b){     int gcd = 1;               int smallNumber = Math.min(a, b);           for(int i = 1; i <= smallNumber; i++)      {         if(a % i == 0 && b % i == 0)              gcd = i;     }      int lcm = (a*b)/gcd;          return lcm;  }"},{"instruction":"Use Python to write a code that displays a multiplication table of a given number. 8","output":"def multTable(n):     for i in range(1, 11):         print(\\"{} x {} = {}\\".format(n, i, n*i))"},{"instruction":"Create a function in JavaScript to replace all instances of a specified word in a string with \\"peanut butter\\". String: \\"This is an example of the word example.\\" Word to replace: \\"example","output":"function replaceWord (str, wordToReplace) {     return str.replace(wordToReplace, \\"peanut butter\\"); }"},{"instruction":"Using JavaScript, make a function to calculate the area of a circle with a given radius. 4","output":"function areaOfCircle (radius) {     return Math.PI * radius * radius; }"},{"instruction":"Suggest a way to debug these lines of code. // code int i = 0; while (i<10) { \\ti++; \\tSystem.out.println(\\"Something is wrong!\\"); }","output":"One way to debug these lines of code is to add print statements before and after the loop to print the value of \\"i\\" both before and after the loop. Then, inside the loop, you can print out the value of \\"i\\" just before the \`\`println\`\` statement and you can also print out the value of \`\`i\`\` after the loop is exited. This will help you see which iteration is causing the issues."},{"instruction":"Create a python function that will convert a string to all uppercase.","output":"def toUpperCase(str):   return str.upper()"},{"instruction":"Suggest a SQL query to find the percentage of the total mark of a student. student_id: 987 student_marks: 40 total_marks: 50","output":"SELECT student_id, student_marks, total_marks, (student_marks/total_marks)*100 AS Percentage FROM table WHERE student_id = 987;"},{"instruction":"Suggest a way to find the number of occurrences of a time value in a given array. array = [10:00, 11:30, 10:00, 8:30, 10:00]","output":"We can use the reduce method to count the number of occurrences of a certain time value in the array. var array = [10:00, 11:30, 10:00, 8:30, 10:00]; var desiredTime = '10:00'; var count = array.reduce((n, val) => {     return n + (val === desiredTime); }, 0); console.log(count); // output: 3"},{"instruction":"Evaluate the following JSON data using a Javascript function. var data = {     \\"name\\": \\"John Doe\\",     \\"age\\": 28,     \\"hobbies\\": [\\"tennis\\", \\"football\\", \\"golf\\"] }","output":"function evaluateData(data) {     console.log(\`Name: {data.name}\`);     console.log(\`Age: {data.age}\`);     console.log(\`Hobbies: {data.hobbies.join(', ')}\`); } evaluateData(data); // Output: // Name: John Doe // Age: 28 // Hobbies: tennis, football, golf"},{"instruction":"Construct a function that can generate a unique identifier.","output":"function generateId() {   return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {     var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);     return v.toString(16);   }); }"},{"instruction":"Create a database table called 'Employees' with fields such as employee_id, name, age, email, etc.","output":"CREATE TABLE Employees (   employee_id INT NOT NULL AUTO_INCREMENT,   name VARCHAR(255) NOT NULL,   age INT NOT NULL,   email VARCHAR(255) NOT NULL,   PRIMARY KEY (employee_id) );"},{"instruction":"Create an array of random integers between 1 to 10 using the function **np.random.randint**.","output":"# Create array of random integers between 1 to 10 import numpy as np random_integers = np.random.randint(low=1, high=10, size=10)"},{"instruction":"Create an object-oriented program in Java which can display the current date and time.","output":"import java.util.Date; public class DateTime {    public static void main(String args[]) {       Date date = new Date();       System.out.println(\\"Current date and time is: \\" + date);    } }"},{"instruction":"Write a function in Python which can generate a random string consisting of lowercase letters, numbers and symbols.","output":"import string import random def random_string(stringLength=10):   lettersAndDigits = string.ascii_letters + string.digits + string.punctuation   return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))"},{"instruction":"Create a function in JavaScript for validating a given a string for all required special characters. ExampleString: \\"This string should contain at least 1 digit, one special character and one capital letter.","output":"function checkRegex(string) {     if (/[A-Z]/.test(string) && /[!@#%^&*]/.test(string) && /[0-9]/.test(string)) {          return true;     } else {         return false;     } }"},{"instruction":"Write a CSS code to center align the given text.","output":"p {   text-align: center; }"},{"instruction":"Generate XML tags for the given list of strings. list = [\\"string1\\",\\"string2\\",\\"string3\\"]","output":"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?> <root>   <string1></string1>   <string2></string2>   <string3></string3> </root>"},{"instruction":"Create two classes in Python which inherits from a parent class called **Shape**.","output":"class Shape(object):   pass    class Square(Shape):   def __init__(self, side):     self.side = side      class Circle(Shape):   def __init__(self, radius):     self.radius = radius"},{"instruction":"Create a function in Python for sending an email using the SMTP protocol.","output":"import smtplib def send_email(sender, recipient, message):    smtp_server = smtplib.SMTP(\\"smtp.example.com\\")   smtp_server.sendmail(sender, recipient, message)   smtp_server.quit()"},{"instruction":"Create a function in JavaScript which can receive and store user inputs.","output":"function storeInput() {   let inputs = [];   inputs.push(prompt(\\"Please input your name: \\"));   inputs.push(prompt(\\"Please input your age: \\"));   inputs.push(prompt(\\"Please input your email address: \\"));      return inputs; }"},{"instruction":"Create a database table to store student information such as id, name, gender etc.","output":"CREATE TABLE Students (   id INT NOT NULL AUTO_INCREMENT,   name VARCHAR(255) NOT NULL,   gender CHAR(1) NOT NULL,   address VARCHAR(255),   PRIMARY KEY (id) );"},{"instruction":"Find the number at the given index in an array. array = [1,2,3,4,5], index = 3","output":"def find_number(arr, index):   return arr[index]"},{"instruction":"Write a JavaScript program to find the sum of two numbers using a recursive function.","output":"// create a recursive function to find the sum of two numbers function addNums(num1, num2) {   // base case   if (num2 == 0) {     return num1;   }   // recursive case   else {     return addNums(++num1, --num2);   } }"},{"instruction":"Given the data structure below, write a function to print out all the elements in the array. const arr = [1, 2, 3, 4, 5];","output":"function printArray(arr){   for (let i = 0; i < arr.length; i++){     console.log(arr[i]);   } } printArray(arr);"},{"instruction":"mplement a function that check if a number is prime.","output":"function isPrime(num) {     for (let i = 2; i < num; i++) {         if (num % i === 0) {             return false;         }     }     return num > 1; }"},{"instruction":"Write CSS to give the title of a heading a font-size of 20px and a font-weight of 800.","output":"h1 {     font-size: 20px;     font-weight: 800; }"},{"instruction":"Explain the function of a variable in programming.","output":"In programming, a variable is a named storage location that can hold a value. Variables are used to store values that can be manipulated or referenced in a program. Variables can be used to hold numbers, text, or other types of data. They can also be used to store values or objects that are accessed or changed by a program. This allows a program to be dynamic and adaptable to ever-changing inputs and data."},{"instruction":"Create an object in JavaScript and give it two properties and two methods.","output":"const myObject = {     prop1: \\"value1\\",     prop2: \\"value2\\",     method1 : function(){         // do something     },     method2: function(){         // do something else     } }"},{"instruction":"Write HTML code that creates a table.","output":"<table>   <tr>     <th>Column 1</th>     <th>Column 2</th>     <th>Column 3</th>   </tr>   <tr>     <td>Cell 1</td>     <td>Cell 2</td>     <td>Cell 3</td>   </tr>   <tr>     <td>Cell 4</td>     <td>Cell 5</td>     <td>Cell 6</td>   </tr> </table>"},{"instruction":"Create a JavaScript class that has three properties.","output":"class MyClass {   constructor(prop1, prop2, prop3) {     this.prop1 = prop1;     this.prop2 = prop2;     this.prop3 = prop3;   } }"},{"instruction":"Create an if-elseif-else statement in JavaScript","output":"if (condition1) {     // code to execute if condition1 is true } else if (condition2) {     // code to execute if condition2 is true } else {     // code to execute if both condition1 and condition2 are false }"},{"instruction":"Write a function to calculate the power of two number (base^exp).","output":"function power(base, exp) {   if (exp == 0) return 1;    return base * power(base, exp-1) } power(5, 3);"},{"instruction":"mplement the update function in Java for a queue data structure.","output":"public void update(int index, Object newElement) {     if(index < 0 || index >= size()) {       throw new NoSuchElementException();     }     Node node = head;     for(int i = 0; i < index; i++) {       node = node.next;     }     node.element = newElement; }"},{"instruction":"Name and describe a feature of the JavaScript Date object.","output":"One feature of the JavaScript Date object is the Get Full Year method, which returns the 4 digit year for the provided date. It allows you to retrieve the year from a date object without any ambiguity due to different calendar conventions. It can also be used when dealing with years outside of the Gregorian calendar."},{"instruction":"Create a Java function to take two integers as parameters and return their sum as a double.","output":"public static double sumIntegers(int a, int b){     return (double) (a + b); }"},{"instruction":"Create a JSON object to represent an address.","output":"{   \\"houseNumber\\": \\"20\\",   \\"streetName\\": \\"Main Street\\",   \\"city\\": \\"Anytown\\",   \\"state\\": \\"AL\\",   \\"zip\\": \\"12345\\" }"},{"instruction":"Construct and execute a SQL query to select fields from the following table Table: student Fields: firstname, lastname, email","output":"SELECT firstname, lastname, email FROM student;"},{"instruction":"Generate an HTML page to display text The text to be displayed: \\"Hello World","output":"<html>   <head>     <title>Hello World</title>   </head>   <body>     <h1>Hello World</h1>   </body> </html>"},{"instruction":"dentify and implement a sorting algorithm for the following array int[] array = {23, 10, 4, 15, 66, 28, 11};","output":"int[] array = {23, 10, 4, 15, 66, 28, 11};    // Insertion sort for (int i = 1; i < array.length; i++) {     int key = array[i];     int j = i-1;       while (j >= 0 && array[j] > key) {         array[j + 1] = array[j];         j = j - 1;     }     array[j + 1] = key; } System.out.println(\\"Sorted array: \\"); for (int i = 0; i < array.length; i++) {     System.out.print(array[i] + \\" \\"); }"},{"instruction":"Loop through an array using JavaScript const array = [2, 3, 5, 7, 11];","output":"const array = [2, 3, 5, 7, 11]; for (let i = 0; i < array.length; i++) {     console.log(array[i]); }"},{"instruction":"Construct a JavaScript object with the following properties gender: female name: Jane age: 22","output":"let person = {     gender: 'female',     name: 'Jane',     age: 22 };"},{"instruction":"erpret the following code written in Bash list=(a b c d e) echo list echo {list[2]}","output":"list=(a b c d e) echo list This line prints the elements of the array which is \\"a b c d e\\". echo {list[2]} This line prints the element at index 2 from the array, which is \\"c\\"."},{"instruction":"Given a string, change the spaces between words to underscores String: \\"This is a string","output":"String str = \\"This is a string\\"; String newStr = str.replaceAll(\\"s\\", \\"_\\"); System.out.println(newStr);  // This_is_a_string"},{"instruction":"Create a function in Python to identify if the inputted number is odd or even.","output":"def is_odd_or_even(num):    return \\"even\\" if num % 2 == 0 else \\"odd\\""},{"instruction":"Create a JavaScript function to convert a given temperature in celsius to its equivalent in fahrenheit.","output":"function celsiusToFahrenheit(celsius) {    let fahrenheit = (celsius * 9/5) + 32;    return fahrenheit; }"},{"instruction":"Using an array, write a Python script that prints the sum of the numbers from 0 to 10.","output":"arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  sum = 0    # Iterate to find the sum  for i in range (0, len(arr)):      sum = sum + arr[i]         # Print the sum   print(sum)"},{"instruction":"Create a JavaScript function that takes two integers, n and m as input and returns true if n is larger than m, and false otherwise.","output":"function isNGreaterThanM(n, m) {    return n > m ? true : false;  }"},{"instruction":"Given an array of integers and a target value, write a Java program to determine whether this array contains two elements with the given target sum. arr = [2, 4, 6, 8, 10], target = 8","output":"boolean containsTargetSum(int[] arr, int target){   for (int i = 0; i < arr.length; i++){     for (int j = 1; j < arr.length; j++){       if (arr[i] + arr[j] == target)         return true;     }   }   return false; }"},{"instruction":"Create a C++ Program to reverse the words of a string.","output":"#include <iostream>  #include <string>  // function to reverse the words of a string  std::string reverseWords(std::string str)  {  \\tstd::string revString = \\"\\";  \\tint length = str.length();  \\t// Traverse given string from end  \\tfor (int i = length - 1; i >= 0; i--) {  \\t\\t// if (str[i] == ' ')  \\t\\t\\t// continue;  \\t\\t// Store next word  \\t\\tstd::string temp = \\"\\";  \\t\\twhile (i >= 0 && str[i] != ' ') {  \\t\\t\\ttemp = temp + str[i];  \\t\\t\\ti--;  \\t\\t}  \\t\\t// Append next word to result  \\t\\trevString = revString + temp + \\" \\";  \\t}  \\treturn revString;  }"},{"instruction":"Create an HTML and CSS layout to display a list of books with their author, title and description. Book 1: Author - John, Title - The Catcher in the Rye, Description - “The Catcher in the Rye is a 1951 novel by J. D. Salinger.”  Book 2: Author - Jane, Title - Sense and Sensibility, Description - “Sense and Sensibility is a novel by Jane Austen, published in 1811.”","output":"<html> <head> <style>   .book-container{     display: flex;     flex-wrap: wrap;   }   .book{ \\twidth: 300px; \\tpadding: 10px; \\tborder: 1px solid #ccc; \\tmargin: 10px; \\tbox-sizing : border-box;   }   .author { \\t  font-weight: bold;   }   .title { \\t  font-style: italic;   }   .description { \\t  font-size: 12px;   } </style> </head> <body>   <div class=\\"book-container\\">     <div class=\\"book\\">       <p class=\\"author\\">Author: John</p>       <p class=\\"title\\">Title: The Catcher in the Rye</p>       <p class=\\"description\\">Description: “The Catcher in the Rye is a 1951 novel by J. D. Salinger.”</p>     </div>     <div class=\\"book\\">       <p class=\\"author\\">Author: Jane</p>       <p class=\\"title\\">Title: Sense and Sensibility</p>       <p class=\\"description\\">Description: “Sense and Sensibility is a novel by Jane Austen, published in 1811.”</p>     </div>   </div> </body> </html>"},{"instruction":"Convert the following array of integers to a string: [1, 2, 3, 4, 5] [1, 2, 3, 4, 5]","output":"\\"1 2 3 4 5\\""},{"instruction":"Write a CSS rule to set font-size of an element to 20px","output":"CSS Rule:  {   font-size: 20px; }"},{"instruction":"w can you ensure that a button element with the ID of \\"submit-btn\\" is not clickable?","output":"You can ensure that a button element with the ID of \\"submit-btn\\" is not clickable by adding this code to the CSS file:  #submit-btn{   pointer-events: none; }"},{"instruction":"Create a list comprehension in Python to generate odd numbers between 1 and 10","output":"odd_numbers = [x for x in range(1, 11) if x % 2 != 0]"},{"instruction":"Change the following code to create a new string without spaces. string = \\"Hello World","output":"string = string.replace(' ', '') # new string is \\"HelloWorld\\""},{"instruction":"Make a valid http request call with the following parameters url = 'www.example.com' Method = 'GET' Header = 'Content-Type:application/json'","output":"import requests url = 'www.example.com' headers = {'Content-Type':'application/json'} r = requests.get(url, headers=headers)"},{"instruction":"w many lines of code does the following function contain? def f(x):     s = 0     for j in range(1,x+1):         for k in range(1,x+2):             if j % k == 0:                 s = s + 1     return","output":"This function contains 8 lines of code."},{"instruction":"Generate a list of 10 items from the given array. myArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","output":"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"},{"instruction":"Create an efficient algorithm that finds the intersection between two sorted arrays. arr1 = [1, 2, 6, 8, 9] arr2 = [2, 3, 5, 6, 7]","output":"def intersection(arr1, arr2):      result = []          i = 0     j = 0        while i < len(arr1) and j < len(arr2):          if arr1[i] < arr2[j]:              i += 1         elif arr2[j] < arr1[i]:              j += 1         else:              result.append(arr2[j])              j += 1             i += 1        return result"},{"instruction":"Write a Dockerfile for an Nginx server.","output":"FROM nginx:alpine COPY www/ /usr/share/nginx/html/ EXPOSE 80 CMD [\\"nginx\\", \\"-g\\", \\"daemon off;\\"]"},{"instruction":"Write a code to extract data from a PDF document.","output":"# install the required package pip install pdfminer.six # importing all the required modules  from pdfminer.pdfparser import PDFParser  from pdfminer.pdfdocument import PDFDocument  # open the pdf file  fp = open('sample_form.pdf', 'rb')  # create parser object  parser = PDFParser(fp)  # create pdf document object  doc = PDFDocument(parser)  # get the text data from pdf file  data = doc.get_data()  # print the text extracted  print(data)"},{"instruction":"Create a MySQL query to select all the employees who have 100 or more sales.","output":"SELECT *  FROM Employees  WHERE Sales >= 100;"},{"instruction":"Write a SQL query to find out all the cities that have the most expensive houses.","output":"SELECT City FROM Houses ORDER BY Price DESC LIMIT 10;"},{"instruction":"Create a program to search for a word in a document. document = \\"This is a sample document with some words.\\" word = \\"word","output":"def search(document, word):     if word in document:         print(\\"The word '{}' was found in the document\\".format(word))     else:         print(\\"The word '{}' was not found in the document\\".format(word)) search(document, word) # output = \\"The word 'words' was found in the document.\\""},{"instruction":"Create a dictionary of 10 words and their meanings.","output":"words_dict = {     'Piano': 'A musical instrument with keys and strings',     'Cello': 'A string instrument played with a bow',     'Drums': 'A percussion instrument',     'Guitar': 'A plucked stringed instrument',     'Harp': 'A stringed instrument played with the hands',     'Trumpet': 'A brass instrument',     'Violin': 'A bowed string instrument',     'Oboe': 'A double-reed wind instrument',     'Clarinet': 'A single-reed wind instrument',     'Flute': 'A wind instrument with a metal or wooden tube'     }"},{"instruction":"Construct a query to find the 2nd highest salary from an employee table.","output":"SELECT MAX(salary) FROM      (SELECT DISTINCT(salary) FROM employee     ORDER BY salary DESC     LIMIT 2)"},{"instruction":"Parse a string containing the date in the format: \\"YYYY-MM-DD date = \\"2021-10-15","output":"def parse_date(date):     year, month, day = date.split('-')     return (year, month, day) date_tuple = parse_date(date) print(date_tuple) # output = ('2021', '10', '15')"},{"instruction":"Create an initialization script for a database.","output":"#!/usr/bin/env python import sqlite3 db_name = 'example.db' # connect to the database db_connection = sqlite3.connect(db_name) # create tables db_connection.execute('''     CREATE TABLE IF NOT EXISTS users (         id INTEGER PRIMARY KEY,         name TEXT NOT NULL,         password TEXT NOT NULL) ''') db_connection.execute('''     CREATE TABLE IF NOT EXISTS items (         id INTEGER PRIMARY KEY,         name TEXT NOT NULL,         price INTEGER NOT NULL,         description TEXT NOT NULL) ''') # commit the changes  db_connection.commit()"},{"instruction":"Create a program to generate random passwords of 8 characters consisting of letters, numbers and special characters.","output":"import random import string def generate_password(length):     letters_and_digits = string.ascii_letters + string.digits      special_characters = '!@#%^&*()'     chars = letters_and_digits + special_characters     return ''.join(random.choice(chars) for i in range(length)) print(generate_password(8)) # output = xT@lo6Sw"},{"instruction":"Build a function in PHP that converts a string into ASCII code","output":"function stringToASCII(str){     result = '';   \\tfor(i=0; i<strlen(str); i++){     \\tresult .= ord(str[i]) .\\" \\";     }     return result; }"},{"instruction":"Edit the following code to return a Promise in the getMessage() function function getMessage() {     const fullName = getName();     // TODO: return a Promise }","output":"function getMessage() {     const fullName = getName();     // return a Promise     return new Promise ((resolve, reject) => {        resolve(fullName);     }); }"},{"instruction":"Java, what does the \\"public\\" modifier mean for a class?","output":"The public modifier for a class in Java means that the class is visible to all other classes, regardless of package. This means that any class can create an instance of the class, call its methods, and access its fields, as long as they have the proper access permissions."},{"instruction":"Given the following HTML: <div id=\\"Container\\">     <p>Hello World</p>     <!-- TODO: Add an image here --> </div>","output":"<div id=\\"Container\\">     <p>Hello World</p>     <img src=\\"your_image.jpg\\" alt=\\"your_image\\" /> </div>"},{"instruction":"Construct a method in Java to calculate the average of an array of numbers","output":"public static double calculateAverage(int[] numbers) {     double total = 0;     for (int num : numbers) {         total += num;     }     return total / numbers.length; }"},{"instruction":"JavaScript, what is the difference between var and let?","output":"The main difference between the \\"var\\" and \\"let\\" keywords in JavaScript is their scope. Variables declared with the \\"var\\" keyword have a function scope and are available throughout the entire function, while variables declared with \\"let\\" have a block scope and are available only in the block in which they are declared."},{"instruction":"We want to display a random number between 1 and 10 using Python. Write a program for that.","output":"import random randomNumber = random.randint(1, 10) print(randomNumber)"},{"instruction":"Develop a C++ program to find the volume of a cylinder given its radius and height. Radius: 12 Height: 20","output":"#include <iostream>  #include <math.h> using namespace std;  int main()  {    float radius, height, volume;       cout << \\"Enter the radius of the cylinder in cm: \\";    cin >> radius;       cout << \\"Enter the height of the cylinder in cm: \\";    cin >> height;       volume = 3.14159 * pow(radius, 2) * height;      cout << \\"The volume of the cylinder is: \\" << volume << \\" cm^3\\" << endl;   return 0; }"},{"instruction":"Compose a SQL query to display the highest minimum salary of the employees in each department.","output":"SELECT DepartmentID, MAX(MinSalary)  FROM Employee  GROUP BY DepartmentID;"},{"instruction":"Construct a multi-threaded application in Python to read and calculate the sum of a list of numbers. List of numbers:[25, 10, 5, 20]","output":"import threading     # function to read the numbers  def read_sum(list_of_numbers):      total = 0     for number in list_of_numbers:          total += number          print(\\"Sum of the list of numbers is: {}\\".format(total))     # Driver code  list_of_numbers = [25, 10, 5, 20]  start = 0 end = len(list_of_numbers)     # creating thread  t1 = threading.Thread(target=read_sum, args=(list_of_numbers[start:end],))     # starting thread 1  t1.start()  # wait until thread 1 is completely executed  t1.join()     # both threads completely executed  print(\\"Done!\\")"},{"instruction":"Develop a web service to convert a temperature value from Fahrenheit to Celsius. Temperature in Fahrenheit: 98","output":"#!/bin/bash import web urls = (    '/convert', 'ConvertFahrenheitToCelcius' ) app = web.application(urls, globals()) class ConvertFahrenheitToCelcius:     def GET(self):         web.header('Content-Type', 'text/plain; charset=utf-8')         tempFahrenheit = web.input().t         tempCelcius = (tempFahrenheit - 32) * (5/9)         return str(tempCelcius) if __name__ == \\"__main__\\":     app.run()"},{"instruction":"Create a table in MySQL that stores employee details.","output":"CREATE TABLE EmployeeRecord (    EmployeeID INT NOT NULL AUTO_INCREMENT,    Name VARCHAR(255) NOT NULL,    Age INT NOT NULL,    Address VARCHAR(255) NOT NULL,    Primary Key (EmployeeID) );"},{"instruction":"Create a C++ function to generate a binary tree with a breadth-first search algorithm. Nodes: 5, 4, 8, 11, 13, 4, 7, 2, 5, 1","output":"Node *generateBFSBinaryTree(vector<int> input_nodes) {     Node *root = new Node{input_nodes[0]};     queue<Node *> que;     que.push(root);     for (int i = 1; i < input_nodes.size(); ++i) {         Node *node = new Node{input_nodes[i]};         Node *par = que.front();         que.pop();         if (!par->left) {             par->left = node;         }         else {             par->right = node;         }         que.push(node);     }     return root; }"},{"instruction":"Create a UI Automation test that validates the text field is populated with the value \\"Hello World!\\".","output":"describe('Populated Text Field Test', () => {      it('Should validate the text field has the value of \\"Hello World!\\"', () => {         const value = textField.getAttribute('value');         expect(value).toEqual('Hello World!');     });  });"},{"instruction":"Edit the following HTML code to display a border around the element with the ID 'test-element'. <div id=\\"test-element\\">Hello World</div>","output":"<div id=\\"test-element\\" style=\\"border:1px solid #000\\">Hello World</div>"},{"instruction":"Write a SQL query to calculate the average age of customers who have purchased items from a store.","output":"SELECT AVG(age)  FROM customers  WHERE customers.purchases IS NOT NULL;"},{"instruction":"Write an SQL query to select the employees who have worked for more than 5 years.","output":"SELECT *  FROM employees  WHERE years_of_experience > 5;"},{"instruction":"Write a JavaScript code snippet to filter an array to retain only the strings in the array that start with \\"A\\". Array: [\\"Apple\\", \\"Banana\\", \\"Orange\\", \\"Apple Pie\\"]","output":"const result = array.filter(s => s.startsWith('A'));"},{"instruction":"Design an algorithm in Python to detect palindrome strings.","output":"def is_palindrome(s):     rev = ''.join(reversed(s))     if (s == rev):          return True     return False"},{"instruction":"Code a function that prints out the characters of a string one by one. str = \\"Hello World!","output":"function printCharByChar(str) {     for (let i=0; i<str.length; i++) {          console.log(str.charAt(i));      }  }  printCharByChar(str);"},{"instruction":"Your job is to generate random numbers within a given range. min = 20, max = 40","output":"function getRandomNumber(min, max){     return Math.floor(Math.random() * (max - min + 1)) + min; } console.log(getRandomNumber(min, max));"},{"instruction":"You are expected to calculate the average of the elements in an array. arr: [4, 7, 13, 33]","output":"function calculateAverage(arr){     let sum = 0;     for(let i=0; i<arr.length;i++){         sum+=arr[i];     }     return sum/arr.length; } console.log(calculateAverage(arr));"},{"instruction":"Find the greatest number from an array. arr = [41, 77, 56, 99]","output":"function greatestNumber(arr) {      return Math.max(...arr);  }  console.log(greatestNumber(arr));"},{"instruction":"Code a function to compute the difference between two dates. date1 = \\"02/26/2019\\"; date2 = \\"10/25/2020\\";","output":"function dateDifference(date1, date2){     let date1Moment = moment(date1, \\"MM/DD/YYYY\\");     let date2Moment = moment(date2, \\"MM/DD/YYYY\\");     let diffInDays = date2Moment.diff(date1Moment, 'days');     return diffInDays; } console.log(dateDifference(date1, date2));"},{"instruction":"Deploy a Keras model to Google App Engine.","output":"1. Create a Google Cloud Platform project and enable the App Engine API. 2. Create an app for your project on App Engine. 3. Install the Google Cloud SDK and authentication into your machine. 4. Initialize your project and configure the App Engine. 5. Follow the instructions to deploy the model with Google Cloud Endpoints. 6. Copy the URL from the Cloud Endpoint and use it to access the model from the App Engine."},{"instruction":"Create an SQL query to select only the rows from a table where the second column is not empty.","output":"SELECT * FROM TABLE_NAME WHERE COL2 <> '';"},{"instruction":"Formulate a plan to automate a login process.","output":"1. Identify the website that requires the login process. 2. Connect to the website using the appropriate library/API. 3. Get the username and password credentials from a secure database (or a file). 4. Use the credentials to create a login request. 5. Capture the response and analyze the outcome. 6. Extract any key elements of the response that are required to perform other activities (if required). 7. Log details from the login request in the database (or a file). 8. Handle any error cases appropriately."},{"instruction":"Create a class for a basketball team.","output":"class BasketballTeam:     def __init__(self, name, players):         self.name = name         self.players = players          def get_name(self):         return self.name          def get_players(self):         return self.players          def add_player(self, player):         self.players.append(player)         return self.players"},{"instruction":"Write a regular expression pattern to find all the words which begin with a digit.","output":"pattern = r'b[0-9]w+'"},{"instruction":"Parse a JSON string. {\\"name\\":\\"John\\", \\"age\\":30}","output":"import json json_data = '{\\"name\\":\\"John\\", \\"age\\":30}' data = json.loads(json_data) name = data[\\"name\\"] age = data[\\"age\\"] print(f\\"Name: {name}, Age: {age}\\")"},{"instruction":"mplement a queue data structure.","output":"class Queue:     def __init__(self):         self.data = []     def is_empty(self):         return not self.data      def enqueue(self, element):         self.data.append(element)     def dequeue(self):         return self.data.pop(0)              def peek(self):         if not self.is_empty():             return self.data[0]"},{"instruction":"Run a sentiment analysis of the following sentence using Python. The food was really good but the service was terrible.","output":"\\"\\"\\" Run a sentiment analysis of the sentence using Python \\"\\"\\" import nltk  from textblob import TextBlob  text = 'The food was really good but the service was terrible.' blob = TextBlob(text)  for sentence in blob.sentences:     print(sentence.sentiment) # Output Sentiment(polarity=0.05, subjectivity=0.6)"},{"instruction":"Create a MySQL query to retrieve the oldest record in a table called orders.","output":"SELECT * FROM orders ORDER BY created_at ASC LIMIT 1;"},{"instruction":"Write a code in Java to convert any string to camel case format. String = \\"this_is_a_string","output":"\\"\\"\\" Write a code to convert any string to camel case format in Java \\"\\"\\" public class CamelCaseFormat {     public static String toCamelCase(String s){         String[] parts = s.split(\\"_\\");         String camelCaseString = \\"\\";         for (String part : parts){             camelCaseString = camelCaseString + toProperCase(part);         }         return camelCaseString;     }          static String toProperCase(String s) {         return s.substring(0, 1).toUpperCase() +                s.substring(1).toLowerCase();     }       public static void main(String[] args)     {         String s = \\"this_is_a_string\\";         System.out.println(toCamelCase(s));     } }"},{"instruction":"Which data structure is most suitable for storing a large list of numbers?","output":"Heap or binary tree. A heap or binary tree data structure are most suitable for storing a large list of numbers as it provides O(log n) time complexity for insertion, search and deletion."},{"instruction":"Explain the concept of the depth-first search algorithm and provide an example.","output":"Depth-first search (DFS) is an algorithm used to traverse a tree or graph data structure. It starts at the root of the tree, explores as far as possible down a given branch and then backtracks along the same path before exploring a new branch. For example, consider a BST (Binary Search Tree) where we want to traverse all the elements, the algorithm starts at the root node, then traverses all the elements in the left subtree before traversing all the elements in the right subtree."},{"instruction":"Create a SQL query to retrieve the name, address and contact number of the customers with the highest spending record.","output":"SELECT name, address, contact_number FROM customers ORDER BY spending DESC LIMIT 1;"},{"instruction":"Explain the concept of fuzzy logic and provide an example.","output":"Fuzzy logic is a form of artificial intelligence that deals with reasoning that is approximate rather than exact. It is based on the concept of fuzzy sets, which allow for degrees of truth instead of just true and false. For example, \\"It's hot\\" is a fuzzy statement because there is no definite temperature that it could refer to. Different people might have different definitions of hot.  By using fuzzy logic, it is possible to create a temperature threshold to determine when an environment is hot, cold or moderate."},{"instruction":"Given a data set, calculate the average using Python. [1, 2, 3, 4, 5]","output":"nums = [1,2,3,4,5] sum = 0 for num in nums:   sum +=num average =sum / len(nums) print(average) // output is 3.0"},{"instruction":"Format the following SQL query using indentation. SELECT * FROM employee WHERE name = 'John'","output":"SELECT * FROM  employee WHERE  name = 'John'"},{"instruction":"Using Python, create a program that prints out the numbers 0 to 100.","output":"for i in range(101):     print(i)"},{"instruction":"Create a query in PostgreSQL to display all the records in a given table. Table name: 'employee'","output":"SELECT * FROM employee"},{"instruction":"Write a basic CSS structure to style a div element with the background colour of 'red'.","output":"div {    background-color: red; }"},{"instruction":"Write a SQL query to find all the names of people born before 1990.","output":"SELECT name FROM people WHERE year_of_birth <1990;"},{"instruction":"Create a HTML & CSS website template featuring a header with a website logo.","output":"<html> \\t<head> \\t\\t<title>My Website</title> \\t</head> <body> \\t<header> \\t\\t<div class = \\"logo\\"> \\t\\t\\t<img src = \\"logo.png\\" alt = \\"Website Logo\\" /> \\t\\t</div> \\t</header> \\t<!-- other code--> </body> </html> /* CSS Code */    header { \\tbackground-color: #ccc; \\tpadding: 30px 0; } .logo { \\ttext-align: center; } /* Other Styles */"},{"instruction":"w many islands of Scotland are there?","output":"There are over 700 islands in Scotland, with approximately 150 of them being inhabited."},{"instruction":"Develop an API that returns a list of students and their ages.","output":"import flask app = flask.Flask(__name__) students = {     'John': 20,     'Jane': 19,     'Bob': 22 } @app.route(\\"/get_student_ages\\", methods = [\\"GET\\"]) def get_student_ages():     return flask.jsonify(students)    if __name__ == \\"__main__\\":     app.run()"},{"instruction":"Create a data structure to store employee information.","output":"class Employee:     def __init__(self, name, age, salary):         self.name = name         self.age = age         self.salary = salary  employee_list = []"},{"instruction":"Write a MySQL query to find all the customers who have placed an order in the last 30 days.","output":"SELECT * FROM customers WHERE EXISTS (SELECT *               FROM orders               WHERE customers.CustomerID = orders.CustomerID               AND orders.OrderDate > NOW() - INTERVAL 30 DAY)"},{"instruction":"dentify which of these strings is a valid email address? name@example.com,lily.flower@example.net,www@example.org","output":"name@example.com is a valid email address."},{"instruction":"Choose the correct output of the following program. x = 3 y = 4 z = 5 if x < y and y < z:     print(x + y + z)","output":"12"},{"instruction":"Create a program to detect a negative number in an array of numbers. numbers = [10, -5, 4, 20]","output":"def detect_negative_number(numbers):     flag = False     for num in numbers:         if num < 0:             flag = True             break     return flag"},{"instruction":"Write a method in Swift to capitalize the first letter of a given sentence. sentence = \\"hello world","output":"func capitalizeFirstLetter(sentence: String) ->String {     return sentence.prefix(1).uppercased() + sentence.dropFirst() }"},{"instruction":"Search for Usernames starting with “John” in the database.","output":"SELECT * FROM users WHERE username LIKE 'John%';"},{"instruction":"Generate permutations of the given array of numbers. numbers = [1, 2, 3]","output":"def permutations(arr):     # base case:     if len(arr) == 0:         return []       # base case:      if len(arr) == 1:         return [arr]       # find all permutations for arr of size n-1     smaller_permutations = permutations(arr[1:])       # find permutations for element at the index 0     current_element = arr[0]     permutations_for_current_element = []       # iterate smaller permutations     for per in smaller_permutations:         # create new permutation         for i in range(len(per)+1):             # copy original values             new_permutation = per[:]             # insert current element             new_permutation.insert(i, current_element)             permutations_for_current_element.append(new_permutation)       return permutations_for_current_element"},{"instruction":"Write a function to calculate the triangular number of a given number n.","output":"def getTriangularNumber(n):     return int(n * (n + 1) / 2)"},{"instruction":"Design algorithm for the below use case Given two arrays A and B of the same length, determine whether there is a pair of indices (i, j) such that A[i] == B[j].","output":"def check_if_pair_exists(arr_a, arr_b):     for i in range(len(arr_a)):          for j in range(len(arr_b)):              if arr_a[i] == arr_b[j]:                  return True     return False"},{"instruction":"Write the pseudo-code algorithm that implements the following polynomial equation 3x^3 + 4x - 2","output":"def polynomial_eqn(x):     y = 3 * x**3 + 4 * x - 2     return y"},{"instruction":"Design the algorithm to perform a depth-first search on given binary tree","output":"def DFS(root):     s = Stack()     s.push(root)     while (s.size() > 0):         node = s.pop()         # Do something with the node         if (node.left != NULL):             s.push(node.left)         if (node.right != NULL):             s.push(node.right)"},{"instruction":"Write the code to calculate a factorial recursively","output":"def factorial(n):     if n == 0:         return 1     else:         return n * factorial(n - 1)"},{"instruction":"Create a sorting algorithm for an array that only needs 1 iteration","output":"def one_iteration_sort(arr):     for i in range(len(arr)):         min_index = i         for j in range(i, len(arr)):             if arr[j] < arr[min_index]:                 min_index = j         arr[i], arr[min_index] = arr[min_index], arr[i]"},{"instruction":"Create a program to detect a loop in a linked list","output":"def detect_loop(head):      slow_p = head      fast_p = head      while(slow_p and fast_p and fast_p.next):          slow_p = slow_p.next         fast_p = fast_p.next.next         if slow_p == fast_p:              return 1     return 0"},{"instruction":"Design an algorithm to add two given binary numbers","output":"def add_binary(b1, b2):     # initalize result     result = \\"\\"     carry = 0     # iterate over the bits     for i in range(max(len(b1), len(b2))):         a = int(b1[-i-1]) if i < len(b1) else 0         b = int(b2[-i-1]) if i < len(b2) else 0         #calculate sum         sum = carry ^ a ^ b         result = str(sum) + result         # calculate the carry         carry = (carry&a) | (carry&b) | (a&b)     #append the carry to the result     if carry:         result = '1' + result     return result"},{"instruction":"Explain what data encapsulation is.","output":"Data encapsulation is a software programming concept that allows the internal representation of an object to be hidden from the outside world. It is used to protect the data from being modified by parts of the program that should not have access to the data. It is also used to provide a way to extend the functionality of an object without editing the object code itself."},{"instruction":"Write a SQL query to retrieve data from two tables with similar columns. Table1 | id | name | address | |----|------|---------| | 1  | John |  NYC    | | 2  | Mary |  LA     | Table2 | id | name | address | |----|------|---------| | 3  | Mark |  Chicago| | 4  | Tom  |  Miami  |","output":"SELECT * from Table1, Table2 WHERE Table1.id = Table2.id;"},{"instruction":"Create a new C++ class with a constructor and destructor.","output":"class Example { public:  Example();  ~Example(); }; Example::Example() {} Example::~Example() {}"},{"instruction":"Classify the given sentence using the Bag-of-Words approach. Sentence: She felt so excited that her application got approval.","output":"She - Noun Felt - Verb So - Adverb Excited - Adjective That - Conjunction Her - Determiner Application - Noun Got - Verb Approval - Noun"},{"instruction":"What is the difference between procedural and object-oriented programming?","output":"The main difference between procedural and object-oriented programming is that object-oriented programming focuses on the objects and how they interact with each other, while procedural programming focuses on executing a sequence of steps. In object-oriented programming, data and functions are encapsulated into objects that can interact with each other, while procedural programming relies on the execution of a sequence of instructions. In addition, object-oriented programming encourages code reusability, while procedural programming does not."},{"instruction":"Given a string, write a code that counts the number of alphabets in it. input_string = \\"Hello World!","output":"input_string = \\"Hello World!\\" # Count the number of alphabets num_alphabets = sum(c.isalpha() for c in input_string)  print(\\"Number of alphabets in the string:\\", num_alphabets)"},{"instruction":"Debug the following code for finding the median of three numbers. def find_median(a, b, c):     if a > b:          if b > c:             return b          elif a > c:             return c         else:             return a     elif b > c:         return b     elif a > c:         return a     else:         return c","output":"def find_median(a, b, c):     # Calculate the maximum of the three numbers     max_num = max(a, b, c)     # Calculate the minimum of the three numbers     min_num = min(a, b, c)     # Calculate the median value as the sum of the three numbers minus the maximum and minimum     median = a + b + c - max_num - min_num     return median median_value = find_median(2, 3, 5) print(median_value) # 3"},{"instruction":"Create a class with two methods \\"get_sum\\" and \\"get_product\\" for calculating the sum and product of two numbers respectively.","output":"class Calculator:     \\"\\"\\"Class for calculating the sum and product of two numbers.\\"\\"\\"     # Method for calculating sum of two numbers     def get_sum(self, num1, num2):         return num1 + num2          # Method for calculating product of two numbers     def get_product(self, num1, num2):         return num1 * num2 # Create an instance of the class calc = Calculator() # Calculate the sum sum_value = calc.get_sum(3, 4) print(\\"Sum:\\", sum_value) # 7 # Calculate the product product_value = calc.get_product(3, 4) print(\\"Product:\\", product_value) # 12"},{"instruction":"Use regular expression to remove special characters from any given string. my_string = 'Hi There! Welcome.@'","output":"import re # The given string my_string = 'Hi There! Welcome.@' # Remove special characters using regular expressions clean_string = re.sub('[^a-zA-Z0-9s]', '', my_string) print(clean_string) # Hi There Welcome"},{"instruction":"Create an array of 10 random integers between 1 to 50 and print them.","output":"# Create an array of 10 random integers import random array = [] for i in range(10):     array.append(random.randint(1, 50)) print(array) # [33, 22, 34, 18, 28, 22, 17, 11, 26, 45]"},{"instruction":"Given a string, return the length of the longest run of characters. string = \\"aaaabbccdd","output":"4"},{"instruction":"Create a GUI application in C# that displays a welcome message when the program is launched.","output":"using System.Windows.Forms;    public static class Program  {      static void Main()      {          Application.EnableVisualStyles();          Application.Run(new Form1());      }  }    public class Form1 : Form  {      public Form1()      {          MessageBox.Show(\\"Welcome!\\");      }  }"},{"instruction":"Change the following code to a yield statement so that it can be used as a generator. def fibonacci():   a, b = 0, 1   while True:     yield a     a, b = b, a + b","output":"def fibonacci():    a, b = 0, 1   while True:      a, b = b, a + b      yield a"},{"instruction":"Write a CSS rule that changes the color of all the links in a webpage to blue.","output":"a {   color: blue; }"},{"instruction":"Given a string of length N, create an HTML table with N rows and 4 columns. string = \\"Hello World","output":"<table>   <tr>     <td>H</td>     <td>e</td>     <td>l</td>     <td>l</td>   </tr>   <tr>     <td>o</td>     <td>&nbsp;</td>     <td>W</td>     <td>o</td>   </tr>   <tr>     <td>r</td>     <td>l</td>     <td>d</td>     <td>&nbsp;</td>   </tr> </table>"},{"instruction":"Create a function in JavaScript that takes a string as an argument and returns the number of times that string is repeated in the input string. string = \\"HelloHello","output":"function countString(str) {   let count = 0;   for (let i = 0; i < str.length; i++) {     if (str.substring(i, i + 5) == \\"Hello\\") {       count++;     }   }   return count; }"},{"instruction":"Write a Python statement to print out the common items between two lists. list1 = [1, 2, 3, 4] list2 = [2, 4, 6 , 8]","output":"for i in list1:   if i in list2:     print(i)"},{"instruction":"Alter the following JSON object such that the date format of \\"date\\" field changes from \\"dd-mm-yyyy\\" to \\"dd/mm/yyyy\\". {   \\"name\\": \\"John\\",    \\"date\\": \\"22-02-2020\\" }","output":"{   \\"name\\": \\"John\\",    \\"date\\": \\"22/02/2020\\" }"},{"instruction":"Using the comments as a guide, implement a function that takes as input a list of integers and returns the maximum value. nums = [2, 8, 9, 10]","output":"def find_max(nums):      # initialise the max to the first element of the list      max = nums[0]     # loop over the list     for i in range(1, len(nums)):         # if the current element is greater than the max,         # update the max          if nums[i] > max:              max = nums[i]     # return the maximum value     return max"},{"instruction":"Create a function that takes in an array of strings and a search term and returns an array of indices of strings that match the search term. array = [\\"I love dogs\\",\\"I hate cats\\",\\"Dogs are the best\\"]  search_term = \\"dog","output":"def search_indices(array, search_term):     # initialise an empty list      indices_list = []      # loop over the array     for index, s in enumerate(array):          # if the search term is in the string          if search_term in s.lower():              # append the index to the list              indices_list.append(index)     # return the list of indices      return indices_list"},{"instruction":"Create a function to insert a given character at every odd index in a given string. string = \\"Hello\\" character = 'z'","output":"def insert_character(string, character):      # initialise a new string     new_string = \\"\\"     # loop over the string     for i in range(len(string)):         # if the index is odd          if i % 2 != 0:             # add the character             new_string += character         # add the current character         new_string += string[i]     # return the new string     return new_string"},{"instruction":"mplement a function that takes in a number n and deletes all the even numbers in an array of integers first n numbers. arr = [2, 3, 4, 5, 6, 7] n = 6","output":"def delete_even(arr, n):      # initialise a list      odd_list =[]     # loop over the array     for i in range(n):          # if the number is odd          if arr[i] % 2 != 0:             # add it to the list              odd_list.append(arr[i])     # return the list of odd numbers     return odd_list"},{"instruction":"Update the following JavaScript code so that it alerts a given string. let myStr = 'My string'","output":"let myStr = 'My string'; alert(myStr);"},{"instruction":"Write a JavaScript function that takes two numbers and returns the sum of all numbers in between the two.","output":"function sumNumbers(x, y) {   let sum = 0   for(let i = x; i <= y; i++) {     sum += i   }   return sum }"},{"instruction":"Create an SQL query that returns rows where the column \\"Field\\" is \\"Value\\". Field = 'Name' Value = 'John'","output":"SELECT * FROM table WHERE Field = 'Name' AND Value = 'John';"},{"instruction":"Create a MongoDB query that returns all documents that contain the string \\"query\\".","output":"db.collection.find({ text: { search: \\"query\\" } })"},{"instruction":"Write an HTML page that displays one heading and two paragraphs.","output":"<!DOCTYPE html> <html> <head>  <title>Page Title</title> </head> <body>  <h1>Heading</h1>  <p>Paragraph 1</p>  <p>Paragraph 2</p> </body> </html>"},{"instruction":"Write an R program to print out the numbers from 0-50, in steps of 4.","output":"x <- seq(from = 0, to = 50, by = 4) print(x)"},{"instruction":"Create an HTML page that includes three buttons with labels \\"A\\", \\"B\\" and \\"C\\".","output":"<!DOCTYPE html> <html> <head>  <title>Page Title</title> </head> <body>  <button>A</button>  <button>B</button>  <button>C</button> </body> </html>"},{"instruction":"Write an R program to generate 5 random numbers between 0 and 1.","output":"set.seed(1234) runif(5, min = 0, max = 1)"},{"instruction":"Create a valid regular expression that matches a valid U.S. phone number?","output":"^d{10}|(^d{3}-d{3}-d{4})|(^(d{3}) d{3}-d{4})"},{"instruction":"Write a function that calculates the Fibonacci numbers to the nth number","output":"def Fibonacci(n):      if n<0:          print(\\"Incorrect input\\")      elif n==1:          return 0     elif n==2:          return 1     else:          return Fibonacci(n-1)+Fibonacci(n-2)"},{"instruction":"Create a JavaScript object to fulfill the following purpose Create a calculator that can add, subtract, multiply and divide two numbers.","output":"const Calculator = {   add: function(a, b) {     return a + b;   },   subtract: function(a, b) {     return a - b;   },   multiply: function(a, b) {     return a * b;   },   divide: function(a, b) {     return a / b;   }, };"},{"instruction":"Write a code to identify the longest palindrome in a given string String: kayakracecar","output":"def get_longest_palindrome(s):     longest_palindrome = ''     s_length = len(s)     for i in range(s_length):         for j in range(i, s_length):             substring = s[i:j + 1]             if len(substring) > len(longest_palindrome) and substring == substring[::-1]:                 longest_palindrome = substring     return longest_palindrome # Verify it works print(get_longest_palindrome('kayakracecar'))"},{"instruction":"Create a CSS rule to rotate a text 45 degrees","output":"transform: rotate(45deg);"},{"instruction":"Write a code to extract the length of the longest sentence in a given text Text: The quick brown fox jumps over the lazy dog. The quick fox jumped over the lazy dog.","output":"def get_longest_sentence(text):     sentences = text.split('. ')     longest_sent_len = 0     longest_sent = ''     for sentence in sentences:         if len(sentence) > longest_sent_len:             longest_sent_len = len(sentence)             longest_sent = sentence     return longest_sent_len # Verify it works text = 'The quick brown fox jumps over the lazy dog. The quick fox jumped over the lazy dog.' print(get_longest_sentence(text))"},{"instruction":"Create an HTML web page that contains two text fields and two buttons","output":"<!DOCTYPE html> <html>   <head>     <title>Two Text Fields and Two Buttons</title>   </head>   <body>     <form action=\\"\\">       <input type=\\"text\\" placeholder=\\"Input 1\\" />       <input type=\\"text\\" placeholder=\\"Input 2\\" />       <button type=\\"submit\\">Button 1</button>       <button type=\\"reset\\">Button 2</button>     </form>   </body> </html>"},{"instruction":"Create a function that returns the sum of the Fibonacci sequence to the nth number","output":"def FibonacciSum(n):      fib1 = 0     fib2 = 1     if n < 0:          return \\"Incorrect input\\"     elif n == 0:         return 0     elif n == 1:          return 0     else:          sum = 0         for i in range(2,n+1):              fib_n = fib1 + fib2             fib1 = fib2             fib2 = fib_n             sum = sum + fib_n         return sum"},{"instruction":"Use recursion to construct a list of the first 10 powers of two (1, 2, 4, 8, ...).","output":"[1, 2, 4, 8, 16, 32, 64, 128, 256, 512]"},{"instruction":"Using the given sentence, design a regular expression which will match the given word. Word: apple Sentence: I bought an apple from the store.","output":"regex: bappleb"},{"instruction":"Find the 4th element in the given expression. list x=[1,3,5,7,9,8]","output":"Element: 7"},{"instruction":"Use the given HTML markup to generate a web page with a headline, body and paragraphs. <h1>My web page</h1>","output":"<html> <head>     <title>My web page</title> </head> <body>     <h1>My web page</h1>     <p>This is my web page.</p>     <p>It contains some information about me.</p> </body> </html>"},{"instruction":"Sort the given array of strings by their length. Array: ['hello', 'hi', 'howdy']","output":"Sorted Array: ['hi', 'hello', 'howdy']"},{"instruction":"vert the given dictionary. Dictionary: {'a': 1, 'b': 2, 'c':3}","output":"Inverted dictionary: {1: 'a', 2: 'b', 3: 'c'}"},{"instruction":"Extract the username and domain name from the given email address. Email address: johnsmith@example.com","output":"Username: johnsmith Domain name: example.com"},{"instruction":"Construct a class that takes a string and capitalizes the first letter.","output":"class CapitalizedWord:     def __init__(self, word):         self.word = word          def get_capitalized_word(self):         return self.word[0].upper() + self.word[1:]"},{"instruction":"Design a class named Circle that can store information about a circle and perform calculations on it.","output":"class Circle:          def __init__(self, radius):         self.radius = radius          def calculate_area(self):         return 3.14 * self.radius * self.radius          def calculate_circumference(self):         return 2 * 3.14 * self.radius"},{"instruction":"Create a function that takes two arguments, a list of strings and a string and returns the number of times the passed in string appears in the list. words = ['hello', 'hi', 'world', 'foo', 'bar', 'hello'] given_string = 'hello'","output":"def find_words(words, given_string):     count = 0     for word in words:         if word == given_string:             count += 1     return count if __name__ == '__main__':     words = ['hello', 'hi', 'world', 'foo', 'bar', 'hello']     given_string = 'hello'     print(find_words(words, given_string))"},{"instruction":"Write a code that takes in two strings that are anagrams of each other and determines whether they are anagrams. str1 = 'martha' str2 = 'hartma'","output":"def is_anagram(str1, str2):     if (sorted(str1)== sorted(str2)):         return True     else:         return False if __name__ == '__main__':     str1 = 'martha'     str2 = 'hartma'     print(is_anagram(str1, str2))"},{"instruction":"Create a program which takes two strings and checks if they are anagrams of one another. Input string 1: eats Input string 2: se","output":"def is_anagram(str1, str2):     if (sorted(str1)== sorted(str2)):         return True     else:         return False if __name__ == '__main__':     str1 = input(\\"Input string 1: \\")     str2 = input(\\"Input string 2: \\")     print(is_anagram(str1, str2))"},{"instruction":"Using jQuery, write a snippet to add a click event handler to a given HTML element. #html element <div class=\\"my-button\\">Click Me!</div>","output":"('.my-button').click(function(){     // Code here  });"},{"instruction":"Write a JavaScript program to create an array with the first element as the maximum and all other elements as the minimum value of the previous element. let arr = [5, 4, 3, 2, 1];","output":"let result = []; let max = arr[0]; result.push(max); for (let i = 1; i < arr.length; i++) {   let min = Math.min(max, arr[i]);   result.push(min);   max = min; } console.log(result); # Output: [5, 4, 3, 2, 1]"},{"instruction":"Write a JavaScript program to generate a random aluminum hexadecimal color code.","output":"let color = \\"#\\";  let characters = '0123456789ABCDEF';  for (let i = 0; i < 6; i++)    color += characters[Math.floor(Math.random() * 16)]; console.log(color); # Output: #6f435a"},{"instruction":"Using Java, write a function to find the count of all odd numbers between a given range. int start = 1; int end  = 10;","output":"public static int countOddNumbers(int start, int end) {      int count = 0;      for (int i = start; i <= end; i++)          if (i % 2 != 0)              count++;         return count;  } System.out.println(countOddNumbers(start, end)); # Output: 5"},{"instruction":"Create an HTML page that displays the following text in the body: \\"Hello World!\\".","output":"<html>   <head>   </head>   <body>     Hello World!   </body> </html>"},{"instruction":"Using CSS, write a code to set the font size of all the HTML elements on the page to 14px","output":"* {     font-size: 14px; }"},{"instruction":"Write a SQL query to find the names of the people who have a salary greater than the average salary. Table name: Employees Columns: id, name, salary","output":"SELECT name  FROM Employees  WHERE salary > (SELECT AVG(salary) FROM Employees);"},{"instruction":"Create a Python function that takes a string and prints out its reverse. string = \\"Hello world!","output":"def reverseString(string):   return string[::-1] print(reverseString(string)) # Output: !dlrow olleH"},{"instruction":"Write a Flask route to store the inputted data in the database. url: '/store_data'  data: { first_name: 'John', last_name: 'Doe' }","output":"@app.route('/store_data', methods=['POST']) def store_data():  data = request.get_json()    first_name = data['first_name']  last_name = data['last_name']    db.execute(\\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\\", (first_name, last_name))  db.commit()    return jsonify(message=\\"Data stored successfully.\\")"},{"instruction":"Create an array of objects in JavaScript for the following data: id, first name, last name, age.","output":"const array = [     { id: 1, firstName: 'John', lastName: 'Doe', age: 20 },     { id: 2, firstName: 'Jane', lastName: 'Smith', age: 21 },     { id: 3, firstName: 'Mike', lastName: 'Williams', age: 22 } ];"},{"instruction":"Write a MySQL query to fetch all the employees with the salary greater than 40,000.","output":"SELECT * FROM employees WHERE salary > 40000;"},{"instruction":"Create an iOS table view to display the list of items.","output":"class TableViewController: UITableViewController {     override func viewDidLoad() {         super.viewDidLoad()         tableView.dataSource = self     }          override func numberOfSections(in tableView: UITableView) -> Int {         // Number of sections your table view has         return 1     }          override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {         // Number of rows the table view should have         return items.count     }          override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {         let cell = tableView.dequeueReusableCell(withIdentifier: \\"Cell\\", for: indexPath)         cell.textLabel?.text = items[indexPath.row]         return cell     }     var items = [\\"Item 1\\", \\"Item 2\\", \\"Item 3\\", \\"Item 4\\", \\"Item 5\\"]      }"},{"instruction":"Generate an HTML table with 3 columns for Name, Email and Phone Number.","output":"<table>     <tr>         <th>Name</th>         <th>Email</th>         <th>Phone Number</th>     </tr>     <tr>         <td>John Doe</td>         <td>john@example.com</td>         <td>123-456-7890</td>     </tr> </table>"},{"instruction":"Create a Ruby method for calculating the mean of the given array of numbers.","output":"def calculate_mean(numbers)   sum = 0   numbers.each { |number| sum += number }   return (sum.to_f / numbers.length) end"},{"instruction":"Create a python dictionary of two elements 'name' and 'age' with the corresponding values John and 25.","output":"my_dict = {'name': 'John', 'age': 25}"},{"instruction":"mplement a recursive function to calculate the factorial of a number, given by the user as an argument.","output":"def calculate_factorial(num):     if num == 0 or num == 1:         return 1     else:         return num * calculate_factorial(num-1)"},{"instruction":"Edit the following code to use a dictionary instead of a list. list = [1, 3, 5] total = 0 for num in list:     total += num","output":"dict = {1:1, 3:3, 5:5} total = 0 for num in dict.values():     total += num"},{"instruction":"Create a code to display all unique pairs from the following list. [1,2,3,4,5,6]","output":"pairs = [] for i in range(len(list)):     for j in range(i+1, len(list)):         pairs.append((list[i], list[j]))  print(pairs)"},{"instruction":"Write code to create a list of length 10 with random integers.","output":"import random  myList = []  for i in range(10):       myList.append(random.randint(0,10))  print(myList)"},{"instruction":"Generate a sequence of strings according to the following pattern:","output":"my_list = [] for i in range(1, 10):     my_list.append(str(i) + \\"abc\\") print(my_list)"},{"instruction":"Write a SQL query to group the data based on 'category' and counting the number of entries in each category.","output":"SELECT category, COUNT(*) FROM table_name GROUP BY category;"},{"instruction":"Format the following list in descending order of number of characters in each string. list = ['Hello', 'World', 'Technology']","output":"def sort_list(list):     for i in range(len(list)):         for j in range(0, len(list)-i-1):             if len(list[j]) < len(list[j+1]):                 list[j], list[j+1] = list[j+1], list[j]     return list sort_list([\\"Hello\\", \\"World\\", \\"Technology\\"])"},{"instruction":"Generate a dictionary with the following entries [('a',1),('b',2)]","output":"my_dict = dict([('a', 1), ('b', 2)]) print(my_dict)"},{"instruction":"Create a C++ class called 'Student' with the following fields: id, name, age, and gender.","output":"class Student {   private:     int id;      string name;     int age;     string gender;   public:     int getId() const;     void setId(int id);     string getName() const;     void setName(string name);     int getAge() const;     void setAge(int age);     string getGender() const;     void setGender(string gender); };"},{"instruction":"Write a regular expression which can validate a given email address.","output":"^[a-z0-9_.]+@[a-z0-9_.]+[.]+[a-z]+"},{"instruction":"Create a PostgreSQL query to find all employees with a salary greater than or equal to 40,000.","output":"SELECT *  FROM employees  WHERE salary >= 40,000;"},{"instruction":"What is the maximum value an int type can hold?","output":"The maximum value an int type can hold is 2147483647."},{"instruction":"Take a sentence and tokenize it into separate words. The quick brown fox jumps over the lazy dog.","output":"['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog.']"},{"instruction":"Calculate the result of 3 * 5 + 7.","output":"22"},{"instruction":"Write a function that outputs the exact same output as its input.","output":"def same_output(input):   return input"},{"instruction":"Use a dictionary to store the names of 5 people and their contact numbers. Alice - 0123456789, Bob - 0987654321, Cara - 0345567890, Dave - 0412356789, Ed - 0999888777","output":"dict = {  'Alice':'0123456789',  'Bob' : '0987654321',  'Cara' : '0345567890',  'Dave' : '0412356789',  'Ed' : '0999888777' }"},{"instruction":"Write a function to multiply an array of 3 numbers by their sum. [4, 5, 6]","output":"def multiply_array(arr):    sum_of_arr = sum(arr)   for i in range(len(arr)):      arr[i] = arr[i] * sum_of_arr    return arr"},{"instruction":"w many distinct prime numbers are there less than 100?","output":"There are 25 distinct prime numbers less than 100."},{"instruction":"w would you convert an integer to a float in Python?","output":"You can convert an integer to a float in Python using the float() function. For example, float(4) would return 4.0."},{"instruction":"Design a class to represent a car with member variables for the make, model, and year.","output":"class Car:    def __init__(self, make, model, year):      self.make = make     self.model = model     self.year = year"},{"instruction":"Take two strings and concatenate them. \\"Hello \\" and \\"World","output":"\\"Hello World\\""},{"instruction":"Create a while loop that runs while a number is less than or equal to 10.","output":"number = 0  while number <= 10:    print(number)   number += 1"},{"instruction":"Find and list all the prime numbers between 0-100","output":"2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97."},{"instruction":"Assuming all operations in the code are O(1), find the Big O complexity of the code. for (int i = 0; i < n; i++)     for (int j = 0; j < i ; j++)         sum += a[i] + b[j];","output":"O(n^2)."},{"instruction":"Create and run a Python script that prints \\"Hello, World!","output":"# A simple python script print(\\"Hello, World!\\")"},{"instruction":"Using Regular Expressions, search for all 3-digit occurrences in the given text. text = \\"The ship had a 590 foot cargo hold, filled with 204 tons of goods.","output":"590 and 204."},{"instruction":"Apply the given CSS style to the HTML element. <div>Hello World</div> css: font-weight: bold;","output":"<div style=\\"font-weight: bold;\\">Hello World</div>"},{"instruction":"Write a SQL query to display the names of all customers and their orders.","output":"SELECT customer.name, orders.order_name FROM customer INNER JOIN orders ON customer.id = orders.customer_id;"},{"instruction":"Generate a unique 8-digit number using the Python Random module","output":"import random  random.seed(32)  unique_id = random.randint(100000000, 999999999) print(\\"unique 8-digit number:\\", unique_id)"},{"instruction":"Find all instances of the given symbol in the text. text = \\"The company has a 1 billion budget\\" symbol = \\"","output":"The symbol \\"\\" occurs 1 time in the given text."},{"instruction":"Using the provided data, generate a heatmap that contains the temperature readings for each hour. data = [[7,15,22], [2,7,23], [9,12,25]]","output":"from matplotlib.pyplot import imshow from matplotlib import pyplot as plt from numpy import array # Convert data to numpy array data_array = array(data) # Plot heatmap fig, ax = plt.subplots() im = ax.imshow(data_array) fig.colorbar(im) plt.show()"},{"instruction":"Find the sum of all odd numbers between 1-100.","output":"The sum of all odd numbers between 1-100 is 2500."},{"instruction":"Update the given array to replace all the zeroes with ones. my_array = [1, 0, 2, 0, 3, 0]","output":"my_array = [1, 1, 2, 1, 3, 1]"},{"instruction":"Find the output of the following code when input is 3. def get_result(n):     fib = [0, 1]      for i in range(2, n):          fib.append(fib[i-2] + fib[i-1])      return fib","output":"The output of the code when input is 3 is [0, 1, 1]."},{"instruction":"Write a regular expression that accepts a string with one or more spaces.","output":"^S(.*S)?"},{"instruction":"Using the given array, create a function to find the index of the second \\"a\\" in the array. let arr = [1, 'a', 2, 'b', 3, 'a'];","output":"function findSecondA(arr){    let count=0;    let index;    for(let i=0; i<arr.length; i++){        if(arr[i] == 'a'){            count++;        }        if(count == 2){            index = i;            break;        }    }    return index; }"},{"instruction":"Write a Python code snippet for printing the items in a given set. my_set = {1, 3, 5, 7, 9}","output":"for item in my_set:     print(item)"},{"instruction":"Create a list of numbers from 1 to 10 using list comprehension.","output":"my_list = [number for number in range(1, 11)]"},{"instruction":"Analyze the output of the following shell command.","output":"The shell command 'ls -l' will list all the files in the current working directory in long form. This means the output will include the file permissions, owner, group, size, modified date, and the name of the file."},{"instruction":"w to open a new terminal window in Linux?","output":"In Linux, you can open a new terminal window using the command line by using the \\"xterm\\" command or using the shortcut \\"Ctrl + Alt + T\\"."},{"instruction":"Request a list of all the devices connected to a network using the command line in Windows.","output":"In Windows, in the command line enter arp -a to get a list of all the devices and their respective IPs connected to the network."},{"instruction":"What is the difference between an unsigned int and a signed int in C language?","output":"Signed integers in C language can store both negative and positive values (from -2^31 to 2 ^31 - 1). Unsigned integers in C language can only store positive values (from 0 to 2^32 - 1). This means that a signed int is half the size of an unsigned int. It also means that a signed int ranges from -2^31 to 2^31 - 1 while an unsigned int can range from 0 to 2^32 - 1."},{"instruction":"w do you run a Python script from the command line?","output":"In order to run a python script from the command line, the \\"@python\\" command and the path to the file should be used. For example, to execute the \\"input.py\\" file, the command would be \\"@python C:Pathinput.py\\"."},{"instruction":"Write code to remove the first item from a list of integers in Python. numbers = [2, 3, 4, 5]","output":"numbers.pop(0)"},{"instruction":"Generate a valid HTML document.","output":"<html>     <head>         <title>My HTML Document</title>     </head>     <body>         <h1>My website</h1>         <div>             <p>This is my website content.</p>         </div>     </body> </html>"},{"instruction":"w do you calculate the hamming distance between two strings? str1 = \\"abc\\" str2 = \\"abd","output":"def hamming_distance(str1, str2):     # length of the strings must be equal     if len(str1) != len(str2):         return -1          distance = 0     for i in range(len(str1)):         if str1[i] != str2[i]:             distance += 1          return distance"},{"instruction":"Change all the values in a list to lowercase. mylist = ['Dog', 'Cat', 'Rabbit']","output":"mylist = [x.lower() for x in mylist] print(mylist)"},{"instruction":"w would you find the union of two sets? set1 = {1,2,3,4} set2 = {3,4,5,6}","output":"set3 = set1.union(set2) print(set3)"},{"instruction":"Develop a code to generate a random port number in the range of 1 to 65535.","output":"import random def get_random_port():     return random.randint(1, 65535) random_port = get_random_port() print(random_port)"},{"instruction":"Program a function to get the next element of a list. mylist = [1,3,5,7]","output":"def get_next(mylist):     for i in range(len(mylist)-1):         return mylist[i+1] print(get_next(mylist))"},{"instruction":"Write a function that takes in two strings(s1, s2) and returns a string. The output should be \\"s1s2\\".","output":"def join_strings(s1, s2):   return s1 + s2"},{"instruction":"Write a SQL query to find out how many employees work in a department with a certain id.","output":"SELECT COUNT(*) FROM employees WHERE department_id = <id>;"},{"instruction":"Debug the following piece of code so that the program functions properly. def sub_array(array, num):     for i in range(len(array) - 1, 0, -1):         if array[i] == num:             del array[i]","output":"def sub_array(array, num):     for i in range(len(array) - 1, 0, -1):         if array[i] == num:             del array[i]         else:             break"},{"instruction":"Create an algorithm to find out the longest common sub-sequence between two string inputs. \\"AGGTAB\\" \\"GXTXAYB","output":"def LCSubStr(Str1, Str2):      n = len(Str1)     m = len(Str2)     LCSuff = [0] * (n + 1)     LCSuff = [[0 for k in range(m + 1)] for l in range(n + 1)]        result = 0         for i in range(n):          for j in range(m):               if (Str1[i] == Str2[j]):                  LCSuff[i + 1][j + 1] =LCSuff[i][j] + 1                 if (LCSuff[i + 1][j + 1] > result):                      result = LCSuff[i + 1][j + 1]     return result"},{"instruction":"Create a function to return the subset of an array which has the lengths of its elements smaller than the given threshold. [1, 5, 2, 8], threshold = 5","output":"def filter_length(arr, th):   subset = []   for el in arr:     if len(el) <= th:       subset.append(el)   return subset"},{"instruction":"Write an Objective-C code snippet to print the phrase \\"Hello World!\\" to the terminal/console.","output":"NSLog(@\\"Hello World!\\");"},{"instruction":"Write a Java code snippet to print out the value of the variable \\"num\\" to the console. int num = 10;","output":"System.out.println(num);"},{"instruction":"Create a Java method that takes a string and returns the same string with all vowels replaced by asterisks (ie. \\"Hello\\" should return \\"H*ll*\\"). String s = \\"Hello\\";","output":"public String replaceVowels(String s) {     String result = \\"\\";     for (int i = 0; i < s.length(); i++) {         char ch = s.charAt(i);         if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {             result += \\"*\\";         } else {             result += ch;         }     }     return result; }"},{"instruction":"Create a test harness in C++ to verify the correctness of the following function // A function to calculate the nth Fibonacci number // Input: nth Fibonacci number // Output: nth Fibonacci number int calcFib(int n)  {      if (n<=1)          return n;      return calcFib(n-1) + calcFib(n-2);  }","output":"#include <iostream> // Function to calculate the // nth Fibonacci number  int calcFib(int n) {   if (n <= 1)     return n;   return calcFib(n - 1) + calcFib(n - 2); } // Test Harness to verify the correctness // of the calcFib implementation int main() {   // Input value to calculate   const int n = 10;   // Expected Output value   const int expected_output = 55;   // Calculate nth fibonacci number   int output = calcFib(n);   // Verify correctness   if (output == expected_output)     std::cout << \\"Test Passed\\" << std::endl;   else     std::cout << \\"Test Failed\\" << std::endl;   return 0; }"},{"instruction":"Write a JavaScript program to rotate an array by a given number let arr = [1, 2, 3, 4, 5]; let n = 2;","output":"function rotateArray(arr, n) {     while (n > 0) {         let temp = arr[arr.length-1];         for (let i = arr.length-2; i >= 0; i--) {              arr[i+1] = arr[i];         }         arr[0] = temp;         n--;     }     return arr; }"},{"instruction":"Create a function in Python to generate n permutations of a given array. arr = [1, 2, 3] n = 6","output":"import itertools  # Function to generate  # n permutations of the given array  def permutation(arr, n):  \\t \\t# Get all permutations  \\tpermList = list(itertools.permutations(arr, n))  \\t \\t# Converting each tuple in the  \\t# list of tuples to list  \\tres = [list(ele) for ele in permList]  \\t# Returning the list of lists  \\treturn res"},{"instruction":"Write an SQL query to find the minimum salary among all employees","output":"SELECT MIN(salary) FROM employees;"},{"instruction":"Create a CSS class to display an element as a block-level element.","output":".block-level {   display: block; }"},{"instruction":"Create a python class \\"Car\\" with fields \\"make\\" and \\"model\\".","output":"class Car:     def __init__(self, make, model):         self.make = make         self.model = model"},{"instruction":"Create an array of three strings: \\"red\\", \\"blue\\", and \\"green\\".","output":"const colors = [\\"red\\", \\"blue\\", \\"green\\"];"},{"instruction":"Generate a Python code that flattens a two-dimensional array. [[1, 2], [3, 4]]","output":"def flatten_2d_array(arr):     flat_arr = []     for subarr in arr:         flat_arr += subarr     return flat_arr # Driver code input_list = [[1, 2], [3, 4]] print(flatten_2d_array(input_list))"},{"instruction":"Write a C program which reads numbers until 0 is entered and prints the largest number","output":"#include <stdio.h>  int main()  {  \\t// Declare vars  \\tint n, largest;  \\t// Read input  \\tscanf(\\"%d\\", &n);  \\t// Initialize largest  \\tlargest = n;  \\t \\t// Iterate over other elements  \\twhile (n > 0) {  \\t\\tscanf(\\"%d\\", &n);  \\t\\t// Update largest  \\t\\tif (n > largest){ \\t\\t\\tlargest = n; \\t\\t}  \\t}     \\t// Print largest  \\tprintf(\\"%d\\", largest);  \\t\\t \\treturn 0;  }"},{"instruction":"Create a function that concatenates two strings and prints them out. a = \\"Hello \\" b = \\"world!","output":"def concat_strings(a, b):     print(a + b)      concat_strings(\\"Hello \\", \\"world!\\")"},{"instruction":"Write a for loop in Java that prints out the even numbers between 0 and 10.","output":"for(int i = 0; i <= 10; i++){     if(i % 2 == 0){         System.out.println(i);     } }"},{"instruction":"mplement a function in Python that takes a list of strings as parameter and prints out the longest string. strings = [\\"Hello\\", \\"world\\", \\"Welcome\\",\\"to\\", \\"my\\", \\"programming\\", \\"challenge\\"]","output":"def print_longest_string(strings):   longest_string = \\"\\"   for string in strings:     if len(string) > len(longest_string):       longest_string = string   print(longest_string) print_longest_string(strings)"},{"instruction":"Create a function that performs a bubble sort of an array in JavaScript. arr = [4, 7, 1, 3, 6, 9, 8, 10, 2, 5]","output":"function bubbleSort(arr) {   let swapped;   do {     swapped = false;     for (let i=0; i < arr.length; i++) {       if (arr[i] && arr[i + 1] && arr[i] > arr[i + 1]) {         let temp = arr[i];         arr[i] = arr[i + 1];         arr[i + 1] = temp;         swapped = true;       }     }   } while (swapped);   return arr; } bubbleSort(arr);"},{"instruction":"Write a function in Java that takes an integer and returns an array of all the prime numbers from 2 up to the number. number = 10","output":"public static int[] getAllPrimeNumbers(int number){     int[] primeNumbers = new int[number];     int index = 0;     for (int i = 2; i <= number; i++){         if(isPrime(i)){             primeNumbers[index] = i;             index++;         }     }     return primeNumbers; } public static boolean isPrime(int number){     for(int i=2; i<number; i++){         if(number%i == 0){             return false;         }     }     return true; }"},{"instruction":"Optimize the runtime of this SQL query. SELECT * FROM customers WHERE age > 30 AND city == \\"New York","output":"SELECT * FROM customers  WHERE city = \\"New York\\"  AND age > 30  ORDER BY age ASC;"},{"instruction":"Find the lowest common ancestor in a binary tree in C++.","output":"Node* findLCA(Node* root, Node* n1, Node* n2){     if (root == NULL) return NULL;        if (root == n1 || root == n2)     return root;        Node *left_lca = findLCA(root->left, n1, n2);     Node *right_lca = findLCA(root->right, n1, n2);       if (left_lca && right_lca)  return root;       return (left_lca != NULL)? left_lca: right_lca;  }"},{"instruction":"w do you compare two strings in Java?","output":"In Java, two strings can be compared using the equals() or compareTo() methods.  The equals() method returns true if the two strings have the same length and contain the same characters in the same order.  The compareTo() method returns 0 if the two strings have the same length and contain the same characters in the same order. Otherwise, it returns a positive or negative number indicating which string is \\"larger\\"."},{"instruction":"Using the input, write a function that prints out the Nth Fibonacci number.","output":"def Fibonacci(n):      if n < 0:          print(\\"Incorrect input\\")      # First Fibonacci number is 0      elif n == 0:          return 0     # Second Fibonacci number is 1      elif n == 1:          return 1     else:          return Fibonacci(n-1)+Fibonacci(n-2)"},{"instruction":"Given a Python function, edit the function such that it correctly prints the second highest value of the list. def getSecondMax(a):     print(max(a))","output":"def getSecondMax(a):     s = sorted(a)[-2]     print(s)"},{"instruction":"Generate a valid regular expression to catch URLs in strings.","output":"r\\"(https?://(?:www.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9].[^s]{2,}|www.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9].[^s]{2,}|https?://(?:www.|(?!www))[a-zA-Z0-9]+.[^s]{2,}|www.[a-zA-Z0-9]+.[^s]{2,})\\""},{"instruction":"Create a Python script to output the sum of the elements in a given 2-D array. X = [[11, 18], [20, 1], [12, 16]]","output":"def sum_elements(X):     sums = 0     for i in range(len(X)):         for j in range(len(X[i])):             sums+=X[i][j]     return sums print(sum_elements(X))"},{"instruction":"Modify the input so that the following Python program returns 'Yes' num = 10 if num > 5:     print('No')","output":"num = 10 if num > 5:     print('Yes')"},{"instruction":"Given the input list of size N, write a code to print out the sum of the first N-1 elements. X = [10, 20, 30, 40, 50]","output":"def sum_firstN_minusOne(X):     total = 0     for i in range(len(X)-1):         total += X[i]     return total print(sum_firstN_minusOne(X))"},{"instruction":"Output a list of each element in the input increase twice. [1,10,20]","output":"def double_each(lst):     return [x*2 for x in lst] print(double_each([1,10,20]))"},{"instruction":"Formulate a suitable machine learning model to perform topic clustering.","output":"A suitable machine learning model to perform topic clustering would be a clustering algorithm such as k-means, or a hierarchical clustering algorithm. These algorithms use the similarity or distance between each datapoint in order to group them into meaningful clusters."},{"instruction":"Design a C++ program to read and display a matrix.","output":"#include <iostream> using namespace std;  int main(){     int r, c, e;      cout << \\"Input number of rows : \\";      cin >> r;      cout << \\"Input number of columns : \\";      cin >> c;           int M[r][c];      // Take input of elements      for(int i = 0; i < r; ++i){         cout << \\"Enter elements of row \\"<< i+1;          for(int j = 0; j < c; ++j){             cin >> e;              M[i][j] = e;         }     }        // Display      cout << \\"Elements of matrixn\\";      for(int i = 0; i < r; ++i){          for(int j = 0; j < c; ++j){              cout << M[i][j] << \\" \\";         }          cout << endl;     }      return 0; }"},{"instruction":"Write a code to print out the list of the numbers from 0 to 10 in descending order.","output":"for n in range(10, -1, -1):      print(n)"},{"instruction":"Edit the following Python class 'Foo' to accept a list of numbers upon instantiation. class Foo():     def __init__(self):         self.lst = []","output":"class Foo():     def __init__(self, lst):         self.lst = lst"},{"instruction":"Generate a code to perform a Merge Sort on an unsorted array of numbers.","output":"def mergeSort(arr):      if len(arr) >1:          mid = len(arr)//2          L = arr[:mid]          R = arr[mid:]             mergeSort(L)          mergeSort(R)             i = j = k = 0                    while i < len(L) and j < len(R):              if L[i] < R[j]:                  arr[k] = L[i]                  i+=1             else:                  arr[k] = R[j]                  j+=1             k+=1                    while i < len(L):              arr[k] = L[i]              i+=1             k+=1                    while j < len(R):              arr[k] = R[j]              j+=1             k+=1"},{"instruction":"Create a function to find the number of elements in the list which have a value larger than the given number 'k'. [10, 15, 20, 25], k = 15","output":"def count_larger(lst, k):     count = 0     for i in lst:         if i > k:             count += 1     return count          print(count_larger([10, 15, 20, 25], 15))"},{"instruction":"Write a code to print out the union of two sets using Python.","output":"def find_union(A, B):     return list(set(A).union(set(B))) A = [1, 2, 3, 4]  B = [4, 5, 6, 7]  print(find_union(A, B))"},{"instruction":"Write a function that takes in a string and a character and returns the first index at which the character appears. str = 'Hello World' char = 'o'","output":"def firstIndex(str, char):      index = -1     for i in range(len(str)):           if (str[i] == char):               index = i              break     return index  result = firstIndex(str, char)  print(result) # prints 4"},{"instruction":"Write a function to create a retail price tag given a cost, taxes and discounts. cost = 5 tax = 0.08 discount = 0.2","output":"def price_tag(cost, tax, discount):   tax_amount = cost * tax    discounted_price = cost + tax_amount - (discount * cost)   return \\"Retail Price: \\" + str(round(discounted_price, 2)) price_tag(cost, tax, discount) # returns \\"Retail Price: 7.20\\""},{"instruction":"Write an HTML code snippet for creating a search box.","output":"<form action=\\"/search\\" method=\\"get\\">     <input name=\\"s\\" type=\\"text\\" placeholder=\\"Search...\\">     <input type=\\"submit\\" value=\\"Search\\"> </form>"},{"instruction":"Write a SQL query to find the name and occupation of all people older than 60.","output":"SELECT name, occupation  FROM people  WHERE age > 60;"},{"instruction":"Write a PHP code for finding the longest word in an array of strings. arr = [\\"Hello\\", \\"World\\", \\"My\\", \\"Name\\", \\"Is\\"];","output":"<?php arr = [\\"Hello\\", \\"World\\", \\"My\\", \\"Name\\", \\"Is\\"]; //Finding the longest word in the array longestWord = \\"\\"; foreach(arr as word) {     if (strlen(word) > strlen(longestWord)) {         longestWord = word;     } } echo \\"The longest word is: \\" . longestWord; ?>"},{"instruction":"Write an SQL query to find the average salary of all the employees with 10 years of experience.","output":"SELECT AVG(salary)  FROM employees  WHERE experience = 10;"},{"instruction":"Write a Java program for computing the product of two matrixes.","output":"public class MatrixProduct {         // Method for matrix multiplication      static int[][] multiplyMatrix(int[][] matrix1,                                       int[][] matrix2)      {          int rowsInA = matrix1.length;          int columnsInA = matrix1[0].length; // same as rows in B          int columnsInB = matrix2[0].length;          int[][] product = new int[rowsInA][columnsInB];          for (int i = 0; i < rowsInA; i++) {              for (int j = 0; j < columnsInB; j++) {                  for (int k = 0; k < columnsInA; k++) {                      product[i][j] += matrix1[i][k] * matrix2[k][j];                  }              }          }          return product;      }         // Driver code      public static void main(String args[])      {          int[][] matrixA = { { 1, 2, 3 },                              { 4, 5, 6 }                              };             int[][] matrixB = { { 7, 8 },                              { 9, 10 },                              { 11, 12 }                              };             int[][] product = multiplyMatrix(matrixA, matrixB); # the product matrix             // Display the result          System.out.println(\\"Product of two matrices is : \\");          for (int[] row : product) {              for (int column : row) {                  System.out.print(column + \\" \\");              }              System.out.println();          }      }  }"},{"instruction":"Write an HTML code for creating a dropdown menu with two options, \\"Apple\\" and \\"Orange\\".","output":"<select>     <option value=\\"Apple\\">Apple</option>     <option value=\\"Orange\\">Orange</option> </select>"},{"instruction":"Write an HTML program to display an output as a table.","output":"<html>     <head>         <title>Table example</title>     </head>     <body>         <table border = \\"1\\">             <tr>             <td>Row 1, Column 1</td>             <td>Row 1, Column 2</td>              </tr>             <tr>                 <td>Row 2, Column 1</td>                 <td>Row 2, Column 2</td>              </tr>         </table>     </body> </html>"},{"instruction":"What are the components of a class in Java?","output":"A class in Java consists of the following components: fields (state of the object), constructors (constructs an object), methods (behavior of the object), nested classes and interfaces (classes that are associated with the class in which it is declared). The fields and methods are collectively called members of the class. Fields are variables that hold the state of the object while methods represent the behaviors of the object."},{"instruction":"Write a TensorFlow program to compute the sum of two tensors. x = [[1,2],[3,4]]  y = [[5,6],[7,8]]","output":"import tensorflow as tf x = tf.constant([[1,2],[3,4]], dtype=tf.int32)  y = tf.constant([[5,6],[7,8]], dtype=tf.int32) #Sum operation z = tf.add(x, y) #Run in session with tf.Session() as session:   print(session.run(z)) # Output:  # [[ 6  8] #  [10 12]]"},{"instruction":"Convert the following JavaScript function to TypeScript. function countOccurences(numList,num) {     let count = 0;     for (let i = 0; i < numList.length; i++) {         if (numList[i] === num) count++;     }     return count; }","output":"function countOccurences(numList: number[], num: number): number {     let count = 0;     for (let i = 0; i < numList.length; i++) {         if (numList[i] === num) count++;     }     return count; }"},{"instruction":"Guess what is wrong with the following HTML code. <h1>Welcome<h1>   <b>This is a sample page<b>","output":"The HTML tags should be closed properly. The correct code should be: <h1>Welcome</h1>   <b>This is a sample page</b>"},{"instruction":"Name the four programming paradigms.","output":"The four main programming paradigms are procedural, object-oriented, functional, and logical."},{"instruction":"Write the code for the following sorting algorithm. Bubble Sor","output":"def bubbleSort(arr):         # Traverse through all array elements      for i in range(len(arr)):             # Last i elements are already in place          for j in range(0, len(arr)-i-1):                 # traverse the array from 0 to n-i-1              # Swap if the element found is greater              # than the next element              if arr[j] > arr[j+1] :                  arr[j], arr[j+1] = arr[j+1], arr[j]     # Driver code to test above  arr = [64, 34, 25, 12, 22, 11, 90]     bubbleSort(arr)     print (\\"Sorted array is:\\")  for i in range(len(arr)):      print (\\"%d\\" %arr[i]),"},{"instruction":"Using Java, write the code to calculate the sum of elements in a two-dimensional array. int[][] arr = {                  {2, 3, 8},                  {4, 5, 1},                  {7, 0, 6}                };","output":"public class SumOfEle{      public static void main(String[] args) {          // creating a two-dimensional array          int[][] arr = {              {2, 3, 8},              {4, 5, 1},              {7, 0, 6}          };          // Creating an int variable to store the value.          int sum = 0;         for (int i=0; i<arr.length; i++){              for (int j=0; j<arr[i].length; j++) {                 sum += arr[i][j];              }         }          System.out.println(\\"Sum of Array Elements = \\"+sum);      }  }"},{"instruction":"Write a JavaScript program to accept a string and display the characters in reverse order.","output":"function reverseString(str) {   return str.split('').reverse().join(''); } let str = \\"JavaScript\\"; console.log(reverseString(str));  // Output: tpircSavaJ"},{"instruction":"Suggest a plugin or software that can be used to debug a React application.","output":"React's official debugging tool, the React Developer Tools, is a great plugin for debugging React applications. It is available for both Chrome and Firefox, and provides detailed information about the component hierarchy, current props and state of the application, and detailed performance metrics. Additionally, React's Error Boundary feature can be used to detect and debug errors and issues in the React application."},{"instruction":"Create a switch statement in JavaScript to compare two values.","output":"let x = 1; let y = 2; switch (x) {  case 1:    if (y === 2) {     console.log('x is 1 and y is 2');     break;   }  default:   console.log('No match'); }"},{"instruction":"Suggest an algorithm to search an element in a sorted array using Java.","output":"public int binarySearch(int[] arr, int element){     int low = 0;     int high = arr.length - 1;     while(low <= high){         int mid = (low + high) / 2;         if(arr[mid] == element)             return mid;         else if(arr[mid] > element)             high = mid - 1;         else             low = mid + 1;     }     return -1; }"},{"instruction":"alize a 2D array with all elements set to 0 in C.","output":"int arr[N][M] = {0};"},{"instruction":"Calculate the area of a square with side length 4.","output":"Area = 4 x 4 = 16"},{"instruction":"Create a React component that displays the text \\"Hello World!\\".","output":"import React from 'react'; const HelloWorld = () => (   <h1>Hello World!</h1> ); export default HelloWorld;"},{"instruction":"Generate a Fibonacci sequence up until 50.","output":"0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55"},{"instruction":"What is the output of the following code? def check_even(num):     if num % 2 == 0:         return \\"Even\\"     else:         return \\"Odd\\" print(check_even(3))","output":"Odd"},{"instruction":"Edit the following HTML code to make all the headings bold. <h1>Heading 1</h1> <h2>Heading 2</h2>","output":"<h1><strong>Heading 1</strong></h1> <h2><strong>Heading 2</strong></h2>"},{"instruction":"Name 3 popular JavaScript frameworks.","output":"Three popular JavaScript frameworks are React, Angular, and Vue."},{"instruction":"What are the best practices when writing Javascript code?","output":"The best practices for writing JavaScript code include using valid and properly formatted code, utilizing functions, avoiding global variables, using comments to explain code, using object and array literals, and avoiding memory leaks."},{"instruction":"Classify the given code as \\"correct\\" or \\"incorrect\\". def extract_file_name(file_path):     dot_index = file_path.find('.')     slash_index = file_path.find('/')","output":"correct"},{"instruction":"Convert the following code from if/else to a ternary operator and output the result as a string. if age > 18:     verdict = \\"Adult\\"      else:     verdict = \\"Minor","output":"verdict = \\"Adult\\" if age > 18 else \\"Minor\\""},{"instruction":"Take the input list and transform it to a dictionary where the keys are the elements of the list and the values equal to True. my_list = [\\"apple\\", \\"banana\\", \\"strawberry\\"]","output":"my_dict = { \\"apple\\": True, \\"banana\\": True, \\"strawberry\\": True }"},{"instruction":"Output the sum of all the elements in the two-dimensional array. arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","output":"45"},{"instruction":"Create a function that takes two strings as inputs and outputs their concatenation.","output":"def concat_strings(string1, string2):     return string1 + string2"},{"instruction":"Change the code so that it swaps the contents of two variables in one line. a = 5 b = 10","output":"a, b = b, a"},{"instruction":"Detect if the given code is a loop or not and output true if it is a loop or false if it is not. x = 0 while (x < 10):     x += 1","output":"True"},{"instruction":"prompt the user to enter a number, then output it in a sentence","output":"number = int(input(\\"Enter a number: \\")) print(\\"You entered: \\", number)"},{"instruction":"Use the following input to write a python code for calculating the area of a triangle Base = 6cm, Height = 4.5cm","output":"# calculate the area of a triangle # define the constant base and height base = 6.0 height = 4.5 # calculate the area area = 0.5 * base * height # print the result print('The area of the triangle is: %0.2f cm^2' %area)"},{"instruction":"Cut and paste the following Java code snippet and add a condition to ensure that the number entered is always greater than 0. int number; Scanner in = new Scanner (System.in); number = in.nextInt ();","output":"int number; Scanner in = new Scanner (System.in); do {     number = in.nextInt (); } while (number <= 0);"},{"instruction":"Using the given input, modify the code to remove all occurences of \\"abcd string s = \\"abcd abcd abcd abcd\\";","output":"string s = \\" \\"; s = s.replaceAll(\\"abcd\\", \\"\\");"},{"instruction":"What type of function is needed to solve the following problem Compute the average age of a given list of number","output":"A reduction function is needed in order to solve the given problem, which will iterate through the list of numbers and compute the average age. The function could take the form of a loop or other type of iterator."},{"instruction":"What is the name of the following component of a computer system A component that can perform data processing and calculatio","output":"The component in question is known as the Central Processing Unit (CPU)."},{"instruction":"mplement Binary Search in Python [2, 3, 4, 5, 11, 19, 20]","output":"# function to do binary search def binarySearch(array, x):      l, r = 0, len(array)-1      while l <= r:             mid = l + (r - l)//2;                     # Check if x is present at mid          if array[mid] == x:              return mid             # If x is greater, ignore left half          elif array[mid] < x:              l = mid + 1            # If x is smaller, ignore right half          else:              r = mid - 1            # If we reach here, then the element      # was not present      return -1    array = [2, 3, 4, 5, 11, 19, 20]  x = 11 result = binarySearch(array, x)  if result != -1:      print (\\"Element is present at index\\",              result)  else:      print (\\"Element is not present in array\\")"},{"instruction":"Using the given input, modify the following HTML code so it shows a list of 5 items <ul>     <li></li> </ul>","output":"<ul>     <li>Item 1</li>     <li>Item 2</li>     <li>Item 3</li>     <li>Item 4</li>     <li>Item 5</li> </ul>"},{"instruction":"Generate a valid MySQL query to retrieve a column from a table Table = Users, Column = Addre","output":"SELECT Address FROM Users;"},{"instruction":"Generate a correct JavaScript program to convert a string into an array s = \\"hello world\\";","output":"//function to split a string into an array function stringToArray(s) {     return s.split(' '); } //create a string s = \\"hello world\\"; //convert string to array array = stringToArray(s); //print the array console.log(array);"},{"instruction":"Using the comment as a guide, edit the code that prints \\"X out of 10\\" to print \\"X out of Y\\". x = 5 print(\\"x out of 10\\") #TODO: replace 10 with the correct variable","output":"x = 5 print(\\"x out of \\" + str(x))"},{"instruction":"Generate an XOR function in C++.","output":"int xor(int x, int y) {   return (x || y) && !(x && y); }"},{"instruction":"Create a function in Python that adds two numbers.","output":"def add(x, y):     \\"\\"\\"Return the sum of x and y.\\"\\"\\"     return x + y"},{"instruction":"Create an HTML page that displays a list of users and their ages. Alice: 25 Bob: 27 Carol: 30","output":"<!DOCTYPE html> <html> <head>     <title>User Ages</title> </head> <body>     <ul>         <li>Alice: 25</li>         <li>Bob: 27</li>         <li>Carol: 30</li>     </ul> </body> </html>"},{"instruction":"Generate a function in Java for finding the largest number in an array.","output":"public static int largestNumber(int[] arr) {      int max = arr[0];      for (int i = 1; i < arr.length; i++)         if (arr[i] > max)              max = arr[i];      return max;  }"},{"instruction":"Calculate how many distinct values can be inserted in a binary tree containing 2 nodes.","output":"2^2 - 1 = 3 distinct values can be inserted in a binary tree containing 2 nodes."},{"instruction":"Write an HTML code for a common list item.","output":"<li>List item</li>"},{"instruction":"Write a Java program to sort the elements of an int array in the descending order. [1, 10, 4, 2, 5, 3, 9]","output":"public class ArraySort {      public static void main(String[] args)      {          int array[] = {1, 10, 4, 2, 5, 3, 9};          int n = array.length;          for (int i = 0; i < n-1; i++)              for (int j = 0; j < n-i-1; j++)                  if (array[j] < array[j+1]) {                      int temp = array[j];                      array[j] = array[j+1];                      array[j+1] = temp;                  }          for (int i=0; i<n; ++i)              System.out.println(array[i] + \\" \\");      }  }"},{"instruction":"Name a built-in function that rounds off a given number to the nearest whole number.","output":"The built-in function to round off a given number to the nearest whole number is the round() function."},{"instruction":"Write a JavaScript program to convert an array of objects into an object of objects. [   { id: '001', firstName: 'John' , lastName: 'Doe' },   { id: '002', firstName: 'Jim' , lastName: 'Smith' },   { id: '003', firstName: Joe , lastName: 'Mail' }, ]","output":"const arrayToObj = (arr) => {     return arr.reduce((acc, item) => {       acc[item.id] = item;       return acc;     }, {});   } const result = arrayToObj([   { id: '001', firstName: 'John' , lastName: 'Doe' },   { id: '002', firstName: 'Jim' , lastName: 'Smith' },   { id: '003', firstName: Joe , lastName: 'Mail' }, ]); console.log(result); // Output // { //   001: { id: '001', firstName: 'John', lastName: 'Doe' }, //   002: { id: '002', firstName: 'Jim', lastName: 'Smith' }, //   003: { id: '003', firstName: 'Joe', lastName: 'Mail' }, // }"},{"instruction":"Write a Swift code to print out the signature of a function. func addNumbers(a: Int, b: Int) -> Int {     return a + b }","output":"print(addNumbers.signature) // prints: func addNumbers(a: Int, b: Int) -> Int"},{"instruction":"Create a new table in a database named 'customers' with the specified columns.","output":"CREATE TABLE customers (   id int NOT NULL AUTO_INCREMENT,    firstname varchar(45) NOT NULL,    lastname varchar(45) NOT NULL,    address varchar(100) NOT NULL,    phone varchar(20) NOT NULL,    email varchar(45) NOT NULL,    PRIMARY KEY (id) );"},{"instruction":"Create a if statement in JavaScript that checks if number is divisible by 3. Number: 9","output":"if (number % 3 === 0) {     console.log('Number is divisible by 3'); }"},{"instruction":"Write a regular expression that returns “Hello World” if found in the provided text. Text: This example will show you how to print Hello World using Regular Expressions.","output":"/Hello World/"},{"instruction":"Use a while loop to print a message 5 times. Message: Hello!","output":"var i = 0; while (i < 5) {     console.log('Hello!');     i++; }"},{"instruction":"Create a quick calculator in Python based on the user input. 2 * 3 + 5","output":"def quick_calc(string):     result = 0      calculation = string.split(\\" \\")     for item in calculation:         try:             result += int(item)         except:             if item.lower() == \\"*\\":                 result *= int(calculation[calculation.index(item) + 1])     return result print(quick_calc(\\"2 * 3 + 5\\")) 11"},{"instruction":"Output the nth Fibonacci number in JavaScript. 10","output":"function Fibonacci(n)  {  \\tvar a = 0, b = 1, c, i;  \\tif (n == 0)  \\t\\treturn a;  \\tfor (i = 2; i <= n; i++)  \\t{  \\t\\tc = a + b;  \\t\\ta = b;  \\t\\tb = c;  \\t}  \\treturn b;  }  console.log(Fibonacci(10));  55"},{"instruction":"Create a class in jQuery to handle user authentication.","output":"class UserAuthentication {     constructor (startupOptions) {         // initialize settings, read startup settings, etc.     }     authenticate(credentials) {         // verify user credentials, read data, etc.     }     logout() {         // delete session, reset variables, etc.     } }"},{"instruction":"Create a function in JavaScript to implement Newton's Method of Numerical Approximation.","output":"function newtonsMethod(f, df, x, epsilon) {     //  Keep track of how many iterations we calculate     let iteration = 0;     while (Math.abs(f(x)) > epsilon && iteration < MAX_ITER) {         x -= f(x) / df(x);         iteration += 1;     }     return x; }"},{"instruction":"You are presented with a string which contains a code snippet. Extract the variable types from this string. let myVariable1 = 5;  let myVariable2 = true;  let myVariable3 = \\"Hello\\";","output":"let myVariable1: number, myVariable2: boolean, myVariable3: string"},{"instruction":"Create an algorithm in JavaScript to find the closest pair of points from a given set of points. let points = [[2, 0], [4, 4], [-2, 2], [-3, -4], [4, -2]];","output":"// algorithm to find closest pair of points  // uses divide and conquer approach  const closestPair = (points) => {    // base case: two or fewer points   if (points.length <= 2) {     return points;   }   // divide   const middle = Math.floor(points.length / 2);   const left = points.slice(0, middle);   const right = points.slice(middle);      // conquer   const leftPoints = closestPair(left);   const rightPoints = closestPair(right);   const closestPair = getClosestPair(leftPoints, rightPoints);   // combine   return closestPair; }   // get closest pair between two sets of points const getClosestPair = (leftPoints, rightPoints) => {   // calculating the minimum distance   let minDist = getDistance(leftPoints[0], rightPoints[0]);   let closestPair = [leftPoints[0], rightPoints[0]];      for (let i = 0; i < leftPoints.length; i++) {     for (let j = 0; j < rightPoints.length; j++) {       let dist = getDistance(leftPoints[i], rightPoints[j]);       if (dist < minDist) {         minDist = dist;         closestPair = [leftPoints[i], rightPoints[j]];       }     }   }     // return the minimum distance and its pair   return closestPair; }   // calculate the Euclidean distance between two points const getDistance = (point1, point2) => {   let xDist = Math.abs(point2[0] - point1[0]);   let yDist = Math.abs(point2[1] - point1[1]);     return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2)); } // testing our function  let points = [[2, 0], [4, 4], [-2, 2], [-3, -4], [4, -2]]; let closestPoints = closestPair(points); console.log(closestPoints); //Output: [[-2, 2], [2, 0]]"},{"instruction":"Create a web server in Java to handle a POST request.","output":"import java.io.BufferedReader; import java.io.InputStreamReader; import java.io.PrintWriter; import java.net.ServerSocket; import java.net.Socket; public class WebServer {     public static void main(String[] args) throws Exception {         // listen for a connection from a client         ServerSocket connection = new ServerSocket(80);         Socket clientSocket = connection.accept();         BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));         // get the request data         String line;         String requestData = \\"\\";         while ((line = in.readLine()) != null) {             if (line.startsWith(\\"POST\\")) {                 requestData = line.split(\\"s+\\")[1];                 break;             }         }         // send a response         PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);         out.print(\\"HTTP 200 OKn\\");         // respond to the request         out.write(handleRequest(requestData));         out.flush();         out.close();     }     public static String handleRequest(String requestData) {         return \\"Received request data: \\" + requestData;     } }"},{"instruction":"Output the result of 2 to the power of 8 in Java.","output":"int result = (int) Math.pow(2, 8); System.out.println(result); //Output: 256"},{"instruction":"Write an SQL query to select the students who scored higher than the average in Maths.","output":"SELECT * FROM student_scores WHERE math_score > (SELECT AVG(math_score) from student_scores);"},{"instruction":"Edit this code snippet to reverse a string in Python. def reverse_string(s):     # Edit here     return reversed_string","output":"def reverse_string(s):     reversed_string = \\"\\"     for char in s:         reversed_string = char + reversed_string     return reversed_string"},{"instruction":"Write a JavaScript function to search a string for a specified value and return the position of the match. searchString = \\"banana\\" searchValue = \\"","output":"function searchString(str, val) {   let pos = -1;   const len = str.length;   for (let i=0; i < len; i++) {     if (str[i] === val) {       pos = i;       break;     }   }   return pos; } const searchString = 'banana'; const searchValue = 'a'; const searchResult = searchString(searchString, searchValue); console.log(searchResult); // outputs 2, because 'a' is in the 2nd position in \\"banana\\""},{"instruction":"Write an SQL query to find all the customers who've purchased an item in the last month.","output":"SELECT customers.* FROM customers JOIN orders    ON customers.customer_id = orders.customer_id WHERE orders.order_date > DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"},{"instruction":"Write a PHP script to loop through a multidimensional array and print out the values. array = array('fruit' => array('apple', 'banana', 'orange'),                 'vegetable' => array('carrot', 'potato'));","output":"<?php   array = array('fruit' => array('apple', 'banana', 'orange'),                 'vegetable' => array('carrot', 'potato'));  foreach (array as category => values) {      echo \\"Category: \\" . category . \\"n\\";      foreach (values as value) {          echo \\"Value: \\" . value . \\"n\\";      }  }   ?>"},{"instruction":"Translate the following SQL query into MongoDB syntax. SELECT * FROM properties WHERE bedrooms > 3 and price < 500","output":"db.properties.find({     and: [         { bedrooms: { gt: 3 } },         { price: { lt: 500 } }     ] })"},{"instruction":"Write a bash script that searches for a given text string in a directory tree recursively.","output":"#!/bin/bash search_string=\\"text string\\" directory=\\"directory_name\\" #searching for text string recursive in the directory grep -rnw directory -e \\"search_string\\""},{"instruction":"Create a React component that renders a table containing the records from an array of objects. const records = [     { id: 1, name: 'Adam', age: 25 },     { id: 2, name: 'James', age: 30 },     { id: 3, name: 'Nick', age: 28 },     { id: 4, name: 'John', age: 29 } ];","output":"import React from 'react';   const RecordTable = (props) => (     <div>         <table>             <thead>                 <tr>                     <th>ID</th>                     <th>Name</th>                     <th>Age</th>                 </tr>             </thead>             <tbody>             {                 props.records.map(record => (                     <tr key={record.id}>                         <td>{ record.id }</td>                         <td>{ record.name }</td>                         <td>{ record.age }</td>                     </tr>                 ))             }             </tbody>         </table>     </div> );   export default RecordTable;"},{"instruction":"Create a Drupal 8 theme that implements a 3 column layout with a header, side bar, content and footer.","output":"<html>     <head>         <title>{{ site.name }}</title>         <style>             body {                 display: flex;                  flex-direction: column;             }             header, footer {                 flex-basis: 10%;             }             main {                 flex-basis: 80%;                 display: flex;             }             #sidebar {                 flex-basis: 20%;             }             #content {                 flex-basis: 80%;             }         </style>     </head>     <body>         <header>             {% include 'head.html.twig' %}         </header>         <main>             <div id=\\"#sidebar\\">                 {% include 'sidebar.html.twig' %}             </div>             <div id=\\"content\\">                 {% block content %}                 {% endblock %}             </div>         </main>         <footer>             {% include 'footer.html.twig' %}         </footer>     </body> </html>"},{"instruction":"mplement a webhook endpoint in Java using Spring MVC to process a payment request.","output":"@RestController public class PaymentController {     @PostMapping(\\"/payment\\")     public void processPayment(@RequestBody PaymentRequest request) {         // Process the payment inside this method     } }"},{"instruction":"Generate a regular expression to match a string of consecutive numbers with a minimum of 4 digits.","output":"^[0-9]{4,}"},{"instruction":"Can you code a solution to Bubble Sort an array of integers? [5, 4, 3, 2, 1]","output":"def bubbleSort(arr):      n = len(arr)        # Traverse through all array elements      for i in range(n):             # Last i elements are already in place          for j in range(0, n-i-1):                 # traverse the array from 0 to n-i-1              # Swap if the element found is greater              # than the next element              if arr[j] > arr[j+1] :                  arr[j], arr[j+1] = arr[j+1], arr[j]     # Driver code to test above  arr = [5, 4, 3, 2, 1]     bubbleSort(arr)     print (\\"Sorted array is:\\")  for i in range(len(arr)):      print (\\"%d\\" %arr[i]),"},{"instruction":"Write a function to check whether two lists are equal. list1=[1,2,3,4,5] list2=[1,2,3,4,5]","output":"def equal(list1, list2):     if len(list1) != len(list2):         return False          for i in range(len(list1)):         if list1[i] != list2[i]:             return False     return True"},{"instruction":"mplement a function to return the element that appears most frequently in a list. [5,5,5,5,6,6,7,7,7]","output":"def find_most_frequent_element(arr):     d = {}     for num in arr:         if num in d:              d[num] += 1         else:             d[num] = 1          max_freq = 0     most_frequent_element = None     for num in d:         if d[num] > max_freq:             max_freq = d[num]             most_frequent_element = num     return most_frequent_element"},{"instruction":"dentify the type of a variable in a Python program. x = [1, 2, 3]","output":"type(x) # List"},{"instruction":"Choose the correct output for following code snippet. x = \\"hello world\\" y = x y[0] = \\"H","output":"x = \\"Hello world\\""},{"instruction":"Create a program that takes two parameters and print out the result of the larger one. param1 = 20 param2 = 50","output":"def largest_param(param1, param2):     if param1 > param2:         return param1     else:         return param2"},{"instruction":"Take two strings and a separator as inputs and join the two strings using the separator and output the resulting string. str1=\\"Hello\\" str2=\\"World\\" separator=\\"-","output":"def join_strings(str1, str2, separator):     return str1 + separator + str2"},{"instruction":"Write a Python program to sort the given list of dictionary elements by the score value lst = [{\\"score\\":1},{\\"score\\":5},{\\"score\\":8}]","output":"def sort_by_score(lst):     lst.sort(key=lambda item: item['score'])     return lst"},{"instruction":"Edit the code below to calculate minimum of 3 numbers. def min(a, b):     if a < b:         return a     else:         return b","output":"def min(a, b, c):     if a < b and a < c:         return a     elif b < a and b < c:         return b     else:         return c"},{"instruction":"Convert the given list of dictionaries to a tuple of tuples. lst = [{\\"name\\":\\"John\\", \\"age\\":21}, {\\"name\\":\\"Bill\\", \\"age\\":30}]","output":"def convert_to_tuple(lst):     tup = [(x['name'], x['age']) for x in lst]     return tuple(tup)"},{"instruction":"Code a solution to remove any element from given list if it appears more than 3 times. [1,2,3,1,1,1,2]","output":"def remove_excess_lst(lst):      # Count the frequency of each element in the list      cnt = Counter(lst)     # Return the list with elements appearing more than 3 times removed      return list(filter(lambda x: cnt[x] <= 3, lst))"},{"instruction":"Create a loop that will print out numbers from 0 to 12.","output":"for (let i = 0; i <= 12; i++) {   console.log(i); }"},{"instruction":"Develop a program that finds the maximum number of overlapping events within a given time period. [[1, 7], [2, 5], [3, 6], [8, 10]]","output":"function maxOverlapping(arr) {   let max = 0;   let curr = 0;   const timeline = {};   for (let i = 0; i < arr.length; i++) {     const start = arr[i][0];     const end = arr[i][1];     timeline[start] = (timeline[start] || 0) + 1;     timeline[end] = (timeline[end] || 0) - 1;   }   for (const key in timeline) {     curr += timeline[key];     max = Math.max(max, curr);   }   return max; } console.log(maxOverlapping([[1, 7], [2, 5], [3, 6], [8, 10]])); // output: 3"},{"instruction":"Create a program that takes a string and returns an object with the count of all the characters in the string. \\"Hello World","output":"function charCount(str) {   let result = {};   for (let i = 0; i < str.length; i++) {     let char = str[i].toLowerCase();     result[char] = (result[char] || 0) + 1;   }   return result; } console.log(charCount('Hello World')); // output: {h: 1, e: 1, l: 3, o: 2, w: 1, r: 1, d: 1}"},{"instruction":"Convert the following chess board into a 2D array in JavaScript. +---+ |BR | |BK | | BB| |BR | +---+","output":"let chessBoard = [[\\"BR\\", \\"BK\\", \\"BB\\", \\"BR\\"]];"},{"instruction":"Create a variables in Python to store the following information. Name: John, Age: 35","output":"name = \\"John\\" age = 35"},{"instruction":"Edit the following HTML to create a heading with the title \\"Welcome\\". <h2>Hello World</h2>","output":"<h2>Welcome</h2>"},{"instruction":"Write a Python program to print a random integer between 0 and 5.","output":"import random     # Print random integer   print(random.randint(0, 5))"},{"instruction":"Create a validation rule to check if an email address is valid for an input field in JavaScript.","output":"function validateEmail(email) {     var re = /^(([^<>()[].,;:s@\\"]+(.[^<>()[].,;:s@\\"]+)*)|(\\".+\\"))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))/;     return re.test(email); }"},{"instruction":"Rewrite the following Java code using a switch statement instead of if/else. int time = 10; if (time < 12) {   System.out.println(\\"Good morning\\"); } else if (time < 17) {   System.out.println(\\"Good afternoon\\"); } else {   System.out.println(\\"Good evening\\"); }","output":"int time = 10; switch (time) {   case time < 12:     System.out.println(\\"Good morning\\");     break;   case time < 17:     System.out.println(\\"Good afternoon\\");     break;   case time >= 17:     System.out.println(\\"Good evening\\");     break; }"},{"instruction":"Write a function that takes two strings and determines whether one string is an anagram of the other. string1 = 'listen'; string2 = 'silent'","output":"function isAnagram(string1, string2) {   const s1 = string1.split('').sort().join('');   const s2 = string2.split('').sort().join('');   return s1 === s2; }"},{"instruction":"Write a C# code snippet to add 2 numbers.","output":"int number1 = 5; int number2 = 10; int sum = number1 + number2;"},{"instruction":"Generate a random 5-element list of integers between 0 and 10.","output":"import random random_list = [random.randint(0, 10) for _ in range(5)]"},{"instruction":"Write a class definition for a Box class.","output":"class Box:     def __init__(self, width, length, height):         self.width = width         self.length = length         self.height = height     def calculate_volume(self):         return self.width * self.length * self.height"},{"instruction":"Run the program located in 'helloworld.py'","output":"python helloworld.py"},{"instruction":"Convert this CSV data into a Pandas DataFrame. name,age John,20 James,31","output":"import pandas as pd data = pd.read_csv('data.csv') df = pd.DataFrame(data)"},{"instruction":"Find the lowest integer that can not be represented as the sum of two prime numbers.","output":"The lowest integer that can not be represented as the sum of two prime numbers is 45."},{"instruction":"What data structure would be best to store key-value pairs?","output":"A hash table (or a dictionary in Python) is the best data structure to store key-value pairs."},{"instruction":"Write a function to move all zeros in an array to the end. [1, 2, 0, 3, 4, 0, 5]","output":"def moveZeroes(nums):     zeros = 0     for i in range(len(nums)):         if nums[i] == 0:             zeros += 1         else:             nums[i-zeros] = nums[i]     nums[len(nums)-zeros:] = [0] * zeros"},{"instruction":"Create a new list filled with the same values as the existing list but with the values multiplied by 5. [1, 2, 3, 4, 5]","output":"new_list = [i * 5 for i in [1, 2, 3, 4, 5]]"},{"instruction":"Write a method to compare two unsorted arrays of integers and find the number of mismatches. [1, 3, 2, 5], [2, 4, 1, 5]","output":"def get_mismatches(arr1, arr2):     mismatches = 0     if len(arr1) != len(arr2):         return -1     for i in range(len(arr1)):         if arr1[i] != arr2[i]:             mismatches += 1     return mismatches"},{"instruction":"Create a SQL statement to select the first ten elements from a table with a specific id. The table name is 'products', and the product id is 1.","output":"SELECT * FROM products WHERE product_id = 1 LIMIT 10;"},{"instruction":"Write a VBA macro to convert a sequence of text to uppercase. The text is: \\"Hello World\\".","output":"Sub upperCase()          Dim myText As String     myText = \\"Hello World\\"          ActiveCell.Value = UCase(myText)      End Sub"},{"instruction":"Create a HTML page with an ordered list of items using Five items: apple, banana, orange, strawberry, and lemon.","output":"<html>   <body>     <ol>       <li>Apple</li>       <li>Banana</li>       <li>Orange</li>       <li>Strawberry</li>       <li>Lemon</li>     </ol>   </body> </html>"},{"instruction":"Write a C++ program that prints the following pattern to the screen:","output":"#include <iostream> int main() {     // Print the pattern using nested for loop     for (int i=0; i<5; i++)     {         for (int j=0; j<i+1; j++)             std::cout << \\"*\\";         std::cout << std::endl;     }      return 0; } /* Output * ** *** **** ***** */"},{"instruction":"Design a method for reversing a string in Java","output":"public static String reverse(String str) {     String reversedString = \\"\\";     for (int i = str.length() - 1; i >= 0; i--) {         reversedString += str.charAt(i);     }     return reversedString; }"},{"instruction":"Given an input list of integers, sort the list in ascending order","output":"def sortAsc(lst):      for i in range(len(lst)):          for j in range(i+1, len(lst)):              if lst[i] > lst[j]:                  lst[i], lst[j] = lst[j], lst[i]      return lst"},{"instruction":"Create an SQL query to find all states in a given zip code The zip code is 90210.","output":"SELECT state FROM zip_codes WHERE zip_code = '90210';"},{"instruction":"Create a formula that calculates the total cost of an item given the item price and tax rate","output":"Total Cost = Item Price + (Item Price * (Tax Rate/100))"},{"instruction":"Convert a given XML document to JSON document","output":"<?xml version=\\"1.0\\"?> <root>   <person>     <name>John Doe</name>     <age>22</age>     <address>       <street>123 Main St.</street>       <city>Anytown</city>       <state>FL</state>       <zip>12345</zip>     </address>   </person> </root> {   \\"person\\" : {     \\"name\\" : \\"John Doe\\",     \\"age\\" : 22,     \\"address\\" : {       \\"street\\" : \\"123 Main St.\\",       \\"city\\" : \\"Anytown\\",       \\"state\\" : \\"FL\\",       \\"zip\\" : \\"12345\\"     }   } }"},{"instruction":"put two numbers and output the maximum one in Python 3, 5","output":"a = 3 b = 5 if a > b:     print(a) else:     print(b)"},{"instruction":"Sort the list using Quick Sort [2, 3, 5, 6, 1, 4]","output":"def quick_sort(arr):  \\tif len(arr) <= 1: \\t\\treturn arr \\tpivot = arr[len(arr) // 2] \\tleft = [x for x in arr if x < pivot] \\tright = [x for x in arr if x > pivot] \\treturn quick_sort(left) + [pivot] + quick_sort(right)"},{"instruction":"Generate a SQL query to return all records from the table with a specified column including null values Table name: my_table Column name: age","output":"SELECT *  FROM my_table  WHERE age IS NULL OR age != '';"},{"instruction":"Construct an if-else statement to determine if a given number is divisible by 4","output":"if (number % 4 == 0)      System.out.println(\\"The number is divisible by 4\\");  else      System.out.println(\\"The number is not divisible by 4\\");"},{"instruction":"Formulate a SQL query that fetches the records with the latest date Table name: my_table Columns: id, date","output":"SELECT * FROM my_table  ORDER BY date DESC LIMIT 1;"},{"instruction":"Write a script in JavaScript to iterate over a given array of objects and return all objects with the color green. const arr = [{ color: 'blue', shape: 'square' }, { color: 'red', shape: 'triangle' }, { color: 'green', shape: 'circle' }]","output":"const greenObjects = arr.filter(obj => obj.color === 'green');"},{"instruction":"Write a JavaScript function that returns that number of elements from an array of numbers which sum up to a given target. array = [2, 3, 7, 8, 10]  target = 11","output":"function findElementsSum(array, target){     let result = [];     for (let i = 0; i < array.length; i++){         for (let j = i+1; j < array.length; j++){             if (array[i] + array[j] == target){                 result.push([i, j]);             }         }     }     return result; }"},{"instruction":"Write a Python function to check if a given string is a palindrome and has all the vowels in it.","output":"def all_vowels_palindrome(word):     vowels = ['a', 'e', 'i', 'o', 'u']     if not word == word[::-1]:         return False     for char in vowels:         if char not in word:             return False     return True"},{"instruction":"Write a Python script to detect if two numbers have the same frequency of digits.","output":"def same_frequency(num1,num2):     str1 = str(num1)     str2 = str(num2)     if len(str1) != len(str2):         return False     dict = {}     for char in str1:         if char in dict:             dict[char] += 1         else:             dict[char] = 1     for char in str2:         if not char in dict:             return False         dict[char] -= 1     for k in dict:         if dict[k] != 0:             return False     return True"},{"instruction":"Writing a Python function which takes a 2D array as an argument and transposes it. arr = [[4, 5, 44], [3, 8, 20], [2, 5, 10]]","output":"def transpose_(arr):   transposedarr = []   for i in range(len(arr[0])):     row = []     for j in range(len(arr)):       row.append(arr[j][i])     transposedarr.append(row)   return transposedarr"},{"instruction":"Create a function in JavaScript to search an element in a given sorted array. arr = [1, 3, 4, 5, 6, 7, 9, 11]","output":"function sortedArraySearch(arr, el) {   let start = 0, end = arr.length - 1;   while (start <= end) {     let mid = Math.floor((start + end) / 2);     if (arr[mid] === el) return true;     else if (arr[mid] < el) start = mid + 1;     else end = mid - 1;   }   return false; }"},{"instruction":"What is polymorphism and how it is used in object-oriented programming?","output":"Polymorphism is the ability of an object to be interpreted and used differently in different contexts. In object-oriented programming, it allows operations to be performed on objects despite different underlying data types. For example, it allows functions to take multiple types of arguments and still be able to process them, without requiring different lines of code for each data type. Polymorphism also allows for code reuse through the concept of inheritance, where subclasses can inherit all the methods and properties of their parent class. As a result, objects can be written more efficiently and with less repetition."},{"instruction":"Edit the following code in Java to include a new method “printName()”. public class Person {     String name;     void displayAge(){         System.out.println(\\"age is: \\"+ age);        } }","output":"public class Person {     String name;          void displayAge(){         System.out.println(\\"age is: \\"+ age);        }          void printName(){         System.out.println(\\"Name: \\"+ name);     } }"},{"instruction":"Describe the use of the class keyword in C++.","output":"The class keyword in C++ is used to declare a class, which contains (public or private) data members, member functions, and constructors. A class can be thought of as a blueprint for creating objects that have their own state and behavior. Data members represent the state of an object, and the member functions represent the behavior of the object. Class constructors are special member functions that allow for the creation of an instance of a class."},{"instruction":"Compute the average age of the following ages: 18, 20, 17, 19, 15.","output":"Average age = 17.8"},{"instruction":"Explain how a min-heap works.","output":"A min-heap is a data structure used for storing and retrieving data. It is a complete binary tree, where the root node is the minimum element in the heap. Each node of the heap follows the \\"min-heap\\" property, where the parent node is always less than or equal to its children. This property allows for efficient data retrieval; the parent node can always be deleted from the heap, since it is the minimum value, and the heap can be re-balanced in O(log n) time."},{"instruction":"Write a shell command to switch to a given directory Dirpath=/Users/username/Docume","output":"cd /Users/username/Documents"},{"instruction":"Construct a for loop in Python to iterate through the items in the list and print their corresponding index. lst = [1,2,3]","output":"for i, num in enumerate(lst):     print(i, num)"},{"instruction":"Write a code snippet to get the name of the planet which is the fifth planet from the sun.","output":"name_planets = [\\"Mercury\\", \\"Venus\\", \\"Earth\\", \\"Mars\\", \\"Jupiter\\", \\"Saturn\\", \\"Uranus\\", \\"Neptune\\"] fifth_planet = name_planets[4] print(fifth_planet)"},{"instruction":"Write code to delete all elements in a given Python list which are NOT integer type. lst = [1, \\"a\\", 2.3, False, 4, \\"abc\\"]","output":"for item in lst[:]:     if not isinstance(item, int):         lst.remove(item)"},{"instruction":"Write an SQL statement to add two new columns, 'size' and 'color', to the existing products table.","output":"ALTER TABLE products  ADD COLUMN size INT,  ADD COLUMN color VARCHAR(100);"},{"instruction":"Write code to create a dictionary from a list of tuples, where each tuple consists of a color name and its value. items = [(\\"red\\", \\"#FF0000\\"), (\\"blue\\", \\"#0000FF\\")]","output":"colors = dict(items)"},{"instruction":"Write an SQL query to find the list of products whose price is greater than 50.","output":"SELECT *  FROM products WHERE price > 50;"},{"instruction":"Design a MySQL query to find the average monthly salary of people in the table \\"Employees\\". Table: Employees Columns: employee_id, name, salary","output":"SELECT AVG(salary) as avg_salary FROM Employees WHERE MONTH(CURDATE()) = MONTH(salary);"},{"instruction":"Create a css class to set the text color of a h1 element to blue.","output":"h1 {   color: blue; }"},{"instruction":"Create a python anonymous function that squares an input number.","output":"square_num = lambda x: x ** 2"},{"instruction":"Suggest a type of join to use to find all customers with an order total greater than 100. Table: Customers Columns: customer_id, name  Table: Orders Columns: order_id, customer_id, total","output":"SELECT c.customer_id, c.name  FROM Customers c INNER JOIN Orders o  ON c.customer_id = o.customer_id WHERE o.total > 100;"},{"instruction":"Write a python loop to print all the even numbers between 2 and 15 (inclusive).","output":"for i in range(2, 16):     if i % 2 == 0:         print(i)"},{"instruction":"Create an SQL query to select the name and age of all employees that are younger than 25. Table: Employees Columns: employee_id, name, age","output":"SELECT name, age FROM Employees WHERE age < 25;"},{"instruction":"Write a python statement to calculate the factorial of 6.","output":"import math factorial = math.factorial(6)"},{"instruction":"Print all the elements in the following array in descending order. [4, 2, 6, 8, 5, 9, 1]","output":"9 8 6 5 4 2 1"},{"instruction":"Design a data structure to store the details of a student (Name, Age, Course).","output":"struct Student {   name: String,   age: u32,   course: String, }"},{"instruction":"Create a method to transform a string from lowercase to title case.","output":"def to_title_case(string):     return string.title()"},{"instruction":"Modify the following block of code to set a maximum length of the list list = [1, 2, 3, 4, 5, 6]","output":"list = [1, 2, 3, 4, 5, 6][:5]"},{"instruction":"Write an algorithm to swap two elements a[i] and a[j] in a given array a.","output":"def swap(a, i, j):     temp = a[i]     a[i] = a[j]     a[j] = temp"},{"instruction":"Update the strings stored in a dictionary, so that all strings have the same length. d = {   'apple': 'small',   'orange': 'medium size' }","output":"d = {   'apple': 'small  ',   'orange': 'medium size'   }"},{"instruction":"Create an object to store the variables that are necessary for the following code snippet. x = 10 y = 20 z = 30","output":"class Coordinates:     def __init__(self, x, y, z):         self.x = x         self.y = y         self.z = z coordinates = Coordinates(x=10, y=20, z=30)"},{"instruction":"Make a program to determine if the elements of the array are in increasing order [3, 5, 7]","output":"def isIncreasing(arr):     for i in range(len(arr)-1):         if arr[i] >= arr[i+1]:             return False     return True"},{"instruction":"Generate a correct c++ program to compute the YTM of a bond","output":"#include <iostream>  #include <cmath> using namespace std;  // Function to calculate bond yield  float calculateYTM(float faceValue, float price,                      int numInterestPayments,                      float couponRate, float MaturityPeriod)  {      float guess = 0.1, ytm = 0;      float a, b;         while (ytm != guess)      {          ytm = guess;          a = price;             // Calculating the bond price          // using the YTM guess          for (int i = 0; i < MaturityPeriod; i++)              a = a - (faceValue * (couponRate/2) /                       (pow((1 + ytm/2), (numInterestPayments/2 - i))));          a = a - (faceValue / (pow((1 + ytm/2),                            (numInterestPayments/2))));          b = MaturityPeriod * (faceValue * (couponRate/2 /              (pow((1 + ytm/2), (numInterestPayments/2 - MaturityPeriod)))) + (faceValue/ (pow((1 + ytm/2),               (numInterestPayments/2))));             // calculating YTM using Newton's Method          guess = ytm + (a/b);      }         return guess * 2;  }"},{"instruction":"Suggest a code snippet to detect a cycle in a linked list","output":"def contains_cycle(head):     slow = head     fast = head     while fast is not None and fast.next is not None:         fast = fast.next.next         slow = slow.next         if slow is fast:             return True     return False"},{"instruction":"Given a list of integers, write a function in Python to sort and reverse the list. input_list = [3, 8, 10, 1, 9]","output":"def sort_and_reverse(list):    res_list = sorted(list, reverse=True)    return res_list     sort_and_reverse(input_list)  # Output  [10, 9, 8, 3, 1]"},{"instruction":"Write a Java program to calculate the area of a square given the length of a side.","output":"public class CalculateSquareArea {     public static double calculateArea(double sideLength) {     double area = sideLength * sideLength;     return area;   }     public static void main(String[] args) {     double sideLength = 5;       double area = calculateArea(sideLength);     System.out.println(\\"The area of a square with side length \\" + sideLength + \\" is \\" + area);   } }"},{"instruction":"Generate a unique ID string of length 12 using a Python function.","output":"import string, random def generate_unique_id(stringLength=12):   lettersAndDigits = string.ascii_letters + string.digits   return ''.join(random.choice(lettersAndDigits) for i in range(stringLength)) unique_string = generate_unique_id() print(\\"unique string: \\",unique_string)"},{"instruction":"Write a SQL query to select the distinct cities from a table of customer data.","output":"SELECT DISTINCT city FROM customer_data;"},{"instruction":"Convert a given number to its corresponding Roman numeral.","output":"def convertToRoman(num):    val = [              1000, 900, 500, 400,              100, 90, 50, 40,              10, 9, 5, 4,              1          ]    syb = [              \\"M\\", \\"CM\\", \\"D\\", \\"CD\\",              \\"C\\", \\"XC\\", \\"L\\", \\"XL\\",              \\"X\\", \\"IX\\", \\"V\\", \\"IV\\",              \\"I\\"         ]         roman_num = ''          i = 0         while  num > 0:              for _ in range(num // val[i]):                  roman_num += syb[i]                  num -= val[i]              i += 1         return roman_num # Driver Code num = 13  print(convertToRoman(num))  # Output: XIII"},{"instruction":"Generate a list of all even numbers between 20 and 40.","output":"even_numbers = [] for num in range(20, 41):    if num % 2 == 0:      even_numbers.append(num)     print(even_numbers)  # Output: [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]"},{"instruction":"Find the reverse of an array in Python. arr = [1, 2, 3, 4, 5]","output":"arr = [5, 4, 3, 2, 1]"},{"instruction":"Output the name of the font styles available in HTML.","output":"normal, italic, oblique, small-caps, inherit"},{"instruction":"Write JavaScript code for a for loop with condition that iterates 8 times.","output":"for (let i = 0; i < 8; i++) {    // code to be executed  }"},{"instruction":"Count the number of elements in an array using HTML. arr = ['a', 'b', 'c', 'd']","output":"arr.length //4"},{"instruction":"Find two missing numbers in an array in C++. arr = [1, 3, 6, 5, 8, 9, 10]","output":"#include <algorithm> #include <iostream> #include <vector> std::vector<int> find_missing_numbers(const std::vector<int>::iterator begin,                                       const std::vector<int>::iterator end) {   int n = end - begin;   int total_sum = (n + 2)*(n + 1)/2;   int missing_sum = 0;   for (auto it = begin; it != end; ++it) {     missing_sum += *it;   }      int difference = total_sum - missing_sum;   int a = difference/2;   int b = a + difference;      return {a, b}; } int main() {   std::vector<int> arr = {1, 3, 6, 5, 8, 9, 10};   std::vector<int> results = find_missing_numbers(arr.begin(), arr.end());   std::cout << results[0] << \\" \\" << results[1] << std::endl;   return 0; }"},{"instruction":"Create a function in C to check whether a given string contains any punctuations or not.","output":"bool containsPunctuation(string s) {   for (char c : s) {     if (ispunct(c))        return true;   }   return false; }"},{"instruction":"w can you remove duplicate characters from a string in Java?","output":"We can use a Set collection to remove duplicate characters from a string in Java. We can loop through the characters in the string, and add them to a Set, which does not allow duplicate elements. Then we can loop through the set and append each character to a new string. This new string will be free of duplicate characters."},{"instruction":"Create a Java method that computes the factorial of an integer.","output":"public static int factorial(int n) {    int factorial = 1;     for (int i = 1; i <= n; i++) {       factorial *= i;    }    return factorial; }"},{"instruction":"Python, how can you iterate a list in reverse order?","output":"We can use the reversed() function to iterate a list in reverse order in Python. For example: my_list = [1, 2, 3, 4] for element in reversed(my_list):     print(element)"},{"instruction":"w can you create a dictionary in Python with 3 key-value pairs?","output":"We can create a dictionary in Python with 3 key-value pairs by declaring a dictionary variable with the desired contents. For example: my_dict = {     \\"key1\\": \\"value1\\",     \\"key2\\": \\"value2\\",     \\"key3\\": \\"value3\\" }"},{"instruction":"Given a list, write a Python code snippet to print the elements of the list in reverse order. my_list = [\\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\"]","output":"for element in reversed(my_list):     print(element)"},{"instruction":"Run the given code and determine the result. a = 3 b = 5 c = a + b","output":"c = 8"},{"instruction":"Using Python, reverse a given string \\"Hello World!\\".","output":"\\"!dlroW olleH\\""},{"instruction":"Make the following CSS code work properly on the web page. .special {     background-color: #eee;     border: 2px solid #999; }","output":".special {     background-color: #eee;     border: 2px solid #999;     padding: 10px;     display: block; }"},{"instruction":"Train a machine learning model without using any frameworks with the folowing input and output data. Input Data: A, B, C, D Output Data: 0, 1, 0, 1","output":"model = Model() model.fit(x=[A, B, C, D], y=[0, 1, 0, 1])"},{"instruction":"Create a functional HTML form using the following attributes. name, email, country","output":"<form>     <label for=\\"name\\">Name</label>     <input type=\\"text\\" name=\\"name\\">     <label for=\\"email\\">Email</label>     <input type=\\"email\\" name=\\"email\\">     <label for=\\"country\\">Country</label>     <select name=\\"country\\">          <option>---------</option>         <!-- To be populated dynamically -->     </select>     <input type=\\"submit\\" value=\\"Submit\\"> </form>"},{"instruction":"Create a React component for a button that takes two props: an onClick event handler and an id.","output":"const MyButton = props => {     return (     <button onClick={props.onClick} id={props.id}>         Click Me     </button>     ) }"},{"instruction":"Create a class in Java that will print the two integers added together.","output":"public class Addition {     public static int add(int x, int y) {         return x + y;     }     public static void main(String[] args) {         System.out.println(add(5,7));     } }"},{"instruction":"Develop a bash script that will take 2 arguments as input and print \\"Arguments are equal\\" if both arguments are equal or \\"Arguments are not equal\\" otherwise.","output":"#!/bin/bash if [ 1 -eq 2 ];  then      echo \\"Arguments are equal\\" else     echo \\"Arguments are not equal\\" fi"},{"instruction":"What changes can you suggest in order to optimize the following Java code? public class Student {     //private variables     private String name;     private int age;     private int grade;","output":"public class Student {     //private variables     private String name;     private int age;     private int grade;        //create getters and setters for the fields     public String getName() {         return name;     }     public void setName(String name) {         this.name = name;     }     public int getAge() {         return age;     }     public void setAge(int age) {         this.age = age;     }     public int getGrade() {         return grade;     }     public void setGrade(int grade) {         this.grade = grade;     } }"},{"instruction":"Create a function in Python that can compute the area of a rectangular room in square feet. length = 20 width = 15","output":"def findArea(length, width):   area = length * width   return area # Call the function area = findArea(20, 15) print(\\"The area of the room is: \\" + str(area) + \\"sq.ft\\")"},{"instruction":"Design a data structure in Python to store customer contact details.","output":"#Create a class to store customer information class ContactData:     def __init__(self, name, email, phone):         self.name = name         self.email = email         self.phone = phone #Create a dictionary to store the customer contact details customer_details = {} # function to add customer details in the dictionary def add_customer_details(name, email, phone):     customer_details[name] = ContactData(name, email, phone) #Function to display customer details def display_customer_details():     for key in customer_details.keys():         customer = customer_details[key]         print(\\"Name: {}, Email: {}, Phone: {}\\".format(              customer.name, customer.email, customer.phone))"},{"instruction":"Suggest the missing line of code in the following Python program. nums = [1, 2, 3] for n in nums:     print(n)","output":"nums = [1, 2, 3] for n in nums:     print(n) #Print the sum of the list print(sum(nums))"},{"instruction":"Merge the following two linked lists. Linked List 1: 1->3->5 Linked List 2: 2->4","output":"def merge(head1, head2):     # If either is empty     if not head1 or not head2:         return head1 or head2     # if first linked list is smaller      if head1.data < head2.data:         head1.next = merge(head1.next, head2)         return head1     else: # if second linked list is smaller or equal         head2.next = merge(head1, head2.next)         return head2"},{"instruction":"Write an SQL query that returns all the students with their marks from the following table. Student ( id, name, marks) Marks (sub_id, marks)","output":"SELECT s.name, m.marks  FROM Student s, Marks m  WHERE s.id = m.sub_id"},{"instruction":"Complete the following bash script with conditional statements. #!/bin/bash echo \\" Enter an integer \\"  read num","output":"#!/bin/bash echo \\"Enter an integer\\"  read num if (( num > 0 )); then     echo \\"The number is positive\\" elif (( num < 0 )); then     echo \\"The number is negative\\" else     echo \\"The number is zero\\" fi"},{"instruction":"Design a MySQL Table to store company employees.","output":"CREATE TABLE \`employee\` (   \`employee_id\` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,   \`name\` varchar(255) NOT NULL,   \`dob\` datetime NOT NULL,   \`salary\` decimal(10,2) NOT NULL,   \`address\` varchar(255) );"},{"instruction":"Classify the type of the expression 5 + 4 * 3 - 7","output":"The expression 5 + 4 * 3 - 7 is a mathematical expression of arithmetic operations."},{"instruction":"Write a code that takes a list as input and returns a list of every permutation of that list [1, 2, 3]","output":"def get_permutations(input_list):      result = []      if len(input_list) == 0:          return []      if len(input_list) == 1:          return [input_list]      for i in range(len(input_list)):          x = input_list[i]          xs = input_list[:i] + input_list[i+1:]          for p in get_permutations(xs):              result.append([x] + p)      return result"},{"instruction":"Write a code that takes a string and a character as an argument and counts the number of occurrences of that character in the string Avengers: \\"He brought the team together\\" Character:","output":"def count_character(input_string, character):     count = 0     for char in input_string:         if char == character:             count +=1     return count"},{"instruction":"Create a code that edits a list by adding two to each element [1, 2, 3]","output":"def add_two(input_list):     new_list = []     for num in input_list:         new_list.append(num + 2)     return new_list"},{"instruction":"Write a code that takes a numeric value and returns the factorial of that number 3","output":"def factorial(n):     result = 1     for i in range(1,n+1):         result *= i     return result"},{"instruction":"Write a code that takes a list as an input and returns the elements in reverse order ['apple', 'banana', 'cherry']","output":"def reverse_list(input_list):     reversed_list = []     for i in range(len(input_list)-1,-1,-1):         reversed_list.append(input_list[i])     return reversed_list"},{"instruction":"Create a program to determine the type of triangle given 3 side lengths [5, 4, 3]","output":"def determine_triangle_type(triangle_sides):     if triangle_sides[0] == triangle_sides[1] and triangle_sides[1]  == triangle_sides[2]:         return 'equilateral'     elif triangle_sides[0] == triangle_sides[1] or triangle_sides[1] == triangle_sides[2] or triangle_sides[2] == triangle_sides[0]:         return 'isosceles'     else:         return 'scalene'"},{"instruction":"Create a while loop in Java to calculate the Fibonacci numbers up to the number 10.","output":"int num1 = 0, num2 = 1, fibo = 0; while(fibo <= 10) {      fibo = num1 + num2;      num1 = num2;      num2 = fibo;      System.out.print(fibo +\\" \\");  }"},{"instruction":"Using only JavaScript, determine the length of a given string \\"Hello World\\".","output":"let stringLength =  \\"Hello World\\".length;  console.log(stringLength); // output 11"},{"instruction":"Write a query to find all employees whose age is between 25 and 30 and whose department is Marketing.","output":"SELECT   * FROM   Employees WHERE   age BETWEEN 25 and 30 AND   department = 'Marketing';"},{"instruction":"Using HTML, create a button that displays a message when clicked.","output":"<button onclick=\\"alert('Hello World!')\\"> Click me! </button>"},{"instruction":"Construct a regex statement to select all words starting with a capital letter.","output":"b[A-Z]w+"},{"instruction":"Write a SQL query to find the count of all the books listed in a library catalog.","output":"SELECT  COUNT(*) FROM  library_catalog;"},{"instruction":"Create a method to sort a given array of integers without using any of the built-in sorting functions in JavaScript. array = [5, 4, 3, 2, 1]","output":"\\"\\"\\" Create a method to sort a given array of integers without using any of the built-in sorting functions in JavaScript Input: array = [5, 4, 3, 2, 1] \\"\\"\\" // bucket sort function bucketSort(arr) {   let buckets = new Array(arr.length);    let result = [];       for (let i = 0; i < arr.length; i++) {     buckets[i] = 0;   }      for (let i = 0; i < arr.length; i++) {     buckets[arr[i]]++;   }      for (let i = 0; i < arr.length; i++) {     while (buckets[i] > 0) {       result.push(i);       buckets[i]--;     }   }      return result; }"},{"instruction":"Create a method which receives a list of names and outputs the name which occurs the most in that list. list = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']","output":"\\"\\"\\" Create a method which receives a list of names and outputs the name which occurs the most in that list. Input: list = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon'] \\"\\"\\" def getMostFrequent(list):     frequency = dict()     holder = None     max_count = 0     for name in list:         if name in frequency:              frequency[name] += 1         else:              frequency[name] = 1         if frequency[name] > max_count:              max_count = frequency[name]              holder = name     return holder  list = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon'] print(getMostFrequent(list))"},{"instruction":"Create a JavaScript code that takes a number as input and returns its factorial. num = 5","output":"\\"\\"\\" Create a JavaScript code that takes a number as input and returns its factorial. Input: num = 5 \\"\\"\\" function factorial(num) {     if (num === 0) {         return 1;     } else {         return num * factorial(num-1);     } } console.log(factorial(5))"},{"instruction":"Create a method to join an array of strings together. arr = ['one', 'two', 'three']","output":"\\"\\"\\" Create a method to join an array of strings together. Input: arr = ['one', 'two', 'three'] \\"\\"\\" function joinStrings(arr) {   let joinedStr = '';      for (let i = 0; i < arr.length; i++) {     joinedStr += arr[i]     if (i < arr.length - 1) {       joinedStr += ' ';     }   }      return joinedStr; } console.log(joinStrings(['one', 'two', 'three']));"},{"instruction":"Edit the code so it displays the numbers 1 to 5. for i in range(2, 10):     print(i)","output":"for i in range(1, 6):     print(i)"},{"instruction":"Calculate the factorial of n using a recursive function.","output":"def factorial(n):      if n == 0:          return 1     else:          return n * factorial(n-1)"},{"instruction":"Given the following array and a number k, write a program to determine if it contains a pair of numbers that add up to k. arr = [1, 2, 3, 4, 5] k = 7","output":"def has_pair_with_sum(arr, k):      temp_set = set()         for i in range(len(arr)):          temp = k - arr[i]          if temp in temp_set:              return True         temp_set.add(arr[i])         return False"},{"instruction":"Summarize the following text using an algorithm. The average daily temperature in Chicago during the month of January is usually below zero degrees Celsius. As such, the streets become icy and treacherous for the residents.","output":"Chicago residents face treacherous icy streets during the month of January due to average daily temperatures below zero degrees Celsius."},{"instruction":"Write the definition of function to calculate the perimeter of a triangle.","output":"def perimeter(a, b, c):     return a + b + c"},{"instruction":"Explain what is meant by the term ‘machine learning’.","output":"Machine learning is the process of teaching a machine to recognize patterns in data and make decisions based on those patterns. It involves feeding a machine large amounts of data, which it can then use to learn, develop and form predictions based on patterns it identifies."},{"instruction":"w could Big data analysis be used to provide better services and products ?","output":"Big data analysis can provide companies with data-driven insights that can be used to improve services and products. By accurately analyzing customer trends, companies can build targeted marketing campaigns and make decisions on which services and products to focus on, helping them reach their desired market more efficiently. Additionally, it can help organizations create better customer experiences by identifying areas of improvement in customer support and services."},{"instruction":"Develop a C program to print a pattern like a pyramid.","output":"#include <stdio.h>  int main()  {  int i, j, k, rows;  printf(\\"Enter the number of rows n\\"); scanf(\\"%d\\",&rows);  for(i=1; i<=rows; i++ )  {  for(k=rows; k >= i; k--)   printf(\\" \\");  for(j=1; j<= (2*i-1) ; j++ )  printf(\\"*\\");  printf(\\"n\\");  }  return 0;  }"},{"instruction":"Describe your approach to sorting a variety of data with a single sorting algorithm.","output":"My approach to sorting a variety of data would involve using a single sorting algorithm. Depending on the type of data, I would select the most appropriate sorting algorithm which would involve understanding the complexity of the data and the type of sorting required. Generally, I would use quick sort or merge sort as they are efficient and have good performance. However, if needed, I would be open to using insertion or bubble sort as well."},{"instruction":"Edit a program to show the area of the rectangle #include <stdio.h>   int main() {     int length, width;     printf(\\"Enter the length : \\");     scanf(\\"%d\\", &length);       printf(\\"Enter the width : \\");     scanf(\\"%d\\", &width);         printf(\\"The Perimeter of rectangle is : %d n\\", 2*(length + width));       return 0; }","output":"#include <stdio.h>   int main() {     int length, width;     printf(\\"Enter the length : \\");     scanf(\\"%d\\", &length);       printf(\\"Enter the width : \\");     scanf(\\"%d\\", &width);         printf(\\"The Perimeter of rectangle is : %d n\\", 2*(length + width));     printf(\\"The Area of rectangle is : %d n\\", length * width);       return 0; }"},{"instruction":"Create a custom exception class for a restaurant that has no menu items.","output":"class NoMenuItemsError(Exception):      def __init__(self, message):          super().__init__(message)         self.message = message  def raise_error():     raise NoMenuItemsError(\\"No menu items are available\\")"},{"instruction":"Create a dictionary in which keys are characters and values are the occurences of that character in a given string. string = \\"apple","output":"def get_char_count(string):     char_count = {}     for char in string:         if char not in char_count:             char_count[char] = 1         else:             char_count[char] += 1     return char_count"},{"instruction":"Write a function to calculate all the possible paths for a N x N matrix.","output":"def calculate_paths(matrix):     rows = len(matrix)     cols = len(matrix[0])        dp = [[0 for _ in range(cols)] for _ in range(rows)]         dp[0][0] = 1        for i in range(rows):         for j in range(cols):              if i-1 >= 0:                  dp[i][j] = dp[i][j] + dp[i-1][j]             if j-1 >= 0:                 dp[i][j] = dp[i][j] + dp [i][j-1]        return dp[rows-1][cols-1]"},{"instruction":"Write a Python code to initialize a 10 x 10 matrix with random values.","output":"import random def init_matrix():     matrix = [[0 for _ in range(10)] for _ in range(10)]     for i in range(len(matrix)):         for j in range(len(matrix[0])):             matrix[i][j] = random.randint(0,100)     return matrix"},{"instruction":"Describe the recursive approach for solving a problem.","output":"Recursive approach is an approach wherein a problem is broken down into multiple subproblems until the base case is reached. Once the base case is reached, the results of each sub-problem are combined to obtain a solution to the original problem. It is used when the problem exhibits the self-similarity property."},{"instruction":"Create a JavaScript function to convert a string to pig-latin.","output":"function toPigLatin(str) {  const vowels = ['a', 'e', 'i', 'o', 'u'];  let result = '';  str.split(' ').forEach(word => {  if (vowels.includes(word[0])) {  result += \`{word}ay \`;  } else {  result += \`{word.substring(1)}{word[0]}ay \`;  }  });  return result; }"},{"instruction":"Using React, create a component to display an alert message.","output":"import React from 'react' const AlertMessage = () => {  return (  <div className=\\"alert-message\\">  <p>This is an alert message!</p>  </div>  ) } export default AlertMessage;"},{"instruction":"Design a database schema for an online banking system.","output":"CREATE TABLE users (  user_id INT NOT NULL AUTO_INCREMENT,  first_name VARCHAR(50) NOT NULL,  last_name VARCHAR(50) NOT NULL,  username VARCHAR(50) NOT NULL,  password VARCHAR(50) NOT NULL,  PRIMARY KEY (user_id) );   CREATE TABLE accounts (  account_id INT NOT NULL AUTO_INCREMENT,  user_id INT NOT NULL,  balance DECIMAL(20),  type VARCHAR(20),  PRIMARY KEY (account_id),  FOREIGN KEY (user_id) REFERENCES users(user_id) ); CREATE TABLE transactions (  transaction_id INT NOT NULL AUTO_INCREMENT,  account_id INT NOT NULL,  amount DOUBLE,  date DATE,  type VARCHAR(10),  PRIMARY KEY (transaction_id),  FOREIGN KEY (account_id) REFERENCES accounts(account_id) );"},{"instruction":"Using CSS, use a flex box layout to arrange a sidebar, main content, and footer in a single row.","output":"<div class=\\"container\\">  <div class=\\"sidebar\\">Sidebar</div>  <div class=\\"main-content\\">Main Content</div>  <div class=\\"footer\\">Footer</div> </div> <style type=\\"text/css\\">  .container {  display: flex;  flex-direction: row;  }    .sidebar {  flex: 1;  }    .main-content {  flex: 3;  }    .footer {  flex: 1;  } </style>"},{"instruction":"Using python, create two variables that are equal to each other.","output":"x = 5 y = 5"},{"instruction":"Write a regex expression that matches sentences with the word \\"cat\\" followed by any number of characters except the letter \\"z\\".","output":"/cat[^z]*/"}]`),j={name:"App",components:{PoemCard:E},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.instruction&&e.instruction.toLowerCase().includes(i)||e.output&&e.output.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},q={class:"search-container"},I={class:"card-container"},L={key:0,class:"empty-state"},R=["disabled"],D={key:0},F={key:1};function z(i,e,l,m,a,o){const f=g("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",q,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=s=>a.searchQuery=s),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=s=>a.searchQuery="")}," ✕ ")):u("",!0)]),t("div",I,[(n(!0),r(b,null,w(o.displayedPoems,(s,h)=>(n(),v(f,{key:h,poem:s},null,8,["poem"]))),128)),o.displayedPoems.length===0?(n(),r("div",L,' No results found for "'+d(a.searchQuery)+'". ',1)):u("",!0)]),o.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...s)=>o.loadMore&&o.loadMore(...s))},[a.isLoading?(n(),r("span",F,"Loading...")):(n(),r("span",D,"See more"))],8,R)):u("",!0)])}const W=p(j,[["render",z],["__scopeId","data-v-1f26d7f9"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"library/68.md","filePath":"library/68.md"}'),M={name:"library/68.md"},G=Object.assign(M,{setup(i){return(e,l)=>(n(),r("div",null,[x(W)]))}});export{B as __pageData,G as default};
